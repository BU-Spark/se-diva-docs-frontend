{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { useState, useEffect } from 'react';\nimport inflection from 'inflection';\nimport { ListBase, getElementsFromRecords, InferredElement, useListContext, useResourceContext, useResourceDefinition } from 'ra-core';\nimport { ListView } from './ListView';\nimport { listFieldTypes } from './listFieldTypes';\n/**\n * List component rendering a <Datagrid> based on the result of the\n * dataProvider.getList() call.\n *\n * The result (choice and type of columns) isn't configurable, but the\n * <ListGuesser> outputs the <Datagrid> it has guessed to the console so that\n * developers can start from there.\n *\n * To be used as the list prop of a <Resource>.\n *\n * @example\n *\n * import { Admin, Resource, ListGuesser } from 'react-admin';\n *\n * const App = () => (\n *     <Admin dataProvider={myDataProvider}>\n *         <Resource name=\"posts\" list={ListGuesser} />\n *     </Admin>\n * );\n */\nexport var ListGuesser = function (props) {\n  var debounce = props.debounce,\n    disableAuthentication = props.disableAuthentication,\n    disableSyncWithLocation = props.disableSyncWithLocation,\n    exporter = props.exporter,\n    filter = props.filter,\n    filterDefaultValues = props.filterDefaultValues,\n    perPage = props.perPage,\n    queryOptions = props.queryOptions,\n    resource = props.resource,\n    sort = props.sort,\n    rest = __rest(props, [\"debounce\", \"disableAuthentication\", \"disableSyncWithLocation\", \"exporter\", \"filter\", \"filterDefaultValues\", \"perPage\", \"queryOptions\", \"resource\", \"sort\"]);\n  return React.createElement(ListBase, {\n    debounce: debounce,\n    disableAuthentication: disableAuthentication,\n    disableSyncWithLocation: disableSyncWithLocation,\n    exporter: exporter,\n    filter: filter,\n    filterDefaultValues: filterDefaultValues,\n    perPage: perPage,\n    queryOptions: {\n      keepPreviousData: false\n    },\n    resource: resource,\n    sort: sort\n  }, React.createElement(ListViewGuesser, __assign({}, rest)));\n};\nvar ListViewGuesser = function (props) {\n  var data = useListContext(props).data;\n  var resource = useResourceContext();\n  var _a = useResourceDefinition(props),\n    hasEdit = _a.hasEdit,\n    hasShow = _a.hasShow;\n  var _b = useState(null),\n    child = _b[0],\n    setChild = _b[1];\n  useEffect(function () {\n    setChild(null);\n  }, [resource]);\n  useEffect(function () {\n    if (data && data.length > 0 && !child) {\n      var inferredElements = getElementsFromRecords(data, listFieldTypes);\n      var inferredChild = new InferredElement(listFieldTypes.table, {\n        hasEdit: hasEdit,\n        hasShow: hasShow\n      }, inferredElements);\n      setChild(inferredChild.getElement());\n      if (process.env.NODE_ENV === 'production') return;\n      var representation = inferredChild.getRepresentation();\n      var components = ['List'].concat(Array.from(new Set(Array.from(representation.matchAll(/<([^/\\s>]+)/g)).map(function (match) {\n        return match[1];\n      }).filter(function (component) {\n        return component !== 'span';\n      })))).sort();\n      // eslint-disable-next-line no-console\n      console.log(\"Guessed List:\\n\\nimport { \".concat(components.join(', '), \" } from 'react-admin';\\n\\nexport const \").concat(inflection.capitalize(inflection.singularize(resource)), \"List = () => (\\n    <List>\\n\").concat(inferredChild.getRepresentation(), \"\\n    </List>\\n);\"));\n    }\n  }, [data, child, resource, hasEdit, hasShow]);\n  return React.createElement(ListView, __assign({}, props), child);\n};\nListViewGuesser.propTypes = ListView.propTypes;","map":{"version":3,"mappings":"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","names":["React","useState","useEffect","inflection","ListBase","getElementsFromRecords","InferredElement","useListContext","useResourceContext","useResourceDefinition","ListView","listFieldTypes","ListGuesser","props","disableAuthentication","disableSyncWithLocation","exporter","filter","filterDefaultValues","perPage","queryOptions","resource","sort","rest","debounce","keepPreviousData","ListViewGuesser","hasEdit","hasShow","child","setChild","data","length","inferredElements","inferredChild","table","getElement","process","env","NODE_ENV","representation","getRepresentation","components","concat","Array","from","Set","matchAll","map","console","log","join","capitalize","singularize","propTypes"],"sources":["/Users/paigedeveau/Desktop/se-diva-docs-frontend/bwmdn-admin-portal/node_modules/ra-ui-materialui/src/list/ListGuesser.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useState, useEffect } from 'react';\nimport inflection from 'inflection';\nimport {\n    ListBase,\n    getElementsFromRecords,\n    InferredElement,\n    useListContext,\n    useResourceContext,\n    RaRecord,\n    useResourceDefinition,\n} from 'ra-core';\n\nimport { ListProps } from './List';\nimport { ListView, ListViewProps } from './ListView';\nimport { listFieldTypes } from './listFieldTypes';\n\n/**\n * List component rendering a <Datagrid> based on the result of the\n * dataProvider.getList() call.\n *\n * The result (choice and type of columns) isn't configurable, but the\n * <ListGuesser> outputs the <Datagrid> it has guessed to the console so that\n * developers can start from there.\n *\n * To be used as the list prop of a <Resource>.\n *\n * @example\n *\n * import { Admin, Resource, ListGuesser } from 'react-admin';\n *\n * const App = () => (\n *     <Admin dataProvider={myDataProvider}>\n *         <Resource name=\"posts\" list={ListGuesser} />\n *     </Admin>\n * );\n */\nexport const ListGuesser = <RecordType extends RaRecord = any>(\n    props: Omit<ListProps, 'children'>\n) => {\n    const {\n        debounce,\n        disableAuthentication,\n        disableSyncWithLocation,\n        exporter,\n        filter,\n        filterDefaultValues,\n        perPage,\n        queryOptions,\n        resource,\n        sort,\n        ...rest\n    } = props;\n    return (\n        <ListBase<RecordType>\n            debounce={debounce}\n            disableAuthentication={disableAuthentication}\n            disableSyncWithLocation={disableSyncWithLocation}\n            exporter={exporter}\n            filter={filter}\n            filterDefaultValues={filterDefaultValues}\n            perPage={perPage}\n            queryOptions={{ keepPreviousData: false }}\n            resource={resource}\n            sort={sort}\n        >\n            <ListViewGuesser {...rest} />\n        </ListBase>\n    );\n};\n\nconst ListViewGuesser = (props: Omit<ListViewProps, 'children'>) => {\n    const { data } = useListContext(props);\n    const resource = useResourceContext();\n    const { hasEdit, hasShow } = useResourceDefinition(props);\n    const [child, setChild] = useState(null);\n\n    useEffect(() => {\n        setChild(null);\n    }, [resource]);\n\n    useEffect(() => {\n        if (data && data.length > 0 && !child) {\n            const inferredElements = getElementsFromRecords(\n                data,\n                listFieldTypes\n            );\n            const inferredChild = new InferredElement(\n                listFieldTypes.table,\n                { hasEdit, hasShow },\n                inferredElements\n            );\n            setChild(inferredChild.getElement());\n\n            if (process.env.NODE_ENV === 'production') return;\n\n            const representation = inferredChild.getRepresentation();\n            const components = ['List']\n                .concat(\n                    Array.from(\n                        new Set(\n                            Array.from(representation.matchAll(/<([^/\\s>]+)/g))\n                                .map(match => match[1])\n                                .filter(component => component !== 'span')\n                        )\n                    )\n                )\n                .sort();\n\n            // eslint-disable-next-line no-console\n            console.log(\n                `Guessed List:\n\nimport { ${components.join(', ')} } from 'react-admin';\n\nexport const ${inflection.capitalize(\n                    inflection.singularize(resource)\n                )}List = () => (\n    <List>\n${inferredChild.getRepresentation()}\n    </List>\n);`\n            );\n        }\n    }, [data, child, resource, hasEdit, hasShow]);\n\n    return <ListView {...props}>{child}</ListView>;\n};\n\nListViewGuesser.propTypes = ListView.propTypes;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}