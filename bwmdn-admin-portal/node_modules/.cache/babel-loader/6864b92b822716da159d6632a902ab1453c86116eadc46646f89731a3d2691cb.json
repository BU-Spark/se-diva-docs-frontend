{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { ShowBase } from 'ra-core';\nimport { ShowView } from './ShowView';\n/**\n * Page component for the Show view\n *\n * The `<Show>` component handles the headless logic of the Show page:\n * - it calls useShowController to fetch the record from the data provider,\n * - it creates a ShowContext and a RecordContext,\n * - it computes the default page title\n * - it renders the page layout with the correct title and actions\n *\n * `<Show>` is not responsible for rendering the actual page -\n * that's the job of its child component (usually `<SimpleShowLayout>`).\n *\n * @example\n *\n * // in src/posts.js\n * import * as React from \"react\";\n * import { Show, SimpleShowLayout, TextField } from 'react-admin';\n *\n * export const PostShow = () => (\n *     <Show>\n *         <SimpleShowLayout>\n *             <TextField source=\"title\" />\n *         </SimpleShowLayout>\n *     </Show>\n * );\n *\n * // in src/App.js\n * import * as React from \"react\";\n * import { Admin, Resource } from 'react-admin';\n *\n * import { PostShow } from './posts';\n *\n * const App = () => (\n *     <Admin dataProvider={...}>\n *         <Resource name=\"posts\" show={PostShow} />\n *     </Admin>\n * );\n * export default App;\n *\n * @param {ShowProps} props\n * @param {ReactElement|false} props.actions An element to display above the page content, or false to disable actions.\n * @param {string} props.className A className to apply to the page content.\n * @param {ElementType} props.component The component to use as root component (div by default).\n * @param {boolean} props.emptyWhileLoading Do not display the page content while loading the initial data.\n * @param {string} props.id The id of the resource to display (grabbed from the route params if not defined).\n * @param {Object} props.queryClient Options to pass to the react-query useQuery hook.\n * @param {string} props.resource The resource to fetch from the data provider (grabbed from the ResourceContext if not defined).\n * @param {Object} props.sx Custom style object.\n * @param {ElementType|string} props.title The title of the page. Defaults to `#{resource} #${id}`.\n *\n * @see ShowView for the actual rendering\n */\nexport var Show = function (_a) {\n  var id = _a.id,\n    resource = _a.resource,\n    queryOptions = _a.queryOptions,\n    disableAuthentication = _a.disableAuthentication,\n    rest = __rest(_a, [\"id\", \"resource\", \"queryOptions\", \"disableAuthentication\"]);\n  return React.createElement(ShowBase, {\n    id: id,\n    disableAuthentication: disableAuthentication,\n    queryOptions: queryOptions,\n    resource: resource\n  }, React.createElement(ShowView, __assign({}, rest)));\n};\nShow.propTypes = {\n  actions: PropTypes.oneOfType([PropTypes.element, PropTypes.bool]),\n  children: PropTypes.node.isRequired,\n  className: PropTypes.string,\n  disableAuthentication: PropTypes.bool,\n  emptyWhileLoading: PropTypes.bool,\n  component: PropTypes.elementType,\n  resource: PropTypes.string,\n  title: PropTypes.node,\n  sx: PropTypes.any\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,QAAQ,QAAkB,SAAS;AAG5C,SAASC,QAAQ,QAAQ,YAAY;AAErC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoDA,OAAO,IAAMC,IAAI,GAAG,UAAoCC,EAMhC;EALpB,MAAE;IACFC,QAAQ;IACRC,YAAY;IACZC,qBAAqB;IAClBC,IAAI,cAL6C,2DAMvD,CADU;EACgC,OACvCT,oBAACE,QAAQ;IACLQ,EAAE,EAAEA,EAAE;IACNF,qBAAqB,EAAEA,qBAAqB;IAC5CD,YAAY,EAAEA,YAAY;IAC1BD,QAAQ,EAAEA;EAAQ,GAElBN,oBAACG,QAAQ,eAAKM,IAAI,EAAI,CACf;CACd;AAEDL,IAAI,CAACO,SAAS,GAAG;EACbC,OAAO,EAAEX,SAAS,CAACY,SAAS,CAAC,CAACZ,SAAS,CAACa,OAAO,EAAEb,SAAS,CAACc,IAAI,CAAC,CAAC;EACjEC,QAAQ,EAAEf,SAAS,CAACgB,IAAI,CAACC,UAAU;EACnCC,SAAS,EAAElB,SAAS,CAACmB,MAAM;EAC3BZ,qBAAqB,EAAEP,SAAS,CAACc,IAAI;EACrCM,iBAAiB,EAAEpB,SAAS,CAACc,IAAI;EACjCO,SAAS,EAAErB,SAAS,CAACsB,WAAW;EAChCjB,QAAQ,EAAEL,SAAS,CAACmB,MAAM;EAC1BI,KAAK,EAAEvB,SAAS,CAACgB,IAAI;EACrBQ,EAAE,EAAExB,SAAS,CAACyB;CACjB","names":["React","PropTypes","ShowBase","ShowView","Show","_a","resource","queryOptions","disableAuthentication","rest","id","propTypes","actions","oneOfType","element","bool","children","node","isRequired","className","string","emptyWhileLoading","component","elementType","title","sx","any"],"sources":["/Users/paigedeveau/Desktop/se-diva-docs-frontend/bwmdn-admin-portal/node_modules/ra-ui-materialui/src/detail/Show.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport { ShowBase, RaRecord } from 'ra-core';\n\nimport { ShowProps } from '../types';\nimport { ShowView } from './ShowView';\n\n/**\n * Page component for the Show view\n *\n * The `<Show>` component handles the headless logic of the Show page:\n * - it calls useShowController to fetch the record from the data provider,\n * - it creates a ShowContext and a RecordContext,\n * - it computes the default page title\n * - it renders the page layout with the correct title and actions\n *\n * `<Show>` is not responsible for rendering the actual page -\n * that's the job of its child component (usually `<SimpleShowLayout>`).\n *\n * @example\n *\n * // in src/posts.js\n * import * as React from \"react\";\n * import { Show, SimpleShowLayout, TextField } from 'react-admin';\n *\n * export const PostShow = () => (\n *     <Show>\n *         <SimpleShowLayout>\n *             <TextField source=\"title\" />\n *         </SimpleShowLayout>\n *     </Show>\n * );\n *\n * // in src/App.js\n * import * as React from \"react\";\n * import { Admin, Resource } from 'react-admin';\n *\n * import { PostShow } from './posts';\n *\n * const App = () => (\n *     <Admin dataProvider={...}>\n *         <Resource name=\"posts\" show={PostShow} />\n *     </Admin>\n * );\n * export default App;\n *\n * @param {ShowProps} props\n * @param {ReactElement|false} props.actions An element to display above the page content, or false to disable actions.\n * @param {string} props.className A className to apply to the page content.\n * @param {ElementType} props.component The component to use as root component (div by default).\n * @param {boolean} props.emptyWhileLoading Do not display the page content while loading the initial data.\n * @param {string} props.id The id of the resource to display (grabbed from the route params if not defined).\n * @param {Object} props.queryClient Options to pass to the react-query useQuery hook.\n * @param {string} props.resource The resource to fetch from the data provider (grabbed from the ResourceContext if not defined).\n * @param {Object} props.sx Custom style object.\n * @param {ElementType|string} props.title The title of the page. Defaults to `#{resource} #${id}`.\n *\n * @see ShowView for the actual rendering\n */\nexport const Show = <RecordType extends RaRecord = any>({\n    id,\n    resource,\n    queryOptions,\n    disableAuthentication,\n    ...rest\n}: ShowProps<RecordType>): ReactElement => (\n    <ShowBase<RecordType>\n        id={id}\n        disableAuthentication={disableAuthentication}\n        queryOptions={queryOptions}\n        resource={resource}\n    >\n        <ShowView {...rest} />\n    </ShowBase>\n);\n\nShow.propTypes = {\n    actions: PropTypes.oneOfType([PropTypes.element, PropTypes.bool]),\n    children: PropTypes.node.isRequired,\n    className: PropTypes.string,\n    disableAuthentication: PropTypes.bool,\n    emptyWhileLoading: PropTypes.bool,\n    component: PropTypes.elementType,\n    resource: PropTypes.string,\n    title: PropTypes.node,\n    sx: PropTypes.any,\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}