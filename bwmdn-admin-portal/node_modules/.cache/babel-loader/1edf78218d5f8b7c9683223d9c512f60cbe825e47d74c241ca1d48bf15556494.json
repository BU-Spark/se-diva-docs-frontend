{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useEditContext, useResourceDefinition } from 'ra-core';\nimport { ShowButton } from '../button';\nimport TopToolbar from '../layout/TopToolbar';\n/**\n * Action Toolbar for the Edit view\n *\n * Internal component. If you want to add or remove actions for an Edit view,\n * write your own EditActions Component. Then, in the <Edit> component,\n * use it in the `actions` prop to pass a custom component.\n *\n * @example\n *     import Button from '@mui/material/Button';\n *     import { TopToolbar, EditButton, Edit } from 'react-admin';\n *\n *     const PostEditActions = () => (\n *         <TopToolbar>\n *             <EditButton />\n *             // Add your custom actions here\n *             <Button color=\"primary\" onClick={customAction}>Custom Action</Button>\n *         </TopToolbar>\n *     );\n *\n *     export const PostEdit = (props) => (\n *         <Edit actions={<PostEditActions />} {...props}>\n *             ...\n *         </Edit>\n *     );\n */\nexport var EditActions = function (_a) {\n  var className = _a.className,\n    rest = __rest(_a, [\"className\"]);\n  var record = useEditContext(rest).record;\n  var hasShow = useResourceDefinition(rest).hasShow;\n  return React.createElement(TopToolbar, __assign({\n    className: className\n  }, sanitizeRestProps(rest)), hasShow && React.createElement(ShowButton, {\n    record: record\n  }));\n};\nvar sanitizeRestProps = function (_a) {\n  var _b = _a.hasCreate,\n    hasCreate = _b === void 0 ? null : _b,\n    _c = _a.hasEdit,\n    hasEdit = _c === void 0 ? null : _c,\n    _d = _a.hasShow,\n    hasShow = _d === void 0 ? null : _d,\n    _e = _a.hasList,\n    hasList = _e === void 0 ? null : _e,\n    rest = __rest(_a, [\"hasCreate\", \"hasEdit\", \"hasShow\", \"hasList\"]);\n  return rest;\n};\nEditActions.propTypes = {\n  className: PropTypes.string,\n  data: PropTypes.object,\n  hasCreate: PropTypes.bool,\n  hasEdit: PropTypes.bool,\n  hasShow: PropTypes.bool,\n  hasList: PropTypes.bool,\n  resource: PropTypes.string\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,SAAS,MAAM,YAAY;AAElC,SAAmBC,cAAc,EAAEC,qBAAqB,QAAQ,SAAS;AACzE,SAASC,UAAU,QAAQ,WAAW;AACtC,OAAOC,UAAU,MAAM,sBAAsB;AAE7C;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,OAAO,IAAMC,WAAW,GAAG,UAACC,EAAwC;EAAtC,aAAS;IAAKC,IAAI,cAApB,aAAsB,CAAF;EACpC,UAAM,GAAKN,cAAc,CAACM,IAAI,CAAC,OAAzB;EACN,WAAO,GAAKL,qBAAqB,CAACK,IAAI,CAAC,QAAhC;EAEf,OACIR,oBAACK,UAAU;IAACI,SAAS,EAAEA;EAAS,GAAMC,iBAAiB,CAACF,IAAI,CAAC,GACxDG,OAAO,IAAIX,oBAACI,UAAU;IAACQ,MAAM,EAAEA;EAAM,EAAI,CACjC;AAErB,CAAC;AAED,IAAMF,iBAAiB,GAAG,UAACH,EAM1B;EALG,qBAAgB;IAAhBM,SAAS,mBAAG,IAAI;IAChBC,eAAc;IAAdC,OAAO,mBAAG,IAAI;IACdC,eAAc;IAAdL,OAAO,mBAAG,IAAI;IACdM,eAAc;IAAdC,OAAO,mBAAG,IAAI;IACXV,IAAI,cALgB,8CAM1B,CADU;EACL,WAAI;CAAA;AAYVF,WAAW,CAACa,SAAS,GAAG;EACpBV,SAAS,EAAER,SAAS,CAACmB,MAAM;EAC3BC,IAAI,EAAEpB,SAAS,CAACqB,MAAM;EACtBT,SAAS,EAAEZ,SAAS,CAACsB,IAAI;EACzBR,OAAO,EAAEd,SAAS,CAACsB,IAAI;EACvBZ,OAAO,EAAEV,SAAS,CAACsB,IAAI;EACvBL,OAAO,EAAEjB,SAAS,CAACsB,IAAI;EACvBC,QAAQ,EAAEvB,SAAS,CAACmB;CACvB","names":["React","PropTypes","useEditContext","useResourceDefinition","ShowButton","TopToolbar","EditActions","_a","rest","className","sanitizeRestProps","hasShow","record","hasCreate","_c","hasEdit","_d","_e","hasList","propTypes","string","data","object","bool","resource"],"sources":["/Users/paigedeveau/Desktop/se-diva-docs-frontend/bwmdn-admin-portal/node_modules/ra-ui-materialui/src/detail/EditActions.tsx"],"sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { RaRecord, useEditContext, useResourceDefinition } from 'ra-core';\nimport { ShowButton } from '../button';\nimport TopToolbar from '../layout/TopToolbar';\n\n/**\n * Action Toolbar for the Edit view\n *\n * Internal component. If you want to add or remove actions for an Edit view,\n * write your own EditActions Component. Then, in the <Edit> component,\n * use it in the `actions` prop to pass a custom component.\n *\n * @example\n *     import Button from '@mui/material/Button';\n *     import { TopToolbar, EditButton, Edit } from 'react-admin';\n *\n *     const PostEditActions = () => (\n *         <TopToolbar>\n *             <EditButton />\n *             // Add your custom actions here\n *             <Button color=\"primary\" onClick={customAction}>Custom Action</Button>\n *         </TopToolbar>\n *     );\n *\n *     export const PostEdit = (props) => (\n *         <Edit actions={<PostEditActions />} {...props}>\n *             ...\n *         </Edit>\n *     );\n */\nexport const EditActions = ({ className, ...rest }: EditActionsProps) => {\n    const { record } = useEditContext(rest);\n    const { hasShow } = useResourceDefinition(rest);\n\n    return (\n        <TopToolbar className={className} {...sanitizeRestProps(rest)}>\n            {hasShow && <ShowButton record={record} />}\n        </TopToolbar>\n    );\n};\n\nconst sanitizeRestProps = ({\n    hasCreate = null,\n    hasEdit = null,\n    hasShow = null,\n    hasList = null,\n    ...rest\n}) => rest;\n\nexport interface EditActionsProps {\n    className?: string;\n    data?: RaRecord;\n    hasCreate?: boolean;\n    hasEdit?: boolean;\n    hasList?: boolean;\n    hasShow?: boolean;\n    resource?: string;\n}\n\nEditActions.propTypes = {\n    className: PropTypes.string,\n    data: PropTypes.object,\n    hasCreate: PropTypes.bool,\n    hasEdit: PropTypes.bool,\n    hasShow: PropTypes.bool,\n    hasList: PropTypes.bool,\n    resource: PropTypes.string,\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}