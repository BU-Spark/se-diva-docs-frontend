{"ast":null,"code":"import { CREATE, DELETE, DELETE_MANY, GET_LIST, GET_MANY, GET_MANY_REFERENCE, GET_ONE, UPDATE, UPDATE_MANY } from './dataFetchActions';\nvar defaultDataProvider = function () {\n  return Promise.resolve();\n};\ndefaultDataProvider.create = function () {\n  return Promise.resolve(null);\n};\ndefaultDataProvider.delete = function () {\n  return Promise.resolve(null);\n};\ndefaultDataProvider.deleteMany = function () {\n  return Promise.resolve(null);\n};\ndefaultDataProvider.getList = function () {\n  return Promise.resolve(null);\n};\ndefaultDataProvider.getMany = function () {\n  return Promise.resolve(null);\n};\ndefaultDataProvider.getManyReference = function () {\n  return Promise.resolve(null);\n};\ndefaultDataProvider.getOne = function () {\n  return Promise.resolve(null);\n};\ndefaultDataProvider.update = function () {\n  return Promise.resolve(null);\n};\ndefaultDataProvider.updateMany = function () {\n  return Promise.resolve(null);\n};\nvar fetchMap = {\n  create: CREATE,\n  delete: DELETE,\n  deleteMany: DELETE_MANY,\n  getList: GET_LIST,\n  getMany: GET_MANY,\n  getManyReference: GET_MANY_REFERENCE,\n  getOne: GET_ONE,\n  update: UPDATE,\n  updateMany: UPDATE_MANY\n};\n/**\n * Turn a function-based dataProvider to an object-based one\n *\n * Allows using legacy dataProviders transparently.\n *\n * @param {Function} legacyDataProvider A legacy dataProvider (type, resource, params) => Promise<any>\n *\n * @returns {Object} A dataProvider that react-admin can use\n */\nvar convertLegacyDataProvider = function (legacyDataProvider) {\n  var proxy = new Proxy(defaultDataProvider, {\n    get: function (_, name) {\n      return function (resource, params) {\n        if (Object.keys(fetchMap).includes(name.toString())) {\n          var fetchType = fetchMap[name.toString()];\n          return legacyDataProvider(fetchType, resource, params);\n        }\n        return legacyDataProvider(name.toString(), resource, params);\n      };\n    },\n    apply: function (_, __, args) {\n      return legacyDataProvider.apply(legacyDataProvider, args);\n    }\n  });\n  return proxy;\n};\nexport default convertLegacyDataProvider;","map":{"version":3,"mappings":"AAAA,SACIA,MAAM,EACNC,MAAM,EACNC,WAAW,EACXC,QAAQ,EACRC,QAAQ,EACRC,kBAAkB,EAClBC,OAAO,EACPC,MAAM,EACNC,WAAW,QACR,oBAAoB;AAG3B,IAAMC,mBAAmB,GAAG;EAAM,cAAO,CAACC,OAAO,EAAE;AAAjB,CAAiB;AACnDD,mBAAmB,CAACE,MAAM,GAAG;EAAM,cAAO,CAACD,OAAO,CAAC,IAAI,CAAC;AAArB,CAAqB;AACxDD,mBAAmB,CAACG,MAAM,GAAG;EAAM,cAAO,CAACF,OAAO,CAAC,IAAI,CAAC;AAArB,CAAqB;AACxDD,mBAAmB,CAACI,UAAU,GAAG;EAAM,cAAO,CAACH,OAAO,CAAC,IAAI,CAAC;AAArB,CAAqB;AAC5DD,mBAAmB,CAACK,OAAO,GAAG;EAAM,cAAO,CAACJ,OAAO,CAAC,IAAI,CAAC;AAArB,CAAqB;AACzDD,mBAAmB,CAACM,OAAO,GAAG;EAAM,cAAO,CAACL,OAAO,CAAC,IAAI,CAAC;AAArB,CAAqB;AACzDD,mBAAmB,CAACO,gBAAgB,GAAG;EAAM,cAAO,CAACN,OAAO,CAAC,IAAI,CAAC;AAArB,CAAqB;AAClED,mBAAmB,CAACQ,MAAM,GAAG;EAAM,cAAO,CAACP,OAAO,CAAC,IAAI,CAAC;AAArB,CAAqB;AACxDD,mBAAmB,CAACS,MAAM,GAAG;EAAM,cAAO,CAACR,OAAO,CAAC,IAAI,CAAC;AAArB,CAAqB;AACxDD,mBAAmB,CAACU,UAAU,GAAG;EAAM,cAAO,CAACT,OAAO,CAAC,IAAI,CAAC;AAArB,CAAqB;AAE5D,IAAMU,QAAQ,GAAG;EACbT,MAAM,EAAEX,MAAM;EACdY,MAAM,EAAEX,MAAM;EACdY,UAAU,EAAEX,WAAW;EACvBY,OAAO,EAAEX,QAAQ;EACjBY,OAAO,EAAEX,QAAQ;EACjBY,gBAAgB,EAAEX,kBAAkB;EACpCY,MAAM,EAAEX,OAAO;EACfY,MAAM,EAAEX,MAAM;EACdY,UAAU,EAAEX;CACf;AAKD;;;;;;;;;AASA,IAAMa,yBAAyB,GAAG,UAC9BC,kBAAsC;EAEtC,IAAMC,KAAK,GAAG,IAAIC,KAAK,CAACf,mBAAmB,EAAE;IACzCgB,GAAG,YAACC,CAAC,EAAEC,IAAI;MACP,OAAO,UAACC,QAAQ,EAAEC,MAAM;QACpB,IAAIC,MAAM,CAACC,IAAI,CAACX,QAAQ,CAAC,CAACY,QAAQ,CAACL,IAAI,CAACM,QAAQ,EAAE,CAAC,EAAE;UACjD,IAAMC,SAAS,GAAGd,QAAQ,CAACO,IAAI,CAACM,QAAQ,EAAE,CAAC;UAC3C,OAAOX,kBAAkB,CAACY,SAAS,EAAEN,QAAQ,EAAEC,MAAM,CAAC;;QAG1D,OAAOP,kBAAkB,CAACK,IAAI,CAACM,QAAQ,EAAE,EAAEL,QAAQ,EAAEC,MAAM,CAAC;MAChE,CAAC;IACL,CAAC;IACDM,KAAK,YAACT,CAAC,EAAEU,EAAE,EAAEC,IAAI;MACb,OAAOf,kBAAkB,CAACa,KAAK,CAACb,kBAAkB,EAAEe,IAAI,CAAC;IAC7D;GACH,CAAC;EAEF,OAAOd,KAAK;AAChB,CAAC;AAED,eAAeF,yBAAyB","names":["CREATE","DELETE","DELETE_MANY","GET_LIST","GET_MANY","GET_MANY_REFERENCE","GET_ONE","UPDATE","UPDATE_MANY","defaultDataProvider","resolve","create","delete","deleteMany","getList","getMany","getManyReference","getOne","update","updateMany","fetchMap","convertLegacyDataProvider","legacyDataProvider","proxy","Proxy","get","_","name","resource","params","Object","keys","includes","toString","fetchType","apply","__","args"],"sources":["/Users/paigedeveau/Desktop/se-diva-docs-frontend/bwmdn-admin-portal/node_modules/ra-core/src/dataProvider/convertLegacyDataProvider.ts"],"sourcesContent":["import {\n    CREATE,\n    DELETE,\n    DELETE_MANY,\n    GET_LIST,\n    GET_MANY,\n    GET_MANY_REFERENCE,\n    GET_ONE,\n    UPDATE,\n    UPDATE_MANY,\n} from './dataFetchActions';\nimport { LegacyDataProvider, DataProvider } from '../types';\n\nconst defaultDataProvider = () => Promise.resolve();\ndefaultDataProvider.create = () => Promise.resolve(null);\ndefaultDataProvider.delete = () => Promise.resolve(null);\ndefaultDataProvider.deleteMany = () => Promise.resolve(null);\ndefaultDataProvider.getList = () => Promise.resolve(null);\ndefaultDataProvider.getMany = () => Promise.resolve(null);\ndefaultDataProvider.getManyReference = () => Promise.resolve(null);\ndefaultDataProvider.getOne = () => Promise.resolve(null);\ndefaultDataProvider.update = () => Promise.resolve(null);\ndefaultDataProvider.updateMany = () => Promise.resolve(null);\n\nconst fetchMap = {\n    create: CREATE,\n    delete: DELETE,\n    deleteMany: DELETE_MANY,\n    getList: GET_LIST,\n    getMany: GET_MANY,\n    getManyReference: GET_MANY_REFERENCE,\n    getOne: GET_ONE,\n    update: UPDATE,\n    updateMany: UPDATE_MANY,\n};\n\ninterface ConvertedDataProvider extends DataProvider {\n    (type: string, resource: string, params: any): Promise<any>;\n}\n/**\n * Turn a function-based dataProvider to an object-based one\n *\n * Allows using legacy dataProviders transparently.\n *\n * @param {Function} legacyDataProvider A legacy dataProvider (type, resource, params) => Promise<any>\n *\n * @returns {Object} A dataProvider that react-admin can use\n */\nconst convertLegacyDataProvider = (\n    legacyDataProvider: LegacyDataProvider\n): ConvertedDataProvider => {\n    const proxy = new Proxy(defaultDataProvider, {\n        get(_, name) {\n            return (resource, params) => {\n                if (Object.keys(fetchMap).includes(name.toString())) {\n                    const fetchType = fetchMap[name.toString()];\n                    return legacyDataProvider(fetchType, resource, params);\n                }\n\n                return legacyDataProvider(name.toString(), resource, params);\n            };\n        },\n        apply(_, __, args) {\n            return legacyDataProvider.apply(legacyDataProvider, args);\n        },\n    });\n\n    return proxy;\n};\n\nexport default convertLegacyDataProvider;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}