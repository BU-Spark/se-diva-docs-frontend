{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { cloneElement, useMemo, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { sanitizeListRestProps, useListContext, useResourceContext, useResourceDefinition } from 'ra-core';\nimport TopToolbar from '../layout/TopToolbar';\nimport { CreateButton, ExportButton } from '../button';\nimport { FilterContext } from './FilterContext';\nimport { FilterButton } from './filter';\n/**\n * Action Toolbar for the List view\n *\n * Internal component. If you want to add or remove actions for a List view,\n * write your own ListActions Component. Then, in the <List> component,\n * use it in the `actions` prop to pass a custom component.\n *\n * @example\n *     import { cloneElement } from 'react';\n *     import Button from '@mui/material/Button';\n *     import { TopToolbar, List, CreateButton, ExportButton } from 'react-admin';\n *\n *     const PostListActions = ({ filters }) => (\n *         <TopToolbar>\n *             { cloneElement(filters, { context: 'button' }) }\n *             <CreateButton/>\n *             <ExportButton/>\n *             // Add your custom actions here //\n *             <Button onClick={customAction}>Custom Action</Button>\n *         </TopToolbar>\n *     );\n *\n *     export const PostList = (props) => (\n *         <List actions={<PostListActions />} {...props}>\n *             ...\n *         </List>\n *     );\n */\nexport var ListActions = function (props) {\n  var className = props.className,\n    filtersProp = props.filters,\n    _ = props.hasCreate,\n    rest = __rest(props, [\"className\", \"filters\", \"hasCreate\"]);\n  var _a = useListContext(props),\n    sort = _a.sort,\n    displayedFilters = _a.displayedFilters,\n    filterValues = _a.filterValues,\n    exporter = _a.exporter,\n    showFilter = _a.showFilter,\n    total = _a.total;\n  var resource = useResourceContext(props);\n  var hasCreate = useResourceDefinition(props).hasCreate;\n  var filters = useContext(FilterContext) || filtersProp;\n  return useMemo(function () {\n    return React.createElement(TopToolbar, __assign({\n      className: className\n    }, sanitizeListRestProps(rest)), filtersProp ? cloneElement(filtersProp, {\n      resource: resource,\n      showFilter: showFilter,\n      displayedFilters: displayedFilters,\n      filterValues: filterValues,\n      context: 'button'\n    }) : filters && React.createElement(FilterButton, null), hasCreate && React.createElement(CreateButton, null), exporter !== false && React.createElement(ExportButton, {\n      disabled: total === 0,\n      resource: resource,\n      sort: sort,\n      filterValues: filterValues\n    }));\n  }, /* eslint-disable react-hooks/exhaustive-deps */\n  [resource, displayedFilters, filterValues, filtersProp, showFilter, filters, total, className, sort, exporter, hasCreate]);\n};\nListActions.propTypes = {\n  className: PropTypes.string,\n  sort: PropTypes.any,\n  displayedFilters: PropTypes.object,\n  exporter: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  filters: PropTypes.element,\n  filterValues: PropTypes.object,\n  hasCreate: PropTypes.bool,\n  resource: PropTypes.string,\n  onUnselectItems: PropTypes.func.isRequired,\n  selectedIds: PropTypes.arrayOf(PropTypes.any),\n  showFilter: PropTypes.func,\n  total: PropTypes.number\n};\nListActions.defaultProps = {\n  selectedIds: [],\n  onUnselectItems: function () {\n    return null;\n  }\n};","map":{"version":3,"mappings":"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","names":["React","cloneElement","useMemo","useContext","PropTypes","sanitizeListRestProps","useListContext","useResourceContext","useResourceDefinition","TopToolbar","CreateButton","ExportButton","FilterContext","FilterButton","ListActions","props","filtersProp","_","rest","sort","displayedFilters","filterValues","exporter","showFilter","total","resource","filters","className","context","hasCreate","disabled","propTypes","string","any","object","oneOfType","func","bool","element","onUnselectItems","isRequired","selectedIds","arrayOf","number","defaultProps"],"sourceRoot":"","sources":["../../../src/list/ListActions.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}