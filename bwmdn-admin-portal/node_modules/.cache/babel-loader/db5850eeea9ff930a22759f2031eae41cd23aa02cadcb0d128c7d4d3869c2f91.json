{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { useState, useCallback } from 'react';\nimport { useDelete } from '../../dataProvider';\nimport { useUnselect } from '../../controller';\nimport { useRedirect } from '../../routing';\nimport { useNotify } from '../../notification';\nimport { useResourceContext } from '../../core';\n/**\n * Prepare a set of callbacks for a delete button guarded by confirmation dialog\n *\n * @example\n *\n * const DeleteButton = ({\n *     resource,\n *     record,\n *     redirect,\n *     onClick,\n *     ...rest\n * }) => {\n *     const {\n *         open,\n *         isLoading,\n *         handleDialogOpen,\n *         handleDialogClose,\n *         handleDelete,\n *     } = useDeleteWithConfirmController({\n *         resource,\n *         record,\n *         redirect,\n *         onClick,\n *     });\n *\n *     return (\n *         <Fragment>\n *             <Button\n *                 onClick={handleDialogOpen}\n *                 label=\"ra.action.delete\"\n *                 {...rest}\n *             >\n *                 {icon}\n *             </Button>\n *             <Confirm\n *                 isOpen={open}\n *                 loading={isLoading}\n *                 title=\"ra.message.delete_title\"\n *                 content=\"ra.message.delete_content\"\n *                 translateOptions={{\n *                     name: resource,\n *                     id: record.id,\n *                 }}\n *                 onConfirm={handleDelete}\n *                 onClose={handleDialogClose}\n *             />\n *         </Fragment>\n *     );\n * };\n */\nvar useDeleteWithConfirmController = function (props) {\n  var record = props.record,\n    redirectTo = props.redirect,\n    mutationMode = props.mutationMode,\n    onClick = props.onClick,\n    _a = props.mutationOptions,\n    mutationOptions = _a === void 0 ? {} : _a;\n  var mutationMeta = mutationOptions.meta,\n    otherMutationOptions = __rest(mutationOptions, [\"meta\"]);\n  var resource = useResourceContext(props);\n  var _b = useState(false),\n    open = _b[0],\n    setOpen = _b[1];\n  var notify = useNotify();\n  var unselect = useUnselect(resource);\n  var redirect = useRedirect();\n  var _c = useDelete(),\n    deleteOne = _c[0],\n    isLoading = _c[1].isLoading;\n  var handleDialogOpen = function (e) {\n    setOpen(true);\n    e.stopPropagation();\n  };\n  var handleDialogClose = function (e) {\n    setOpen(false);\n    e.stopPropagation();\n  };\n  var handleDelete = useCallback(function (event) {\n    event.stopPropagation();\n    deleteOne(resource, {\n      id: record.id,\n      previousData: record,\n      meta: mutationMeta\n    }, __assign({\n      onSuccess: function () {\n        setOpen(false);\n        notify('ra.notification.deleted', {\n          type: 'info',\n          messageArgs: {\n            smart_count: 1\n          },\n          undoable: mutationMode === 'undoable'\n        });\n        unselect([record.id]);\n        redirect(redirectTo, resource);\n      },\n      onError: function (error) {\n        setOpen(false);\n        notify(typeof error === 'string' ? error : error.message || 'ra.notification.http_error', {\n          type: 'error',\n          messageArgs: {\n            _: typeof error === 'string' ? error : error && error.message ? error.message : undefined\n          }\n        });\n      },\n      mutationMode: mutationMode\n    }, otherMutationOptions));\n    if (typeof onClick === 'function') {\n      onClick(event);\n    }\n  }, [deleteOne, mutationMeta, mutationMode, otherMutationOptions, notify, onClick, record, redirect, redirectTo, resource, unselect]);\n  return {\n    open: open,\n    isLoading: isLoading,\n    handleDialogOpen: handleDialogOpen,\n    handleDialogClose: handleDialogClose,\n    handleDelete: handleDelete\n  };\n};\nexport default useDeleteWithConfirmController;","map":{"version":3,"mappings":"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","names":["useState","useCallback","useDelete","useUnselect","useRedirect","useNotify","useResourceContext","useDeleteWithConfirmController","props","redirectTo","mutationMode","onClick","_a","mutationOptions","mutationMeta","otherMutationOptions","resource","open","setOpen","notify","unselect","redirect","deleteOne","isLoading","handleDialogOpen","e","stopPropagation","handleDialogClose","handleDelete","event","id","record","previousData","meta","onSuccess","type","messageArgs","smart_count","undoable","onError","error","message","_","undefined"],"sources":["/Users/paigedeveau/node_modules/ra-core/src/controller/button/useDeleteWithConfirmController.tsx"],"sourcesContent":["import {\n    useState,\n    useCallback,\n    ReactEventHandler,\n    SyntheticEvent,\n} from 'react';\nimport { UseMutationOptions } from 'react-query';\n\nimport { useDelete } from '../../dataProvider';\nimport { useUnselect } from '../../controller';\nimport { useRedirect, RedirectionSideEffect } from '../../routing';\nimport { useNotify } from '../../notification';\nimport { RaRecord, MutationMode, DeleteParams } from '../../types';\nimport { useResourceContext } from '../../core';\n\n/**\n * Prepare a set of callbacks for a delete button guarded by confirmation dialog\n *\n * @example\n *\n * const DeleteButton = ({\n *     resource,\n *     record,\n *     redirect,\n *     onClick,\n *     ...rest\n * }) => {\n *     const {\n *         open,\n *         isLoading,\n *         handleDialogOpen,\n *         handleDialogClose,\n *         handleDelete,\n *     } = useDeleteWithConfirmController({\n *         resource,\n *         record,\n *         redirect,\n *         onClick,\n *     });\n *\n *     return (\n *         <Fragment>\n *             <Button\n *                 onClick={handleDialogOpen}\n *                 label=\"ra.action.delete\"\n *                 {...rest}\n *             >\n *                 {icon}\n *             </Button>\n *             <Confirm\n *                 isOpen={open}\n *                 loading={isLoading}\n *                 title=\"ra.message.delete_title\"\n *                 content=\"ra.message.delete_content\"\n *                 translateOptions={{\n *                     name: resource,\n *                     id: record.id,\n *                 }}\n *                 onConfirm={handleDelete}\n *                 onClose={handleDialogClose}\n *             />\n *         </Fragment>\n *     );\n * };\n */\nconst useDeleteWithConfirmController = <RecordType extends RaRecord = any>(\n    props: UseDeleteWithConfirmControllerParams<RecordType>\n): UseDeleteWithConfirmControllerReturn => {\n    const {\n        record,\n        redirect: redirectTo,\n        mutationMode,\n        onClick,\n        mutationOptions = {},\n    } = props;\n    const { meta: mutationMeta, ...otherMutationOptions } = mutationOptions;\n    const resource = useResourceContext(props);\n    const [open, setOpen] = useState(false);\n    const notify = useNotify();\n    const unselect = useUnselect(resource);\n    const redirect = useRedirect();\n    const [deleteOne, { isLoading }] = useDelete<RecordType>();\n\n    const handleDialogOpen = e => {\n        setOpen(true);\n        e.stopPropagation();\n    };\n\n    const handleDialogClose = e => {\n        setOpen(false);\n        e.stopPropagation();\n    };\n\n    const handleDelete = useCallback(\n        event => {\n            event.stopPropagation();\n            deleteOne(\n                resource,\n                {\n                    id: record.id,\n                    previousData: record,\n                    meta: mutationMeta,\n                },\n                {\n                    onSuccess: () => {\n                        setOpen(false);\n                        notify('ra.notification.deleted', {\n                            type: 'info',\n                            messageArgs: { smart_count: 1 },\n                            undoable: mutationMode === 'undoable',\n                        });\n                        unselect([record.id]);\n                        redirect(redirectTo, resource);\n                    },\n                    onError: (error: Error) => {\n                        setOpen(false);\n\n                        notify(\n                            typeof error === 'string'\n                                ? error\n                                : error.message || 'ra.notification.http_error',\n                            {\n                                type: 'error',\n                                messageArgs: {\n                                    _:\n                                        typeof error === 'string'\n                                            ? error\n                                            : error && error.message\n                                            ? error.message\n                                            : undefined,\n                                },\n                            }\n                        );\n                    },\n                    mutationMode,\n                    ...otherMutationOptions,\n                }\n            );\n            if (typeof onClick === 'function') {\n                onClick(event);\n            }\n        },\n        [\n            deleteOne,\n            mutationMeta,\n            mutationMode,\n            otherMutationOptions,\n            notify,\n            onClick,\n            record,\n            redirect,\n            redirectTo,\n            resource,\n            unselect,\n        ]\n    );\n\n    return {\n        open,\n        isLoading,\n        handleDialogOpen,\n        handleDialogClose,\n        handleDelete,\n    };\n};\n\nexport interface UseDeleteWithConfirmControllerParams<\n    RecordType extends RaRecord = any,\n    MutationOptionsError = unknown\n> {\n    mutationMode?: MutationMode;\n    record?: RecordType;\n    redirect?: RedirectionSideEffect;\n    // @deprecated. This hook get the resource from the context\n    resource?: string;\n    onClick?: ReactEventHandler<any>;\n    mutationOptions?: UseMutationOptions<\n        RecordType,\n        MutationOptionsError,\n        DeleteParams<RecordType>\n    >;\n}\n\nexport interface UseDeleteWithConfirmControllerReturn {\n    open: boolean;\n    isLoading: boolean;\n    handleDialogOpen: (e: SyntheticEvent) => void;\n    handleDialogClose: (e: SyntheticEvent) => void;\n    handleDelete: ReactEventHandler<any>;\n}\n\nexport default useDeleteWithConfirmController;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}