{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\nimport get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport { useFormState } from 'react-hook-form';\nimport { useFormGroups } from './useFormGroups';\n/**\n * Retrieve a specific form group data such as its validation status (valid/invalid) or\n * or whether its inputs have been updated (dirty/pristine)\n *\n * @example\n * import { Edit, SimpleForm, TextInput, FormGroupContextProvider, useFormGroup, minLength } from 'react-admin';\n * import { Accordion, AccordionDetails, AccordionSummary, Typography } from '@mui/material';\n * import ExpandMoreIcon from '@mui/icons-material/ExpandMoreIcon';\n *\n * const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <TextInput source=\"title\" />\n *             <FormGroupContextProvider name=\"options\">\n *                 <Accordion>\n *                     <AccordionSummary\n *                         expandIcon={<ExpandMoreIcon />}\n *                         aria-controls=\"options-content\"\n *                         id=\"options-header\"\n *                     >\n *                         <AccordionSectionTitle name=\"options\">Options</AccordionSectionTitle>\n *                     </AccordionSummary>\n *                     <AccordionDetails id=\"options-content\" aria-labelledby=\"options-header\">\n *                         <TextInput source=\"teaser\" validate={minLength(20)} />\n *                     </AccordionDetails>\n *                 </Accordion>\n *             </FormGroupContextProvider>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * const AccordionSectionTitle = ({ children, name }) => {\n *     const formGroupState = useFormGroup(name);\n *     return (\n *         <Typography color={!formGroupState.isValid && formGroupState.isDirty ? 'error' : 'inherit'}>\n *             {children}\n *         </Typography>\n *     );\n * }\n *\n * @param {string} name The form group name\n * @returns {FormGroupState} The form group state\n */\nexport var useFormGroup = function (name) {\n  var _a = useFormState(),\n    dirtyFields = _a.dirtyFields,\n    touchedFields = _a.touchedFields,\n    errors = _a.errors;\n  var formGroups = useFormGroups();\n  var _b = useState({\n      errors: undefined,\n      isDirty: false,\n      isTouched: false,\n      isValid: true\n    }),\n    state = _b[0],\n    setState = _b[1];\n  var updateGroupState = useCallback(function () {\n    var fields = formGroups.getGroupFields(name);\n    var fieldStates = fields.map(function (field) {\n      return {\n        name: field,\n        error: get(errors, field, undefined),\n        isDirty: get(dirtyFields, field, false) !== false,\n        isValid: get(errors, field, undefined) == undefined,\n        isTouched: get(touchedFields, field, false) !== false\n      };\n    }).filter(function (fieldState) {\n      return fieldState != undefined;\n    }); // eslint-disable-line\n    var newState = getFormGroupState(fieldStates);\n    setState(function (oldState) {\n      if (!isEqual(oldState, newState)) {\n        return newState;\n      }\n      return oldState;\n    });\n  }, [dirtyFields, errors, touchedFields, formGroups, name]);\n  useEffect(function () {\n    updateGroupState();\n  },\n  // eslint-disable-next-line\n  [\n  // eslint-disable-next-line\n  JSON.stringify({\n    dirtyFields: dirtyFields,\n    errors: errors,\n    touchedFields: touchedFields\n  }), updateGroupState]);\n  useEffect(function () {\n    // Whenever the group content changes (input are added or removed)\n    // we must update its state\n    return formGroups.subscribe(name, function () {\n      updateGroupState();\n    });\n  }, [formGroups, name, updateGroupState]);\n  return state;\n};\n/**\n * Get the state of a form group\n *\n * @param {FieldState[]} fieldStates A map of field states from react-hook-form where the key is the field name.\n * @returns {FormGroupState} The state of the group.\n */\nexport var getFormGroupState = function (fieldStates) {\n  return fieldStates.reduce(function (acc, fieldState) {\n    var errors = acc.errors || {};\n    if (fieldState.error) {\n      errors[fieldState.name] = fieldState.error;\n    }\n    var newState = {\n      isDirty: acc.isDirty || fieldState.isDirty,\n      errors: errors,\n      isTouched: acc.isTouched || fieldState.isTouched,\n      isValid: acc.isValid && fieldState.isValid\n    };\n    return newState;\n  }, {\n    isDirty: false,\n    errors: undefined,\n    isValid: true,\n    isTouched: false\n  });\n};","map":{"version":3,"mappings":"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","names":["useCallback","useEffect","useState","get","isEqual","useFormState","useFormGroups","useFormGroup","name","dirtyFields","touchedFields","errors","formGroups","undefined","isDirty","isTouched","isValid","state","setState","updateGroupState","fields","getGroupFields","fieldStates","map","field","error","filter","newState","getFormGroupState","oldState","JSON","stringify","subscribe","reduce","acc","fieldState"],"sourceRoot":"","sources":["../../../src/form/useFormGroup.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}