{"ast":null,"code":"import set from 'lodash/set';\nimport unset from 'lodash/unset';\nimport get from 'lodash/get';\n/**\n * Store using memory\n *\n * @example\n *\n * import { memoryStore } from 'react-admin';\n *\n * const App = () => (\n *    <Admin store={memoryStore()}>\n *       ...\n *   </Admin>\n * );\n */\nexport var memoryStore = function (storage) {\n  if (storage === void 0) {\n    storage = {};\n  }\n  var subscriptions = {};\n  var publish = function (key, value) {\n    Object.keys(subscriptions).forEach(function (id) {\n      if (!subscriptions[id]) return; // may happen if a component unmounts after a first subscriber was notified\n      if (subscriptions[id].key === key) {\n        subscriptions[id].callback(value);\n      }\n    });\n  };\n  return {\n    setup: function () {},\n    teardown: function () {\n      Object.keys(storage).forEach(function (key) {\n        return delete storage[key];\n      });\n    },\n    getItem: function (key, defaultValue) {\n      return get(storage, key, defaultValue);\n    },\n    setItem: function (key, value) {\n      set(storage, key, value);\n      publish(key, value);\n    },\n    removeItem: function (key) {\n      unset(storage, key);\n      publish(key, undefined);\n    },\n    removeItems: function (keyPrefix) {\n      var flatStorage = flatten(storage);\n      Object.keys(flatStorage).forEach(function (key) {\n        if (!key.startsWith(keyPrefix)) {\n          return;\n        }\n        unset(storage, key);\n        publish(key, undefined);\n      });\n    },\n    reset: function () {\n      var flatStorage = flatten(storage);\n      Object.keys(flatStorage).forEach(function (key) {\n        unset(storage, key);\n        publish(key, undefined);\n      });\n    },\n    subscribe: function (key, callback) {\n      var id = Math.random().toString();\n      subscriptions[id] = {\n        key: key,\n        callback: callback\n      };\n      return function () {\n        delete subscriptions[id];\n      };\n    }\n  };\n};\n// taken from https://stackoverflow.com/a/19101235/1333479\nvar flatten = function (data) {\n  var result = {};\n  function doFlatten(current, prop) {\n    if (Object(current) !== current) {\n      // scalar value\n      result[prop] = current;\n    } else if (Array.isArray(current)) {\n      // array\n      result[prop] = current;\n    } else {\n      // object\n      var isEmpty = true;\n      for (var p in current) {\n        isEmpty = false;\n        doFlatten(current[p], prop ? prop + '.' + p : p);\n      }\n      if (isEmpty && prop) result[prop] = {};\n    }\n  }\n  doFlatten(data, '');\n  return result;\n};","map":{"version":3,"mappings":"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","names":["set","unset","get","memoryStore","storage","subscriptions","publish","key","value","Object","keys","forEach","id","callback","setup","teardown","getItem","defaultValue","setItem","removeItem","undefined","removeItems","keyPrefix","flatStorage","flatten","startsWith","reset","subscribe","Math","random","toString","data","result","doFlatten","current","prop","Array","isArray","isEmpty","p"],"sources":["/Users/paigedeveau/Desktop/se-diva-docs-frontend/bwmdn-admin-portal/node_modules/ra-core/src/store/memoryStore.tsx"],"sourcesContent":["import set from 'lodash/set';\nimport unset from 'lodash/unset';\nimport get from 'lodash/get';\nimport { Store } from './types';\n\ntype Subscription = {\n    key: string;\n    callback: (value: any) => void;\n};\n\n/**\n * Store using memory\n *\n * @example\n *\n * import { memoryStore } from 'react-admin';\n *\n * const App = () => (\n *    <Admin store={memoryStore()}>\n *       ...\n *   </Admin>\n * );\n */\nexport const memoryStore = (storage: any = {}): Store => {\n    const subscriptions: { [key: string]: Subscription } = {};\n    const publish = (key: string, value: any) => {\n        Object.keys(subscriptions).forEach(id => {\n            if (!subscriptions[id]) return; // may happen if a component unmounts after a first subscriber was notified\n            if (subscriptions[id].key === key) {\n                subscriptions[id].callback(value);\n            }\n        });\n    };\n    return {\n        setup: () => {},\n        teardown: () => {\n            Object.keys(storage).forEach(key => delete storage[key]);\n        },\n        getItem<T = any>(key: string, defaultValue?: T): T {\n            return get(storage, key, defaultValue);\n        },\n        setItem<T = any>(key: string, value: T): void {\n            set(storage, key, value);\n            publish(key, value);\n        },\n        removeItem(key: string): void {\n            unset(storage, key);\n            publish(key, undefined);\n        },\n        removeItems(keyPrefix: string): void {\n            const flatStorage = flatten(storage);\n            Object.keys(flatStorage).forEach(key => {\n                if (!key.startsWith(keyPrefix)) {\n                    return;\n                }\n                unset(storage, key);\n                publish(key, undefined);\n            });\n        },\n        reset(): void {\n            const flatStorage = flatten(storage);\n            Object.keys(flatStorage).forEach(key => {\n                unset(storage, key);\n                publish(key, undefined);\n            });\n        },\n        subscribe: (key: string, callback: (value: string) => void) => {\n            const id = Math.random().toString();\n            subscriptions[id] = {\n                key,\n                callback,\n            };\n            return () => {\n                delete subscriptions[id];\n            };\n        },\n    };\n};\n\n// taken from https://stackoverflow.com/a/19101235/1333479\nconst flatten = (data: any) => {\n    var result = {};\n    function doFlatten(current, prop) {\n        if (Object(current) !== current) {\n            // scalar value\n            result[prop] = current;\n        } else if (Array.isArray(current)) {\n            // array\n            result[prop] = current;\n        } else {\n            // object\n            var isEmpty = true;\n            for (var p in current) {\n                isEmpty = false;\n                doFlatten(current[p], prop ? prop + '.' + p : p);\n            }\n            if (isEmpty && prop) result[prop] = {};\n        }\n    }\n    doFlatten(data, '');\n    return result;\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}