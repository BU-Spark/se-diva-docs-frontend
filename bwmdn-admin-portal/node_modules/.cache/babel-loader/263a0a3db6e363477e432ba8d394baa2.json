{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport { useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { parsePath } from 'history';\nimport { useBasename } from './useBasename';\nimport { useCreatePath } from './useCreatePath';\n/**\n * Hook for Redirection Side Effect\n *\n * @example\n *\n * const redirect = useRedirect();\n * // redirect to list view\n * redirect('list', 'posts');\n * // redirect to edit view\n * redirect('edit', 'posts', 123);\n * // redirect to edit view with state data\n * redirect('edit', 'comments', 123, {}, { record: { post_id: record.id } });\n * // do not redirect\n * redirect(false);\n * // redirect to the result of a function\n * redirect((resource, id, data) => ...)\n */\nexport var useRedirect = function () {\n  var navigate = useNavigate();\n  var basename = useBasename();\n  var createPath = useCreatePath();\n  return useCallback(function (redirectTo, resource, id, data, state) {\n    if (resource === void 0) {\n      resource = '';\n    }\n    if (state === void 0) {\n      state = {};\n    }\n    if (!redirectTo) {\n      return;\n    } else if (typeof redirectTo === 'function') {\n      var target = redirectTo(resource, id, data);\n      var absoluteTarget = typeof target === 'string' ? \"\".concat(basename, \"/\").concat(target) : __assign({\n        pathname: \"\".concat(basename, \"/\").concat(target.pathname)\n      }, target);\n      navigate(typeof absoluteTarget === 'string' ? parsePath(absoluteTarget) : absoluteTarget, {\n        state: __assign({\n          _scrollToTop: true\n        }, state)\n      });\n      return;\n    } else if (typeof redirectTo === 'string' && redirectTo.startsWith('http') && window) {\n      // redirection to an absolute url\n      // history doesn't handle that case, so we handle it by hand\n      window.location.href = redirectTo;\n      return;\n    } else {\n      // redirection to an internal link\n      navigate(createPath({\n        resource: resource,\n        id: id,\n        type: redirectTo\n      }), {\n        state: __assign({\n          _scrollToTop: true\n        }, state)\n      });\n      return;\n    }\n  }, [navigate, basename, createPath]);\n};","map":{"version":3,"mappings":";;;;;;;;;;AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,SAASC,WAAW,QAAY,kBAAkB;AAClD,SAASC,SAAS,QAAQ,SAAS;AAGnC,SAASC,WAAW,QAAQ,eAAe;AAC3C,SAASC,aAAa,QAAQ,iBAAiB;AAW/C;;;;;;;;;;;;;;;;;AAiBA,OAAO,IAAMC,WAAW,GAAG;EACvB,IAAMC,QAAQ,GAAGL,WAAW,EAAE;EAC9B,IAAMM,QAAQ,GAAGJ,WAAW,EAAE;EAC9B,IAAMK,UAAU,GAAGJ,aAAa,EAAE;EAElC,OAAOJ,WAAW,CACd,UACIS,UAAiC,EACjCC,QAAqB,EACrBC,EAAe,EACfC,IAAwB,EACxBC,KAAkB;IAHlB;MAAAH,aAAqB;IAAA;IAGrB;MAAAG,UAAkB;IAAA;IAElB,IAAI,CAACJ,UAAU,EAAE;MACb;KACH,MAAM,IAAI,OAAOA,UAAU,KAAK,UAAU,EAAE;MACzC,IAAMK,MAAM,GAAOL,UAAU,CAACC,QAAQ,EAAEC,EAAE,EAAEC,IAAI,CAAC;MACjD,IAAMG,cAAc,GAChB,OAAOD,MAAM,KAAK,QAAQ,GACpB,UAAGP,QAAQ,cAAIO,MAAM,CAAE,GACxBE;QACKC,QAAQ,EAAE,UAAGV,QAAQ,cAAIO,MAAM,CAACG,QAAQ;MAAE,GACvCH,MAAM,CACZ;MACXR,QAAQ,CACJ,OAAOS,cAAc,KAAK,QAAQ,GAC5Bb,SAAS,CAACa,cAAc,CAAC,GACzBA,cAAc,EACpB;QACIF,KAAK;UAAIK,YAAY,EAAE;QAAI,GAAKL,KAAK;OACxC,CACJ;MACD;KACH,MAAM,IACH,OAAOJ,UAAU,KAAK,QAAQ,IAC9BA,UAAU,CAACU,UAAU,CAAC,MAAM,CAAC,IAC7BC,MAAM,EACR;MACE;MACA;MACAA,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAGb,UAAU;MACjC;KACH,MAAM;MACH;MACAH,QAAQ,CAACE,UAAU,CAAC;QAAEE,QAAQ;QAAEC,EAAE;QAAEY,IAAI,EAAEd;MAAU,CAAE,CAAC,EAAE;QACrDI,KAAK;UAAIK,YAAY,EAAE;QAAI,GAAKL,KAAK;OACxC,CAAC;MACF;;EAER,CAAC,EACD,CAACP,QAAQ,EAAEC,QAAQ,EAAEC,UAAU,CAAC,CACnC;AACL,CAAC","names":["useCallback","useNavigate","parsePath","useBasename","useCreatePath","useRedirect","navigate","basename","createPath","redirectTo","resource","id","data","state","target","absoluteTarget","__assign","pathname","_scrollToTop","startsWith","window","location","href","type"],"sourceRoot":"","sources":["../../../src/routing/useRedirect.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}