{"ast":null,"code":"import { fetchUtils } from 'ra-core';\nimport { stringify } from 'query-string';\nconst apiUrl = 'https://se-diva-docs.herokuapp.com';\n\n/*const httpClient = (url: any, options: fetchUtils.Options = {}) => {\n  if (!options.headers) {\n    options.headers = new Headers({ Accept: 'application/json' });\n  }\n  const token = localStorage.getItem('token');\n  options.headers.set('Authorization', `Bearer ${token}`);\n  return fetchUtils.fetchJson(url, options);\n};*/\n\nconst dataProvider = {\n  getList: (resource, params) => fetchUtils.fetchJson(`${apiUrl}/${resource}?${stringify(params)}`).then(_ref => {\n    let {\n      json\n    } = _ref;\n    return {\n      data: json,\n      total: parseInt(json.length, 10)\n    };\n  }),\n  getOne: (resource, _ref2) => {\n    let {\n      id\n    } = _ref2;\n    return fetchUtils.fetchJson(`${apiUrl}/${resource}/${id}`).then(_ref3 => {\n      let {\n        json\n      } = _ref3;\n      return {\n        data: json\n      };\n    });\n  },\n  getMany: (resource, params) => {\n    const query = {\n      filter: JSON.stringify({\n        id: params.ids\n      })\n    };\n    return fetchUtils.fetchJson(`${apiUrl}/${resource}?${stringify(query)}`).then(_ref4 => {\n      let {\n        json\n      } = _ref4;\n      return {\n        data: json\n      };\n    });\n  },\n  getManyReference: (resource, params) => {\n    const query = {\n      ...params.filter,\n      [params.target]: params.id\n    };\n    return fetchUtils.fetchJson(`${apiUrl}/${resource}?${stringify(query)}`).then(_ref5 => {\n      let {\n        json\n      } = _ref5;\n      return {\n        data: json,\n        total: json.length\n      };\n    });\n  },\n  create: (resource, _ref6) => {\n    let {\n      data\n    } = _ref6;\n    return fetchUtils.fetchJson(`${apiUrl}/${resource}`, {\n      method: 'POST',\n      body: JSON.stringify(data)\n    }).then(_ref7 => {\n      let {\n        json\n      } = _ref7;\n      return {\n        data: {\n          ...data,\n          id: json.id\n        }\n      };\n    });\n  },\n  update: (resource, _ref8) => {\n    let {\n      id,\n      data\n    } = _ref8;\n    return fetchUtils.fetchJson(`${apiUrl}/${resource}/${id}`, {\n      method: 'POST',\n      body: JSON.stringify(data)\n    }).then(_ref9 => {\n      let {\n        json\n      } = _ref9;\n      return {\n        data: json\n      };\n    });\n  },\n  updateMany: (resource, params) => {\n    const query = {\n      filter: JSON.stringify({\n        id: params.ids\n      })\n    };\n    return fetchUtils.fetchJson(`${apiUrl}/${resource}?${stringify(query)}`, {\n      method: 'PUT',\n      body: JSON.stringify(params.data)\n    }).then(_ref10 => {\n      let {\n        json\n      } = _ref10;\n      return {\n        data: json\n      };\n    });\n  },\n  delete: (resource, _ref11) => {\n    let {\n      id\n    } = _ref11;\n    return fetchUtils.fetchJson(`${apiUrl}/${resource}/${id}`, {\n      method: 'DELETE'\n    }).then(_ref12 => {\n      let {\n        json\n      } = _ref12;\n      return {\n        data: json\n      };\n    });\n  },\n  deleteMany: (resource, params) => {\n    const query = {\n      filter: JSON.stringify({\n        id: params.ids\n      })\n    };\n    return fetchUtils.fetchJson(`${apiUrl}/${resource}?${stringify(query)}`, {\n      method: 'DELETE'\n    }).then(_ref13 => {\n      let {\n        json\n      } = _ref13;\n      return {\n        data: json\n      };\n    });\n  }\n};\nexport default dataProvider;","map":{"version":3,"names":["fetchUtils","stringify","apiUrl","dataProvider","getList","resource","params","fetchJson","then","json","data","total","parseInt","length","getOne","id","getMany","query","filter","JSON","ids","getManyReference","target","create","method","body","update","updateMany","delete","deleteMany"],"sources":["/Users/paigedeveau/Desktop/se-diva-docs-frontend/bwmdn-admin-portal/src/components/dataProvider.tsx"],"sourcesContent":["import { fetchUtils } from 'ra-core';\nimport { stringify } from 'query-string';\n\n\nconst apiUrl = 'https://se-diva-docs.herokuapp.com';\n\n/*const httpClient = (url: any, options: fetchUtils.Options = {}) => {\n  if (!options.headers) {\n    options.headers = new Headers({ Accept: 'application/json' });\n  }\n  const token = localStorage.getItem('token');\n  options.headers.set('Authorization', `Bearer ${token}`);\n  return fetchUtils.fetchJson(url, options);\n};*/\n\nconst dataProvider = {\n  getList: (resource: any, params: any) =>\n    fetchUtils.fetchJson(`${apiUrl}/${resource}?${stringify(params)}`).then(({ json }) => ({\n      data: json,\n      total: parseInt(json.length, 10),\n    })),\n  getOne: (resource: any, { id }: any) =>\n    fetchUtils.fetchJson(`${apiUrl}/${resource}/${id}`).then(({ json }) => ({\n      data: json,\n    })),\n  getMany: (resource: any, params: any) => {\n    const query = {\n      filter: JSON.stringify({ id: params.ids }),\n    };\n    return fetchUtils.fetchJson(`${apiUrl}/${resource}?${stringify(query)}`).then(({ json }) => ({\n      data: json,\n    }));\n  },\n  getManyReference: (resource: any, params: any) => {\n    const query = {\n      ...params.filter,\n      [params.target]: params.id,\n    };\n    return fetchUtils.fetchJson(`${apiUrl}/${resource}?${stringify(query)}`).then(({ json }) => ({\n      data: json,\n      total: json.length,\n    }));\n  },\n  create: (resource: any, { data }: any) =>\n    fetchUtils.fetchJson(`${apiUrl}/${resource}`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n    }).then(({ json }) => ({\n      data: { ...data, id: json.id },\n    })),\n  update: (resource: any, { id, data }: any) =>\n    fetchUtils.fetchJson(`${apiUrl}/${resource}/${id}`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n    }).then(({ json }) => ({\n      data: json,\n    })),\n  updateMany: (resource: any, params: any) => {\n    const query = {\n      filter: JSON.stringify({ id: params.ids }),\n    };\n    return fetchUtils.fetchJson(`${apiUrl}/${resource}?${stringify(query)}`, {\n      method: 'PUT',\n      body: JSON.stringify(params.data),\n    }).then(({ json }) => ({\n      data: json,\n    }));\n  },\n  delete: (resource: any, { id }: any) =>\n    fetchUtils.fetchJson(`${apiUrl}/${resource}/${id}`, {\n      method: 'DELETE',\n    }).then(({ json }) => ({\n      data: json,\n    })),\n  deleteMany: (resource: any, params: any) => {\n    const query = {\n      filter: JSON.stringify({ id: params.ids }),\n    };\n    return fetchUtils.fetchJson(`${apiUrl}/${resource}?${stringify(query)}`, {\n      method: 'DELETE',\n    }).then(({ json }) => ({\n      data: json,\n    }));\n  },\n};\n\nexport default dataProvider"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}