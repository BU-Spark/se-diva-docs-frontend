{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { useRef } from 'react';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { useDataProvider } from './useDataProvider';\n/**\n * Get a callback to call the dataProvider.create() method, the result and the loading state.\n *\n * @param {string} resource\n * @param {Params} params The create parameters { data }\n * @param {Object} options Options object to pass to the queryClient.\n * May include side effects to be executed upon success or failure, e.g. { onSuccess: () => { refresh(); } }\n *\n * @typedef Params\n * @prop params.data The record to create, e.g. { title: 'hello, world' }\n *\n * @returns The current mutation state. Destructure as [create, { data, error, isLoading }].\n *\n * The return value updates according to the request state:\n *\n * - initial: [create, { isLoading: false, isIdle: true }]\n * - start:   [create, { isLoading: true }]\n * - success: [create, { data: [data from response], isLoading: false, isSuccess: true }]\n * - error:   [create, { error: [error from response], isLoading: false, isError: true }]\n *\n * The create() function must be called with a resource and a parameter object: create(resource, { data, meta }, options)\n *\n * This hook uses react-query useMutation under the hood.\n * This means the state object contains mutate, isIdle, reset and other react-query methods.\n *\n * @see https://react-query-v3.tanstack.com/reference/useMutation\n *\n * @example // set params when calling the create callback\n *\n * import { useCreate, useRecordContext } from 'react-admin';\n *\n * const LikeButton = () => {\n *     const record = useRecordContext();\n *     const like = { postId: record.id };\n *     const [create, { isLoading, error }] = useCreate();\n *     const handleClick = () => {\n *         create('likes', { data: like })\n *     }\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={isLoading} onClick={handleClick}>Like</button>;\n * };\n *\n * @example // set params when calling the hook\n *\n * import { useCreate, useRecordContext } from 'react-admin';\n *\n * const LikeButton = () => {\n *     const record = useRecordContext();\n *     const like = { postId: record.id };\n *     const [create, { isLoading, error }] = useCreate('likes', { data: like });\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={isLoading} onClick={() => create()}>Like</button>;\n * };\n *\n * @example // TypeScript\n * const [create, { data }] = useCreate<Product>('products', { data: product });\n *                    \\-- data is Product\n */\nexport var useCreate = function (resource, params, options) {\n  if (params === void 0) {\n    params = {};\n  }\n  if (options === void 0) {\n    options = {};\n  }\n  var dataProvider = useDataProvider();\n  var queryClient = useQueryClient();\n  var paramsRef = useRef(params);\n  var mutation = useMutation(function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n      _c = _b.resource,\n      callTimeResource = _c === void 0 ? resource : _c,\n      _d = _b.data,\n      callTimeData = _d === void 0 ? paramsRef.current.data : _d,\n      _e = _b.meta,\n      callTimeMeta = _e === void 0 ? paramsRef.current.meta : _e;\n    return dataProvider.create(callTimeResource, {\n      data: callTimeData,\n      meta: callTimeMeta\n    }).then(function (_a) {\n      var data = _a.data;\n      return data;\n    });\n  }, __assign(__assign({}, options), {\n    onSuccess: function (data, variables, context) {\n      if (variables === void 0) {\n        variables = {};\n      }\n      var _a = variables.resource,\n        callTimeResource = _a === void 0 ? resource : _a;\n      queryClient.setQueryData([callTimeResource, 'getOne', {\n        id: String(data.id)\n      }], data);\n      if (options.onSuccess) {\n        options.onSuccess(data, variables, context);\n      }\n      // call-time success callback is executed by react-query\n    }\n  }));\n\n  var create = function (callTimeResource, callTimeParams, createOptions) {\n    if (callTimeResource === void 0) {\n      callTimeResource = resource;\n    }\n    if (callTimeParams === void 0) {\n      callTimeParams = {};\n    }\n    if (createOptions === void 0) {\n      createOptions = {};\n    }\n    var returnPromise = createOptions.returnPromise,\n      reactCreateOptions = __rest(createOptions, [\"returnPromise\"]);\n    if (returnPromise) {\n      return mutation.mutateAsync(__assign({\n        resource: callTimeResource\n      }, callTimeParams), createOptions);\n    }\n    mutation.mutate(__assign({\n      resource: callTimeResource\n    }, callTimeParams), reactCreateOptions);\n  };\n  return [create, mutation];\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,SAASA,MAAM,QAAQ,OAAO;AAC9B,SACIC,WAAW,EAGXC,cAAc,QAEX,aAAa;AAEpB,SAASC,eAAe,QAAQ,mBAAmB;AAGnD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0DA,OAAO,IAAMC,SAAS,GAAG,UAIrBC,QAAiB,EACjBC,MAAuD,EACvDC,OAAyD;EADzD;IAAAD,WAAuD;EAAA;EACvD;IAAAC,YAAyD;EAAA;EAEzD,IAAMC,YAAY,GAAGL,eAAe,EAAE;EACtC,IAAMM,WAAW,GAAGP,cAAc,EAAE;EACpC,IAAMQ,SAAS,GAAGV,MAAM,CACpBM,MAAM,CACT;EAED,IAAMK,QAAQ,GAAGV,WAAW,CAKxB,UAACW,EAIK;QAJLC,qBAIG,EAAE;MAHFC,gBAAqC;MAA3BC,gBAAgB,mBAAGV,QAAQ;MACrCW,YAA2C;MAArCC,YAAY,mBAAGP,SAAS,CAACQ,OAAO,CAACC,IAAI;MAC3CC,YAA2C;MAArCC,YAAY,mBAAGX,SAAS,CAACQ,OAAO,CAACI,IAAI;IAE3C,mBAAY,CACPC,MAAM,CAAaR,gBAAgB,EAAE;MAClCI,IAAI,EAAEF,YAAY;MAClBK,IAAI,EAAED;KACT,CAAC,CACDG,IAAI,CAAC,UAACZ,EAAQ;UAANO,IAAI;MAAO,WAAI;IAAJ,CAAI,CAAC;EAL7B,CAK6B,wBAE1BZ,OAAO;IACVkB,SAAS,EAAE,UACPN,IAAgB,EAChBO,SAA0D,EAC1DC,OAAgB;MADhB;QAAAD,cAA0D;MAAA;MAGlD,SAA0CA,SAAS,SAAd;QAA3BX,gBAAgB,mBAAGV,QAAQ;MAC7CI,WAAW,CAACmB,YAAY,CACpB,CAACb,gBAAgB,EAAE,QAAQ,EAAE;QAAEc,EAAE,EAAEC,MAAM,CAACX,IAAI,CAACU,EAAE;MAAC,CAAE,CAAC,EACrDV,IAAI,CACP;MAED,IAAIZ,OAAO,CAACkB,SAAS,EAAE;QACnBlB,OAAO,CAACkB,SAAS,CAACN,IAAI,EAAEO,SAAS,EAAEC,OAAO,CAAC;;MAE/C;IACJ;EAAC,GAER;;EAED,IAAMJ,MAAM,GAAG,UACXR,gBAAmC,EACnCgB,cAAsD,EACtDC,aAKoC;IAPpC;MAAAjB,2BAAmC;IAAA;IACnC;MAAAgB,mBAAsD;IAAA;IACtD;MAAAC,kBAKoC;IAAA;IAE5B,iBAAa,GAA4BA,aAAa,cAAzC;MAAKC,kBAAkB,UAAKD,aAAa,EAAxD,iBAAwC,CAAF;IAC5C,IAAIE,aAAa,EAAE;MACf,OAAOvB,QAAQ,CAACwB,WAAW;QACrB9B,QAAQ,EAAEU;MAAgB,GAAKgB,cAAc,GAC/CC,aAAa,CAChB;;IAELrB,QAAQ,CAACyB,MAAM;MACT/B,QAAQ,EAAEU;IAAgB,GAAKgB,cAAc,GAC/CE,kBAAkB,CACrB;EACL,CAAC;EAED,OAAO,CAACV,MAAM,EAAEZ,QAAQ,CAAC;AAC7B,CAAC","names":["useRef","useMutation","useQueryClient","useDataProvider","useCreate","resource","params","options","dataProvider","queryClient","paramsRef","mutation","_a","_b","_c","callTimeResource","_d","callTimeData","current","data","_e","callTimeMeta","meta","create","then","onSuccess","variables","context","setQueryData","id","String","callTimeParams","createOptions","reactCreateOptions","returnPromise","mutateAsync","mutate"],"sourceRoot":"","sources":["../../../src/dataProvider/useCreate.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}