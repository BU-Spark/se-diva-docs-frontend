{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { createContext, useCallback, useState, useMemo } from 'react';\nimport isEqual from 'lodash/isEqual';\nexport var ResourceDefinitionContext = createContext({\n  definitions: {},\n  register: function () {},\n  unregister: function () {}\n});\n/**\n * Context to store the current resource Definition.\n *\n * Use the useResourceDefinition() hook to read the context.\n *\n * @example\n *\n * import { useResourceDefinition, useTranslate } from 'ra-core';\n *\n * const PostMenuItem = () => {\n *     const { name, icon } = useResourceDefinition({ resource: 'posts' });\n *\n *     return (\n *          <MenuItem>\n *              <ListItemIcon>{icon}</ListItemIcon>\n *              {name}\n *          </MenuItem>\n *     );\n * };\n */\nexport var ResourceDefinitionContextProvider = function (_a) {\n  var _b = _a.definitions,\n    defaultDefinitions = _b === void 0 ? {} : _b,\n    children = _a.children;\n  var _c = useState(defaultDefinitions),\n    definitions = _c[0],\n    setState = _c[1];\n  var register = useCallback(function (config) {\n    setState(function (prev) {\n      var _a;\n      return isEqual(prev[config.name], config) ? prev : __assign(__assign({}, prev), (_a = {}, _a[config.name] = config, _a));\n    });\n  }, []);\n  var unregister = useCallback(function (config) {\n    setState(function (prev) {\n      var _a = prev,\n        _b = config.name,\n        _ = _a[_b],\n        rest = __rest(_a, [typeof _b === \"symbol\" ? _b : _b + \"\"]);\n      return rest;\n    });\n  }, []);\n  var contextValue = useMemo(function () {\n    return {\n      definitions: definitions,\n      register: register,\n      unregister: unregister\n    };\n  }, [definitions] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n\n  return React.createElement(ResourceDefinitionContext.Provider, {\n    value: contextValue\n  }, children);\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,aAAa,EAAEC,WAAW,EAAEC,QAAQ,EAAEC,OAAO,QAAQ,OAAO;AACrE,OAAOC,OAAO,MAAM,gBAAgB;AAcpC,OAAO,IAAMC,yBAAyB,GAAGL,aAAa,CAEpD;EACEM,WAAW,EAAE,EAAE;EACfC,QAAQ,EAAE,aAAO,CAAC;EAClBC,UAAU,EAAE,aAAO;CACtB,CAAC;AAEF;;;;;;;;;;;;;;;;;;;;AAoBA,OAAO,IAAMC,iCAAiC,GAAG,UAACC,EAMjD;MALGC,mBAAoC;IAAvBC,kBAAkB,mBAAG,EAAE;IACpCC,QAAQ;EAKF,SAA0BX,QAAQ,CACpCU,kBAAkB,CACrB;IAFMN,WAAW;IAAEQ,QAAQ,QAE3B;EAED,IAAMP,QAAQ,GAAGN,WAAW,CAAC,UAACc,MAA0B;IACpDD,QAAQ,CAAC,cAAI;;MACT,cAAO,CAACE,IAAI,CAACD,MAAM,CAACE,IAAI,CAAC,EAAEF,MAAM,CAAC,GAC5BC,IAAI,GACLE,sBACQF,IAAI,gBACND,MAAM,CAACE,IAAI,IAAGF,MAAM,MACxB;IALP,CAKO,CACV;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,IAAMP,UAAU,GAAGP,WAAW,CAAC,UAACc,MAA0B;IACtDD,QAAQ,CAAC,cAAI;MACT,IAAsCJ,SAAI;QAAlCC,KAACI,MAAM,CAACE,IAAK;QAAEE,CAAC;QAAKC,IAAI,cAA3B,uCAA6B,CAAO;MAC1C,OAAOA,IAAI;IACf,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,IAAMC,YAAY,GAAGlB,OAAO,CACxB;IAAM,OAAC;MAAEG,WAAW;MAAEC,QAAQ;MAAEC,UAAU;IAAA,CAAE;EAAtC,CAAuC,EAC7C,CAACF,WAAW,CAAC,CAAC;EAAA,CACjB;;EAED,OACIP,oBAACM,yBAAyB,CAACiB,QAAQ;IAACC,KAAK,EAAEF;EAAY,GAClDR,QAAQ,CACwB;AAE7C,CAAC","names":["React","createContext","useCallback","useState","useMemo","isEqual","ResourceDefinitionContext","definitions","register","unregister","ResourceDefinitionContextProvider","_a","_b","defaultDefinitions","children","setState","config","prev","name","__assign","_","rest","contextValue","Provider","value"],"sourceRoot":"","sources":["../../../src/core/ResourceDefinitionContext.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}