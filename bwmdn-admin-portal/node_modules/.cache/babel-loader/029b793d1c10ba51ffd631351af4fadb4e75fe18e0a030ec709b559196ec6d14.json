{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { useState, useCallback, useRef, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { Menu, MenuItem, styled } from '@mui/material';\nimport ContentFilter from '@mui/icons-material/FilterList';\nimport lodashGet from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport { useListContext, useResourceContext, useTranslate } from 'ra-core';\nimport { stringify } from 'query-string';\nimport { useNavigate } from 'react-router';\nimport { FilterButtonMenuItem } from './FilterButtonMenuItem';\nimport { Button } from '../../button';\nimport { FilterContext } from '../FilterContext';\nimport { extractValidSavedQueries, useSavedQueries } from './useSavedQueries';\nimport { AddSavedQueryDialog } from './AddSavedQueryDialog';\nimport { RemoveSavedQueryDialog } from './RemoveSavedQueryDialog';\nexport var FilterButton = function (props) {\n  var filtersProp = props.filters,\n    className = props.className,\n    disableSaveQuery = props.disableSaveQuery,\n    rest = __rest(props, [\"filters\", \"className\", \"disableSaveQuery\"]);\n  var filters = useContext(FilterContext) || filtersProp;\n  var resource = useResourceContext(props);\n  var translate = useTranslate();\n  var savedQueries = useSavedQueries(resource)[0];\n  var navigate = useNavigate();\n  var _a = useListContext(props),\n    _b = _a.displayedFilters,\n    displayedFilters = _b === void 0 ? {} : _b,\n    filterValues = _a.filterValues,\n    perPage = _a.perPage,\n    setFilters = _a.setFilters,\n    showFilter = _a.showFilter,\n    sort = _a.sort;\n  var hasFilterValues = !isEqual(filterValues, {});\n  var validSavedQueries = extractValidSavedQueries(savedQueries);\n  var hasSavedCurrentQuery = validSavedQueries.some(function (savedQuery) {\n    return isEqual(savedQuery.value, {\n      filter: filterValues,\n      sort: sort,\n      perPage: perPage,\n      displayedFilters: displayedFilters\n    });\n  });\n  var _c = useState(false),\n    open = _c[0],\n    setOpen = _c[1];\n  var anchorEl = useRef();\n  if (filters === undefined) {\n    throw new Error('FilterButton requires filters prop to be set');\n  }\n  var hiddenFilters = filters.filter(function (filterElement) {\n    return !filterElement.props.alwaysOn && !displayedFilters[filterElement.props.source] && typeof lodashGet(filterValues, filterElement.props.source) === 'undefined';\n  });\n  var handleClickButton = useCallback(function (event) {\n    // This prevents ghost click.\n    event.preventDefault();\n    setOpen(true);\n    anchorEl.current = event.currentTarget;\n  }, [anchorEl, setOpen]);\n  var handleRequestClose = useCallback(function () {\n    setOpen(false);\n  }, [setOpen]);\n  var handleShow = useCallback(function (_a) {\n    var source = _a.source,\n      defaultValue = _a.defaultValue;\n    showFilter(source, defaultValue === '' ? undefined : defaultValue);\n    setOpen(false);\n  }, [showFilter, setOpen]);\n  // add query dialog state\n  var _d = useState(false),\n    addSavedQueryDialogOpen = _d[0],\n    setAddSavedQueryDialogOpen = _d[1];\n  var hideAddSavedQueryDialog = function () {\n    setAddSavedQueryDialogOpen(false);\n  };\n  var showAddSavedQueryDialog = function () {\n    setOpen(false);\n    setAddSavedQueryDialogOpen(true);\n  };\n  // remove query dialog state\n  var _e = useState(false),\n    removeSavedQueryDialogOpen = _e[0],\n    setRemoveSavedQueryDialogOpen = _e[1];\n  var hideRemoveSavedQueryDialog = function () {\n    setRemoveSavedQueryDialogOpen(false);\n  };\n  var showRemoveSavedQueryDialog = function () {\n    setOpen(false);\n    setRemoveSavedQueryDialogOpen(true);\n  };\n  if (hiddenFilters.length === 0 && validSavedQueries.length === 0 && !hasFilterValues) {\n    return null;\n  }\n  return React.createElement(Root, __assign({\n    className: className\n  }, sanitizeRestProps(rest)), React.createElement(Button, {\n    className: \"add-filter\",\n    label: \"ra.action.add_filter\",\n    \"aria-haspopup\": \"true\",\n    onClick: handleClickButton\n  }, React.createElement(ContentFilter, null)), React.createElement(Menu, {\n    open: open,\n    anchorEl: anchorEl.current,\n    onClose: handleRequestClose\n  }, hiddenFilters.map(function (filterElement, index) {\n    return React.createElement(FilterButtonMenuItem, {\n      key: filterElement.props.source,\n      filter: filterElement,\n      resource: resource,\n      onShow: handleShow,\n      autoFocus: index === 0\n    });\n  }), validSavedQueries.map(function (savedQuery, index) {\n    return isEqual(savedQuery.value, {\n      filter: filterValues,\n      sort: sort,\n      perPage: perPage,\n      displayedFilters: displayedFilters\n    }) ? React.createElement(MenuItem, {\n      onClick: showRemoveSavedQueryDialog,\n      key: index\n    }, translate('ra.saved_queries.remove_label_with_name', {\n      _: 'Remove query \"%{name}\"',\n      name: savedQuery.label\n    })) : React.createElement(MenuItem, {\n      onClick: function () {\n        navigate({\n          search: stringify({\n            filter: JSON.stringify(savedQuery.value.filter),\n            sort: savedQuery.value.sort.field,\n            order: savedQuery.value.sort.order,\n            page: 1,\n            perPage: savedQuery.value.perPage,\n            displayedFilters: JSON.stringify(savedQuery.value.displayedFilters)\n          })\n        });\n        setOpen(false);\n      },\n      key: index\n    }, savedQuery.label);\n  }), hasFilterValues && !hasSavedCurrentQuery && !disableSaveQuery && React.createElement(MenuItem, {\n    onClick: showAddSavedQueryDialog\n  }, translate('ra.saved_queries.new_label', {\n    _: 'Save current query...'\n  })), hasFilterValues && React.createElement(MenuItem, {\n    onClick: function () {\n      return setFilters({}, {}, false);\n    }\n  }, translate('ra.action.remove_all_filters', {\n    _: 'Remove all filters'\n  }))), !disableSaveQuery && React.createElement(React.Fragment, null, React.createElement(AddSavedQueryDialog, {\n    open: addSavedQueryDialogOpen,\n    onClose: hideAddSavedQueryDialog\n  }), React.createElement(RemoveSavedQueryDialog, {\n    open: removeSavedQueryDialogOpen,\n    onClose: hideRemoveSavedQueryDialog\n  })));\n};\nvar sanitizeRestProps = function (_a) {\n  var _b = _a.displayedFilters,\n    displayedFilters = _b === void 0 ? null : _b,\n    _c = _a.filterValues,\n    filterValues = _c === void 0 ? null : _c,\n    _d = _a.showFilter,\n    showFilter = _d === void 0 ? null : _d,\n    rest = __rest(_a, [\"displayedFilters\", \"filterValues\", \"showFilter\"]);\n  return rest;\n};\nFilterButton.propTypes = {\n  resource: PropTypes.string,\n  filters: PropTypes.arrayOf(PropTypes.node),\n  displayedFilters: PropTypes.object,\n  filterValues: PropTypes.object,\n  showFilter: PropTypes.func,\n  className: PropTypes.string\n};\nvar PREFIX = 'RaFilterButton';\nvar Root = styled('div', {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var theme = _a.theme;\n  return {\n    display: 'inline-block'\n  };\n});","map":{"version":3,"mappings":"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","names":["React","useState","useCallback","useRef","useContext","PropTypes","Menu","MenuItem","styled","ContentFilter","lodashGet","isEqual","useListContext","useResourceContext","useTranslate","stringify","useNavigate","FilterButtonMenuItem","Button","FilterContext","extractValidSavedQueries","useSavedQueries","AddSavedQueryDialog","RemoveSavedQueryDialog","FilterButton","props","filtersProp","className","disableSaveQuery","rest","filters","resource","translate","navigate","_b","displayedFilters","filterValues","perPage","setFilters","showFilter","sort","hasFilterValues","validSavedQueries","savedQueries","hasSavedCurrentQuery","some","savedQuery","value","filter","open","setOpen","anchorEl","undefined","Error","hiddenFilters","filterElement","alwaysOn","source","handleClickButton","event","preventDefault","current","currentTarget","handleRequestClose","handleShow","_a","defaultValue","addSavedQueryDialogOpen","setAddSavedQueryDialogOpen","hideAddSavedQueryDialog","showAddSavedQueryDialog","removeSavedQueryDialogOpen","setRemoveSavedQueryDialogOpen","hideRemoveSavedQueryDialog","showRemoveSavedQueryDialog","length","Root","sanitizeRestProps","label","onClick","onClose","map","index","key","onShow","autoFocus","_","name","search","JSON","field","order","page","_c","_d","propTypes","string","arrayOf","node","object","func","PREFIX","overridesResolver","styles","root","theme","display"],"sources":["/Users/paigedeveau/Desktop/se-diva-docs-frontend/bwmdn-admin-portal/node_modules/ra-ui-materialui/src/list/filter/FilterButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n    useState,\n    useCallback,\n    useRef,\n    ReactNode,\n    HtmlHTMLAttributes,\n    useContext,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport { Menu, MenuItem, styled } from '@mui/material';\nimport ContentFilter from '@mui/icons-material/FilterList';\nimport lodashGet from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport { useListContext, useResourceContext, useTranslate } from 'ra-core';\nimport { stringify } from 'query-string';\nimport { useNavigate } from 'react-router';\n\nimport { FilterButtonMenuItem } from './FilterButtonMenuItem';\nimport { Button } from '../../button';\nimport { FilterContext } from '../FilterContext';\nimport { extractValidSavedQueries, useSavedQueries } from './useSavedQueries';\nimport { AddSavedQueryDialog } from './AddSavedQueryDialog';\nimport { RemoveSavedQueryDialog } from './RemoveSavedQueryDialog';\n\nexport const FilterButton = (props: FilterButtonProps): JSX.Element => {\n    const {\n        filters: filtersProp,\n        className,\n        disableSaveQuery,\n        ...rest\n    } = props;\n    const filters = useContext(FilterContext) || filtersProp;\n    const resource = useResourceContext(props);\n    const translate = useTranslate();\n    const [savedQueries] = useSavedQueries(resource);\n    const navigate = useNavigate();\n    const {\n        displayedFilters = {},\n        filterValues,\n        perPage,\n        setFilters,\n        showFilter,\n        sort,\n    } = useListContext(props);\n    const hasFilterValues = !isEqual(filterValues, {});\n    const validSavedQueries = extractValidSavedQueries(savedQueries);\n    const hasSavedCurrentQuery = validSavedQueries.some(savedQuery =>\n        isEqual(savedQuery.value, {\n            filter: filterValues,\n            sort,\n            perPage,\n            displayedFilters,\n        })\n    );\n    const [open, setOpen] = useState(false);\n    const anchorEl = useRef();\n\n    if (filters === undefined) {\n        throw new Error('FilterButton requires filters prop to be set');\n    }\n\n    const hiddenFilters = filters.filter(\n        (filterElement: JSX.Element) =>\n            !filterElement.props.alwaysOn &&\n            !displayedFilters[filterElement.props.source] &&\n            typeof lodashGet(filterValues, filterElement.props.source) ===\n                'undefined'\n    );\n\n    const handleClickButton = useCallback(\n        event => {\n            // This prevents ghost click.\n            event.preventDefault();\n            setOpen(true);\n            anchorEl.current = event.currentTarget;\n        },\n        [anchorEl, setOpen]\n    );\n\n    const handleRequestClose = useCallback(() => {\n        setOpen(false);\n    }, [setOpen]);\n\n    const handleShow = useCallback(\n        ({ source, defaultValue }) => {\n            showFilter(source, defaultValue === '' ? undefined : defaultValue);\n            setOpen(false);\n        },\n        [showFilter, setOpen]\n    );\n\n    // add query dialog state\n    const [addSavedQueryDialogOpen, setAddSavedQueryDialogOpen] = useState(\n        false\n    );\n    const hideAddSavedQueryDialog = (): void => {\n        setAddSavedQueryDialogOpen(false);\n    };\n    const showAddSavedQueryDialog = (): void => {\n        setOpen(false);\n        setAddSavedQueryDialogOpen(true);\n    };\n\n    // remove query dialog state\n    const [\n        removeSavedQueryDialogOpen,\n        setRemoveSavedQueryDialogOpen,\n    ] = useState(false);\n    const hideRemoveSavedQueryDialog = (): void => {\n        setRemoveSavedQueryDialogOpen(false);\n    };\n    const showRemoveSavedQueryDialog = (): void => {\n        setOpen(false);\n        setRemoveSavedQueryDialogOpen(true);\n    };\n\n    if (\n        hiddenFilters.length === 0 &&\n        validSavedQueries.length === 0 &&\n        !hasFilterValues\n    ) {\n        return null;\n    }\n    return (\n        <Root className={className} {...sanitizeRestProps(rest)}>\n            <Button\n                className=\"add-filter\"\n                label=\"ra.action.add_filter\"\n                aria-haspopup=\"true\"\n                onClick={handleClickButton}\n            >\n                <ContentFilter />\n            </Button>\n            <Menu\n                open={open}\n                anchorEl={anchorEl.current}\n                onClose={handleRequestClose}\n            >\n                {hiddenFilters.map((filterElement: JSX.Element, index) => (\n                    <FilterButtonMenuItem\n                        key={filterElement.props.source}\n                        filter={filterElement}\n                        resource={resource}\n                        onShow={handleShow}\n                        autoFocus={index === 0}\n                    />\n                ))}\n                {validSavedQueries.map((savedQuery, index) =>\n                    isEqual(savedQuery.value, {\n                        filter: filterValues,\n                        sort,\n                        perPage,\n                        displayedFilters,\n                    }) ? (\n                        <MenuItem\n                            onClick={showRemoveSavedQueryDialog}\n                            key={index}\n                        >\n                            {translate(\n                                'ra.saved_queries.remove_label_with_name',\n                                {\n                                    _: 'Remove query \"%{name}\"',\n                                    name: savedQuery.label,\n                                }\n                            )}\n                        </MenuItem>\n                    ) : (\n                        <MenuItem\n                            onClick={(): void => {\n                                navigate({\n                                    search: stringify({\n                                        filter: JSON.stringify(\n                                            savedQuery.value.filter\n                                        ),\n                                        sort: savedQuery.value.sort.field,\n                                        order: savedQuery.value.sort.order,\n                                        page: 1,\n                                        perPage: savedQuery.value.perPage,\n                                        displayedFilters: JSON.stringify(\n                                            savedQuery.value.displayedFilters\n                                        ),\n                                    }),\n                                });\n                                setOpen(false);\n                            }}\n                            key={index}\n                        >\n                            {savedQuery.label}\n                        </MenuItem>\n                    )\n                )}\n                {hasFilterValues && !hasSavedCurrentQuery && !disableSaveQuery && (\n                    <MenuItem onClick={showAddSavedQueryDialog}>\n                        {translate('ra.saved_queries.new_label', {\n                            _: 'Save current query...',\n                        })}\n                    </MenuItem>\n                )}\n                {hasFilterValues && (\n                    <MenuItem onClick={() => setFilters({}, {}, false)}>\n                        {translate('ra.action.remove_all_filters', {\n                            _: 'Remove all filters',\n                        })}\n                    </MenuItem>\n                )}\n            </Menu>\n            {!disableSaveQuery && (\n                <>\n                    <AddSavedQueryDialog\n                        open={addSavedQueryDialogOpen}\n                        onClose={hideAddSavedQueryDialog}\n                    />\n                    <RemoveSavedQueryDialog\n                        open={removeSavedQueryDialogOpen}\n                        onClose={hideRemoveSavedQueryDialog}\n                    />\n                </>\n            )}\n        </Root>\n    );\n};\n\nconst sanitizeRestProps = ({\n    displayedFilters = null,\n    filterValues = null,\n    showFilter = null,\n    ...rest\n}) => rest;\n\nFilterButton.propTypes = {\n    resource: PropTypes.string,\n    filters: PropTypes.arrayOf(PropTypes.node),\n    displayedFilters: PropTypes.object,\n    filterValues: PropTypes.object,\n    showFilter: PropTypes.func,\n    className: PropTypes.string,\n};\n\nexport interface FilterButtonProps extends HtmlHTMLAttributes<HTMLDivElement> {\n    className?: string;\n    resource?: string;\n    filterValues?: any;\n    showFilter?: (filterName: string, defaultValue: any) => void;\n    displayedFilters?: any;\n    filters?: ReactNode[];\n    disableSaveQuery?: boolean;\n}\n\nconst PREFIX = 'RaFilterButton';\n\nconst Root = styled('div', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    display: 'inline-block',\n}));\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}