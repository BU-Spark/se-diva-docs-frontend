{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { useWatch, useFormContext } from 'react-hook-form';\nimport get from 'lodash/get';\n/**\n * Get the current (edited) value of the record from the form and pass it\n * to a child function\n *\n * @example\n *\n * const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <BooleanInput source=\"hasEmail\" />\n *             <FormDataConsumer>\n *                 {({ formData, ...rest }) => formData.hasEmail &&\n *                      <TextInput source=\"email\" {...rest} />\n *                 }\n *             </FormDataConsumer>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * @example\n *\n * const OrderEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <SelectInput source=\"country\" choices={countries} />\n *             <FormDataConsumer>\n *                 {({ formData, ...rest }) =>\n *                      <SelectInput\n *                          source=\"city\"\n *                          choices={getCitiesFor(formData.country)}\n *                          {...rest}\n *                      />\n *                 }\n *             </FormDataConsumer>\n *         </SimpleForm>\n *     </Edit>\n * );\n */\nvar FormDataConsumer = function (props) {\n  var getValues = useFormContext().getValues;\n  var formData = useWatch();\n  //useWatch will initially return the provided defaultValues of the form.\n  //We must get the initial formData from getValues\n  if (Object.keys(formData).length === 0) {\n    formData = getValues();\n  }\n  return React.createElement(FormDataConsumerView, __assign({\n    formData: formData\n  }, props));\n};\nexport var FormDataConsumerView = function (props) {\n  var children = props.children,\n    form = props.form,\n    formData = props.formData,\n    source = props.source,\n    index = props.index,\n    rest = __rest(props, [\"children\", \"form\", \"formData\", \"source\", \"index\"]);\n  var ret;\n  // If we have an index, we are in an iterator like component (such as the SimpleFormIterator)\n  if (typeof index !== 'undefined' && source) {\n    var scopedFormData = get(formData, source);\n    var getSource = function (scopedSource) {\n      return \"\".concat(source, \".\").concat(scopedSource);\n    };\n    ret = children(__assign({\n      formData: formData,\n      scopedFormData: scopedFormData,\n      getSource: getSource\n    }, rest));\n  } else {\n    ret = children(__assign({\n      formData: formData\n    }, rest));\n  }\n  return ret === undefined ? null : ret;\n};\nexport default FormDataConsumer;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,SAASC,QAAQ,EAAEC,cAAc,QAAqB,iBAAiB;AACvE,OAAOC,GAAG,MAAM,YAAY;AAE5B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA,IAAMC,gBAAgB,GAAG,UAACC,KAAqB;EACnC,aAAS,GAAKH,cAAc,EAAE,UAArB;EACjB,IAAII,QAAQ,GAAGL,QAAQ,EAAE;EAEzB;EACA;EACA,IAAIM,MAAM,CAACC,IAAI,CAACF,QAAQ,CAAC,CAACG,MAAM,KAAK,CAAC,EAAE;IACnCH,QAAwB,GAAGI,SAAS,EAAE;;EAG3C,OAAOV,oBAACW,oBAAoB;IAACL,QAAQ,EAAEA;EAAQ,GAAMD,KAAK,EAAI;AAClE,CAAC;AAED,OAAO,IAAMM,oBAAoB,GAAG,UAACN,KAAY;EACrC,YAAQ,GAA6CA,KAAK,SAAlD;IAAEO,IAAI,GAAuCP,KAAK,KAA5C;IAAEC,QAAQ,GAA6BD,KAAK,SAAlC;IAAEQ,MAAM,GAAqBR,KAAK,OAA1B;IAAES,KAAK,GAAcT,KAAK,MAAnB;IAAKU,IAAI,UAAKV,KAAK,EAA5D,mDAAoD,CAAF;EACxD,IAAIW,GAAG;EAEP;EACA,IAAI,OAAOF,KAAK,KAAK,WAAW,IAAID,MAAM,EAAE;IACxC,IAAMI,cAAc,GAAGd,GAAG,CAACG,QAAQ,EAAEO,MAAM,CAAC;IAC5C,IAAMK,SAAS,GAAG,UAACC,YAAoB;MAAK,iBAAGN,MAAM,cAAIM,YAAY,CAAE;IAA3B,CAA2B;IACvEH,GAAG,GAAGI,QAAQ;MAAGd,QAAQ;MAAEW,cAAc;MAAEC,SAAS;IAAA,GAAKH,IAAI,EAAG;GACnE,MAAM;IACHC,GAAG,GAAGI,QAAQ;MAAGd,QAAQ;IAAA,GAAKS,IAAI,EAAG;;EAGzC,OAAOC,GAAG,KAAKK,SAAS,GAAG,IAAI,GAAGL,GAAG;AACzC,CAAC;AAED,eAAeZ,gBAAgB","names":["React","useWatch","useFormContext","get","FormDataConsumer","props","formData","Object","keys","length","getValues","FormDataConsumerView","form","source","index","rest","ret","scopedFormData","getSource","scopedSource","children","undefined"],"sourceRoot":"","sources":["../../../src/form/FormDataConsumer.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}