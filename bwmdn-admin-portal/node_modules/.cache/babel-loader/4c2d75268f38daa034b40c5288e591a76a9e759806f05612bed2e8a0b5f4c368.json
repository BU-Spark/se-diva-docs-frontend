{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nimport { useCallback } from 'react';\nimport useAuthProvider from './useAuthProvider';\nimport useLogout from './useLogout';\nimport { useNotify } from '../notification';\nimport { useNavigate } from 'react-router';\nvar timer;\n/**\n * Returns a callback used to call the authProvider.checkError() method\n * and an error from the dataProvider. If the authProvider rejects the call,\n * the hook logs the user out and shows a logged out notification.\n *\n * Used in the useDataProvider hook to check for access denied responses\n * (e.g. 401 or 403 responses) and trigger a logout.\n *\n * @see useLogout\n * @see useDataProvider\n *\n * @returns {Function} logoutIfAccessDenied callback\n *\n * @example\n *\n * import { useLogoutIfAccessDenied, useNotify, DataProviderContext } from 'react-admin';\n *\n * const FetchRestrictedResource = () => {\n *     const dataProvider = useContext(DataProviderContext);\n *     const logoutIfAccessDenied = useLogoutIfAccessDenied();\n *     const notify = useNotify()\n *     useEffect(() => {\n *         dataProvider.getOne('secret', { id: 123 })\n *             .catch(error => {\n *                  logoutIfAccessDenied(error);\n *                  notify('server error',  { type: 'error' });\n *              })\n *     }, []);\n *     // ...\n * }\n */\nvar useLogoutIfAccessDenied = function () {\n  var authProvider = useAuthProvider();\n  var logout = useLogout();\n  var notify = useNotify();\n  var navigate = useNavigate();\n  var logoutIfAccessDenied = useCallback(function (error, disableNotification) {\n    return authProvider.checkError(error).then(function () {\n      return false;\n    }).catch(function (e) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var logoutUser, redirectTo, shouldNotify;\n        var _a;\n        return __generator(this, function (_b) {\n          logoutUser = (_a = e === null || e === void 0 ? void 0 : e.logoutUser) !== null && _a !== void 0 ? _a : true;\n          //manual debounce\n          if (timer) {\n            // side effects already triggered in this tick, exit\n            return [2 /*return*/, true];\n          }\n          timer = setTimeout(function () {\n            timer = undefined;\n          }, 0);\n          redirectTo = e && e.redirectTo != null ? e.redirectTo : error && error.redirectTo ? error.redirectTo : undefined;\n          shouldNotify = !(disableNotification || e && e.message === false || error && error.message === false || (redirectTo === null || redirectTo === void 0 ? void 0 : redirectTo.startsWith('http')));\n          if (shouldNotify) {\n            // notify only if not yet logged out\n            authProvider.checkAuth({}).then(function () {\n              if (logoutUser) {\n                notify(getErrorMessage(e, 'ra.notification.logged_out'), {\n                  type: 'error'\n                });\n              } else {\n                notify(getErrorMessage(e, 'ra.notification.not_authorized'), {\n                  type: 'error'\n                });\n              }\n            }).catch(function () {});\n          }\n          if (logoutUser) {\n            logout({}, redirectTo);\n          } else {\n            if (redirectTo.startsWith('http')) {\n              // absolute link (e.g. https://my.oidc.server/login)\n              window.location.href = redirectTo;\n            } else {\n              // internal location\n              navigate(redirectTo);\n            }\n          }\n          return [2 /*return*/, true];\n        });\n      });\n    });\n  }, [authProvider, logout, notify, navigate]);\n  return authProvider ? logoutIfAccessDenied : logoutIfAccessDeniedWithoutProvider;\n};\nvar logoutIfAccessDeniedWithoutProvider = function () {\n  return Promise.resolve(false);\n};\nvar getErrorMessage = function (error, defaultMessage) {\n  return typeof error === 'string' ? error : typeof error === 'undefined' || !error.message ? defaultMessage : error.message;\n};\nexport default useLogoutIfAccessDenied;","map":{"version":3,"mappings":"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","names":["useCallback","useAuthProvider","useLogout","useNotify","useNavigate","timer","useLogoutIfAccessDenied","authProvider","logout","notify","navigate","logoutIfAccessDenied","error","disableNotification","checkError","then","catch","e","logoutUser","setTimeout","undefined","redirectTo","shouldNotify","message","startsWith","checkAuth","getErrorMessage","type","window","location","href","logoutIfAccessDeniedWithoutProvider","resolve","defaultMessage"],"sources":["/Users/paigedeveau/Desktop/se-diva-docs-frontend/bwmdn-admin-portal/node_modules/ra-core/src/auth/useLogoutIfAccessDenied.ts"],"sourcesContent":["import { useCallback } from 'react';\n\nimport useAuthProvider from './useAuthProvider';\nimport useLogout from './useLogout';\nimport { useNotify } from '../notification';\nimport { useNavigate } from 'react-router';\n\nlet timer;\n\n/**\n * Returns a callback used to call the authProvider.checkError() method\n * and an error from the dataProvider. If the authProvider rejects the call,\n * the hook logs the user out and shows a logged out notification.\n *\n * Used in the useDataProvider hook to check for access denied responses\n * (e.g. 401 or 403 responses) and trigger a logout.\n *\n * @see useLogout\n * @see useDataProvider\n *\n * @returns {Function} logoutIfAccessDenied callback\n *\n * @example\n *\n * import { useLogoutIfAccessDenied, useNotify, DataProviderContext } from 'react-admin';\n *\n * const FetchRestrictedResource = () => {\n *     const dataProvider = useContext(DataProviderContext);\n *     const logoutIfAccessDenied = useLogoutIfAccessDenied();\n *     const notify = useNotify()\n *     useEffect(() => {\n *         dataProvider.getOne('secret', { id: 123 })\n *             .catch(error => {\n *                  logoutIfAccessDenied(error);\n *                  notify('server error',  { type: 'error' });\n *              })\n *     }, []);\n *     // ...\n * }\n */\nconst useLogoutIfAccessDenied = (): LogoutIfAccessDenied => {\n    const authProvider = useAuthProvider();\n    const logout = useLogout();\n    const notify = useNotify();\n    const navigate = useNavigate();\n    const logoutIfAccessDenied = useCallback(\n        (error?: any, disableNotification?: boolean) =>\n            authProvider\n                .checkError(error)\n                .then(() => false)\n                .catch(async e => {\n                    const logoutUser = e?.logoutUser ?? true;\n\n                    //manual debounce\n                    if (timer) {\n                        // side effects already triggered in this tick, exit\n                        return true;\n                    }\n                    timer = setTimeout(() => {\n                        timer = undefined;\n                    }, 0);\n\n                    const redirectTo =\n                        e && e.redirectTo != null\n                            ? e.redirectTo\n                            : error && error.redirectTo\n                            ? error.redirectTo\n                            : undefined;\n\n                    const shouldNotify = !(\n                        disableNotification ||\n                        (e && e.message === false) ||\n                        (error && error.message === false) ||\n                        redirectTo?.startsWith('http')\n                    );\n                    if (shouldNotify) {\n                        // notify only if not yet logged out\n                        authProvider\n                            .checkAuth({})\n                            .then(() => {\n                                if (logoutUser) {\n                                    notify(\n                                        getErrorMessage(\n                                            e,\n                                            'ra.notification.logged_out'\n                                        ),\n                                        { type: 'error' }\n                                    );\n                                } else {\n                                    notify(\n                                        getErrorMessage(\n                                            e,\n                                            'ra.notification.not_authorized'\n                                        ),\n                                        { type: 'error' }\n                                    );\n                                }\n                            })\n                            .catch(() => {});\n                    }\n\n                    if (logoutUser) {\n                        logout({}, redirectTo);\n                    } else {\n                        if (redirectTo.startsWith('http')) {\n                            // absolute link (e.g. https://my.oidc.server/login)\n                            window.location.href = redirectTo;\n                        } else {\n                            // internal location\n                            navigate(redirectTo);\n                        }\n                    }\n\n                    return true;\n                }),\n        [authProvider, logout, notify, navigate]\n    );\n    return authProvider\n        ? logoutIfAccessDenied\n        : logoutIfAccessDeniedWithoutProvider;\n};\n\nconst logoutIfAccessDeniedWithoutProvider = () => Promise.resolve(false);\n\n/**\n * Call the authProvider.authError() method, using the error passed as argument.\n * If the authProvider rejects the call, logs the user out and shows a logged out notification.\n *\n * @param {Error} error An Error object (usually returned by the dataProvider)\n * @param {boolean} disableNotification Avoid showing a notification after the user is logged out. false by default.\n *\n * @return {Promise} Resolved to true if there was a logout, false otherwise\n */\ntype LogoutIfAccessDenied = (\n    error?: any,\n    /** @deprecated to disable the notification, authProvider.checkAuth() should return an object with an error property set to true */\n    disableNotification?: boolean\n) => Promise<boolean>;\n\nconst getErrorMessage = (error, defaultMessage) =>\n    typeof error === 'string'\n        ? error\n        : typeof error === 'undefined' || !error.message\n        ? defaultMessage\n        : error.message;\n\nexport default useLogoutIfAccessDenied;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}