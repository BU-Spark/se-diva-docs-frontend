{"ast":null,"code":"import { useEffect } from 'react';\nimport { useCheckAuth } from './useCheckAuth';\nimport { useSafeSetState } from '../util/hooks';\nvar emptyParams = {};\n/**\n * Hook for getting the authentication status\n *\n * Calls the authProvider.checkAuth() method asynchronously.\n *\n * The return value updates according to the authProvider request state:\n *\n * - isLoading: true just after mount, while the authProvider is being called. false once the authProvider has answered.\n * - authenticated: true while loading. then true or false depending on the authProvider response.\n *\n * To avoid rendering a component and force waiting for the authProvider response, use the useAuthState() hook\n * instead of the useAuthenticated() hook.\n *\n * You can render different content depending on the authenticated status.\n *\n * @see useAuthenticated()\n *\n * @param {Object} params Any params you want to pass to the authProvider\n *\n * @param {Boolean} logoutOnFailure: Optional. Whether the user should be logged out if the authProvider fails to authenticate them. False by default.\n *\n * @returns The current auth check state. Destructure as { authenticated, error, isLoading }.\n *\n * @example\n * import { useAuthState, Loading } from 'react-admin';\n *\n * const MyPage = () => {\n *     const { isLoading, authenticated } = useAuthState();\n *     if (isLoading) {\n *         return <Loading />;\n *     }\n *     if (authenticated) {\n *        return <AuthenticatedContent />;\n *     }\n *     return <AnonymousContent />;\n * };\n */\nvar useAuthState = function (params, logoutOnFailure) {\n  if (params === void 0) {\n    params = emptyParams;\n  }\n  if (logoutOnFailure === void 0) {\n    logoutOnFailure = false;\n  }\n  var _a = useSafeSetState({\n      isLoading: true,\n      authenticated: true // optimistic\n    }),\n    state = _a[0],\n    setState = _a[1];\n  var checkAuth = useCheckAuth();\n  useEffect(function () {\n    checkAuth(params, logoutOnFailure).then(function () {\n      return setState({\n        isLoading: false,\n        authenticated: true\n      });\n    }).catch(function () {\n      return setState({\n        isLoading: false,\n        authenticated: false\n      });\n    });\n  }, [checkAuth, params, logoutOnFailure, setState]);\n  return state;\n};\nexport default useAuthState;","map":{"version":3,"mappings":"AAAA,SAASA,SAAS,QAAQ,OAAO;AAEjC,SAASC,YAAY,QAAQ,gBAAgB;AAC7C,SAASC,eAAe,QAAQ,eAAe;AAO/C,IAAMC,WAAW,GAAG,EAAE;AAEtB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA,IAAMC,YAAY,GAAG,UACjBC,MAAyB,EACzBC,eAAgC;EADhC;IAAAD,oBAAyB;EAAA;EACzB;IAAAC,uBAAgC;EAAA;EAE1B,SAAoBJ,eAAe,CAAC;MACtCK,SAAS,EAAE,IAAI;MACfC,aAAa,EAAE,IAAI,CAAE;KACxB,CAAC;IAHKC,KAAK;IAAEC,QAAQ,QAGpB;EACF,IAAMC,SAAS,GAAGV,YAAY,EAAE;EAChCD,SAAS,CAAC;IACNW,SAAS,CAACN,MAAM,EAAEC,eAAe,CAAC,CAC7BM,IAAI,CAAC;MAAM,eAAQ,CAAC;QAAEL,SAAS,EAAE,KAAK;QAAEC,aAAa,EAAE;MAAI,CAAE,CAAC;IAAnD,CAAmD,CAAC,CAC/DK,KAAK,CAAC;MAAM,eAAQ,CAAC;QAAEN,SAAS,EAAE,KAAK;QAAEC,aAAa,EAAE;MAAK,CAAE,CAAC;IAApD,CAAoD,CAAC;EAC1E,CAAC,EAAE,CAACG,SAAS,EAAEN,MAAM,EAAEC,eAAe,EAAEI,QAAQ,CAAC,CAAC;EAClD,OAAOD,KAAK;AAChB,CAAC;AAED,eAAeL,YAAY","names":["useEffect","useCheckAuth","useSafeSetState","emptyParams","useAuthState","params","logoutOnFailure","isLoading","authenticated","state","setState","checkAuth","then","catch"],"sourceRoot":"","sources":["../../../src/auth/useAuthState.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}