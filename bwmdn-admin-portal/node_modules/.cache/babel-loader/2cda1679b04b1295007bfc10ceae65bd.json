{"ast":null,"code":"import React, { Children } from 'react';\nimport PropTypes from 'prop-types';\nimport { ChoicesContextProvider, useReferenceInputController, ResourceContextProvider } from 'ra-core';\nimport { AutocompleteInput } from './AutocompleteInput';\n/**\n * An Input component for choosing a reference record. Useful for foreign keys.\n *\n * This component fetches the possible values in the reference resource\n * (using `dataProvider.getList()`), then renders an `<AutocompleteInput>`,\n * to which it passes the possible choices via a `ChoicesContext`.\n *\n * You can pass a child select component to customize the way the reference\n * selector is displayed (e.g. using `<SelectInput>` or `<RadioButtonGroupInput>`\n * instead of `<AutocompleteInput>`).\n *\n * @example // default selector: AutocompleteInput\n * export const CommentEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <ReferenceInput label=\"Post\" source=\"post_id\" reference=\"posts\" />\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * @example // using a SelectInput as selector\n * export const CommentEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <ReferenceInput label=\"Post\" source=\"post_id\" reference=\"posts\">\n *                 <SelectInput optionText=\"title\" />\n *             </ReferenceInput>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * By default, restricts the possible values to 25. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceInput source=\"post_id\" reference=\"posts\" perPage={100}/>\n *\n * By default, orders the possible values by id desc. You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceInput\n *      source=\"post_id\"\n *      reference=\"posts\"\n *      sort={{ field: 'title', order: 'ASC' }}\n * />\n *\n * Also, you can filter the query used to populate the possible values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceInput\n *      source=\"post_id\"\n *      reference=\"posts\"\n *      filter={{ is_published: true }}\n * />\n *\n * The enclosed component may filter results. ReferenceInput create a ChoicesContext which provides\n * a `setFilters` function. You can call this function to filter the results.\n */\nexport var ReferenceInput = function (props) {\n  var children = props.children,\n    reference = props.reference;\n  var controllerProps = useReferenceInputController(props);\n  if (Children.count(children) !== 1) {\n    throw new Error('<ReferenceInput> only accepts a single child');\n  }\n  return React.createElement(ResourceContextProvider, {\n    value: reference\n  }, React.createElement(ChoicesContextProvider, {\n    value: controllerProps\n  }, children));\n};\nReferenceInput.propTypes = {\n  children: PropTypes.element,\n  filter: PropTypes.object,\n  label: PropTypes.string,\n  page: PropTypes.number,\n  perPage: PropTypes.number,\n  record: PropTypes.object,\n  reference: PropTypes.string.isRequired,\n  resource: PropTypes.string,\n  sort: PropTypes.shape({\n    field: PropTypes.string,\n    order: PropTypes.oneOf(['ASC', 'DESC'])\n  }),\n  source: PropTypes.string\n};\nReferenceInput.defaultProps = {\n  filter: {},\n  page: 1,\n  perPage: 25,\n  sort: {\n    field: 'id',\n    order: 'DESC'\n  },\n  children: React.createElement(AutocompleteInput, null)\n};","map":{"version":3,"mappings":"AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAsB,OAAO;AACrD,OAAOC,SAAS,MAAM,YAAY;AAClC,SACIC,sBAAsB,EACtBC,2BAA2B,EAE3BC,uBAAuB,QAEpB,SAAS;AAEhB,SAASC,iBAAiB,QAAQ,qBAAqB;AAEvD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4DA,OAAO,IAAMC,cAAc,GAAG,UAACC,KAA0B;EAC7C,YAAQ,GAAgBA,KAAK,SAArB;IAAEC,SAAS,GAAKD,KAAK,UAAV;EAE3B,IAAME,eAAe,GAAGN,2BAA2B,CAACI,KAAK,CAAC;EAE1D,IAAIP,QAAQ,CAACU,KAAK,CAACC,QAAQ,CAAC,KAAK,CAAC,EAAE;IAChC,MAAM,IAAIC,KAAK,CAAC,8CAA8C,CAAC;;EAGnE,OACIb,oBAACK,uBAAuB;IAACS,KAAK,EAAEL;EAAS,GACrCT,oBAACG,sBAAsB;IAACW,KAAK,EAAEJ;EAAe,GACzCE,QAAQ,CACY,CACH;AAElC,CAAC;AAEDL,cAAc,CAACQ,SAAS,GAAG;EACvBH,QAAQ,EAAEV,SAAS,CAACc,OAAO;EAC3BC,MAAM,EAAEf,SAAS,CAACgB,MAAM;EACxBC,KAAK,EAAEjB,SAAS,CAACkB,MAAM;EACvBC,IAAI,EAAEnB,SAAS,CAACoB,MAAM;EACtBC,OAAO,EAAErB,SAAS,CAACoB,MAAM;EACzBE,MAAM,EAAEtB,SAAS,CAACgB,MAAM;EACxBT,SAAS,EAAEP,SAAS,CAACkB,MAAM,CAACK,UAAU;EACtCC,QAAQ,EAAExB,SAAS,CAACkB,MAAM;EAC1BO,IAAI,EAAEzB,SAAS,CAAC0B,KAAK,CAAC;IAClBC,KAAK,EAAE3B,SAAS,CAACkB,MAAM;IACvBU,KAAK,EAAE5B,SAAS,CAAC6B,KAAK,CAAC,CAAC,KAAK,EAAE,MAAM,CAAC;GACzC,CAAC;EACFC,MAAM,EAAE9B,SAAS,CAACkB;CACrB;AAEDb,cAAc,CAAC0B,YAAY,GAAG;EAC1BhB,MAAM,EAAE,EAAE;EACVI,IAAI,EAAE,CAAC;EACPE,OAAO,EAAE,EAAE;EACXI,IAAI,EAAE;IAAEE,KAAK,EAAE,IAAI;IAAEC,KAAK,EAAE;EAAM,CAAE;EACpClB,QAAQ,EAAEZ,oBAACM,iBAAiB;CAC/B","names":["React","Children","PropTypes","ChoicesContextProvider","useReferenceInputController","ResourceContextProvider","AutocompleteInput","ReferenceInput","props","reference","controllerProps","count","children","Error","value","propTypes","element","filter","object","label","string","page","number","perPage","record","isRequired","resource","sort","shape","field","order","oneOf","source","defaultProps"],"sourceRoot":"","sources":["../../../src/input/ReferenceInput.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}