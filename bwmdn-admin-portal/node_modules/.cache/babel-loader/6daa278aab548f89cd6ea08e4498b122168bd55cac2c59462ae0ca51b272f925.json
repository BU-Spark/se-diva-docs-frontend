{"ast":null,"code":"/**\n * i18nProvider types\n */\nexport var I18N_TRANSLATE = 'I18N_TRANSLATE';\nexport var I18N_CHANGE_LOCALE = 'I18N_CHANGE_LOCALE';","map":{"version":3,"mappings":"AA4BA;;;AAIA,OAAO,IAAMA,cAAc,GAAG,gBAAgB;AAC9C,OAAO,IAAMC,kBAAkB,GAAG,oBAAoB","names":["I18N_TRANSLATE","I18N_CHANGE_LOCALE"],"sources":["/Users/paigedeveau/Desktop/se-diva-docs-frontend/bwmdn-admin-portal/node_modules/ra-core/src/types.ts"],"sourcesContent":["import { ReactNode, ReactElement, ComponentType } from 'react';\n\nimport { WithPermissionsChildrenParams } from './auth/WithPermissions';\nimport { AuthActionType } from './auth/types';\n\n/**\n * data types\n */\n\nexport type Identifier = string | number;\n\nexport interface RaRecord {\n    id: Identifier;\n    [key: string]: any;\n}\n\nexport interface SortPayload {\n    field: string;\n    order: string;\n}\nexport interface FilterPayload {\n    [k: string]: any;\n}\nexport interface PaginationPayload {\n    page: number;\n    perPage: number;\n}\nexport type ValidUntil = Date;\n/**\n * i18nProvider types\n */\n\nexport const I18N_TRANSLATE = 'I18N_TRANSLATE';\nexport const I18N_CHANGE_LOCALE = 'I18N_CHANGE_LOCALE';\n\nexport type Translate = (key: string, options?: any) => string;\n\nexport type Locale = {\n    locale: string;\n    name: string;\n};\n\nexport type I18nProvider = {\n    translate: Translate;\n    changeLocale: (locale: string, options?: any) => Promise<void>;\n    getLocale: () => string;\n    getLocales?: () => Locale[];\n    [key: string]: any;\n};\n\nexport interface UserIdentity {\n    id: Identifier;\n    fullName?: string;\n    avatar?: string;\n    [key: string]: any;\n}\n\n/**\n * authProvider types\n */\nexport type AuthProvider = {\n    login: (\n        params: any\n    ) => Promise<{ redirectTo?: string | boolean } | void | any>;\n    logout: (params: any) => Promise<void | false | string>;\n    checkAuth: (params: any) => Promise<void>;\n    checkError: (error: any) => Promise<void>;\n    getIdentity?: () => Promise<UserIdentity>;\n    getPermissions: (params: any) => Promise<any>;\n    handleCallback?: () => Promise<AuthRedirectResult | void | any>;\n    [key: string]: any;\n};\n\nexport type AuthRedirectResult = {\n    redirectTo?: string | false;\n    logoutOnFailure?: boolean;\n};\n\nexport type LegacyAuthProvider = (\n    type: AuthActionType,\n    params?: any\n) => Promise<any>;\n\n/**\n * dataProvider types\n */\n\nexport type DataProvider<ResourceType extends string = string> = {\n    getList: <RecordType extends RaRecord = any>(\n        resource: ResourceType,\n        params: GetListParams\n    ) => Promise<GetListResult<RecordType>>;\n\n    getOne: <RecordType extends RaRecord = any>(\n        resource: ResourceType,\n        params: GetOneParams\n    ) => Promise<GetOneResult<RecordType>>;\n\n    getMany: <RecordType extends RaRecord = any>(\n        resource: ResourceType,\n        params: GetManyParams\n    ) => Promise<GetManyResult<RecordType>>;\n\n    getManyReference: <RecordType extends RaRecord = any>(\n        resource: ResourceType,\n        params: GetManyReferenceParams\n    ) => Promise<GetManyReferenceResult<RecordType>>;\n\n    update: <RecordType extends RaRecord = any>(\n        resource: ResourceType,\n        params: UpdateParams\n    ) => Promise<UpdateResult<RecordType>>;\n\n    updateMany: <RecordType extends RaRecord = any>(\n        resource: ResourceType,\n        params: UpdateManyParams\n    ) => Promise<UpdateManyResult<RecordType>>;\n\n    create: <RecordType extends RaRecord = any>(\n        resource: ResourceType,\n        params: CreateParams\n    ) => Promise<CreateResult<RecordType>>;\n\n    delete: <RecordType extends RaRecord = any>(\n        resource: ResourceType,\n        params: DeleteParams<RecordType>\n    ) => Promise<DeleteResult<RecordType>>;\n\n    deleteMany: <RecordType extends RaRecord = any>(\n        resource: ResourceType,\n        params: DeleteManyParams<RecordType>\n    ) => Promise<DeleteManyResult<RecordType>>;\n\n    [key: string]: any;\n};\n\nexport interface GetListParams {\n    pagination: PaginationPayload;\n    sort: SortPayload;\n    filter: any;\n    meta?: any;\n}\nexport interface GetListResult<RecordType extends RaRecord = any> {\n    data: RecordType[];\n    total?: number;\n    pageInfo?: {\n        hasNextPage?: boolean;\n        hasPreviousPage?: boolean;\n    };\n}\n\nexport interface GetInfiniteListResult<RecordType extends RaRecord = any>\n    extends GetListResult<RecordType> {\n    pageParam?: number;\n}\nexport interface GetOneParams<RecordType extends RaRecord = any> {\n    id: RecordType['id'];\n    meta?: any;\n}\nexport interface GetOneResult<RecordType extends RaRecord = any> {\n    data: RecordType;\n}\n\nexport interface GetManyParams {\n    ids: Identifier[];\n    meta?: any;\n}\nexport interface GetManyResult<RecordType extends RaRecord = any> {\n    data: RecordType[];\n}\n\nexport interface GetManyReferenceParams {\n    target: string;\n    id: Identifier;\n    pagination: PaginationPayload;\n    sort: SortPayload;\n    filter: any;\n    meta?: any;\n}\nexport interface GetManyReferenceResult<RecordType extends RaRecord = any> {\n    data: RecordType[];\n    total?: number;\n    pageInfo?: {\n        hasNextPage?: boolean;\n        hasPreviousPage?: boolean;\n    };\n}\n\nexport interface UpdateParams<T = any> {\n    id: Identifier;\n    data: Partial<T>;\n    previousData: T;\n    meta?: any;\n}\nexport interface UpdateResult<RecordType extends RaRecord = any> {\n    data: RecordType;\n}\n\nexport interface UpdateManyParams<T = any> {\n    ids: Identifier[];\n    data: T;\n    meta?: any;\n}\nexport interface UpdateManyResult<RecordType extends RaRecord = any> {\n    data?: RecordType['id'][];\n}\n\nexport interface CreateParams<T = any> {\n    data: T;\n    meta?: any;\n}\nexport interface CreateResult<RecordType extends RaRecord = any> {\n    data: RecordType;\n}\n\nexport interface DeleteParams<RecordType extends RaRecord = any> {\n    id: RecordType['id'];\n    previousData?: RecordType;\n    meta?: any;\n}\nexport interface DeleteResult<RecordType extends RaRecord = any> {\n    data: RecordType;\n}\n\nexport interface DeleteManyParams<RecordType extends RaRecord = any> {\n    ids: RecordType['id'][];\n    meta?: any;\n}\nexport interface DeleteManyResult<RecordType extends RaRecord = any> {\n    data?: RecordType['id'][];\n}\n\nexport type DataProviderResult<RecordType extends RaRecord = any> =\n    | CreateResult<RecordType>\n    | DeleteResult<RecordType>\n    | DeleteManyResult\n    | GetListResult<RecordType>\n    | GetManyResult<RecordType>\n    | GetManyReferenceResult<RecordType>\n    | GetOneResult<RecordType>\n    | UpdateResult<RecordType>\n    | UpdateManyResult;\n\nexport type MutationMode = 'pessimistic' | 'optimistic' | 'undoable';\nexport type OnSuccess = (\n    response?: any,\n    variables?: any,\n    context?: any\n) => void;\nexport type onError = (error?: any, variables?: any, context?: any) => void;\nexport type TransformData = (\n    data: any,\n    options?: { previousData: any }\n) => any | Promise<any>;\n\nexport interface UseDataProviderOptions {\n    action?: string;\n    fetch?: string;\n    meta?: object;\n    mutationMode?: MutationMode;\n    onSuccess?: OnSuccess;\n    onError?: onError;\n    enabled?: boolean;\n}\n\nexport type LegacyDataProvider = (\n    type: string,\n    resource: string,\n    params: any\n) => Promise<any>;\n\nexport type RecordToStringFunction = (record: any) => string;\n\nexport interface ResourceDefinition {\n    readonly name: string;\n    readonly options?: any;\n    readonly hasList?: boolean;\n    readonly hasEdit?: boolean;\n    readonly hasShow?: boolean;\n    readonly hasCreate?: boolean;\n    readonly icon?: any;\n    readonly recordRepresentation?:\n        | ReactElement\n        | RecordToStringFunction\n        | string;\n}\n\n/**\n * Misc types\n */\n\nexport type Dispatch<T> = T extends (...args: infer A) => any\n    ? (...args: A) => void\n    : never;\n\nexport type ResourceElement = ReactElement<ResourceProps>;\nexport type RenderResourcesFunction = (\n    permissions: any\n) =>\n    | ReactNode // (permissions) => <><Resource /><Resource /><Resource /></>\n    | Promise<ReactNode> // (permissions) => fetch().then(() => <><Resource /><Resource /><Resource /></>)\n    | ResourceElement[] // // (permissions) => [<Resource />, <Resource />, <Resource />]\n    | Promise<ResourceElement[]>; // (permissions) => fetch().then(() => [<Resource />, <Resource />, <Resource />])\nexport type AdminChildren = RenderResourcesFunction | ReactNode;\n\nexport type TitleComponent = string | ReactElement<any>;\nexport type CatchAllComponent = ComponentType<{ title?: TitleComponent }>;\n\nexport type LoginComponent = ComponentType<{}> | ReactElement<any>;\nexport type DashboardComponent = ComponentType<WithPermissionsChildrenParams>;\n\nexport interface CoreLayoutProps {\n    children?: ReactNode;\n    dashboard?: DashboardComponent;\n    menu?: ComponentType<{\n        hasDashboard?: boolean;\n    }>;\n    title?: TitleComponent;\n}\n\nexport type LayoutComponent = ComponentType<CoreLayoutProps>;\nexport type LoadingComponent = ComponentType<{\n    loadingPrimary?: string;\n    loadingSecondary?: string;\n}>;\n\nexport interface ResourceComponentInjectedProps {\n    permissions?: any;\n    resource?: string;\n    options?: any;\n    hasList?: boolean;\n    hasEdit?: boolean;\n    hasShow?: boolean;\n    hasCreate?: boolean;\n}\n\nexport interface ResourceOptions {\n    label?: string;\n    [key: string]: any;\n}\n\nexport interface ResourceProps {\n    intent?: 'route' | 'registration';\n    name: string;\n    list?: ComponentType<any> | ReactElement;\n    create?: ComponentType<any> | ReactElement;\n    edit?: ComponentType<any> | ReactElement;\n    show?: ComponentType<any> | ReactElement;\n    hasCreate?: boolean;\n    hasEdit?: boolean;\n    hasShow?: boolean;\n    icon?: ComponentType<any>;\n    recordRepresentation?: ReactElement | RecordToStringFunction | string;\n    options?: ResourceOptions;\n    children?: ReactNode;\n}\n\nexport type Exporter = (\n    data: any,\n    fetchRelatedRecords: (\n        data: any,\n        field: string,\n        resource: string\n    ) => Promise<any>,\n    dataProvider: DataProvider,\n    resource?: string\n) => void | Promise<void>;\n\nexport type SetOnSave = (\n    onSave?: (values: object, redirect: any) => void\n) => void;\n\nexport type FormFunctions = {\n    setOnSave?: SetOnSave;\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}