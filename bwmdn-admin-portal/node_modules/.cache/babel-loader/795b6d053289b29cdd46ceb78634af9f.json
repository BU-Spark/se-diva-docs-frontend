{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport Polyglot from 'node-polyglot';\n/**\n * Build a polyglot-based i18nProvider based on a function returning the messages for a locale\n *\n * @example\n *\n * import { Admin, Resource, polyglotI18nProvider } from 'react-admin';\n * import englishMessages from 'ra-language-english';\n * import frenchMessages from 'ra-language-french';\n *\n * const messages = {\n *     fr: frenchMessages,\n *     en: englishMessages,\n * };\n * const i18nProvider = polyglotI18nProvider(\n *     locale => messages[locale],\n *     'en',\n *     [{ locale: 'en', name: 'English' }, { locale: 'fr', name: 'Fran√ßais' }]\n * )\n */\nexport default (function (getMessages, initialLocale, availableLocales, polyglotOptions) {\n  if (initialLocale === void 0) {\n    initialLocale = 'en';\n  }\n  if (availableLocales === void 0) {\n    availableLocales = [{\n      locale: 'en',\n      name: 'English'\n    }];\n  }\n  if (polyglotOptions === void 0) {\n    polyglotOptions = {};\n  }\n  var locale = initialLocale;\n  var messages = getMessages(initialLocale);\n  if (messages instanceof Promise) {\n    throw new Error(\"The i18nProvider returned a Promise for the messages of the default locale (\".concat(initialLocale, \"). Please update your i18nProvider to return the messages of the default locale in a synchronous way.\"));\n  }\n  var availableLocalesFinal, polyglotOptionsFinal;\n  if (Array.isArray(availableLocales)) {\n    // third argument is an array of locales\n    availableLocalesFinal = availableLocales;\n    polyglotOptionsFinal = polyglotOptions;\n  } else {\n    // third argument is the polyglotOptions\n    availableLocalesFinal = [{\n      locale: 'en',\n      name: 'English'\n    }];\n    polyglotOptionsFinal = availableLocales;\n  }\n  var polyglot = new Polyglot(__assign({\n    locale: locale,\n    phrases: __assign({\n      '': ''\n    }, messages)\n  }, polyglotOptionsFinal));\n  var translate = polyglot.t.bind(polyglot);\n  return {\n    translate: function (key, options) {\n      if (options === void 0) {\n        options = {};\n      }\n      return translate(key, options);\n    },\n    changeLocale: function (newLocale) {\n      // We systematically return a Promise for the messages because\n      // getMessages may return a Promise\n      return Promise.resolve(getMessages(newLocale)).then(function (messages) {\n        locale = newLocale;\n        var newPolyglot = new Polyglot(__assign({\n          locale: newLocale,\n          phrases: __assign({\n            '': ''\n          }, messages)\n        }, polyglotOptions));\n        translate = newPolyglot.t.bind(newPolyglot);\n      });\n    },\n    getLocale: function () {\n      return locale;\n    },\n    getLocales: function () {\n      return availableLocalesFinal;\n    }\n  };\n});","map":{"version":3,"mappings":";;;;;;;;;;AAAA,OAAOA,QAAQ,MAAM,eAAe;AAQpC;;;;;;;;;;;;;;;;;;;AAmBA,gBAAe,UACXC,WAAwB,EACxBC,aAA4B,EAC5BC,gBAAsE,EACtEC,eAAyB;EAFzB;IAAAF,oBAA4B;EAAA;EAC5B;IAAAC,oBAAoC;MAAEE,MAAM,EAAE,IAAI;MAAEC,IAAI,EAAE;IAAS,CAAE,CAAC;EAAA;EACtE;IAAAF,oBAAyB;EAAA;EAEzB,IAAIC,MAAM,GAAGH,aAAa;EAC1B,IAAMK,QAAQ,GAAGN,WAAW,CAACC,aAAa,CAAC;EAC3C,IAAIK,QAAQ,YAAYC,OAAO,EAAE;IAC7B,MAAM,IAAIC,KAAK,CACX,sFAA+EP,aAAa,0GAAuG,CACtM;;EAGL,IAAIQ,qBAAqB,EAAEC,oBAAoB;EAC/C,IAAIC,KAAK,CAACC,OAAO,CAACV,gBAAgB,CAAC,EAAE;IACjC;IACAO,qBAAqB,GAAGP,gBAAgB;IACxCQ,oBAAoB,GAAGP,eAAe;GACzC,MAAM;IACH;IACAM,qBAAqB,GAAG,CAAC;MAAEL,MAAM,EAAE,IAAI;MAAEC,IAAI,EAAE;IAAS,CAAE,CAAC;IAC3DK,oBAAoB,GAAGR,gBAAgB;;EAE3C,IAAMW,QAAQ,GAAG,IAAId,QAAQ;IACzBK,MAAM;IACNU,OAAO;MAAI,EAAE,EAAE;IAAE,GAAKR,QAAQ;EAAA,GAC3BI,oBAAoB,EACzB;EACF,IAAIK,SAAS,GAAGF,QAAQ,CAACG,CAAC,CAACC,IAAI,CAACJ,QAAQ,CAAC;EAEzC,OAAO;IACHE,SAAS,EAAE,UAACG,GAAW,EAAEC,OAAiB;MAAjB;QAAAA,YAAiB;MAAA;MAAK,gBAAS,CAACD,GAAG,EAAEC,OAAO,CAAC;IAAvB,CAAuB;IACtEC,YAAY,EAAE,UAACC,SAAiB;MAC5B;MACA;MACA,cAAO,CAACC,OAAO,CAACtB,WAAW,CAACqB,SAAmB,CAAC,CAAC,CAACE,IAAI,CAClD,UAACjB,QAA6B;QAC1BF,MAAM,GAAGiB,SAAS;QAClB,IAAMG,WAAW,GAAG,IAAIzB,QAAQ;UAC5BK,MAAM,EAAEiB,SAAS;UACjBP,OAAO;YAAI,EAAE,EAAE;UAAE,GAAKR,QAAQ;QAAA,GAC3BH,eAAe,EACpB;QACFY,SAAS,GAAGS,WAAW,CAACR,CAAC,CAACC,IAAI,CAACO,WAAW,CAAC;MAC/C,CAAC,CACJ;IAVD,CAUC;IACLC,SAAS,EAAE;MAAM,aAAM;IAAN,CAAM;IACvBC,UAAU,EAAE;MAAM,4BAAqB;IAArB;GACrB;AACL,CAAC","names":["Polyglot","getMessages","initialLocale","availableLocales","polyglotOptions","locale","name","messages","Promise","Error","availableLocalesFinal","polyglotOptionsFinal","Array","isArray","polyglot","phrases","translate","t","bind","key","options","changeLocale","newLocale","resolve","then","newPolyglot","getLocale","getLocales"],"sourceRoot":"","sources":["../../src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}