{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport inflection from 'inflection';\nimport { ShowBase, InferredElement, getElementsFromRecords, useResourceContext, useShowContext } from 'ra-core';\nimport { ShowView } from './ShowView';\nimport { showFieldTypes } from './showFieldTypes';\nexport var ShowGuesser = function (_a) {\n  var id = _a.id,\n    queryOptions = _a.queryOptions,\n    resource = _a.resource,\n    rest = __rest(_a, [\"id\", \"queryOptions\", \"resource\"]);\n  return React.createElement(ShowBase, {\n    id: id,\n    resource: resource,\n    queryOptions: queryOptions\n  }, React.createElement(ShowViewGuesser, __assign({}, rest)));\n};\nvar ShowViewGuesser = function (props) {\n  var resource = useResourceContext(props);\n  var record = useShowContext().record;\n  var _a = useState(null),\n    child = _a[0],\n    setChild = _a[1];\n  useEffect(function () {\n    setChild(null);\n  }, [resource]);\n  useEffect(function () {\n    if (record && !child) {\n      var inferredElements = getElementsFromRecords([record], showFieldTypes);\n      var inferredChild = new InferredElement(showFieldTypes.show, null, inferredElements);\n      setChild(inferredChild.getElement());\n      if (process.env.NODE_ENV === 'production') return;\n      var representation = inferredChild.getRepresentation();\n      var components = ['Show'].concat(Array.from(new Set(Array.from(representation.matchAll(/<([^/\\s>]+)/g)).map(function (match) {\n        return match[1];\n      }).filter(function (component) {\n        return component !== 'span';\n      })))).sort();\n      // eslint-disable-next-line no-console\n      console.log(\"Guessed Show:\\n\\nimport { \".concat(components.join(', '), \" } from 'react-admin';\\n\\nexport const \").concat(inflection.capitalize(inflection.singularize(resource)), \"Show = () => (\\n    <Show>\\n\").concat(inferredChild.getRepresentation(), \"\\n    </Show>\\n);\"));\n    }\n  }, [record, child, resource]);\n  return React.createElement(ShowView, __assign({}, props), child);\n};\nShowViewGuesser.propTypes = ShowView.propTypes;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,UAAU,MAAM,YAAY;AACnC,SACIC,QAAQ,EACRC,eAAe,EACfC,sBAAsB,EACtBC,kBAAkB,EAClBC,cAAc,QACX,SAAS;AAGhB,SAASC,QAAQ,QAAQ,YAAY;AACrC,SAASC,cAAc,QAAQ,kBAAkB;AAEjD,OAAO,IAAMC,WAAW,GAAG,UAACC,EAKE;EAJ1B,MAAE;IACFC,YAAY;IACZC,QAAQ;IACLC,IAAI,cAJiB,kCAK3B,CADU;EACwB,OAC/Bf,oBAACI,QAAQ;IAACY,EAAE,EAAEA,EAAE;IAAEF,QAAQ,EAAEA,QAAQ;IAAED,YAAY,EAAEA;EAAY,GAC5Db,oBAACiB,eAAe,eAAKF,IAAI,EAAI,CACtB;CACd;AAED,IAAME,eAAe,GAAG,eAAK;EACzB,IAAMH,QAAQ,GAAGP,kBAAkB,CAACW,KAAK,CAAC;EAClC,UAAM,GAAKV,cAAc,EAAE,OAArB;EACR,SAAoBN,QAAQ,CAAC,IAAI,CAAC;IAAjCiB,KAAK;IAAEC,QAAQ,QAAkB;EAExCnB,SAAS,CAAC;IACNmB,QAAQ,CAAC,IAAI,CAAC;EAClB,CAAC,EAAE,CAACN,QAAQ,CAAC,CAAC;EAEdb,SAAS,CAAC;IACN,IAAIoB,MAAM,IAAI,CAACF,KAAK,EAAE;MAClB,IAAMG,gBAAgB,GAAGhB,sBAAsB,CAC3C,CAACe,MAAM,CAAC,EACRX,cAAc,CACjB;MACD,IAAMa,aAAa,GAAG,IAAIlB,eAAe,CACrCK,cAAc,CAACc,IAAI,EACnB,IAAI,EACJF,gBAAgB,CACnB;MACDF,QAAQ,CAACG,aAAa,CAACE,UAAU,EAAE,CAAC;MAEpC,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MAE3C,IAAMC,cAAc,GAAGN,aAAa,CAACO,iBAAiB,EAAE;MACxD,IAAMC,UAAU,GAAG,CAAC,MAAM,CAAC,CACtBC,MAAM,CACHC,KAAK,CAACC,IAAI,CACN,IAAIC,GAAG,CACHF,KAAK,CAACC,IAAI,CAACL,cAAc,CAACO,QAAQ,CAAC,cAAc,CAAC,CAAC,CAC9CC,GAAG,CAAC,eAAK;QAAI,YAAK,CAAC,CAAC,CAAC;MAAR,CAAQ,CAAC,CACtBC,MAAM,CAAC,mBAAS;QAAI,gBAAS,KAAK,MAAM;MAApB,CAAoB,CAAC,CACjD,CACJ,CACJ,CACAC,IAAI,EAAE;MAEX;MACAC,OAAO,CAACC,GAAG,CACP,oCAELV,UAAU,CAACW,IAAI,CAAC,IAAI,CAAC,oDAEjBvC,UAAU,CAACwC,UAAU,CAChBxC,UAAU,CAACyC,WAAW,CAAC9B,QAAQ,CAAC,CACnC,yCAEfS,aAAa,CAACO,iBAAiB,EAAE,sBAEhC,CACU;;EAET,CAAC,EAAE,CAACT,MAAM,EAAEF,KAAK,EAAEL,QAAQ,CAAC,CAAC;EAE7B,OAAOd,oBAACS,QAAQ,eAAKS,KAAK,GAAGC,KAAK,CAAY;AAClD,CAAC;AAEDF,eAAe,CAAC4B,SAAS,GAAGpC,QAAQ,CAACoC,SAAS","names":["React","useEffect","useState","inflection","ShowBase","InferredElement","getElementsFromRecords","useResourceContext","useShowContext","ShowView","showFieldTypes","ShowGuesser","_a","queryOptions","resource","rest","id","ShowViewGuesser","props","child","setChild","record","inferredElements","inferredChild","show","getElement","process","env","NODE_ENV","representation","getRepresentation","components","concat","Array","from","Set","matchAll","map","filter","sort","console","log","join","capitalize","singularize","propTypes"],"sources":["/Users/paigedeveau/Desktop/se-diva-docs-frontend/bwmdn-admin-portal/node_modules/ra-ui-materialui/src/detail/ShowGuesser.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport inflection from 'inflection';\nimport {\n    ShowBase,\n    InferredElement,\n    getElementsFromRecords,\n    useResourceContext,\n    useShowContext,\n} from 'ra-core';\n\nimport { ShowProps } from '../types';\nimport { ShowView } from './ShowView';\nimport { showFieldTypes } from './showFieldTypes';\n\nexport const ShowGuesser = ({\n    id,\n    queryOptions,\n    resource,\n    ...rest\n}: Omit<ShowProps, 'children'>) => (\n    <ShowBase id={id} resource={resource} queryOptions={queryOptions}>\n        <ShowViewGuesser {...rest} />\n    </ShowBase>\n);\n\nconst ShowViewGuesser = props => {\n    const resource = useResourceContext(props);\n    const { record } = useShowContext();\n    const [child, setChild] = useState(null);\n\n    useEffect(() => {\n        setChild(null);\n    }, [resource]);\n\n    useEffect(() => {\n        if (record && !child) {\n            const inferredElements = getElementsFromRecords(\n                [record],\n                showFieldTypes\n            );\n            const inferredChild = new InferredElement(\n                showFieldTypes.show,\n                null,\n                inferredElements\n            );\n            setChild(inferredChild.getElement());\n\n            if (process.env.NODE_ENV === 'production') return;\n\n            const representation = inferredChild.getRepresentation();\n            const components = ['Show']\n                .concat(\n                    Array.from(\n                        new Set(\n                            Array.from(representation.matchAll(/<([^/\\s>]+)/g))\n                                .map(match => match[1])\n                                .filter(component => component !== 'span')\n                        )\n                    )\n                )\n                .sort();\n\n            // eslint-disable-next-line no-console\n            console.log(\n                `Guessed Show:\n\nimport { ${components.join(', ')} } from 'react-admin';\n\nexport const ${inflection.capitalize(\n                    inflection.singularize(resource)\n                )}Show = () => (\n    <Show>\n${inferredChild.getRepresentation()}\n    </Show>\n);`\n            );\n        }\n    }, [record, child, resource]);\n\n    return <ShowView {...props}>{child}</ShowView>;\n};\n\nShowViewGuesser.propTypes = ShowView.propTypes;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}