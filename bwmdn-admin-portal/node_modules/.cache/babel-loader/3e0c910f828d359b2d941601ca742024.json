{"ast":null,"code":"import { useEffect, useRef } from 'react';\nimport { useLocation } from 'react-router';\n/**\n * A hook to use inside the component passed to FallbackComponent\n * of react-error-boundary. It resets the error boundary state whenever\n * the location changes\n * @param {Function} resetErrorBoundary\n */\nexport var useResetErrorBoundaryOnLocationChange = function (resetErrorBoundary) {\n  var pathname = useLocation().pathname;\n  var originalPathname = useRef(pathname);\n  useEffect(function () {\n    if (pathname !== originalPathname.current) {\n      resetErrorBoundary();\n    }\n  }, [pathname, resetErrorBoundary]);\n};","map":{"version":3,"mappings":"AAAA,SAASA,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACzC,SAASC,WAAW,QAAQ,cAAc;AAE1C;;;;;;AAMA,OAAO,IAAMC,qCAAqC,GAAG,UACjDC,kBAA8B;EAEtB,YAAQ,GAAKF,WAAW,EAAE,SAAlB;EAChB,IAAMG,gBAAgB,GAAGJ,MAAM,CAACK,QAAQ,CAAC;EAEzCN,SAAS,CAAC;IACN,IAAIM,QAAQ,KAAKD,gBAAgB,CAACE,OAAO,EAAE;MACvCH,kBAAkB,EAAE;;EAE5B,CAAC,EAAE,CAACE,QAAQ,EAAEF,kBAAkB,CAAC,CAAC;AACtC,CAAC","names":["useEffect","useRef","useLocation","useResetErrorBoundaryOnLocationChange","resetErrorBoundary","originalPathname","pathname","current"],"sourceRoot":"","sources":["../../../src/layout/useResetErrorBoundaryOnLocationChange.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}