{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport TextField from '@mui/material/TextField';\nimport { useInput, FieldTitle } from 'ra-core';\nimport { InputHelperText } from './InputHelperText';\nimport { sanitizeInputRestProps } from './sanitizeInputRestProps';\n/**\n * An Input component for a number\n *\n * @example\n * <NumberInput source=\"nb_views\" />\n *\n * You can customize the `step` props (which defaults to \"any\")\n * @example\n * <NumberInput source=\"nb_views\" step={1} />\n *\n */\nexport var NumberInput = function (_a) {\n  var className = _a.className,\n    _b = _a.defaultValue,\n    defaultValue = _b === void 0 ? null : _b,\n    _c = _a.format,\n    format = _c === void 0 ? convertNumberToString : _c,\n    helperText = _a.helperText,\n    label = _a.label,\n    margin = _a.margin,\n    onChange = _a.onChange,\n    onBlur = _a.onBlur,\n    parse = _a.parse,\n    resource = _a.resource,\n    source = _a.source,\n    step = _a.step,\n    min = _a.min,\n    max = _a.max,\n    validate = _a.validate,\n    variant = _a.variant,\n    overrideInputProps = _a.inputProps,\n    rest = __rest(_a, [\"className\", \"defaultValue\", \"format\", \"helperText\", \"label\", \"margin\", \"onChange\", \"onBlur\", \"parse\", \"resource\", \"source\", \"step\", \"min\", \"max\", \"validate\", \"variant\", \"inputProps\"]);\n  var _d = useInput(__assign({\n      defaultValue: defaultValue,\n      onBlur: onBlur,\n      resource: resource,\n      source: source,\n      validate: validate\n    }, rest)),\n    field = _d.field,\n    _e = _d.fieldState,\n    error = _e.error,\n    invalid = _e.invalid,\n    isTouched = _e.isTouched,\n    isSubmitted = _d.formState.isSubmitted,\n    id = _d.id,\n    isRequired = _d.isRequired;\n  var inputProps = __assign(__assign({}, overrideInputProps), {\n    step: step,\n    min: min,\n    max: max\n  });\n  // This is a controlled input that renders directly the string typed by the user.\n  // This string is converted to a number on change, and stored in the form state,\n  // but that number is not not displayed.\n  // This is to allow transitory values like '1.0' that will lead to '1.02'\n  // text typed by the user and displayed in the input, unparsed\n  var _f = React.useState(format(field.value)),\n    value = _f[0],\n    setValue = _f[1];\n  // update the input text when the record changes\n  React.useEffect(function () {\n    var stringValue = format(field.value);\n    setValue(function (value) {\n      return value !== stringValue ? stringValue : value;\n    });\n  }, [field.value, format]); // eslint-disable-line react-hooks/exhaustive-deps\n  // update the input text when the user types in the input\n  var handleChange = function (event) {\n    if (onChange) {\n      onChange(event);\n    }\n    if (typeof event.target === 'undefined' || typeof event.target.value === 'undefined') {\n      return;\n    }\n    var target = event.target;\n    setValue(target.value);\n    var newValue = target.valueAsNumber !== undefined && target.valueAsNumber !== null && !isNaN(target.valueAsNumber) ? parse ? parse(target.valueAsNumber) : target.valueAsNumber : parse ? parse(target.value) : convertStringToNumber(target.value);\n    field.onChange(newValue);\n  };\n  return React.createElement(TextField, __assign({\n    id: id\n  }, field, {\n    // use the locally controlled state instead of the react-hook-form field state\n    value: value,\n    onChange: handleChange,\n    className: clsx('ra-input', \"ra-input-\".concat(source), className),\n    type: \"number\",\n    size: \"small\",\n    variant: variant,\n    error: (isTouched || isSubmitted) && invalid,\n    helperText: React.createElement(InputHelperText, {\n      touched: isTouched || isSubmitted,\n      error: error === null || error === void 0 ? void 0 : error.message,\n      helperText: helperText\n    }),\n    label: React.createElement(FieldTitle, {\n      label: label,\n      source: source,\n      resource: resource,\n      isRequired: isRequired\n    }),\n    margin: margin,\n    inputProps: inputProps\n  }, sanitizeInputRestProps(rest)));\n};\nNumberInput.propTypes = {\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.bool, PropTypes.element]),\n  options: PropTypes.object,\n  resource: PropTypes.string,\n  source: PropTypes.string,\n  step: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nNumberInput.defaultProps = {\n  options: {},\n  step: 'any',\n  textAlign: 'right'\n};\nvar convertStringToNumber = function (value) {\n  if (value == null || value === '') {\n    return null;\n  }\n  var float = parseFloat(value);\n  return isNaN(float) ? 0 : float;\n};\nvar convertNumberToString = function (value) {\n  return value == null || isNaN(value) ? '' : value.toString();\n};","map":{"version":3,"mappings":"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","names":["React","PropTypes","clsx","TextField","useInput","FieldTitle","InputHelperText","sanitizeInputRestProps","NumberInput","_a","_b","defaultValue","_c","format","convertNumberToString","helperText","label","margin","onChange","onBlur","parse","resource","source","step","min","max","validate","variant","overrideInputProps","rest","field","_e","error","invalid","isTouched","isSubmitted","id","isRequired","inputProps","useState","value","setValue","useEffect","stringValue","handleChange","event","target","newValue","valueAsNumber","undefined","isNaN","convertStringToNumber","className","type","size","touched","message","propTypes","oneOfType","string","bool","element","options","object","number","defaultProps","textAlign","float","parseFloat","toString"],"sourceRoot":"","sources":["../../../src/input/NumberInput.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}