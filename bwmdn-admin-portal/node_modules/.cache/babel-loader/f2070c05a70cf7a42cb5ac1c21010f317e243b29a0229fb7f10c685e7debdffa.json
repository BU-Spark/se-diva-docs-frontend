{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport { useRef, useEffect } from 'react';\n/**\n * Debug hook showing which props updated between two renders\n * @example\n *\n * const MyComponent = React.memo(props => {\n *   useWhyDidYouUpdate('MyComponent', props);\n *   return <div...;\n * });\n *\n * @link https://usehooks.com/useWhyDidYouUpdate/\n */\nexport default function useWhyDidYouUpdate(name, props) {\n  // Get a mutable ref object where we can store props ...\n  // ... for comparison next time this hook runs.\n  var previousProps = useRef();\n  useEffect(function () {\n    if (previousProps.current) {\n      // Get all keys from previous and current props\n      var allKeys = Object.keys(__assign(__assign({}, previousProps.current), props));\n      // Use this object to keep track of changed props\n      var changesObj_1 = {};\n      // Iterate through keys\n      allKeys.forEach(function (key) {\n        // If previous is different from current\n        if (previousProps.current[key] !== props[key]) {\n          // Add to changesObj\n          changesObj_1[key] = {\n            from: previousProps.current[key],\n            to: props[key]\n          };\n        }\n      });\n      // If changesObj not empty then output to console\n      if (Object.keys(changesObj_1).length) {\n        console.log('[why-did-you-update]', name, changesObj_1);\n      }\n    }\n    // Finally update previousProps with current props for next hook call\n    previousProps.current = props;\n  });\n}","map":{"version":3,"mappings":";;;;;;;;;;AAAA,SAASA,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAEzC;;;;;;;;;;;AAWA,eAAc,SAAUC,kBAAkB,CAACC,IAAI,EAAEC,KAAK;EAClD;EACA;EACA,IAAMC,aAAa,GAAGL,MAAM,EAAS;EAErCC,SAAS,CAAC;IACN,IAAII,aAAa,CAACC,OAAO,EAAE;MACvB;MACA,IAAMC,OAAO,GAAGC,MAAM,CAACC,IAAI,uBAAMJ,aAAa,CAACC,OAAO,GAAKF,KAAK,EAAG;MACnE;MACA,IAAMM,YAAU,GAAG,EAAE;MACrB;MACAH,OAAO,CAACI,OAAO,CAAC,aAAG;QACf;QACA,IAAIN,aAAa,CAACC,OAAO,CAACM,GAAG,CAAC,KAAKR,KAAK,CAACQ,GAAG,CAAC,EAAE;UAC3C;UACAF,YAAU,CAACE,GAAG,CAAC,GAAG;YACdC,IAAI,EAAER,aAAa,CAACC,OAAO,CAACM,GAAG,CAAC;YAChCE,EAAE,EAAEV,KAAK,CAACQ,GAAG;WAChB;;MAET,CAAC,CAAC;MAEF;MACA,IAAIJ,MAAM,CAACC,IAAI,CAACC,YAAU,CAAC,CAACK,MAAM,EAAE;QAChCC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEd,IAAI,EAAEO,YAAU,CAAC;;;IAI7D;IACAL,aAAa,CAACC,OAAO,GAAGF,KAAK;EACjC,CAAC,CAAC;AACN","names":["useRef","useEffect","useWhyDidYouUpdate","name","props","previousProps","current","allKeys","Object","keys","changesObj_1","forEach","key","from","to","length","console","log"],"sources":["/Users/paigedeveau/Desktop/se-diva-docs-frontend/bwmdn-admin-portal/node_modules/ra-core/src/util/useWhyDidYouUpdate.ts"],"sourcesContent":["import { useRef, useEffect } from 'react';\n\n/**\n * Debug hook showing which props updated between two renders\n * @example\n *\n * const MyComponent = React.memo(props => {\n *   useWhyDidYouUpdate('MyComponent', props);\n *   return <div...;\n * });\n *\n * @link https://usehooks.com/useWhyDidYouUpdate/\n */\nexport default function useWhyDidYouUpdate(name, props) {\n    // Get a mutable ref object where we can store props ...\n    // ... for comparison next time this hook runs.\n    const previousProps = useRef() as any;\n\n    useEffect(() => {\n        if (previousProps.current) {\n            // Get all keys from previous and current props\n            const allKeys = Object.keys({ ...previousProps.current, ...props });\n            // Use this object to keep track of changed props\n            const changesObj = {};\n            // Iterate through keys\n            allKeys.forEach(key => {\n                // If previous is different from current\n                if (previousProps.current[key] !== props[key]) {\n                    // Add to changesObj\n                    changesObj[key] = {\n                        from: previousProps.current[key],\n                        to: props[key],\n                    };\n                }\n            });\n\n            // If changesObj not empty then output to console\n            if (Object.keys(changesObj).length) {\n                console.log('[why-did-you-update]', name, changesObj);\n            }\n        }\n\n        // Finally update previousProps with current props for next hook call\n        previousProps.current = props;\n    });\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}