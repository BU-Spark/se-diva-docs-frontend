{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport Progress from '@mui/material/LinearProgress';\nimport PropTypes from 'prop-types';\nimport { useTimeout } from 'ra-core';\n/**\n * Progress bar formatted to replace an input or a field in a form layout\n *\n * Avoids visual jumps when replaced by value or form input\n *\n * @see ReferenceField\n * @see ReferenceInput\n *\n * @typedef {Object} Props the props you can use\n * @prop {Object} classes CSS class names\n * @prop {string} className CSS class applied to the LinearProgress component\n * @prop {integer} timeout Milliseconds to wait before showing the progress bar. One second by default\n *\n * @param {Props} props\n */\nexport var LinearProgress = function (_a) {\n  var _b = _a.timeout,\n    timeout = _b === void 0 ? 1000 : _b,\n    props = __rest(_a, [\"timeout\"]);\n  var className = props.className,\n    rest = __rest(props, [\"className\"]);\n  var oneSecondHasPassed = useTimeout(timeout);\n  return oneSecondHasPassed ? React.createElement(StyledProgress, __assign({\n    className: className\n  }, rest)) : null;\n};\nLinearProgress.propTypes = {\n  className: PropTypes.string,\n  timeout: PropTypes.number\n};\n// What? TypeScript loses the displayName if we don't set it explicitly\nLinearProgress.displayName = 'LinearProgress';\nvar PREFIX = 'RaLinearProgress';\nvar StyledProgress = styled(Progress, {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var theme = _a.theme;\n  return {\n    margin: \"\".concat(theme.spacing(1), \" 0\"),\n    width: theme.spacing(20)\n  };\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,MAAM,QAAQ,sBAAsB;AAC7C,OAAOC,QAEN,MAAM,8BAA8B;AACrC,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,UAAU,QAAQ,SAAS;AAEpC;;;;;;;;;;;;;;;AAeA,OAAO,IAAMC,cAAc,GAAG,UAACC,EAGT;EAFlB,mBAAc;IAAdC,OAAO,mBAAG,IAAI;IACXC,KAAK,cAFmB,WAG9B,CADW;EAEA,aAAS,GAAcA,KAAK,UAAnB;IAAKC,IAAI,UAAKD,KAAK,EAA9B,aAAsB,CAAF;EAE1B,IAAME,kBAAkB,GAAGN,UAAU,CAACG,OAAO,CAAC;EAE9C,OAAOG,kBAAkB,GACrBV,oBAACW,cAAc;IAACC,SAAS,EAAEA;EAAS,GAAMH,IAAI,EAAI,GAClD,IAAI;AACZ,CAAC;AAEDJ,cAAc,CAACQ,SAAS,GAAG;EACvBD,SAAS,EAAET,SAAS,CAACW,MAAM;EAC3BP,OAAO,EAAEJ,SAAS,CAACY;CACtB;AAED;AACAV,cAAc,CAACW,WAAW,GAAG,gBAAgB;AAM7C,IAAMC,MAAM,GAAG,kBAAkB;AAEjC,IAAMN,cAAc,GAAGV,MAAM,CAACC,QAAQ,EAAE;EACpCgB,IAAI,EAAED,MAAM;EACZE,iBAAiB,EAAE,UAACX,KAAK,EAAEY,MAAM;IAAK,aAAM,CAACC,IAAI;EAAX;CACzC,CAAC,CAAC,UAACf,EAAS;MAAPgB,KAAK;EAAO,OAAC;IACfC,MAAM,EAAE,UAAGD,KAAK,CAACE,OAAO,CAAC,CAAC,CAAC,OAAI;IAC/BC,KAAK,EAAEH,KAAK,CAACE,OAAO,CAAC,EAAE;GAC1B;AAHiB,CAGhB,CAAC","names":["React","styled","Progress","PropTypes","useTimeout","LinearProgress","_a","timeout","props","rest","oneSecondHasPassed","StyledProgress","className","propTypes","string","number","displayName","PREFIX","name","overridesResolver","styles","root","theme","margin","spacing","width"],"sources":["/Users/paigedeveau/Desktop/se-diva-docs-frontend/bwmdn-admin-portal/node_modules/ra-ui-materialui/src/layout/LinearProgress.tsx"],"sourcesContent":["import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport Progress, {\n    LinearProgressProps as ProgressProps,\n} from '@mui/material/LinearProgress';\nimport PropTypes from 'prop-types';\nimport { useTimeout } from 'ra-core';\n\n/**\n * Progress bar formatted to replace an input or a field in a form layout\n *\n * Avoids visual jumps when replaced by value or form input\n *\n * @see ReferenceField\n * @see ReferenceInput\n *\n * @typedef {Object} Props the props you can use\n * @prop {Object} classes CSS class names\n * @prop {string} className CSS class applied to the LinearProgress component\n * @prop {integer} timeout Milliseconds to wait before showing the progress bar. One second by default\n *\n * @param {Props} props\n */\nexport const LinearProgress = ({\n    timeout = 1000,\n    ...props\n}: LinearProgressProps) => {\n    const { className, ...rest } = props;\n\n    const oneSecondHasPassed = useTimeout(timeout);\n\n    return oneSecondHasPassed ? (\n        <StyledProgress className={className} {...rest} />\n    ) : null;\n};\n\nLinearProgress.propTypes = {\n    className: PropTypes.string,\n    timeout: PropTypes.number,\n};\n\n// What? TypeScript loses the displayName if we don't set it explicitly\nLinearProgress.displayName = 'LinearProgress';\n\nexport interface LinearProgressProps extends ProgressProps {\n    timeout?: number;\n}\n\nconst PREFIX = 'RaLinearProgress';\n\nconst StyledProgress = styled(Progress, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    margin: `${theme.spacing(1)} 0`,\n    width: theme.spacing(20),\n}));\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}