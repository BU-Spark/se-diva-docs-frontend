{"ast":null,"code":"import { createContext, useMemo } from 'react';\nimport pick from 'lodash/pick';\n/**\n * Context to store the pagination part of the useListController() result.\n *\n * Use the useListPaginationContext() hook to read the pagination information.\n * That's what List components do in react-admin (e.g. <Pagination>).\n *\n * @typedef {Object} ListPaginationContextValue\n * @prop {boolean}  isLoading boolean that is false until the data is available\n * @prop {integer}  total the total number of results for the current filters, excluding pagination. Useful to build the pagination controls. e.g. 23\n * @prop {integer}  page the current page. Starts at 1\n * @prop {Function} setPage a callback to change the page, e.g. setPage(3)\n * @prop {integer}  perPage the number of results per page. Defaults to 25\n * @prop {Function} setPerPage a callback to change the number of results per page, e.g. setPerPage(25)\n * @prop {Boolean}  hasPreviousPage true if the current page is not the first one\n * @prop {Boolean}  hasNextPage true if the current page is not the last one\n\n * @prop {string}   resource the resource name, deduced from the location. e.g. 'posts'\n *\n * @typedef Props\n * @prop {ListPaginationContextValue} value\n *\n * @param {Props}\n *\n * @see useListController\n * @see useListContext\n *\n * @example\n *\n * import { useListController, ListPaginationContext } from 'ra-core';\n *\n * const List = props => {\n *     const controllerProps = useListController(props);\n *     return (\n *         <ListPaginationContext.Provider value={controllerProps}>\n *             ...\n *         </ListPaginationContext.Provider>\n *     );\n * };\n */\nexport var ListPaginationContext = createContext({\n  isLoading: null,\n  page: null,\n  perPage: null,\n  setPage: null,\n  setPerPage: null,\n  hasPreviousPage: null,\n  hasNextPage: null,\n  total: undefined,\n  resource: null\n});\nListPaginationContext.displayName = 'ListPaginationContext';\nexport var usePickPaginationContext = function (context) {\n  return useMemo(function () {\n    return pick(context, ['isLoading', 'hasPreviousPage', 'hasNextPage', 'page', 'perPage', 'setPage', 'setPerPage', 'total', 'resource']);\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [context.isLoading, context.hasPreviousPage, context.hasNextPage, context.page, context.perPage, context.setPage, context.setPerPage, context.total]);\n};","map":{"version":3,"mappings":"AAAA,SAASA,aAAa,EAAEC,OAAO,QAAQ,OAAO;AAC9C,OAAOC,IAAI,MAAM,aAAa;AAG9B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA,OAAO,IAAMC,qBAAqB,GAAGH,aAAa,CAA6B;EAC3EI,SAAS,EAAE,IAAI;EACfC,IAAI,EAAE,IAAI;EACVC,OAAO,EAAE,IAAI;EACbC,OAAO,EAAE,IAAI;EACbC,UAAU,EAAE,IAAI;EAChBC,eAAe,EAAE,IAAI;EACrBC,WAAW,EAAE,IAAI;EACjBC,KAAK,EAAEC,SAAS;EAChBC,QAAQ,EAAE;CACb,CAAC;AAEFV,qBAAqB,CAACW,WAAW,GAAG,uBAAuB;AAe3D,OAAO,IAAMC,wBAAwB,GAAG,UACpCC,OAA6B;EAE7B,cAAO,CACH;IACI,WAAI,CAACA,OAAO,EAAE,CACV,WAAW,EACX,iBAAiB,EACjB,aAAa,EACb,MAAM,EACN,SAAS,EACT,SAAS,EACT,YAAY,EACZ,OAAO,EACP,UAAU,CACb,CAAC;EAVF,CAUE;EACN;EACA,CACIA,OAAO,CAACZ,SAAS,EACjBY,OAAO,CAACP,eAAe,EACvBO,OAAO,CAACN,WAAW,EACnBM,OAAO,CAACX,IAAI,EACZW,OAAO,CAACV,OAAO,EACfU,OAAO,CAACT,OAAO,EACfS,OAAO,CAACR,UAAU,EAClBQ,OAAO,CAACL,KAAK,CAChB,CACJ;AAxBD,CAwBC","names":["createContext","useMemo","pick","ListPaginationContext","isLoading","page","perPage","setPage","setPerPage","hasPreviousPage","hasNextPage","total","undefined","resource","displayName","usePickPaginationContext","context"],"sources":["/Users/paigedeveau/Desktop/se-diva-docs-frontend/bwmdn-admin-portal/node_modules/ra-core/src/controller/list/ListPaginationContext.tsx"],"sourcesContent":["import { createContext, useMemo } from 'react';\nimport pick from 'lodash/pick';\nimport { ListControllerResult } from './useListController';\n\n/**\n * Context to store the pagination part of the useListController() result.\n *\n * Use the useListPaginationContext() hook to read the pagination information.\n * That's what List components do in react-admin (e.g. <Pagination>).\n *\n * @typedef {Object} ListPaginationContextValue\n * @prop {boolean}  isLoading boolean that is false until the data is available\n * @prop {integer}  total the total number of results for the current filters, excluding pagination. Useful to build the pagination controls. e.g. 23\n * @prop {integer}  page the current page. Starts at 1\n * @prop {Function} setPage a callback to change the page, e.g. setPage(3)\n * @prop {integer}  perPage the number of results per page. Defaults to 25\n * @prop {Function} setPerPage a callback to change the number of results per page, e.g. setPerPage(25)\n * @prop {Boolean}  hasPreviousPage true if the current page is not the first one\n * @prop {Boolean}  hasNextPage true if the current page is not the last one\n\n * @prop {string}   resource the resource name, deduced from the location. e.g. 'posts'\n *\n * @typedef Props\n * @prop {ListPaginationContextValue} value\n *\n * @param {Props}\n *\n * @see useListController\n * @see useListContext\n *\n * @example\n *\n * import { useListController, ListPaginationContext } from 'ra-core';\n *\n * const List = props => {\n *     const controllerProps = useListController(props);\n *     return (\n *         <ListPaginationContext.Provider value={controllerProps}>\n *             ...\n *         </ListPaginationContext.Provider>\n *     );\n * };\n */\nexport const ListPaginationContext = createContext<ListPaginationContextValue>({\n    isLoading: null,\n    page: null,\n    perPage: null,\n    setPage: null,\n    setPerPage: null,\n    hasPreviousPage: null,\n    hasNextPage: null,\n    total: undefined,\n    resource: null,\n});\n\nListPaginationContext.displayName = 'ListPaginationContext';\n\nexport type ListPaginationContextValue = Pick<\n    ListControllerResult,\n    | 'isLoading'\n    | 'hasPreviousPage'\n    | 'hasNextPage'\n    | 'page'\n    | 'perPage'\n    | 'setPage'\n    | 'setPerPage'\n    | 'total'\n    | 'resource'\n>;\n\nexport const usePickPaginationContext = (\n    context: ListControllerResult\n): ListPaginationContextValue =>\n    useMemo(\n        () =>\n            pick(context, [\n                'isLoading',\n                'hasPreviousPage',\n                'hasNextPage',\n                'page',\n                'perPage',\n                'setPage',\n                'setPerPage',\n                'total',\n                'resource',\n            ]),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [\n            context.isLoading,\n            context.hasPreviousPage,\n            context.hasNextPage,\n            context.page,\n            context.perPage,\n            context.setPage,\n            context.setPerPage,\n            context.total,\n        ]\n    );\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}