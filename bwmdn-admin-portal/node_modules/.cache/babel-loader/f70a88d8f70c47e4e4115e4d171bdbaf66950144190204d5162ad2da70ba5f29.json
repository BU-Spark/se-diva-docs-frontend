{"ast":null,"code":"var __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { useMemo } from 'react';\nimport { useStore, useRemoveFromStore } from '../../store';\n/**\n * Get the list of selected items for a resource, and callbacks to change the selection\n *\n * @param resource The resource name, e.g. 'posts'\n *\n * @returns {Object} Destructure as [selectedIds, { select, toggle, clearSelection }].\n */\nexport var useRecordSelection = function (resource) {\n  var storeKey = \"\".concat(resource, \".selectedIds\");\n  var _a = useStore(storeKey, defaultSelection),\n    ids = _a[0],\n    setIds = _a[1];\n  var reset = useRemoveFromStore(storeKey);\n  var selectionModifiers = useMemo(function () {\n    return {\n      select: function (idsToAdd) {\n        if (!idsToAdd) return;\n        setIds(__spreadArray([], idsToAdd, true));\n      },\n      unselect: function (idsToRemove) {\n        if (!idsToRemove || idsToRemove.length === 0) return;\n        setIds(function (ids) {\n          if (!Array.isArray(ids)) return [];\n          return ids.filter(function (id) {\n            return !idsToRemove.includes(id);\n          });\n        });\n      },\n      toggle: function (id) {\n        if (typeof id === 'undefined') return;\n        setIds(function (ids) {\n          if (!Array.isArray(ids)) return __spreadArray([], ids, true);\n          var index = ids.indexOf(id);\n          return index > -1 ? __spreadArray(__spreadArray([], ids.slice(0, index), true), ids.slice(index + 1), true) : __spreadArray(__spreadArray([], ids, true), [id], false);\n        });\n      },\n      clearSelection: function () {\n        reset();\n      }\n    };\n  }, [setIds, reset]);\n  return [ids, selectionModifiers];\n};\nvar defaultSelection = [];","map":{"version":3,"mappings":";;;;;;;;;AAAA,SAASA,OAAO,QAAQ,OAAO;AAE/B,SAASC,QAAQ,EAAEC,kBAAkB,QAAQ,aAAa;AAG1D;;;;;;;AAOA,OAAO,IAAMC,kBAAkB,GAAG,UAC9BC,QAAgB;EAUhB,IAAMC,QAAQ,GAAG,UAAGD,QAAQ,iBAAc;EACpC,SAAgBH,QAAQ,CAACI,QAAQ,EAAEC,gBAAgB,CAAC;IAAnDC,GAAG;IAAEC,MAAM,QAAwC;EAC1D,IAAMC,KAAK,GAAGP,kBAAkB,CAACG,QAAQ,CAAC;EAE1C,IAAMK,kBAAkB,GAAGV,OAAO,CAC9B;IAAM,OAAC;MACHW,MAAM,EAAE,UAACC,QAAsB;QAC3B,IAAI,CAACA,QAAQ,EAAE;QACfJ,MAAM,mBAAKI,QAAQ,QAAE;MACzB,CAAC;MACDC,QAAQ,YAACC,WAAyB;QAC9B,IAAI,CAACA,WAAW,IAAIA,WAAW,CAACC,MAAM,KAAK,CAAC,EAAE;QAC9CP,MAAM,CAAC,aAAG;UACN,IAAI,CAACQ,KAAK,CAACC,OAAO,CAACV,GAAG,CAAC,EAAE,OAAO,EAAE;UAClC,OAAOA,GAAG,CAACW,MAAM,CAAC,YAAE;YAAI,QAACJ,WAAW,CAACK,QAAQ,CAACC,EAAE,CAAC;UAAzB,CAAyB,CAAC;QACtD,CAAC,CAAC;MACN,CAAC;MACDC,MAAM,EAAE,UAACD,EAAc;QACnB,IAAI,OAAOA,EAAE,KAAK,WAAW,EAAE;QAC/BZ,MAAM,CAAC,aAAG;UACN,IAAI,CAACQ,KAAK,CAACC,OAAO,CAACV,GAAG,CAAC,EAAE,yBAAWA,GAAG;UACvC,IAAMe,KAAK,GAAGf,GAAG,CAACgB,OAAO,CAACH,EAAE,CAAC;UAC7B,OAAOE,KAAK,GAAG,CAAC,CAAC,GACZE,gCAAKjB,GAAG,CAACkB,KAAK,CAAC,CAAC,EAAEH,KAAK,CAAC,SAAKf,GAAG,CAACkB,KAAK,CAACH,KAAK,GAAG,CAAC,CAAC,UACjDE,gCAAKjB,GAAG,UAAEa,EAAE,SAAC;QACtB,CAAC,CAAC;MACN,CAAC;MACDM,cAAc,EAAE;QACZjB,KAAK,EAAE;MACX;KACH;EAzBK,CAyBJ,EACF,CAACD,MAAM,EAAEC,KAAK,CAAC,CAClB;EAED,OAAO,CAACF,GAAG,EAAEG,kBAAkB,CAAC;AACpC,CAAC;AAED,IAAMJ,gBAAgB,GAAG,EAAE","names":["useMemo","useStore","useRemoveFromStore","useRecordSelection","resource","storeKey","defaultSelection","ids","setIds","reset","selectionModifiers","select","idsToAdd","unselect","idsToRemove","length","Array","isArray","filter","includes","id","toggle","index","indexOf","__spreadArray","slice","clearSelection"],"sources":["/Users/paigedeveau/node_modules/ra-core/src/controller/list/useRecordSelection.ts"],"sourcesContent":["import { useMemo } from 'react';\n\nimport { useStore, useRemoveFromStore } from '../../store';\nimport { Identifier } from '../../types';\n\n/**\n * Get the list of selected items for a resource, and callbacks to change the selection\n *\n * @param resource The resource name, e.g. 'posts'\n *\n * @returns {Object} Destructure as [selectedIds, { select, toggle, clearSelection }].\n */\nexport const useRecordSelection = (\n    resource: string\n): [\n    Identifier[],\n    {\n        select: (ids: Identifier[]) => void;\n        unselect: (ids: Identifier[]) => void;\n        toggle: (id: Identifier) => void;\n        clearSelection: () => void;\n    }\n] => {\n    const storeKey = `${resource}.selectedIds`;\n    const [ids, setIds] = useStore(storeKey, defaultSelection);\n    const reset = useRemoveFromStore(storeKey);\n\n    const selectionModifiers = useMemo(\n        () => ({\n            select: (idsToAdd: Identifier[]) => {\n                if (!idsToAdd) return;\n                setIds([...idsToAdd]);\n            },\n            unselect(idsToRemove: Identifier[]) {\n                if (!idsToRemove || idsToRemove.length === 0) return;\n                setIds(ids => {\n                    if (!Array.isArray(ids)) return [];\n                    return ids.filter(id => !idsToRemove.includes(id));\n                });\n            },\n            toggle: (id: Identifier) => {\n                if (typeof id === 'undefined') return;\n                setIds(ids => {\n                    if (!Array.isArray(ids)) return [...ids];\n                    const index = ids.indexOf(id);\n                    return index > -1\n                        ? [...ids.slice(0, index), ...ids.slice(index + 1)]\n                        : [...ids, id];\n                });\n            },\n            clearSelection: () => {\n                reset();\n            },\n        }),\n        [setIds, reset]\n    );\n\n    return [ids, selectionModifiers];\n};\n\nconst defaultSelection = [];\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}