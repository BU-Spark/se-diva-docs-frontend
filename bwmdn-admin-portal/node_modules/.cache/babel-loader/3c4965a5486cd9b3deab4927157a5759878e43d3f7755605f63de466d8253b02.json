{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport * as React from 'react';\nimport { Children, isValidElement } from 'react';\nimport PropTypes from 'prop-types';\nimport { Form } from 'ra-core';\nimport get from 'lodash/get';\nimport { TabbedFormView } from './TabbedFormView';\nimport { useFormRootPath } from './useFormRootPath';\nimport { FormTab } from './FormTab';\n/**\n * Form layout where inputs are divided by tab, one input per line.\n *\n * Pass <TabbedForm.Tab> components as children.\n *\n * @example\n *\n * import * as React from \"react\";\n * import {\n *     Edit,\n *     TabbedForm,\n *     Datagrid,\n *     TextField,\n *     DateField,\n *     TextInput,\n *     ReferenceManyField,\n *     NumberInput,\n *     DateInput,\n *     BooleanInput,\n *     EditButton\n * } from 'react-admin';\n *\n * export const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <TabbedForm>\n *             <TabbedForm.Tab label=\"summary\">\n *                 <TextInput disabled label=\"Id\" source=\"id\" />\n *                 <TextInput source=\"title\" validate={required()} />\n *                 <TextInput multiline source=\"teaser\" validate={required()} />\n *             </TabbedForm.Tab>\n *             <TabbedForm.Tab label=\"body\">\n *                 <RichTextInput source=\"body\" validate={required()} label={false} />\n *             </TabbedForm.Tab>\n *             <TabbedForm.Tab label=\"Miscellaneous\">\n *                 <TextInput label=\"Password (if protected post)\" source=\"password\" type=\"password\" />\n *                 <DateInput label=\"Publication date\" source=\"published_at\" />\n *                 <NumberInput source=\"average_note\" validate={[ number(), minValue(0) ]} />\n *                 <BooleanInput label=\"Allow comments?\" source=\"commentable\" defaultValue />\n *                 <TextInput disabled label=\"Nb views\" source=\"views\" />\n *             </TabbedForm.Tab>\n *             <TabbedForm.Tab label=\"comments\">\n *                 <ReferenceManyField reference=\"comments\" target=\"post_id\" label={false}>\n *                     <Datagrid>\n *                         <TextField source=\"body\" />\n *                         <DateField source=\"created_at\" />\n *                         <EditButton />\n *                     </Datagrid>\n *                 </ReferenceManyField>\n *             </TabbedForm.Tab>\n *         </TabbedForm>\n *     </Edit>\n * );\n *\n * @typedef {Object} Props the props you can use (other props are injected by Create or Edit)\n * @prop {ReactElement[]} FormTab elements\n * @prop {Object} defaultValues\n * @prop {Function} validate\n * @prop {ReactElement} toolbar The element displayed at the bottom of the form, containing the SaveButton\n *\n * @param {Props} props\n */\nexport var TabbedForm = function (props) {\n  var formRootPathname = useFormRootPath();\n  return React.createElement(Form, __assign({\n    formRootPathname: formRootPathname\n  }, props), React.createElement(TabbedFormView, __assign({\n    formRootPathname: formRootPathname\n  }, sanitizeRestProps(props))));\n};\nTabbedForm.Tab = FormTab;\nvar sanitizeRestProps = function (_a) {\n  var criteriaMode = _a.criteriaMode,\n    defaultValues = _a.defaultValues,\n    delayError = _a.delayError,\n    formRootPathname = _a.formRootPathname,\n    mode = _a.mode,\n    noValidate = _a.noValidate,\n    onSubmit = _a.onSubmit,\n    record = _a.record,\n    resolver = _a.resolver,\n    reValidateMode = _a.reValidateMode,\n    sanitizeEmptyValues = _a.sanitizeEmptyValues,\n    shouldFocusError = _a.shouldFocusError,\n    shouldUnregister = _a.shouldUnregister,\n    shouldUseNativeValidation = _a.shouldUseNativeValidation,\n    validate = _a.validate,\n    warnWhenUnsavedChanges = _a.warnWhenUnsavedChanges,\n    rest = __rest(_a, [\"criteriaMode\", \"defaultValues\", \"delayError\", \"formRootPathname\", \"mode\", \"noValidate\", \"onSubmit\", \"record\", \"resolver\", \"reValidateMode\", \"sanitizeEmptyValues\", \"shouldFocusError\", \"shouldUnregister\", \"shouldUseNativeValidation\", \"validate\", \"warnWhenUnsavedChanges\"]);\n  return rest;\n};\nTabbedForm.propTypes = {\n  children: PropTypes.node,\n  defaultValues: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  formRootPathname: PropTypes.string,\n  mutationMode: PropTypes.oneOf(['pessimistic', 'optimistic', 'undoable']),\n  // @ts-ignore\n  record: PropTypes.object,\n  saving: PropTypes.bool,\n  validate: PropTypes.func\n};\nexport var findTabsWithErrors = function (children, errors) {\n  console.warn('Deprecated. FormTab now wrap their content inside a FormGroupContextProvider. If you implemented custom forms with tabs, please use the FormGroupContextProvider. See https://marmelab.com/react-admin/EditTutorial.html#grouping-inputs');\n  return Children.toArray(children).reduce(function (acc, child) {\n    if (!isValidElement(child)) {\n      return acc;\n    }\n    var inputs = Children.toArray(child.props.children);\n    if (inputs.some(function (input) {\n      return isValidElement(input) && get(errors, input.props.source);\n    })) {\n      return __spreadArray(__spreadArray([], acc, true), [child.props.label], false);\n    }\n    return acc;\n  }, []);\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SACIC,QAAQ,EACRC,cAAc,QAIX,OAAO;AACd,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,IAAI,QAA2C,SAAS;AACjE,OAAOC,GAAG,MAAM,YAAY;AAE5B,SAASC,cAAc,QAA6B,kBAAkB;AACtE,SAASC,eAAe,QAAQ,mBAAmB;AACnD,SAASC,OAAO,QAAQ,WAAW;AAEnC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6DA,OAAO,IAAMC,UAAU,GAAG,UAACC,KAAsB;EAC7C,IAAMC,gBAAgB,GAAGJ,eAAe,EAAE;EAE1C,OACIP,oBAACI,IAAI;IAACO,gBAAgB,EAAEA;EAAgB,GAAMD,KAAK,GAC/CV,oBAACM,cAAc;IACXK,gBAAgB,EAAEA;EAAgB,GAC9BC,iBAAiB,CAACF,KAAK,CAAC,EAC9B,CACC;AAEf,CAAC;AAEDD,UAAU,CAACI,GAAG,GAAGL,OAAO;AAExB,IAAMI,iBAAiB,GAAG,UAACE,EAkBT;EAjBd,gBAAY;IACZC,aAAa;IACbC,UAAU;IACVL,gBAAgB;IAChBM,IAAI;IACJC,UAAU;IACVC,QAAQ;IACRC,MAAM;IACNC,QAAQ;IACRC,cAAc;IACdC,mBAAmB;IACnBC,gBAAgB;IAChBC,gBAAgB;IAChBC,yBAAyB;IACzBC,QAAQ;IACRC,sBAAsB;IACnBC,IAAI,cAjBgB,+QAkB1B,CADU;EACY,WAAI;CAAA;AAE3BpB,UAAU,CAACqB,SAAS,GAAG;EACnBC,QAAQ,EAAE5B,SAAS,CAAC6B,IAAI;EACxBjB,aAAa,EAAEZ,SAAS,CAAC8B,SAAS,CAAC,CAAC9B,SAAS,CAAC+B,MAAM,EAAE/B,SAAS,CAACgC,IAAI,CAAC,CAAC;EACtExB,gBAAgB,EAAER,SAAS,CAACiC,MAAM;EAClCC,YAAY,EAAElC,SAAS,CAACmC,KAAK,CAAC,CAAC,aAAa,EAAE,YAAY,EAAE,UAAU,CAAC,CAAC;EACxE;EACAlB,MAAM,EAAEjB,SAAS,CAAC+B,MAAM;EACxBK,MAAM,EAAEpC,SAAS,CAACqC,IAAI;EACtBb,QAAQ,EAAExB,SAAS,CAACgC;CACvB;AAsBD,OAAO,IAAMM,kBAAkB,GAAG,UAACV,QAAQ,EAAEW,MAAM;EAC/CC,OAAO,CAACC,IAAI,CACR,0OAA0O,CAC7O;EAED,OAAO3C,QAAQ,CAAC4C,OAAO,CAACd,QAAQ,CAAC,CAACe,MAAM,CAAC,UAACC,GAAU,EAAEC,KAAK;IACvD,IAAI,CAAC9C,cAAc,CAAC8C,KAAK,CAAC,EAAE;MACxB,OAAOD,GAAG;;IAGd,IAAME,MAAM,GAAGhD,QAAQ,CAAC4C,OAAO,CAACG,KAAK,CAACtC,KAAK,CAACqB,QAAQ,CAAC;IAErD,IACIkB,MAAM,CAACC,IAAI,CACP,eAAK;MACD,qBAAc,CAACC,KAAK,CAAC,IAAI9C,GAAG,CAACqC,MAAM,EAAES,KAAK,CAACzC,KAAK,CAAC0C,MAAM,CAAC;IAAxD,CAAwD,CAC/D,EACH;MACE,uCAAWL,GAAG,UAAEC,KAAK,CAACtC,KAAK,CAAC2C,KAAK;;IAGrC,OAAON,GAAG;EACd,CAAC,EAAE,EAAE,CAAC;AACV,CAAC","names":["React","Children","isValidElement","PropTypes","Form","get","TabbedFormView","useFormRootPath","FormTab","TabbedForm","props","formRootPathname","sanitizeRestProps","Tab","_a","defaultValues","delayError","mode","noValidate","onSubmit","record","resolver","reValidateMode","sanitizeEmptyValues","shouldFocusError","shouldUnregister","shouldUseNativeValidation","validate","warnWhenUnsavedChanges","rest","propTypes","children","node","oneOfType","object","func","string","mutationMode","oneOf","saving","bool","findTabsWithErrors","errors","console","warn","toArray","reduce","acc","child","inputs","some","input","source","label"],"sources":["/Users/paigedeveau/Desktop/se-diva-docs-frontend/bwmdn-admin-portal/node_modules/ra-ui-materialui/src/form/TabbedForm.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n    Children,\n    isValidElement,\n    ReactElement,\n    ReactNode,\n    HtmlHTMLAttributes,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, FormProps, MutationMode, RaRecord } from 'ra-core';\nimport get from 'lodash/get';\n\nimport { TabbedFormView, TabbedFormViewProps } from './TabbedFormView';\nimport { useFormRootPath } from './useFormRootPath';\nimport { FormTab } from './FormTab';\n\n/**\n * Form layout where inputs are divided by tab, one input per line.\n *\n * Pass <TabbedForm.Tab> components as children.\n *\n * @example\n *\n * import * as React from \"react\";\n * import {\n *     Edit,\n *     TabbedForm,\n *     Datagrid,\n *     TextField,\n *     DateField,\n *     TextInput,\n *     ReferenceManyField,\n *     NumberInput,\n *     DateInput,\n *     BooleanInput,\n *     EditButton\n * } from 'react-admin';\n *\n * export const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <TabbedForm>\n *             <TabbedForm.Tab label=\"summary\">\n *                 <TextInput disabled label=\"Id\" source=\"id\" />\n *                 <TextInput source=\"title\" validate={required()} />\n *                 <TextInput multiline source=\"teaser\" validate={required()} />\n *             </TabbedForm.Tab>\n *             <TabbedForm.Tab label=\"body\">\n *                 <RichTextInput source=\"body\" validate={required()} label={false} />\n *             </TabbedForm.Tab>\n *             <TabbedForm.Tab label=\"Miscellaneous\">\n *                 <TextInput label=\"Password (if protected post)\" source=\"password\" type=\"password\" />\n *                 <DateInput label=\"Publication date\" source=\"published_at\" />\n *                 <NumberInput source=\"average_note\" validate={[ number(), minValue(0) ]} />\n *                 <BooleanInput label=\"Allow comments?\" source=\"commentable\" defaultValue />\n *                 <TextInput disabled label=\"Nb views\" source=\"views\" />\n *             </TabbedForm.Tab>\n *             <TabbedForm.Tab label=\"comments\">\n *                 <ReferenceManyField reference=\"comments\" target=\"post_id\" label={false}>\n *                     <Datagrid>\n *                         <TextField source=\"body\" />\n *                         <DateField source=\"created_at\" />\n *                         <EditButton />\n *                     </Datagrid>\n *                 </ReferenceManyField>\n *             </TabbedForm.Tab>\n *         </TabbedForm>\n *     </Edit>\n * );\n *\n * @typedef {Object} Props the props you can use (other props are injected by Create or Edit)\n * @prop {ReactElement[]} FormTab elements\n * @prop {Object} defaultValues\n * @prop {Function} validate\n * @prop {ReactElement} toolbar The element displayed at the bottom of the form, containing the SaveButton\n *\n * @param {Props} props\n */\nexport const TabbedForm = (props: TabbedFormProps) => {\n    const formRootPathname = useFormRootPath();\n\n    return (\n        <Form formRootPathname={formRootPathname} {...props}>\n            <TabbedFormView\n                formRootPathname={formRootPathname}\n                {...sanitizeRestProps(props)}\n            />\n        </Form>\n    );\n};\n\nTabbedForm.Tab = FormTab;\n\nconst sanitizeRestProps = ({\n    criteriaMode,\n    defaultValues,\n    delayError,\n    formRootPathname,\n    mode,\n    noValidate,\n    onSubmit,\n    record,\n    resolver,\n    reValidateMode,\n    sanitizeEmptyValues,\n    shouldFocusError,\n    shouldUnregister,\n    shouldUseNativeValidation,\n    validate,\n    warnWhenUnsavedChanges,\n    ...rest\n}: TabbedFormProps) => rest;\n\nTabbedForm.propTypes = {\n    children: PropTypes.node,\n    defaultValues: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n    formRootPathname: PropTypes.string,\n    mutationMode: PropTypes.oneOf(['pessimistic', 'optimistic', 'undoable']),\n    // @ts-ignore\n    record: PropTypes.object,\n    saving: PropTypes.bool,\n    validate: PropTypes.func,\n};\n\nexport interface TabbedFormProps\n    extends Omit<FormProps, 'render'>,\n        Omit<\n            HtmlHTMLAttributes<HTMLFormElement>,\n            'defaultValue' | 'onSubmit' | 'children'\n        >,\n        Partial<TabbedFormViewProps> {\n    children: ReactNode;\n    className?: string;\n    defaultValues?: any;\n    formRootPathname?: string;\n    mutationMode?: MutationMode;\n    record?: RaRecord;\n    resource?: string;\n    syncWithLocation?: boolean;\n    tabs?: ReactElement;\n    toolbar?: ReactElement | false;\n    warnWhenUnsavedChanges?: boolean;\n}\n\nexport const findTabsWithErrors = (children, errors) => {\n    console.warn(\n        'Deprecated. FormTab now wrap their content inside a FormGroupContextProvider. If you implemented custom forms with tabs, please use the FormGroupContextProvider. See https://marmelab.com/react-admin/EditTutorial.html#grouping-inputs'\n    );\n\n    return Children.toArray(children).reduce((acc: any[], child) => {\n        if (!isValidElement(child)) {\n            return acc;\n        }\n\n        const inputs = Children.toArray(child.props.children);\n\n        if (\n            inputs.some(\n                input =>\n                    isValidElement(input) && get(errors, input.props.source)\n            )\n        ) {\n            return [...acc, child.props.label];\n        }\n\n        return acc;\n    }, []);\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}