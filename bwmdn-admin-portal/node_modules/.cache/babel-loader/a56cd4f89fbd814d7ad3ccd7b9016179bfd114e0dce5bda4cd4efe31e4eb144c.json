{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useRecordContext } from 'ra-core';\nimport PropTypes from 'prop-types';\nimport Typography from '@mui/material/Typography';\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { fieldPropTypes } from './types';\n/**\n * Field using a render function\n *\n * @example\n * <FunctionField\n *     source=\"last_name\" // used for sorting\n *     label=\"Name\"\n *     render={record => record && `${record.first_name} ${record.last_name}`}\n * />\n */\nexport var FunctionField = function (props) {\n  var className = props.className,\n    _a = props.source,\n    source = _a === void 0 ? '' : _a,\n    render = props.render,\n    rest = __rest(props, [\"className\", \"source\", \"render\"]);\n  var record = useRecordContext(props);\n  return useMemo(function () {\n    return record ? React.createElement(Typography, __assign({\n      component: \"span\",\n      variant: \"body2\",\n      className: className\n    }, sanitizeFieldRestProps(rest)), render(record, source)) : null;\n  }, [className, record, source, render, rest]);\n};\nFunctionField.propTypes = __assign(__assign(__assign({}, Typography.propTypes), fieldPropTypes), {\n  render: PropTypes.func.isRequired\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,OAAO,QAAQ,OAAO;AAC/B,SAASC,gBAAgB,QAAQ,SAAS;AAC1C,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,UAA+B,MAAM,0BAA0B;AAEtE,SAASC,sBAAsB,QAAQ,0BAA0B;AACjE,SAA+CC,cAAc,QAAQ,SAAS;AAE9E;;;;;;;;;;AAWA,OAAO,IAAMC,aAAa,GAAG,UACzBC,KAAqC;EAE7B,aAAS,GAAmCA,KAAK,UAAxC;IAAEC,KAAiCD,KAAK,OAA3B;IAAXE,MAAM,mBAAG,EAAE;IAAEC,MAAM,GAAcH,KAAK,OAAnB;IAAKI,IAAI,UAAKJ,KAAK,EAAnD,iCAA2C,CAAF;EAC/C,IAAMK,MAAM,GAAGX,gBAAgB,CAACM,KAAK,CAAC;EACtC,OAAOP,OAAO,CACV;IACI,aAAM,GACFD,oBAACI,UAAU;MACPU,SAAS,EAAC,MAAM;MAChBC,OAAO,EAAC,OAAO;MACfC,SAAS,EAAEA;IAAS,GAChBX,sBAAsB,CAACO,IAAI,CAAC,GAE/BD,MAAM,CAACE,MAAM,EAAEH,MAAM,CAAC,CACd,GACb,IAAI;EATR,CASQ,EACZ,CAACM,SAAS,EAAEH,MAAM,EAAEH,MAAM,EAAEC,MAAM,EAAEC,IAAI,CAAC,CAC5C;AACL,CAAC;AAEDL,aAAa,CAACU,SAAS,kCAEhBb,UAAU,CAACa,SAAS,GACpBX,cAAc;EACjBK,MAAM,EAAER,SAAS,CAACe,IAAI,CAACC;AAAU,EACpC","names":["React","useMemo","useRecordContext","PropTypes","Typography","sanitizeFieldRestProps","fieldPropTypes","FunctionField","props","_a","source","render","rest","record","component","variant","className","propTypes","func","isRequired"],"sources":["/Users/paigedeveau/Desktop/se-diva-docs-frontend/bwmdn-admin-portal/node_modules/ra-ui-materialui/src/field/FunctionField.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useMemo } from 'react';\nimport { useRecordContext } from 'ra-core';\nimport PropTypes from 'prop-types';\nimport Typography, { TypographyProps } from '@mui/material/Typography';\n\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { PublicFieldProps, InjectedFieldProps, fieldPropTypes } from './types';\n\n/**\n * Field using a render function\n *\n * @example\n * <FunctionField\n *     source=\"last_name\" // used for sorting\n *     label=\"Name\"\n *     render={record => record && `${record.first_name} ${record.last_name}`}\n * />\n */\n\nexport const FunctionField = <RecordType extends unknown = any>(\n    props: FunctionFieldProps<RecordType>\n) => {\n    const { className, source = '', render, ...rest } = props;\n    const record = useRecordContext(props);\n    return useMemo(\n        () =>\n            record ? (\n                <Typography\n                    component=\"span\"\n                    variant=\"body2\"\n                    className={className}\n                    {...sanitizeFieldRestProps(rest)}\n                >\n                    {render(record, source)}\n                </Typography>\n            ) : null,\n        [className, record, source, render, rest]\n    );\n};\n\nFunctionField.propTypes = {\n    // @ts-ignore\n    ...Typography.propTypes,\n    ...fieldPropTypes,\n    render: PropTypes.func.isRequired,\n};\n\nexport interface FunctionFieldProps<RecordType extends unknown = any>\n    extends PublicFieldProps,\n        InjectedFieldProps<RecordType>,\n        Omit<TypographyProps, 'textAlign'> {\n    render: (record?: RecordType, source?: string) => any;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}