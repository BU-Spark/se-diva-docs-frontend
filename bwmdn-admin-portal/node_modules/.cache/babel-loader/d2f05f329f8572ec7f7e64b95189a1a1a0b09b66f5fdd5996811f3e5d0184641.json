{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport { useMemo } from 'react';\nimport { useQuery, useQueryClient } from 'react-query';\nimport { useDataProvider } from './useDataProvider';\n/**\n * Call the dataProvider.getList() method and return the resolved result\n * as well as the loading state.\n *\n * The return value updates according to the request state:\n *\n * - start: { isLoading: true, refetch }\n * - success: { data: [data from store], total: [total from response], isLoading: false, refetch }\n * - error: { error: [error from response], isLoading: false, refetch }\n *\n * This hook will return the cached result when called a second time\n * with the same parameters, until the response arrives.\n *\n * @param {string} resource The resource name, e.g. 'posts'\n * @param {Params} params The getList parameters { pagination, sort, filter, meta }\n * @param {Object} options Options object to pass to the queryClient.\n * May include side effects to be executed upon success or failure, e.g. { onSuccess: () => { refresh(); } }\n *\n * @typedef Params\n * @prop params.pagination The request pagination { page, perPage }, e.g. { page: 1, perPage: 10 }\n * @prop params.sort The request sort { field, order }, e.g. { field: 'id', order: 'DESC' }\n * @prop params.filter The request filters, e.g. { title: 'hello, world' }\n * @prop params.meta Optional meta parameters\n *\n * @returns The current request state. Destructure as { data, total, error, isLoading, refetch }.\n *\n * @example\n *\n * import { useGetList } from 'react-admin';\n *\n * const LatestNews = () => {\n *     const { data, total, isLoading, error } = useGetList(\n *         'posts',\n *         { pagination: { page: 1, perPage: 10 }, sort: { field: 'published_at', order: 'DESC' } }\n *     );\n *     if (isLoading) { return <Loading />; }\n *     if (error) { return <p>ERROR</p>; }\n *     return <ul>{data.map(item =>\n *         <li key={item.id}>{item.title}</li>\n *     )}</ul>;\n * };\n */\nexport var useGetList = function (resource, params, options) {\n  if (params === void 0) {\n    params = {};\n  }\n  var _a = params.pagination,\n    pagination = _a === void 0 ? {\n      page: 1,\n      perPage: 25\n    } : _a,\n    _b = params.sort,\n    sort = _b === void 0 ? {\n      field: 'id',\n      order: 'DESC'\n    } : _b,\n    _c = params.filter,\n    filter = _c === void 0 ? {} : _c,\n    meta = params.meta;\n  var dataProvider = useDataProvider();\n  var queryClient = useQueryClient();\n  var result = useQuery([resource, 'getList', {\n    pagination: pagination,\n    sort: sort,\n    filter: filter,\n    meta: meta\n  }], function () {\n    return dataProvider.getList(resource, {\n      pagination: pagination,\n      sort: sort,\n      filter: filter,\n      meta: meta\n    }).then(function (_a) {\n      var data = _a.data,\n        total = _a.total,\n        pageInfo = _a.pageInfo;\n      return {\n        data: data,\n        total: total,\n        pageInfo: pageInfo\n      };\n    });\n  }, __assign(__assign({}, options), {\n    onSuccess: function (value) {\n      var data = value.data;\n      // optimistically populate the getOne cache\n      data.forEach(function (record) {\n        queryClient.setQueryData([resource, 'getOne', {\n          id: String(record.id),\n          meta: meta\n        }], function (oldRecord) {\n          return oldRecord !== null && oldRecord !== void 0 ? oldRecord : record;\n        });\n      });\n      // execute call-time onSuccess if provided\n      if (options === null || options === void 0 ? void 0 : options.onSuccess) {\n        options.onSuccess(value);\n      }\n    }\n  }));\n  return useMemo(function () {\n    var _a, _b, _c;\n    return result.data ? __assign(__assign({}, result), {\n      data: (_a = result.data) === null || _a === void 0 ? void 0 : _a.data,\n      total: (_b = result.data) === null || _b === void 0 ? void 0 : _b.total,\n      pageInfo: (_c = result.data) === null || _c === void 0 ? void 0 : _c.pageInfo\n    }) : result;\n  }, [result]);\n};","map":{"version":3,"mappings":";;;;;;;;;;AAAA,SAASA,OAAO,QAAQ,OAAO;AAC/B,SACIC,QAAQ,EAGRC,cAAc,QACX,aAAa;AAGpB,SAASC,eAAe,QAAQ,mBAAmB;AAEnD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA,OAAO,IAAMC,UAAU,GAAG,UACtBC,QAAgB,EAChBC,MAAmC,EACnCC,OAA2D;EAD3D;IAAAD,WAAmC;EAAA;EAI/B,SAIAA,MAAM,WAJ+B;IAArCE,UAAU,mBAAG;MAAEC,IAAI,EAAE,CAAC;MAAEC,OAAO,EAAE;IAAE,CAAE;IACrCC,KAGAL,MAAM,KAH+B;IAArCM,IAAI,mBAAG;MAAEC,KAAK,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAM,CAAE;IACrCC,KAEAT,MAAM,OAFK;IAAXU,MAAM,mBAAG,EAAE;IACXC,IAAI,GACJX,MAAM,KADF;EAER,IAAMY,YAAY,GAAGf,eAAe,EAAE;EACtC,IAAMgB,WAAW,GAAGjB,cAAc,EAAE;EACpC,IAAMkB,MAAM,GAAGnB,QAAQ,CAKnB,CAACI,QAAQ,EAAE,SAAS,EAAE;IAAEG,UAAU;IAAEI,IAAI;IAAEI,MAAM;IAAEC,IAAI;EAAA,CAAE,CAAC,EACzD;IACI,mBAAY,CACPI,OAAO,CAAahB,QAAQ,EAAE;MAC3BG,UAAU;MACVI,IAAI;MACJI,MAAM;MACNC,IAAI;KACP,CAAC,CACDK,IAAI,CAAC,UAACC,EAAyB;UAAvBC,IAAI;QAAEC,KAAK;QAAEC,QAAQ;MAAO,OAAC;QAClCF,IAAI;QACJC,KAAK;QACLC,QAAQ;OACX;IAJoC,CAInC,CAAC;EAXP,CAWO,wBAEJnB,OAAO;IACVoB,SAAS,EAAE,eAAK;MACJ,QAAI,GAAKC,KAAK,KAAV;MACZ;MACAJ,IAAI,CAACK,OAAO,CAAC,gBAAM;QACfV,WAAW,CAACW,YAAY,CACpB,CAACzB,QAAQ,EAAE,QAAQ,EAAE;UAAE0B,EAAE,EAAEC,MAAM,CAACC,MAAM,CAACF,EAAE,CAAC;UAAEd,IAAI;QAAA,CAAE,CAAC,EACrD,mBAAS;UAAI,gBAAS,aAATiB,SAAS,cAATA,SAAS,GAAID,MAAM;QAAnB,CAAmB,CACnC;MACL,CAAC,CAAC;MACF;MACA,IAAI1B,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEoB,SAAS,EAAE;QACpBpB,OAAO,CAACoB,SAAS,CAACC,KAAK,CAAC;;IAEhC;EAAC,GAER;EAED,OAAO5B,OAAO,CACV;;IACI,aAAM,CAACwB,IAAI,GACNW,sBACQf,MAAM;MACTI,IAAI,EAAE,YAAM,CAACA,IAAI,0CAAEA,IAAI;MACvBC,KAAK,EAAE,YAAM,CAACD,IAAI,0CAAEC,KAAK;MACzBC,QAAQ,EAAE,YAAM,CAACF,IAAI,0CAAEE;IAAQ,KAEnCN,MAAM;GAAA,EAChB,CAACA,MAAM,CAAC,CAOX;AACL,CAAC","names":["useMemo","useQuery","useQueryClient","useDataProvider","useGetList","resource","params","options","pagination","page","perPage","_b","sort","field","order","_c","filter","meta","dataProvider","queryClient","result","getList","then","_a","data","total","pageInfo","onSuccess","value","forEach","setQueryData","id","String","record","oldRecord","__assign"],"sources":["/Users/paigedeveau/Desktop/se-diva-docs-frontend/bwmdn-admin-portal/node_modules/ra-core/src/dataProvider/useGetList.ts"],"sourcesContent":["import { useMemo } from 'react';\nimport {\n    useQuery,\n    UseQueryOptions,\n    UseQueryResult,\n    useQueryClient,\n} from 'react-query';\n\nimport { RaRecord, GetListParams, GetListResult } from '../types';\nimport { useDataProvider } from './useDataProvider';\n\n/**\n * Call the dataProvider.getList() method and return the resolved result\n * as well as the loading state.\n *\n * The return value updates according to the request state:\n *\n * - start: { isLoading: true, refetch }\n * - success: { data: [data from store], total: [total from response], isLoading: false, refetch }\n * - error: { error: [error from response], isLoading: false, refetch }\n *\n * This hook will return the cached result when called a second time\n * with the same parameters, until the response arrives.\n *\n * @param {string} resource The resource name, e.g. 'posts'\n * @param {Params} params The getList parameters { pagination, sort, filter, meta }\n * @param {Object} options Options object to pass to the queryClient.\n * May include side effects to be executed upon success or failure, e.g. { onSuccess: () => { refresh(); } }\n *\n * @typedef Params\n * @prop params.pagination The request pagination { page, perPage }, e.g. { page: 1, perPage: 10 }\n * @prop params.sort The request sort { field, order }, e.g. { field: 'id', order: 'DESC' }\n * @prop params.filter The request filters, e.g. { title: 'hello, world' }\n * @prop params.meta Optional meta parameters\n *\n * @returns The current request state. Destructure as { data, total, error, isLoading, refetch }.\n *\n * @example\n *\n * import { useGetList } from 'react-admin';\n *\n * const LatestNews = () => {\n *     const { data, total, isLoading, error } = useGetList(\n *         'posts',\n *         { pagination: { page: 1, perPage: 10 }, sort: { field: 'published_at', order: 'DESC' } }\n *     );\n *     if (isLoading) { return <Loading />; }\n *     if (error) { return <p>ERROR</p>; }\n *     return <ul>{data.map(item =>\n *         <li key={item.id}>{item.title}</li>\n *     )}</ul>;\n * };\n */\nexport const useGetList = <RecordType extends RaRecord = any>(\n    resource: string,\n    params: Partial<GetListParams> = {},\n    options?: UseQueryOptions<GetListResult<RecordType>, Error>\n): UseGetListHookValue<RecordType> => {\n    const {\n        pagination = { page: 1, perPage: 25 },\n        sort = { field: 'id', order: 'DESC' },\n        filter = {},\n        meta,\n    } = params;\n    const dataProvider = useDataProvider();\n    const queryClient = useQueryClient();\n    const result = useQuery<\n        GetListResult<RecordType>,\n        Error,\n        GetListResult<RecordType>\n    >(\n        [resource, 'getList', { pagination, sort, filter, meta }],\n        () =>\n            dataProvider\n                .getList<RecordType>(resource, {\n                    pagination,\n                    sort,\n                    filter,\n                    meta,\n                })\n                .then(({ data, total, pageInfo }) => ({\n                    data,\n                    total,\n                    pageInfo,\n                })),\n        {\n            ...options,\n            onSuccess: value => {\n                const { data } = value;\n                // optimistically populate the getOne cache\n                data.forEach(record => {\n                    queryClient.setQueryData(\n                        [resource, 'getOne', { id: String(record.id), meta }],\n                        oldRecord => oldRecord ?? record\n                    );\n                });\n                // execute call-time onSuccess if provided\n                if (options?.onSuccess) {\n                    options.onSuccess(value);\n                }\n            },\n        }\n    );\n\n    return useMemo(\n        () =>\n            result.data\n                ? {\n                      ...result,\n                      data: result.data?.data,\n                      total: result.data?.total,\n                      pageInfo: result.data?.pageInfo,\n                  }\n                : result,\n        [result]\n    ) as UseQueryResult<RecordType[], Error> & {\n        total?: number;\n        pageInfo?: {\n            hasNextPage?: boolean;\n            hasPreviousPage?: boolean;\n        };\n    };\n};\n\nexport type UseGetListHookValue<\n    RecordType extends RaRecord = any\n> = UseQueryResult<RecordType[], Error> & {\n    total?: number;\n    pageInfo?: {\n        hasNextPage?: boolean;\n        hasPreviousPage?: boolean;\n    };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}