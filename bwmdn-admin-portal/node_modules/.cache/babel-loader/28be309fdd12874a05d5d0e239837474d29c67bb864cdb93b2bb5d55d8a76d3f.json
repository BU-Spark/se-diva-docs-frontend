{"ast":null,"code":"import { useCallback } from 'react';\nimport { useI18nProvider } from './useI18nProvider';\n/**\n * Translate a string using the current locale and the translations from the i18nProvider\n *\n * @see Polyglot.t()\n * @link https://airbnb.io/polyglot.js/#polyglotprototypetkey-interpolationoptions\n *\n * @return {Function} A translation function, accepting two arguments\n *   - a string used as key in the translations\n *   - an interpolationOptions object\n *\n * @example\n *\n * import { useTranslate } from 'react-admin';\n *\n * const SettingsMenu = () => {\n *     const translate = useTranslate();\n *     return <MenuItem>{translate('settings')}</MenuItem>;\n * }\n */\nexport var useTranslate = function () {\n  var i18nProvider = useI18nProvider();\n  var translate = useCallback(function (key, options) {\n    return i18nProvider.translate(key, options);\n  },\n  // update the hook each time the locale changes\n  [i18nProvider] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n\n  return i18nProvider ? translate : identity;\n};\nvar identity = function (key) {\n  return key;\n};","map":{"version":3,"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AAGnC,SAASC,eAAe,QAAQ,mBAAmB;AAEnD;;;;;;;;;;;;;;;;;;;AAmBA,OAAO,IAAMC,YAAY,GAAG;EACxB,IAAMC,YAAY,GAAGF,eAAe,EAAE;EACtC,IAAMG,SAAS,GAAGJ,WAAW,CACzB,UAACK,GAAW,EAAEC,OAAa;IACvB,mBAAY,CAACF,SAAS,CAACC,GAAG,EAAEC,OAAO,CAAW;EAA9C,CAA8C;EAClD;EACA,CAACH,YAAY,CAAC,CAAC;EAAA,CAClB;;EACD,OAAOA,YAAY,GAAGC,SAAS,GAAGG,QAAQ;AAC9C,CAAC;AAED,IAAMA,QAAQ,GAAG,aAAG;EAAI,UAAG;AAAH,CAAG","names":["useCallback","useI18nProvider","useTranslate","i18nProvider","translate","key","options","identity"],"sources":["/Users/paigedeveau/node_modules/ra-core/src/i18n/useTranslate.ts"],"sourcesContent":["import { useCallback } from 'react';\n\nimport { Translate } from '../types';\nimport { useI18nProvider } from './useI18nProvider';\n\n/**\n * Translate a string using the current locale and the translations from the i18nProvider\n *\n * @see Polyglot.t()\n * @link https://airbnb.io/polyglot.js/#polyglotprototypetkey-interpolationoptions\n *\n * @return {Function} A translation function, accepting two arguments\n *   - a string used as key in the translations\n *   - an interpolationOptions object\n *\n * @example\n *\n * import { useTranslate } from 'react-admin';\n *\n * const SettingsMenu = () => {\n *     const translate = useTranslate();\n *     return <MenuItem>{translate('settings')}</MenuItem>;\n * }\n */\nexport const useTranslate = (): Translate => {\n    const i18nProvider = useI18nProvider();\n    const translate = useCallback(\n        (key: string, options?: any) =>\n            i18nProvider.translate(key, options) as string,\n        // update the hook each time the locale changes\n        [i18nProvider] // eslint-disable-line react-hooks/exhaustive-deps\n    );\n    return i18nProvider ? translate : identity;\n};\n\nconst identity = key => key;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}