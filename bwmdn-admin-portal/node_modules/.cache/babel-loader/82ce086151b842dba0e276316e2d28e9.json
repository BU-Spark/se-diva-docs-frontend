{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport DoneIcon from '@mui/icons-material/Done';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport { Tooltip, Typography } from '@mui/material';\nimport { useTranslate, useRecordContext } from 'ra-core';\nimport { fieldPropTypes } from './types';\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nexport var BooleanField = memo(function (props) {\n  var className = props.className,\n    emptyText = props.emptyText,\n    source = props.source,\n    valueLabelTrue = props.valueLabelTrue,\n    valueLabelFalse = props.valueLabelFalse,\n    _a = props.TrueIcon,\n    TrueIcon = _a === void 0 ? DoneIcon : _a,\n    _b = props.FalseIcon,\n    FalseIcon = _b === void 0 ? ClearIcon : _b,\n    _c = props.looseValue,\n    looseValue = _c === void 0 ? false : _c,\n    rest = __rest(props, [\"className\", \"emptyText\", \"source\", \"valueLabelTrue\", \"valueLabelFalse\", \"TrueIcon\", \"FalseIcon\", \"looseValue\"]);\n  var record = useRecordContext(props);\n  var translate = useTranslate();\n  var value = get(record, source);\n  var isTruthyValue = value === true || looseValue && value;\n  var ariaLabel = value ? valueLabelTrue : valueLabelFalse;\n  if (!ariaLabel) {\n    ariaLabel = isTruthyValue ? 'ra.boolean.true' : 'ra.boolean.false';\n  }\n  if (looseValue || value === false || value === true) {\n    return React.createElement(StyledTypography, __assign({\n      component: \"span\",\n      variant: \"body2\",\n      className: className\n    }, sanitizeFieldRestProps(rest)), React.createElement(Tooltip, {\n      title: translate(ariaLabel, {\n        _: ariaLabel\n      })\n    }, isTruthyValue ? React.createElement(TrueIcon, {\n      \"data-testid\": \"true\",\n      fontSize: \"small\"\n    }) : React.createElement(FalseIcon, {\n      \"data-testid\": \"false\",\n      fontSize: \"small\"\n    })));\n  }\n  return React.createElement(Typography, __assign({\n    component: \"span\",\n    variant: \"body2\",\n    className: className\n  }, sanitizeFieldRestProps(rest)), emptyText && translate(emptyText, {\n    _: emptyText\n  }));\n});\nBooleanField.propTypes = __assign(__assign(__assign({}, Typography.propTypes), fieldPropTypes), {\n  valueLabelFalse: PropTypes.string,\n  valueLabelTrue: PropTypes.string,\n  TrueIcon: PropTypes.elementType,\n  FalseIcon: PropTypes.elementType,\n  looseValue: PropTypes.bool\n});\nBooleanField.displayName = 'BooleanField';\nvar PREFIX = 'RaBooleanField';\nvar StyledTypography = styled(Typography, {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})({\n  display: 'inline-flex',\n  verticalAlign: 'middle',\n  lineHeight: 0\n});","map":{"version":3,"mappings":"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","names":["React","styled","memo","PropTypes","get","DoneIcon","ClearIcon","Tooltip","Typography","useTranslate","useRecordContext","fieldPropTypes","sanitizeFieldRestProps","BooleanField","props","emptyText","source","valueLabelTrue","valueLabelFalse","_a","TrueIcon","_b","FalseIcon","_c","looseValue","rest","record","translate","value","isTruthyValue","ariaLabel","StyledTypography","component","variant","className","title","_","fontSize","propTypes","string","elementType","bool","displayName","PREFIX","name","overridesResolver","styles","root","display","verticalAlign","lineHeight"],"sourceRoot":"","sources":["../../../src/field/BooleanField.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}