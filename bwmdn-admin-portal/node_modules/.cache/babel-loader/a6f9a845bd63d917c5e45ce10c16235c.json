{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n/**\n * Convert a simple validation function that returns an object matching the form shape with errors\n * to a validation resolver compatible with react-hook-form.\n *\n * @example\n * const validate = (values: any) => {\n *     if (values.username == null || values.username.trim() === '') {\n *         return { username: 'Required' };\n *     }\n * }\n *\n * const validationResolver = getSimpleValidationResolver(validate);\n *\n * const UserForm = () => (\n *     <Form\n *         defaultValues={{ username: 'John' }}\n *         validationResolver={validationResolver}\n *     >\n *         <TextField source=\"username\" />\n *     </Form>\n * );\n */\nexport var getSimpleValidationResolver = function (validate) {\n  return function (data) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var errors, transformedErrors;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, validate(data)];\n          case 1:\n            errors = _a.sent();\n            // If there are no errors, early return the form values\n            if (!errors || isEmptyObject(errors)) {\n              return [2 /*return*/, {\n                values: data,\n                errors: {}\n              }];\n            }\n            transformedErrors = transformErrorFields(errors);\n            // Sometimes we still need to transform the error object to realize there are actually\n            // no errors in it.\n            //   e.g. with an ArrayInput we can get something like: `{backlinks: [{}, {}]}`\n            // If, after transformation, there are no errors, we return the form values\n            if (!transformedErrors || isEmptyObject(transformedErrors)) {\n              return [2 /*return*/, {\n                values: data,\n                errors: {}\n              }];\n            }\n            // Else return the errors and no values\n            return [2 /*return*/, {\n              values: {},\n              errors: transformedErrors\n            }];\n        }\n      });\n    });\n  };\n};\nvar transformErrorFields = function (error) {\n  return Object.keys(error).reduce(function (acc, field) {\n    var _a, _b, _c;\n    // Handle arrays\n    if (Array.isArray(error[field])) {\n      var arrayHasErrors_1 = false;\n      var transformedArrayErrors = error[field].map(function (item) {\n        if (!isEmptyObject(item)) {\n          arrayHasErrors_1 = true;\n        }\n        return transformErrorFields(item);\n      });\n      if (!arrayHasErrors_1) {\n        return acc;\n      }\n      return __assign(__assign({}, acc), (_a = {}, _a[field] = transformedArrayErrors, _a));\n    }\n    // Handle objects\n    if (isEmptyObject(error[field])) {\n      return acc;\n    }\n    if (typeof error[field] === 'object' && !isRaTranslationObj(error[field])) {\n      return __assign(__assign({}, acc), (_b = {}, _b[field] = transformErrorFields(error[field]), _b));\n    }\n    // Handle leaf (either primary type or RaTranslationObj)\n    return __assign(__assign({}, acc), (_c = {}, _c[field] = addTypeAndMessage(error[field]), _c));\n  }, {});\n};\nvar addTypeAndMessage = function (error) {\n  return {\n    type: 'manual',\n    message: error\n  };\n};\nvar isRaTranslationObj = function (obj) {\n  return Object.keys(obj).includes('message') && Object.keys(obj).includes('args');\n};\nvar isEmptyObject = function (obj) {\n  return Object.getOwnPropertyNames(obj).length === 0;\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;AAsBA,OAAO,IAAMA,2BAA2B,GAAG,UAACC,QAAsB;EAAK,iBACnEC,IAAiB;IAAA;;;;;YAEF,qBAAMD,QAAQ,CAACC,IAAI,CAAC;;YAA7BC,MAAM,GAAGC,SAAoB;YAEnC;YACA,IAAI,CAACD,MAAM,IAAIE,aAAa,CAACF,MAAM,CAAC,EAAE;cAClC,sBAAO;gBAAEG,MAAM,EAAEJ,IAAI;gBAAEC,MAAM,EAAE;cAAE,CAAE;;YAKjCI,iBAAiB,GAAGC,oBAAoB,CAACL,MAAM,CAAC;YAEtD;YACA;YACA;YACA;YACA,IAAI,CAACI,iBAAiB,IAAIF,aAAa,CAACE,iBAAiB,CAAC,EAAE;cACxD,sBAAO;gBAAED,MAAM,EAAEJ,IAAI;gBAAEC,MAAM,EAAE;cAAE,CAAE;;YAGvC;YACA,sBAAO;cACHG,MAAM,EAAE,EAAE;cACVH,MAAM,EAAEI;aACX;QAAC;;;GACL;AA3BsE,CA2BtE;AAED,IAAMC,oBAAoB,GAAG,UAACC,KAAa;EACvC,OAAOC,MAAM,CAACC,IAAI,CAACF,KAAK,CAAC,CAACG,MAAM,CAAC,UAACC,GAAG,EAAEC,KAAK;;IACxC;IACA,IAAIC,KAAK,CAACC,OAAO,CAACP,KAAK,CAACK,KAAK,CAAC,CAAC,EAAE;MAC7B,IAAIG,gBAAc,GAAG,KAAK;MAC1B,IAAMC,sBAAsB,GAAGT,KAAK,CAACK,KAAK,CAAC,CAACK,GAAG,CAAC,cAAI;QAChD,IAAI,CAACd,aAAa,CAACe,IAAI,CAAC,EAAE;UACtBH,gBAAc,GAAG,IAAI;;QAEzB,OAAOT,oBAAoB,CAACY,IAAI,CAAC;MACrC,CAAC,CAAC;MACF,IAAI,CAACH,gBAAc,EAAE;QACjB,OAAOJ,GAAG;;MAEd,6BACOA,GAAG,gBACLC,KAAK,IAAGI,sBAAsB;;IAIvC;IACA,IAAIb,aAAa,CAACI,KAAK,CAACK,KAAK,CAAC,CAAC,EAAE;MAC7B,OAAOD,GAAG;;IAEd,IACI,OAAOJ,KAAK,CAACK,KAAK,CAAC,KAAK,QAAQ,IAChC,CAACO,kBAAkB,CAACZ,KAAK,CAACK,KAAK,CAAC,CAAC,EACnC;MACE,6BACOD,GAAG,gBACLC,KAAK,IAAGN,oBAAoB,CAACC,KAAK,CAACK,KAAK,CAAC,CAAC;;IAInD;IACA,6BACOD,GAAG,gBACLC,KAAK,IAAGQ,iBAAiB,CAACb,KAAK,CAACK,KAAK,CAAC,CAAC;EAEhD,CAAC,EAAE,EAAiB,CAAC;AACzB,CAAC;AAED,IAAMQ,iBAAiB,GAAG,UAACb,KAAa;EAAK,OAAC;IAC1Cc,IAAI,EAAE,QAAQ;IACdC,OAAO,EAAEf;GACZ;AAH4C,CAG3C;AAEF,IAAMY,kBAAkB,GAAG,UAACI,GAAW;EACnC,aAAM,CAACd,IAAI,CAACc,GAAG,CAAC,CAACC,QAAQ,CAAC,SAAS,CAAC,IAAIhB,MAAM,CAACC,IAAI,CAACc,GAAG,CAAC,CAACC,QAAQ,CAAC,MAAM,CAAC;AAAzE,CAAyE;AAE7E,IAAMrB,aAAa,GAAG,UAACoB,GAAW;EAC9B,aAAM,CAACE,mBAAmB,CAACF,GAAG,CAAC,CAACG,MAAM,KAAK,CAAC;AAA5C,CAA4C","names":["getSimpleValidationResolver","validate","data","errors","_a","isEmptyObject","values","transformedErrors","transformErrorFields","error","Object","keys","reduce","acc","field","Array","isArray","arrayHasErrors_1","transformedArrayErrors","map","item","isRaTranslationObj","addTypeAndMessage","type","message","obj","includes","getOwnPropertyNames","length"],"sourceRoot":"","sources":["../../../src/form/getSimpleValidationResolver.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}