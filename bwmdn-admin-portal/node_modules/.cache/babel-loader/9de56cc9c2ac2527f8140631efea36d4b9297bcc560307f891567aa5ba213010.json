{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport { memo } from 'react';\nimport get from 'lodash/get';\nimport { ListContextProvider, useRecordContext } from 'ra-core';\nimport { fieldPropTypes } from './types';\n/**\n * Display a collection\n *\n * Ideal for embedded arrays of objects, e.g.\n * {\n *   id: 123\n *   tags: [\n *     { name: 'foo' },\n *     { name: 'bar' }\n *   ]\n * }\n *\n * The child must be an iterator component\n * (like <Datagrid> or <SingleFieldList>).\n *\n * @example Display all the backlinks of the current post as a <Datagrid>\n * // post = {\n * //   id: 123\n * //   backlinks: [\n * //       {\n * //           uuid: '34fdf393-f449-4b04-a423-38ad02ae159e',\n * //           date: '2012-08-10T00:00:00.000Z',\n * //           url: 'http://example.com/foo/bar.html',\n * //       },\n * //       {\n * //           uuid: 'd907743a-253d-4ec1-8329-404d4c5e6cf1',\n * //           date: '2012-08-14T00:00:00.000Z',\n * //           url: 'https://blog.johndoe.com/2012/08/12/foobar.html',\n * //       }\n * //    ]\n * // }\n *     <ArrayField source=\"backlinks\">\n *         <Datagrid>\n *             <DateField source=\"date\" />\n *             <UrlField source=\"url\" />\n *         </Datagrid>\n *     </ArrayField>\n *\n * @example Display all the tags of the current post as <Chip> components\n * // post = {\n * //   id: 123\n * //   tags: [\n * //     { name: 'foo' },\n * //     { name: 'bar' }\n * //   ]\n * // }\n *     <ArrayField source=\"tags\">\n *         <SingleFieldList>\n *             <ChipField source=\"name\" />\n *         </SingleFieldList>\n *     </ArrayField>\n *\n * If you need to render a collection in a custom way, it's often simpler\n * to write your own component:\n *\n * @example\n *   const TagsField = () => {\n *       const record = useRecordContext();\n *       return (\n *           <ul>\n *               {record.tags.map(item => (\n *                   <li key={item.name}>{item.name}</li>\n *               ))}\n *           </ul>\n *       );\n *   };\n */\nexport var ArrayField = memo(function (props) {\n  var children = props.children,\n    resource = props.resource,\n    source = props.source;\n  var record = useRecordContext(props);\n  var data = get(record, source, emptyArray);\n  return React.createElement(ListContextProvider, {\n    value: {\n      data: data,\n      selectedIds: [],\n      sort: {\n        field: null,\n        order: null\n      },\n      displayedFilters: null,\n      filterValues: null,\n      hasNextPage: null,\n      hasPreviousPage: null,\n      hideFilter: null,\n      isFetching: false,\n      isLoading: false,\n      onSelect: null,\n      onToggleItem: null,\n      onUnselectItems: null,\n      page: null,\n      perPage: null,\n      refetch: null,\n      resource: resource,\n      setFilters: null,\n      setPage: null,\n      setPerPage: null,\n      setSort: null,\n      showFilter: null,\n      total: data.length\n    }\n  }, children);\n});\nArrayField.propTypes = __assign({}, fieldPropTypes);\nArrayField.displayName = 'ArrayField';\nvar emptyArray = [];","map":{"version":3,"mappings":";;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,IAAI,QAA0B,OAAO;AAC9C,OAAOC,GAAG,MAAM,YAAY;AAC5B,SAASC,mBAAmB,EAAEC,gBAAgB,QAAQ,SAAS;AAE/D,SAA+CC,cAAc,QAAQ,SAAS;AAE9E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmEA,OAAO,IAAMC,UAAU,GAAwBL,IAAI,CAAC,eAAK;EAC7C,YAAQ,GAAuBM,KAAK,SAA5B;IAAEC,QAAQ,GAAaD,KAAK,SAAlB;IAAEE,MAAM,GAAKF,KAAK,OAAV;EAClC,IAAMG,MAAM,GAAGN,gBAAgB,CAACG,KAAK,CAAC;EACtC,IAAMI,IAAI,GAAGT,GAAG,CAACQ,MAAM,EAAED,MAAM,EAAEG,UAAU,CAAC;EAE5C,OACIZ,oBAACG,mBAAmB;IAChBU,KAAK,EAAE;MACHF,IAAI;MACJG,WAAW,EAAE,EAAE;MACfC,IAAI,EAAE;QAAEC,KAAK,EAAE,IAAI;QAAEC,KAAK,EAAE;MAAI,CAAE;MAClCC,gBAAgB,EAAE,IAAI;MACtBC,YAAY,EAAE,IAAI;MAClBC,WAAW,EAAE,IAAI;MACjBC,eAAe,EAAE,IAAI;MACrBC,UAAU,EAAE,IAAI;MAChBC,UAAU,EAAE,KAAK;MACjBC,SAAS,EAAE,KAAK;MAChBC,QAAQ,EAAE,IAAI;MACdC,YAAY,EAAE,IAAI;MAClBC,eAAe,EAAE,IAAI;MACrBC,IAAI,EAAE,IAAI;MACVC,OAAO,EAAE,IAAI;MACbC,OAAO,EAAE,IAAI;MACbtB,QAAQ;MACRuB,UAAU,EAAE,IAAI;MAChBC,OAAO,EAAE,IAAI;MACbC,UAAU,EAAE,IAAI;MAChBC,OAAO,EAAE,IAAI;MACbC,UAAU,EAAE,IAAI;MAChBC,KAAK,EAAEzB,IAAI,CAAC0B;;EACf,GAEAC,QAAQ,CACS;AAE9B,CAAC,CAAC;AAEFhC,UAAU,CAACiC,SAAS,gBACblC,cAAc,CACpB;AAMDC,UAAU,CAACkC,WAAW,GAAG,YAAY;AAErC,IAAM5B,UAAU,GAAG,EAAE","names":["React","memo","get","ListContextProvider","useRecordContext","fieldPropTypes","ArrayField","props","resource","source","record","data","emptyArray","value","selectedIds","sort","field","order","displayedFilters","filterValues","hasNextPage","hasPreviousPage","hideFilter","isFetching","isLoading","onSelect","onToggleItem","onUnselectItems","page","perPage","refetch","setFilters","setPage","setPerPage","setSort","showFilter","total","length","children","propTypes","displayName"],"sources":["/Users/paigedeveau/Desktop/se-diva-docs-frontend/bwmdn-admin-portal/node_modules/ra-ui-materialui/src/field/ArrayField.tsx"],"sourcesContent":["import * as React from 'react';\nimport { memo, FC, ReactElement } from 'react';\nimport get from 'lodash/get';\nimport { ListContextProvider, useRecordContext } from 'ra-core';\n\nimport { PublicFieldProps, InjectedFieldProps, fieldPropTypes } from './types';\n\n/**\n * Display a collection\n *\n * Ideal for embedded arrays of objects, e.g.\n * {\n *   id: 123\n *   tags: [\n *     { name: 'foo' },\n *     { name: 'bar' }\n *   ]\n * }\n *\n * The child must be an iterator component\n * (like <Datagrid> or <SingleFieldList>).\n *\n * @example Display all the backlinks of the current post as a <Datagrid>\n * // post = {\n * //   id: 123\n * //   backlinks: [\n * //       {\n * //           uuid: '34fdf393-f449-4b04-a423-38ad02ae159e',\n * //           date: '2012-08-10T00:00:00.000Z',\n * //           url: 'http://example.com/foo/bar.html',\n * //       },\n * //       {\n * //           uuid: 'd907743a-253d-4ec1-8329-404d4c5e6cf1',\n * //           date: '2012-08-14T00:00:00.000Z',\n * //           url: 'https://blog.johndoe.com/2012/08/12/foobar.html',\n * //       }\n * //    ]\n * // }\n *     <ArrayField source=\"backlinks\">\n *         <Datagrid>\n *             <DateField source=\"date\" />\n *             <UrlField source=\"url\" />\n *         </Datagrid>\n *     </ArrayField>\n *\n * @example Display all the tags of the current post as <Chip> components\n * // post = {\n * //   id: 123\n * //   tags: [\n * //     { name: 'foo' },\n * //     { name: 'bar' }\n * //   ]\n * // }\n *     <ArrayField source=\"tags\">\n *         <SingleFieldList>\n *             <ChipField source=\"name\" />\n *         </SingleFieldList>\n *     </ArrayField>\n *\n * If you need to render a collection in a custom way, it's often simpler\n * to write your own component:\n *\n * @example\n *   const TagsField = () => {\n *       const record = useRecordContext();\n *       return (\n *           <ul>\n *               {record.tags.map(item => (\n *                   <li key={item.name}>{item.name}</li>\n *               ))}\n *           </ul>\n *       );\n *   };\n */\nexport const ArrayField: FC<ArrayFieldProps> = memo(props => {\n    const { children, resource, source } = props;\n    const record = useRecordContext(props);\n    const data = get(record, source, emptyArray);\n\n    return (\n        <ListContextProvider\n            value={{\n                data,\n                selectedIds: [],\n                sort: { field: null, order: null },\n                displayedFilters: null,\n                filterValues: null,\n                hasNextPage: null,\n                hasPreviousPage: null,\n                hideFilter: null,\n                isFetching: false,\n                isLoading: false,\n                onSelect: null,\n                onToggleItem: null,\n                onUnselectItems: null,\n                page: null,\n                perPage: null,\n                refetch: null,\n                resource,\n                setFilters: null,\n                setPage: null,\n                setPerPage: null,\n                setSort: null,\n                showFilter: null,\n                total: data.length,\n            }}\n        >\n            {children}\n        </ListContextProvider>\n    );\n});\n\nArrayField.propTypes = {\n    ...fieldPropTypes,\n};\n\nexport interface ArrayFieldProps extends PublicFieldProps, InjectedFieldProps {\n    children: ReactElement;\n}\n\nArrayField.displayName = 'ArrayField';\n\nconst emptyArray = [];\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}