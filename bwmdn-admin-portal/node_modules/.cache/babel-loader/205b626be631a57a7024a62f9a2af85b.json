{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { useState, useEffect } from 'react';\nimport inflection from 'inflection';\nimport { ListBase, getElementsFromRecords, InferredElement, useListContext, useResourceContext } from 'ra-core';\nimport { ListView } from './ListView';\nimport { listFieldTypes } from './listFieldTypes';\n/**\n * List component rendering a <Datagrid> based on the result of the\n * dataProvider.getList() call.\n *\n * The result (choice and type of columns) isn't configurable, but the\n * <ListGuesser> outputs the <Datagrid> it has guessed to the console so that\n * developers can start from there.\n *\n * To be used as the list prop of a <Resource>.\n *\n * @example\n *\n * import { Admin, Resource, ListGuesser } from 'react-admin';\n *\n * const App = () => (\n *     <Admin dataProvider={myDataProvider}>\n *         <Resource name=\"posts\" list={ListGuesser} />\n *     </Admin>\n * );\n */\nexport var ListGuesser = function (props) {\n  var debounce = props.debounce,\n    disableAuthentication = props.disableAuthentication,\n    disableSyncWithLocation = props.disableSyncWithLocation,\n    exporter = props.exporter,\n    filter = props.filter,\n    filterDefaultValues = props.filterDefaultValues,\n    perPage = props.perPage,\n    queryOptions = props.queryOptions,\n    resource = props.resource,\n    sort = props.sort,\n    rest = __rest(props, [\"debounce\", \"disableAuthentication\", \"disableSyncWithLocation\", \"exporter\", \"filter\", \"filterDefaultValues\", \"perPage\", \"queryOptions\", \"resource\", \"sort\"]);\n  return React.createElement(ListBase, {\n    debounce: debounce,\n    disableAuthentication: disableAuthentication,\n    disableSyncWithLocation: disableSyncWithLocation,\n    exporter: exporter,\n    filter: filter,\n    filterDefaultValues: filterDefaultValues,\n    perPage: perPage,\n    queryOptions: {\n      keepPreviousData: false\n    },\n    resource: resource,\n    sort: sort\n  }, React.createElement(ListViewGuesser, __assign({}, rest)));\n};\nvar ListViewGuesser = function (props) {\n  var data = useListContext(props).data;\n  var resource = useResourceContext();\n  var _a = useState(null),\n    child = _a[0],\n    setChild = _a[1];\n  useEffect(function () {\n    setChild(null);\n  }, [resource]);\n  useEffect(function () {\n    if (data && data.length > 0 && !child) {\n      var inferredElements = getElementsFromRecords(data, listFieldTypes);\n      var inferredChild = new InferredElement(listFieldTypes.table, null, inferredElements);\n      setChild(inferredChild.getElement());\n      if (process.env.NODE_ENV === 'production') return;\n      var representation = inferredChild.getRepresentation();\n      var components = ['List'].concat(Array.from(new Set(Array.from(representation.matchAll(/<([^/\\s>]+)/g)).map(function (match) {\n        return match[1];\n      }).filter(function (component) {\n        return component !== 'span';\n      })))).sort();\n      // eslint-disable-next-line no-console\n      console.log(\"Guessed List:\\n\\nimport { \".concat(components.join(', '), \" } from 'react-admin';\\n\\nexport const \").concat(inflection.capitalize(inflection.singularize(resource)), \"List = () => (\\n    <List>\\n\").concat(inferredChild.getRepresentation(), \"\\n    </List>\\n);\"));\n    }\n  }, [data, child, resource]);\n  return React.createElement(ListView, __assign({}, props), child);\n};\nListViewGuesser.propTypes = ListView.propTypes;","map":{"version":3,"mappings":"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","names":["React","useState","useEffect","inflection","ListBase","getElementsFromRecords","InferredElement","useListContext","useResourceContext","ListView","listFieldTypes","ListGuesser","props","disableAuthentication","disableSyncWithLocation","exporter","filter","filterDefaultValues","perPage","queryOptions","resource","sort","rest","debounce","keepPreviousData","ListViewGuesser","child","setChild","data","length","inferredElements","inferredChild","table","getElement","process","env","NODE_ENV","representation","getRepresentation","components","concat","Array","from","Set","matchAll","map","console","log","join","capitalize","singularize","propTypes"],"sourceRoot":"","sources":["../../../src/list/ListGuesser.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}