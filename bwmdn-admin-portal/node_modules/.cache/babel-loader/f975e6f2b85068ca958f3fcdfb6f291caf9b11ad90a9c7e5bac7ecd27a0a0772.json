{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport ActionDelete from '@mui/icons-material/Delete';\nimport inflection from 'inflection';\nimport { alpha, styled } from '@mui/material/styles';\nimport { useDeleteMany, useListContext, useNotify, useRefresh, useResourceContext, useTranslate, useSafeSetState } from 'ra-core';\nimport { Confirm } from '../layout';\nimport { Button } from './Button';\nexport var BulkDeleteWithConfirmButton = function (props) {\n  var _a = props.confirmTitle,\n    confirmTitle = _a === void 0 ? 'ra.message.bulk_delete_title' : _a,\n    _b = props.confirmContent,\n    confirmContent = _b === void 0 ? 'ra.message.bulk_delete_content' : _b,\n    _c = props.icon,\n    icon = _c === void 0 ? defaultIcon : _c,\n    _d = props.label,\n    label = _d === void 0 ? 'ra.action.delete' : _d,\n    _e = props.mutationMode,\n    mutationMode = _e === void 0 ? 'pessimistic' : _e,\n    _f = props.mutationOptions,\n    mutationOptions = _f === void 0 ? {} : _f,\n    onClick = props.onClick,\n    rest = __rest(props, [\"confirmTitle\", \"confirmContent\", \"icon\", \"label\", \"mutationMode\", \"mutationOptions\", \"onClick\"]);\n  var mutationMeta = mutationOptions.meta,\n    otherMutationOptions = __rest(mutationOptions, [\"meta\"]);\n  var _g = useListContext(props),\n    selectedIds = _g.selectedIds,\n    onUnselectItems = _g.onUnselectItems;\n  var _h = useSafeSetState(false),\n    isOpen = _h[0],\n    setOpen = _h[1];\n  var notify = useNotify();\n  var resource = useResourceContext(props);\n  var refresh = useRefresh();\n  var translate = useTranslate();\n  var _j = useDeleteMany(resource, {\n      ids: selectedIds,\n      meta: mutationMeta\n    }, __assign({\n      onSuccess: function () {\n        refresh();\n        notify('ra.notification.deleted', {\n          type: 'info',\n          messageArgs: {\n            smart_count: selectedIds.length\n          },\n          undoable: mutationMode === 'undoable'\n        });\n        onUnselectItems();\n        setOpen(false);\n      },\n      onError: function (error) {\n        notify(typeof error === 'string' ? error : error.message || 'ra.notification.http_error', {\n          type: 'error',\n          messageArgs: {\n            _: typeof error === 'string' ? error : error && error.message ? error.message : undefined\n          }\n        });\n        setOpen(false);\n      },\n      mutationMode: mutationMode\n    }, otherMutationOptions)),\n    deleteMany = _j[0],\n    isLoading = _j[1].isLoading;\n  var handleClick = function (e) {\n    setOpen(true);\n    e.stopPropagation();\n  };\n  var handleDialogClose = function () {\n    setOpen(false);\n  };\n  var handleDelete = function (e) {\n    deleteMany();\n    if (typeof onClick === 'function') {\n      onClick(e);\n    }\n  };\n  return React.createElement(Fragment, null, React.createElement(StyledButton, __assign({\n    onClick: handleClick,\n    label: label\n  }, sanitizeRestProps(rest)), icon), React.createElement(Confirm, {\n    isOpen: isOpen,\n    loading: isLoading,\n    title: confirmTitle,\n    content: confirmContent,\n    translateOptions: {\n      smart_count: selectedIds.length,\n      name: translate(\"resources.\".concat(resource, \".forcedCaseName\"), {\n        smart_count: selectedIds.length,\n        _: inflection.humanize(translate(\"resources.\".concat(resource, \".name\"), {\n          smart_count: selectedIds.length,\n          _: inflection.inflect(resource, selectedIds.length)\n        }), true)\n      })\n    },\n    onConfirm: handleDelete,\n    onClose: handleDialogClose\n  }));\n};\nvar sanitizeRestProps = function (_a) {\n  var classes = _a.classes,\n    filterValues = _a.filterValues,\n    label = _a.label,\n    selectedIds = _a.selectedIds,\n    rest = __rest(_a, [\"classes\", \"filterValues\", \"label\", \"selectedIds\"]);\n  return rest;\n};\nvar PREFIX = 'RaBulkDeleteWithConfirmButton';\nvar StyledButton = styled(Button, {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var theme = _a.theme;\n  return {\n    color: theme.palette.error.main,\n    '&:hover': {\n      backgroundColor: alpha(theme.palette.error.main, 0.12),\n      // Reset on mouse devices\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      }\n    }\n  };\n});\nvar defaultIcon = React.createElement(ActionDelete, null);\nBulkDeleteWithConfirmButton.propTypes = {\n  confirmTitle: PropTypes.string,\n  confirmContent: PropTypes.string,\n  icon: PropTypes.element,\n  label: PropTypes.string,\n  mutationMode: PropTypes.oneOf(['pessimistic', 'optimistic', 'undoable']),\n  resource: PropTypes.string,\n  selectedIds: PropTypes.arrayOf(PropTypes.any)\n};","map":{"version":3,"mappings":"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","names":["React","Fragment","PropTypes","ActionDelete","inflection","alpha","styled","useDeleteMany","useListContext","useNotify","useRefresh","useResourceContext","useTranslate","useSafeSetState","Confirm","Button","BulkDeleteWithConfirmButton","props","confirmTitle","_b","confirmContent","_c","icon","defaultIcon","_d","label","_e","mutationMode","_f","mutationOptions","onClick","rest","mutationMeta","otherMutationOptions","selectedIds","onUnselectItems","isOpen","setOpen","notify","resource","refresh","translate","ids","meta","onSuccess","type","messageArgs","smart_count","length","undoable","onError","error","message","_","undefined","deleteMany","isLoading","handleClick","e","stopPropagation","handleDialogClose","handleDelete","StyledButton","sanitizeRestProps","loading","title","content","translateOptions","name","humanize","inflect","onConfirm","onClose","_a","filterValues","PREFIX","overridesResolver","styles","root","theme","color","palette","main","backgroundColor","propTypes","string","element","oneOf","arrayOf","any"],"sources":["/Users/paigedeveau/Desktop/se-diva-docs-frontend/bwmdn-admin-portal/node_modules/ra-ui-materialui/src/button/BulkDeleteWithConfirmButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Fragment, ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport ActionDelete from '@mui/icons-material/Delete';\nimport inflection from 'inflection';\nimport { alpha, styled } from '@mui/material/styles';\nimport {\n    MutationMode,\n    useDeleteMany,\n    useListContext,\n    useNotify,\n    useRefresh,\n    useResourceContext,\n    useTranslate,\n    useSafeSetState,\n    RaRecord,\n    DeleteManyParams,\n} from 'ra-core';\n\nimport { Confirm } from '../layout';\nimport { Button, ButtonProps } from './Button';\nimport { BulkActionProps } from '../types';\nimport { UseMutationOptions } from 'react-query';\n\nexport const BulkDeleteWithConfirmButton = (\n    props: BulkDeleteWithConfirmButtonProps\n) => {\n    const {\n        confirmTitle = 'ra.message.bulk_delete_title',\n        confirmContent = 'ra.message.bulk_delete_content',\n        icon = defaultIcon,\n        label = 'ra.action.delete',\n        mutationMode = 'pessimistic',\n        mutationOptions = {},\n        onClick,\n        ...rest\n    } = props;\n    const { meta: mutationMeta, ...otherMutationOptions } = mutationOptions;\n    const { selectedIds, onUnselectItems } = useListContext(props);\n    const [isOpen, setOpen] = useSafeSetState(false);\n    const notify = useNotify();\n    const resource = useResourceContext(props);\n    const refresh = useRefresh();\n    const translate = useTranslate();\n    const [deleteMany, { isLoading }] = useDeleteMany(\n        resource,\n        { ids: selectedIds, meta: mutationMeta },\n        {\n            onSuccess: () => {\n                refresh();\n                notify('ra.notification.deleted', {\n                    type: 'info',\n                    messageArgs: { smart_count: selectedIds.length },\n                    undoable: mutationMode === 'undoable',\n                });\n                onUnselectItems();\n                setOpen(false);\n            },\n            onError: (error: Error) => {\n                notify(\n                    typeof error === 'string'\n                        ? error\n                        : error.message || 'ra.notification.http_error',\n                    {\n                        type: 'error',\n                        messageArgs: {\n                            _:\n                                typeof error === 'string'\n                                    ? error\n                                    : error && error.message\n                                    ? error.message\n                                    : undefined,\n                        },\n                    }\n                );\n                setOpen(false);\n            },\n            mutationMode,\n            ...otherMutationOptions,\n        }\n    );\n\n    const handleClick = e => {\n        setOpen(true);\n        e.stopPropagation();\n    };\n\n    const handleDialogClose = () => {\n        setOpen(false);\n    };\n\n    const handleDelete = e => {\n        deleteMany();\n\n        if (typeof onClick === 'function') {\n            onClick(e);\n        }\n    };\n\n    return (\n        <Fragment>\n            <StyledButton\n                onClick={handleClick}\n                label={label}\n                {...sanitizeRestProps(rest)}\n            >\n                {icon}\n            </StyledButton>\n            <Confirm\n                isOpen={isOpen}\n                loading={isLoading}\n                title={confirmTitle}\n                content={confirmContent}\n                translateOptions={{\n                    smart_count: selectedIds.length,\n                    name: translate(`resources.${resource}.forcedCaseName`, {\n                        smart_count: selectedIds.length,\n                        _: inflection.humanize(\n                            translate(`resources.${resource}.name`, {\n                                smart_count: selectedIds.length,\n                                _: inflection.inflect(\n                                    resource,\n                                    selectedIds.length\n                                ),\n                            }),\n                            true\n                        ),\n                    }),\n                }}\n                onConfirm={handleDelete}\n                onClose={handleDialogClose}\n            />\n        </Fragment>\n    );\n};\n\nconst sanitizeRestProps = ({\n    classes,\n    filterValues,\n    label,\n    selectedIds,\n    ...rest\n}: Omit<\n    BulkDeleteWithConfirmButtonProps,\n    'resource' | 'icon' | 'mutationMode'\n>) => rest;\n\nexport interface BulkDeleteWithConfirmButtonProps<\n    RecordType extends RaRecord = any,\n    MutationOptionsError = unknown\n> extends BulkActionProps,\n        ButtonProps {\n    confirmContent?: React.ReactNode;\n    confirmTitle?: string;\n    icon?: ReactElement;\n    mutationMode: MutationMode;\n    mutationOptions?: UseMutationOptions<\n        RecordType,\n        MutationOptionsError,\n        DeleteManyParams<RecordType>\n    > & { meta?: any };\n}\n\nconst PREFIX = 'RaBulkDeleteWithConfirmButton';\n\nconst StyledButton = styled(Button, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    color: theme.palette.error.main,\n    '&:hover': {\n        backgroundColor: alpha(theme.palette.error.main, 0.12),\n        // Reset on mouse devices\n        '@media (hover: none)': {\n            backgroundColor: 'transparent',\n        },\n    },\n}));\n\nconst defaultIcon = <ActionDelete />;\n\nBulkDeleteWithConfirmButton.propTypes = {\n    confirmTitle: PropTypes.string,\n    confirmContent: PropTypes.string,\n    icon: PropTypes.element,\n    label: PropTypes.string,\n    mutationMode: PropTypes.oneOf(['pessimistic', 'optimistic', 'undoable']),\n    resource: PropTypes.string,\n    selectedIds: PropTypes.arrayOf(PropTypes.any),\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}