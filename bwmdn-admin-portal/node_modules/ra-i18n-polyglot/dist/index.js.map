{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import Polyglot from 'node-polyglot';\n\nimport { I18nProvider, TranslationMessages } from 'ra-core';\n\ntype GetMessages = (\n    locale: string\n) => TranslationMessages | Promise<TranslationMessages>;\n\n/**\n * Build a polyglot-based i18nProvider based on a function returning the messages for a locale\n *\n * @example\n *\n * import { Admin, Resource, polyglotI18nProvider } from 'react-admin';\n * import englishMessages from 'ra-language-english';\n * import frenchMessages from 'ra-language-french';\n *\n * const messages = {\n *     fr: frenchMessages,\n *     en: englishMessages,\n * };\n * const i18nProvider = polyglotI18nProvider(locale => messages[locale])\n */\nexport default (\n    getMessages: GetMessages,\n    initialLocale: string = 'en',\n    polyglotOptions: any = {}\n): I18nProvider => {\n    let locale = initialLocale;\n    const messages = getMessages(initialLocale);\n    if (messages instanceof Promise) {\n        throw new Error(\n            `The i18nProvider returned a Promise for the messages of the default locale (${initialLocale}). Please update your i18nProvider to return the messages of the default locale in a synchronous way.`\n        );\n    }\n    const polyglot = new Polyglot({\n        locale,\n        phrases: { '': '', ...messages },\n        ...polyglotOptions,\n    });\n    let translate = polyglot.t.bind(polyglot);\n\n    return {\n        translate: (key: string, options: any = {}) => translate(key, options),\n        changeLocale: (newLocale: string) =>\n            // We systematically return a Promise for the messages because\n            // getMessages may return a Promise\n            Promise.resolve(getMessages(newLocale as string)).then(\n                (messages: TranslationMessages) => {\n                    locale = newLocale;\n                    const newPolyglot = new Polyglot({\n                        locale: newLocale,\n                        phrases: { '': '', ...messages },\n                        ...polyglotOptions,\n                    });\n                    translate = newPolyglot.t.bind(newPolyglot);\n                }\n            ),\n        getLocale: () => locale,\n    };\n};\n"],"mappings":"+2BAAA,wDAAqB,4BAuBd,EAAQ,GACX,EACA,EAAwB,KACxB,EAAuB,CAAC,IACT,CACf,GAAI,GAAS,EACP,EAAW,EAAY,CAAa,EAC1C,GAAI,YAAoB,SACpB,KAAM,IAAI,OACN,+EAA+E,wGACnF,EAEJ,GAAM,GAAW,GAAI,WAAS,GAC1B,SACA,QAAS,GAAE,GAAI,IAAO,IACnB,EACN,EACG,EAAY,EAAS,EAAE,KAAK,CAAQ,EAExC,MAAO,CACH,UAAW,CAAC,EAAa,EAAe,CAAC,IAAM,EAAU,EAAK,CAAO,EACrE,aAAc,AAAC,GAGX,QAAQ,QAAQ,EAAY,CAAmB,CAAC,EAAE,KAC9C,AAAC,GAAkC,CAC/B,EAAS,EACT,GAAM,GAAc,GAAI,WAAS,GAC7B,OAAQ,EACR,QAAS,GAAE,GAAI,IAAO,IACnB,EACN,EACD,EAAY,EAAY,EAAE,KAAK,CAAW,CAC9C,CACJ,EACJ,UAAW,IAAM,CACrB,CACJ,EArCe","names":[]}