{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { IconButton, Tooltip } from '@mui/material';\nimport { useTranslate } from 'ra-core';\n/**\n * An IconButton with a tooltip which ensures the tooltip is closed on click to avoid ghost tooltips\n * when the button position changes.\n */\nexport var IconButtonWithTooltip = function (_a) {\n  var label = _a.label,\n    onClick = _a.onClick,\n    props = __rest(_a, [\"label\", \"onClick\"]);\n  var translate = useTranslate();\n  var _b = React.useState(false),\n    open = _b[0],\n    setOpen = _b[1];\n  var handleClose = function () {\n    setOpen(false);\n  };\n  var handleOpen = function () {\n    setOpen(true);\n  };\n  var translatedLabel = translate(label, {\n    _: label\n  });\n  var handleClick = function (event) {\n    handleClose();\n    onClick(event);\n  };\n  return React.createElement(Tooltip, {\n    title: translatedLabel,\n    open: open,\n    onOpen: handleOpen,\n    onClose: handleClose\n  }, React.createElement(IconButton, __assign({\n    \"aria-label\": translatedLabel,\n    onClick: handleClick\n  }, props)));\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,SAASC,UAAU,EAAmBC,OAAO,QAAQ,eAAe;AACpE,SAASC,YAAY,QAAQ,SAAS;AAEtC;;;;AAIA,OAAO,IAAMC,qBAAqB,GAAG,UAACC,EAIT;EAHzB,SAAK;IACLC,OAAO;IACJC,KAAK,cAH0B,oBAIrC,CADW;EAER,IAAMC,SAAS,GAAGL,YAAY,EAAE;EAC1B,SAAkBH,KAAK,CAACS,QAAQ,CAAC,KAAK,CAAC;IAAtCC,IAAI;IAAEC,OAAO,QAAyB;EAE7C,IAAMC,WAAW,GAAG;IAChBD,OAAO,CAAC,KAAK,CAAC;EAClB,CAAC;EAED,IAAME,UAAU,GAAG;IACfF,OAAO,CAAC,IAAI,CAAC;EACjB,CAAC;EAED,IAAMG,eAAe,GAAGN,SAAS,CAACO,KAAK,EAAE;IAAEC,CAAC,EAAED;EAAK,CAAE,CAAC;EAEtD,IAAME,WAAW,GAAG,UAACC,KAAoC;IACrDN,WAAW,EAAE;IACbN,OAAO,CAACY,KAAK,CAAC;EAClB,CAAC;EAED,OACIlB,oBAACE,OAAO;IACJiB,KAAK,EAAEL,eAAe;IACtBJ,IAAI,EAAEA,IAAI;IACVU,MAAM,EAAEP,UAAU;IAClBQ,OAAO,EAAET;EAAW,GAEpBZ,oBAACC,UAAU;IAAA,cACKa,eAAe;IAC3BR,OAAO,EAAEW;EAAW,GAChBV,KAAK,EACX,CACI;AAElB,CAAC","names":["React","IconButton","Tooltip","useTranslate","IconButtonWithTooltip","_a","onClick","props","translate","useState","open","setOpen","handleClose","handleOpen","translatedLabel","label","_","handleClick","event","title","onOpen","onClose"],"sourceRoot":"","sources":["../../../src/button/IconButtonWithTooltip.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}