{"ast":null,"code":"import * as React from 'react';\nimport { memo } from 'react';\nimport { useTranslateLabel } from '../i18n';\nexport var FieldTitle = function (props) {\n  var source = props.source,\n    label = props.label,\n    resource = props.resource,\n    isRequired = props.isRequired;\n  var translateLabel = useTranslateLabel();\n  if (label === true) {\n    throw new Error('Label parameter must be a string, a ReactElement or false');\n  }\n  if (label === false || label === '') {\n    return null;\n  }\n  if (label && typeof label !== 'string') {\n    return label;\n  }\n  return React.createElement(\"span\", null, translateLabel({\n    label: label,\n    resource: resource,\n    source: source\n  }), isRequired && React.createElement(\"span\", {\n    \"aria-hidden\": \"true\"\n  }, \"\\u2009*\"));\n};\n// What? TypeScript loses the displayName if we don't set it explicitly\nFieldTitle.displayName = 'FieldTitle';\nexport default memo(FieldTitle);","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAAuBC,IAAI,QAAQ,OAAO;AAE1C,SAASC,iBAAiB,QAAQ,SAAS;AAS3C,OAAO,IAAMC,UAAU,GAAG,UAACC,KAAsB;EACrC,UAAM,GAAkCA,KAAK,OAAvC;IAAEC,KAAK,GAA2BD,KAAK,MAAhC;IAAEE,QAAQ,GAAiBF,KAAK,SAAtB;IAAEG,UAAU,GAAKH,KAAK,WAAV;EAC3C,IAAMI,cAAc,GAAGN,iBAAiB,EAAE;EAE1C,IAAIG,KAAK,KAAK,IAAI,EAAE;IAChB,MAAM,IAAII,KAAK,CACX,2DAA2D,CAC9D;;EAGL,IAAIJ,KAAK,KAAK,KAAK,IAAIA,KAAK,KAAK,EAAE,EAAE;IACjC,OAAO,IAAI;;EAGf,IAAIA,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IACpC,OAAOA,KAAK;;EAGhB,OACIL,kCACKQ,cAAc,CAAC;IACZH,KAAK;IACLC,QAAQ;IACRI,MAAM;GACT,CAAC,EACDH,UAAU,IAAIP;IAAA,eAAkB;EAAM,aAAiB,CACrD;AAEf,CAAC;AAED;AACAG,UAAU,CAACQ,WAAW,GAAG,YAAY;AAErC,eAAeV,IAAI,CAACE,UAAU,CAAC","names":["React","memo","useTranslateLabel","FieldTitle","props","label","resource","isRequired","translateLabel","Error","source","displayName"],"sources":["/Users/paigedeveau/Desktop/se-diva-docs-frontend/bwmdn-admin-portal/node_modules/ra-core/src/util/FieldTitle.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactElement, memo } from 'react';\n\nimport { useTranslateLabel } from '../i18n';\n\nexport interface FieldTitleProps {\n    isRequired?: boolean;\n    resource?: string;\n    source?: string;\n    label?: string | ReactElement | boolean;\n}\n\nexport const FieldTitle = (props: FieldTitleProps) => {\n    const { source, label, resource, isRequired } = props;\n    const translateLabel = useTranslateLabel();\n\n    if (label === true) {\n        throw new Error(\n            'Label parameter must be a string, a ReactElement or false'\n        );\n    }\n\n    if (label === false || label === '') {\n        return null;\n    }\n\n    if (label && typeof label !== 'string') {\n        return label;\n    }\n\n    return (\n        <span>\n            {translateLabel({\n                label,\n                resource,\n                source,\n            })}\n            {isRequired && <span aria-hidden=\"true\">&thinsp;*</span>}\n        </span>\n    );\n};\n\n// What? TypeScript loses the displayName if we don't set it explicitly\nFieldTitle.displayName = 'FieldTitle';\n\nexport default memo(FieldTitle);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}