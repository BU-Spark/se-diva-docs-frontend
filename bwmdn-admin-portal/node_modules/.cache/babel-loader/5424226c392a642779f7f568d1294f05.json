{"ast":null,"code":"import { useContext, useMemo } from 'react';\nimport DataProviderContext from './DataProviderContext';\nimport { defaultDataProvider } from './defaultDataProvider';\nimport validateResponseFormat from './validateResponseFormat';\nimport useLogoutIfAccessDenied from '../auth/useLogoutIfAccessDenied';\nimport { reactAdminFetchActions } from './dataFetchActions';\n/**\n * Hook for getting a dataProvider\n *\n * Gets a dataProvider object, which behaves just like the real dataProvider\n * (same methods returning a Promise). But it's actually a Proxy object,\n * which validates the response format, and logs the user out upon error\n * if authProvider.checkError() rejects.\n *\n * @return dataProvider\n *\n * @example Basic usage\n *\n * import * as React from 'react';\n * import { useState } from 'react';\n * import { useDataProvider } from 'react-admin';\n *\n * const PostList = () => {\n *      const [posts, setPosts] = useState([])\n *      const dataProvider = useDataProvider();\n *      useEffect(() => {\n *          dataProvider.getList('posts', { filter: { status: 'pending' }})\n *            .then(({ data }) => setPosts(data));\n *      }, [])\n *\n *      return (\n *          <Fragment>\n *              {posts.map((post, key) => <PostDetail post={post} key={key} />)}\n *          </Fragment>\n *     );\n * }\n *\n * @example Handling all states (loading, error, success)\n *\n * import { useState, useEffect } from 'react';\n * import { useDataProvider } from 'react-admin';\n *\n * const UserProfile = ({ userId }) => {\n *     const dataProvider = useDataProvider();\n *     const [user, setUser] = useState();\n *     const [loading, setLoading] = useState(true);\n *     const [error, setError] = useState();\n *     useEffect(() => {\n *         dataProvider.getOne('users', { id: userId })\n *             .then(({ data }) => {\n *                 setUser(data);\n *                 setLoading(false);\n *             })\n *             .catch(error => {\n *                 setError(error);\n *                 setLoading(false);\n *             })\n *     }, []);\n *\n *     if (loading) return <Loading />;\n *     if (error) return <Error />\n *     if (!user) return null;\n *\n *     return (\n *         <ul>\n *             <li>Name: {user.name}</li>\n *             <li>Email: {user.email}</li>\n *         </ul>\n *     )\n * }\n */\nvar arrayReturnTypes = ['getList', 'getMany', 'getManyReference'];\nexport var useDataProvider = function () {\n  var dataProvider = useContext(DataProviderContext) || defaultDataProvider;\n  var logoutIfAccessDenied = useLogoutIfAccessDenied();\n  var dataProviderProxy = useMemo(function () {\n    return new Proxy(dataProvider, {\n      get: function (target, name) {\n        if (typeof name === 'symbol' || name === 'then') {\n          return;\n        }\n        return function () {\n          var args = [];\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n          var type = name.toString();\n          if (typeof dataProvider[type] !== 'function') {\n            throw new Error(\"Unknown dataProvider function: \".concat(type));\n          }\n          try {\n            return dataProvider[type].apply(dataProvider, args).then(function (response) {\n              if (process.env.NODE_ENV !== 'production' && reactAdminFetchActions.includes(type)) {\n                validateResponseFormat(response, type);\n              }\n              return response;\n            }).catch(function (error) {\n              if (process.env.NODE_ENV !== 'production') {\n                console.error(error);\n              }\n              return logoutIfAccessDenied(error).then(function (loggedOut) {\n                if (loggedOut) return {\n                  data: arrayReturnTypes.includes(type) ? [] : {}\n                };\n                throw error;\n              });\n            });\n          } catch (e) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.error(e);\n            }\n            throw new Error('The dataProvider threw an error. It should return a rejected Promise instead.');\n          }\n        };\n      }\n    });\n  }, [dataProvider, logoutIfAccessDenied]);\n  return dataProviderProxy;\n};","map":{"version":3,"mappings":"AAAA,SAASA,UAAU,EAAEC,OAAO,QAAQ,OAAO;AAE3C,OAAOC,mBAAmB,MAAM,uBAAuB;AACvD,SAASC,mBAAmB,QAAQ,uBAAuB;AAC3D,OAAOC,sBAAsB,MAAM,0BAA0B;AAE7D,OAAOC,uBAAuB,MAAM,iCAAiC;AACrE,SAASC,sBAAsB,QAAQ,oBAAoB;AAE3D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkEA,IAAMC,gBAAgB,GAAG,CAAC,SAAS,EAAE,SAAS,EAAE,kBAAkB,CAAC;AAEnE,OAAO,IAAMC,eAAe,GAAG;EAG3B,IAAMC,YAAY,GAAKT,UAAU,CAACE,mBAAmB,CAAC,IAClDC,mBAAiD;EAErD,IAAMO,oBAAoB,GAAGL,uBAAuB,EAAE;EAEtD,IAAMM,iBAAiB,GAAGV,OAAO,CAAC;IAC9B,OAAO,IAAIW,KAAK,CAACH,YAAY,EAAE;MAC3BI,GAAG,EAAE,UAACC,MAAM,EAAEC,IAAI;QACd,IAAI,OAAOA,IAAI,KAAK,QAAQ,IAAIA,IAAI,KAAK,MAAM,EAAE;UAC7C;;QAEJ,OAAO;UAAC;eAAA,UAAO,EAAPC,qBAAO,EAAPA,IAAO;YAAPC;;UACJ,IAAMC,IAAI,GAAGH,IAAI,CAACI,QAAQ,EAAE;UAE5B,IAAI,OAAOV,YAAY,CAACS,IAAI,CAAC,KAAK,UAAU,EAAE;YAC1C,MAAM,IAAIE,KAAK,CACX,yCAAkCF,IAAI,CAAE,CAC3C;;UAGL,IAAI;YACA,OAAOT,YAAY,CAACS,IAAI,CAAC,CACpBG,KAAK,CAACZ,YAAY,EAAEQ,IAAI,CAAC,CACzBK,IAAI,CAAC,kBAAQ;cACV,IACIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,IACrCnB,sBAAsB,CAACoB,QAAQ,CAACR,IAAI,CAAC,EACvC;gBACEd,sBAAsB,CAACuB,QAAQ,EAAET,IAAI,CAAC;;cAE1C,OAAOS,QAAQ;YACnB,CAAC,CAAC,CACDC,KAAK,CAAC,eAAK;cACR,IAAIL,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;gBACvCI,OAAO,CAACC,KAAK,CAACA,KAAK,CAAC;;cAExB,OAAOpB,oBAAoB,CAACoB,KAAK,CAAC,CAACR,IAAI,CACnC,mBAAS;gBACL,IAAIS,SAAS,EACT,OAAO;kBACHC,IAAI,EAAEzB,gBAAgB,CAACmB,QAAQ,CAC3BR,IAAI,CACP,GACK,EAAE,GACF;iBACT;gBACL,MAAMY,KAAK;cACf,CAAC,CACJ;YACL,CAAC,CAAC;WACT,CAAC,OAAOG,CAAC,EAAE;YACR,IAAIV,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;cACvCI,OAAO,CAACC,KAAK,CAACG,CAAC,CAAC;;YAEpB,MAAM,IAAIb,KAAK,CACX,+EAA+E,CAClF;;QAET,CAAC;MACL;KACH,CAAC;EACN,CAAC,EAAE,CAACX,YAAY,EAAEC,oBAAoB,CAAC,CAAC;EAExC,OAAOC,iBAAiB;AAC5B,CAAC","names":["useContext","useMemo","DataProviderContext","defaultDataProvider","validateResponseFormat","useLogoutIfAccessDenied","reactAdminFetchActions","arrayReturnTypes","useDataProvider","dataProvider","logoutIfAccessDenied","dataProviderProxy","Proxy","get","target","name","_i","args","type","toString","Error","apply","then","process","env","NODE_ENV","includes","response","catch","console","error","loggedOut","data","e"],"sourceRoot":"","sources":["../../../src/dataProvider/useDataProvider.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}