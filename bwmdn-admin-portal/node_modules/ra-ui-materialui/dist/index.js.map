{"version":3,"sources":["../../../node_modules/tsup/assets/cjs_shims.js","../../../node_modules/css-mediaquery/index.js","../src/index.ts","../src/auth/Login.tsx","../src/auth/LoginForm.tsx","../src/input/ArrayInput/ArrayInput.tsx","../src/layout/AppBar.tsx","../src/layout/SidebarToggleButton.tsx","../src/layout/useSidebarState.ts","../src/layout/LoadingIndicator.tsx","../src/button/index.ts","../src/button/CloneButton.tsx","../src/button/Button.tsx","../src/button/CreateButton.tsx","../src/button/ShowButton.tsx","../src/button/SortButton.tsx","../src/button/BulkDeleteButton.tsx","../src/button/BulkDeleteWithConfirmButton.tsx","../src/button/BulkDeleteWithUndoButton.tsx","../src/button/BulkExportButton.tsx","../src/button/BulkUpdateButton.tsx","../src/button/BulkUpdateWithConfirmButton.tsx","../src/button/BulkUpdateWithUndoButton.tsx","../src/button/DeleteButton.tsx","../src/button/DeleteWithUndoButton.tsx","../src/button/DeleteWithConfirmButton.tsx","../src/button/EditButton.tsx","../src/button/ExportButton.tsx","../src/button/IconButtonWithTooltip.tsx","../src/button/LocalesMenuButton.tsx","../src/button/ListButton.tsx","../src/button/RefreshButton.tsx","../src/button/RefreshIconButton.tsx","../src/button/SaveButton.tsx","../src/button/SkipNavigationButton.tsx","../src/button/ToggleThemeButton.tsx","../src/layout/UserMenu.tsx","../src/layout/UserMenuContextProvider.tsx","../src/layout/UserMenuContext.ts","../src/auth/Logout.tsx","../src/layout/HideOnScroll.tsx","../src/layout/CardContentInner.tsx","../src/layout/Confirm.tsx","../src/layout/DashboardMenuItem.tsx","../src/layout/MenuItemLink.tsx","../src/layout/DeviceTestWrapper.tsx","../src/layout/Error.tsx","../src/layout/Title.tsx","../src/layout/useResetErrorBoundaryOnLocationChange.ts","../src/layout/Layout.tsx","../src/layout/Sidebar.tsx","../src/layout/Menu.tsx","../src/layout/LinearProgress.tsx","../src/layout/Loading.tsx","../src/layout/LoadingPage.tsx","../src/layout/NotFound.tsx","../src/layout/Notification.tsx","../src/layout/Theme/useTheme.ts","../src/layout/Theme/ThemeProvider.tsx","../src/layout/TopToolbar.tsx","../src/layout/useUserMenu.ts","../src/input/InputHelperText.tsx","../src/input/sanitizeInputRestProps.ts","../src/Labeled.tsx","../src/input/ArrayInput/ArrayInputContext.ts","../src/input/ArrayInput/SimpleFormIterator.tsx","../src/input/ArrayInput/useArrayInput.ts","../src/input/ArrayInput/useSimpleFormIteratorStyles.ts","../src/input/ArrayInput/SimpleFormIteratorContext.ts","../src/input/ArrayInput/SimpleFormIteratorItem.tsx","../src/input/ArrayInput/useSimpleFormIterator.ts","../src/input/ArrayInput/SimpleFormIteratorItemContext.ts","../src/input/ArrayInput/AddItemButton.tsx","../src/input/ArrayInput/RemoveItemButton.tsx","../src/input/ArrayInput/useSimpleFormIteratorItem.ts","../src/input/ArrayInput/ReOrderButtons.tsx","../src/input/AutocompleteInput.tsx","../src/input/useSupportCreateSuggestion.tsx","../src/input/AutocompleteArrayInput.tsx","../src/input/BooleanInput.tsx","../src/input/InputPropTypes.ts","../src/input/CheckboxGroupInput.tsx","../src/input/CheckboxGroupInputItem.tsx","../src/input/DatagridInput.tsx","../src/list/datagrid/index.ts","../src/list/datagrid/DatagridBody.tsx","../src/list/datagrid/useDatagridStyles.tsx","../src/list/datagrid/DatagridRow.tsx","../src/list/datagrid/DatagridCell.tsx","../src/list/datagrid/ExpandRowButton.tsx","../src/list/datagrid/useDatagridContext.ts","../src/list/datagrid/DatagridContext.ts","../src/list/datagrid/DatagridHeaderCell.tsx","../src/list/datagrid/DatagridLoading.tsx","../src/list/Placeholder.tsx","../src/list/datagrid/Datagrid.tsx","../src/list/datagrid/DatagridHeader.tsx","../src/list/datagrid/DatagridContextProvider.tsx","../src/list/BulkActionsToolbar.tsx","../src/list/filter/Filter.tsx","../src/list/filter/FilterForm.tsx","../src/list/filter/FilterFormInput.tsx","../src/list/FilterContext.tsx","../src/list/filter/FilterButton.tsx","../src/list/filter/FilterButtonMenuItem.tsx","../src/list/filter/useSavedQueries.ts","../src/list/filter/AddSavedQueryDialog.tsx","../src/list/filter/RemoveSavedQueryDialog.tsx","../src/list/filter/FilterList.tsx","../src/list/filter/FilterListItem.tsx","../src/list/filter/FilterLiveSearch.tsx","../src/list/filter/AddSavedQueryIconButton.tsx","../src/list/filter/RemoveSavedQueryIconButton.tsx","../src/list/filter/SavedQueriesList.tsx","../src/list/filter/SavedQueryFilterListItem.tsx","../src/list/pagination/Pagination.tsx","../src/list/pagination/PaginationActions.tsx","../src/list/pagination/PaginationLimit.tsx","../src/input/DateInput.tsx","../src/input/DateTimeInput.tsx","../src/input/FileInput.tsx","../src/input/FileInputPreview.tsx","../src/input/ImageInput.tsx","../src/input/NullableBooleanInput.tsx","../src/input/NumberInput.tsx","../src/input/PasswordInput.tsx","../src/input/TextInput.tsx","../src/input/ResettableTextField.tsx","../src/input/RadioButtonGroupInput.tsx","../src/input/RadioButtonGroupInputItem.tsx","../src/input/ReferenceArrayInput.tsx","../src/input/ReferenceError.tsx","../src/input/ReferenceInput.tsx","../src/input/SearchInput.tsx","../src/input/SelectArrayInput.tsx","../src/input/SelectInput.tsx","../src/input/TranslatableInputs.tsx","../src/input/TranslatableInputsTabs.tsx","../src/input/TranslatableInputsTab.tsx","../src/input/TranslatableInputsTabContent.tsx","../src/defaultTheme.ts","../src/detail/Create.tsx","../src/detail/CreateView.tsx","../src/detail/CreateActions.tsx","../src/detail/Edit.tsx","../src/detail/EditView.tsx","../src/detail/EditActions.tsx","../src/detail/editFieldTypes.tsx","../src/form/TabbedForm.tsx","../src/form/TabbedFormView.tsx","../src/form/Toolbar.tsx","../src/form/TabbedFormTabs.tsx","../src/form/useFormRootPath.ts","../src/form/FormTab.tsx","../src/form/FormTabHeader.tsx","../src/form/SimpleForm.tsx","../src/detail/EditGuesser.tsx","../src/detail/Show.tsx","../src/detail/ShowView.tsx","../src/detail/ShowActions.tsx","../src/detail/showFieldTypes.tsx","../src/field/ArrayField.tsx","../src/field/types.ts","../src/field/BooleanField.tsx","../src/field/sanitizeFieldRestProps.ts","../src/field/ChipField.tsx","../src/field/DateField.tsx","../src/field/EmailField.tsx","../src/field/FileField.tsx","../src/field/FunctionField.tsx","../src/field/ImageField.tsx","../src/field/NumberField.tsx","../src/field/ReferenceArrayField.tsx","../src/field/ReferenceField.tsx","../src/Link.tsx","../src/field/ReferenceManyField.tsx","../src/field/ReferenceOneField.tsx","../src/field/RichTextField.tsx","../src/field/SelectField.tsx","../src/field/TextField.tsx","../src/field/TranslatableFields.tsx","../src/field/TranslatableFieldsTabs.tsx","../src/field/TranslatableFieldsTab.tsx","../src/field/TranslatableFieldsTabContent.tsx","../src/field/UrlField.tsx","../src/field/WrapperField.tsx","../src/detail/SimpleShowLayout.tsx","../src/detail/ShowGuesser.tsx","../src/detail/TabbedShowLayout.tsx","../src/detail/TabbedShowLayoutTabs.tsx","../src/detail/Tab.tsx","../src/list/Empty.tsx","../src/list/List.tsx","../src/list/ListView.tsx","../src/list/ListToolbar.tsx","../src/list/ListActions.tsx","../src/list/ListGuesser.tsx","../src/list/listFieldTypes.tsx","../src/list/SingleFieldList.tsx","../src/list/SimpleList.tsx","../src/list/SimpleListLoading.tsx","../src/AdminUI.tsx","../src/AdminContext.tsx"],"sourcesContent":["// Shim globals in cjs bundle\n// There's a weird bug that esbuild will always inject importMetaUrl\n// if we export it as `const importMetaUrl = ... __filename ...`\n// But using a function will not cause this issue\n\nconst getImportMetaUrl = () =>\n  typeof document === 'undefined'\n    ? new URL('file:' + __filename).href\n    : (document.currentScript && document.currentScript.src) ||\n      new URL('main.js', document.baseURI).href\n\nexport const importMetaUrl = /* @__PURE__ */ getImportMetaUrl()\n","/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\n\n'use strict';\n\nexports.match = matchQuery;\nexports.parse = parseQuery;\n\n// -----------------------------------------------------------------------------\n\nvar RE_MEDIA_QUERY     = /(?:(only|not)?\\s*([^\\s\\(\\)]+)(?:\\s*and)?\\s*)?(.+)?/i,\n    RE_MQ_EXPRESSION   = /\\(\\s*([^\\s\\:\\)]+)\\s*(?:\\:\\s*([^\\s\\)]+))?\\s*\\)/,\n    RE_MQ_FEATURE      = /^(?:(min|max)-)?(.+)/,\n    RE_LENGTH_UNIT     = /(em|rem|px|cm|mm|in|pt|pc)?$/,\n    RE_RESOLUTION_UNIT = /(dpi|dpcm|dppx)?$/;\n\nfunction matchQuery(mediaQuery, values) {\n    return parseQuery(mediaQuery).some(function (query) {\n        var inverse = query.inverse;\n\n        // Either the parsed or specified `type` is \"all\", or the types must be\n        // equal for a match.\n        var typeMatch = query.type === 'all' || values.type === query.type;\n\n        // Quit early when `type` doesn't match, but take \"not\" into account.\n        if ((typeMatch && inverse) || !(typeMatch || inverse)) {\n            return false;\n        }\n\n        var expressionsMatch = query.expressions.every(function (expression) {\n            var feature  = expression.feature,\n                modifier = expression.modifier,\n                expValue = expression.value,\n                value    = values[feature];\n\n            // Missing or falsy values don't match.\n            if (!value) { return false; }\n\n            switch (feature) {\n                case 'orientation':\n                case 'scan':\n                    return value.toLowerCase() === expValue.toLowerCase();\n\n                case 'width':\n                case 'height':\n                case 'device-width':\n                case 'device-height':\n                    expValue = toPx(expValue);\n                    value    = toPx(value);\n                    break;\n\n                case 'resolution':\n                    expValue = toDpi(expValue);\n                    value    = toDpi(value);\n                    break;\n\n                case 'aspect-ratio':\n                case 'device-aspect-ratio':\n                case /* Deprecated */ 'device-pixel-ratio':\n                    expValue = toDecimal(expValue);\n                    value    = toDecimal(value);\n                    break;\n\n                case 'grid':\n                case 'color':\n                case 'color-index':\n                case 'monochrome':\n                    expValue = parseInt(expValue, 10) || 1;\n                    value    = parseInt(value, 10) || 0;\n                    break;\n            }\n\n            switch (modifier) {\n                case 'min': return value >= expValue;\n                case 'max': return value <= expValue;\n                default   : return value === expValue;\n            }\n        });\n\n        return (expressionsMatch && !inverse) || (!expressionsMatch && inverse);\n    });\n}\n\nfunction parseQuery(mediaQuery) {\n    return mediaQuery.split(',').map(function (query) {\n        query = query.trim();\n\n        var captures    = query.match(RE_MEDIA_QUERY),\n            modifier    = captures[1],\n            type        = captures[2],\n            expressions = captures[3] || '',\n            parsed      = {};\n\n        parsed.inverse = !!modifier && modifier.toLowerCase() === 'not';\n        parsed.type    = type ? type.toLowerCase() : 'all';\n\n        // Split expressions into a list.\n        expressions = expressions.match(/\\([^\\)]+\\)/g) || [];\n\n        parsed.expressions = expressions.map(function (expression) {\n            var captures = expression.match(RE_MQ_EXPRESSION),\n                feature  = captures[1].toLowerCase().match(RE_MQ_FEATURE);\n\n            return {\n                modifier: feature[1],\n                feature : feature[2],\n                value   : captures[2]\n            };\n        });\n\n        return parsed;\n    });\n}\n\n// -- Utilities ----------------------------------------------------------------\n\nfunction toDecimal(ratio) {\n    var decimal = Number(ratio),\n        numbers;\n\n    if (!decimal) {\n        numbers = ratio.match(/^(\\d+)\\s*\\/\\s*(\\d+)$/);\n        decimal = numbers[1] / numbers[2];\n    }\n\n    return decimal;\n}\n\nfunction toDpi(resolution) {\n    var value = parseFloat(resolution),\n        units = String(resolution).match(RE_RESOLUTION_UNIT)[1];\n\n    switch (units) {\n        case 'dpcm': return value / 2.54;\n        case 'dppx': return value * 96;\n        default    : return value;\n    }\n}\n\nfunction toPx(length) {\n    var value = parseFloat(length),\n        units = String(length).match(RE_LENGTH_UNIT)[1];\n\n    switch (units) {\n        case 'em' : return value * 16;\n        case 'rem': return value * 16;\n        case 'cm' : return value * 96 / 2.54;\n        case 'mm' : return value * 96 / 2.54 / 10;\n        case 'in' : return value * 96;\n        case 'pt' : return value * 72;\n        case 'pc' : return value * 72 / 12;\n        default   : return value;\n    }\n}\n","export * from './auth';\nexport * from './button';\nexport * from './defaultTheme';\nexport * from './detail';\nexport * from './form';\nexport * from './field';\nexport * from './Labeled';\nexport * from './input';\nexport * from './layout';\nexport * from './Link';\nexport * from './list';\nexport * from './types';\nexport * from './AdminUI';\nexport * from './AdminContext';\n","import * as React from 'react';\nimport { HtmlHTMLAttributes, ReactNode, useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, Avatar, SxProps } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport LockIcon from '@mui/icons-material/Lock';\nimport { useNavigate } from 'react-router-dom';\nimport { useCheckAuth } from 'ra-core';\n\nimport { LoginForm as DefaultLoginForm } from './LoginForm';\n\n/**\n * A standalone login page, to serve as authentication gate to the admin\n *\n * Expects the user to enter a login and a password, which will be checked\n * by the `authProvider.login()` method. Redirects to the root page (/)\n * upon success, otherwise displays an authentication error message.\n *\n * Copy and adapt this component to implement your own login logic\n * (e.g. to authenticate via email or facebook or anything else).\n *\n * @example\n *     import MyLoginPage from './MyLoginPage';\n *     const App = () => (\n *         <Admin loginPage={MyLoginPage} authProvider={authProvider}>\n *             ...\n *        </Admin>\n *     );\n */\nexport const Login = (props: LoginProps) => {\n    const { children, backgroundImage, ...rest } = props;\n    const containerRef = useRef<HTMLDivElement>();\n    let backgroundImageLoaded = false;\n    const checkAuth = useCheckAuth();\n    const navigate = useNavigate();\n    useEffect(() => {\n        checkAuth({}, false)\n            .then(() => {\n                // already authenticated, redirect to the home page\n                navigate('/');\n            })\n            .catch(() => {\n                // not authenticated, stay on the login page\n            });\n    }, [checkAuth, navigate]);\n\n    const updateBackgroundImage = () => {\n        if (!backgroundImageLoaded && containerRef.current) {\n            containerRef.current.style.backgroundImage = `url(${backgroundImage})`;\n            backgroundImageLoaded = true;\n        }\n    };\n\n    // Load background image asynchronously to speed up time to interactive\n    const lazyLoadBackgroundImage = () => {\n        if (backgroundImage) {\n            const img = new Image();\n            img.onload = updateBackgroundImage;\n            img.src = backgroundImage;\n        }\n    };\n\n    useEffect(() => {\n        if (!backgroundImageLoaded) {\n            lazyLoadBackgroundImage();\n        }\n    });\n    return (\n        <Root {...rest} ref={containerRef}>\n            <Card className={LoginClasses.card}>\n                <div className={LoginClasses.avatar}>\n                    <Avatar className={LoginClasses.icon}>\n                        <LockIcon />\n                    </Avatar>\n                </div>\n                {children}\n            </Card>\n        </Root>\n    );\n};\n\nexport interface LoginProps extends HtmlHTMLAttributes<HTMLDivElement> {\n    backgroundImage?: string;\n    children?: ReactNode;\n    className?: string;\n    sx?: SxProps;\n}\n\nconst PREFIX = 'RaLogin';\nexport const LoginClasses = {\n    card: `${PREFIX}-card`,\n    avatar: `${PREFIX}-avatar`,\n    icon: `${PREFIX}-icon`,\n};\n\nconst Root = styled('div', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    display: 'flex',\n    flexDirection: 'column',\n    minHeight: '100vh',\n    height: '1px',\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    backgroundRepeat: 'no-repeat',\n    backgroundSize: 'cover',\n    backgroundImage:\n        'radial-gradient(circle at 50% 14em, #313264 0%, #00023b 60%, #00023b 100%)',\n\n    [`& .${LoginClasses.card}`]: {\n        minWidth: 300,\n        marginTop: '6em',\n    },\n    [`& .${LoginClasses.avatar}`]: {\n        margin: '1em',\n        display: 'flex',\n        justifyContent: 'center',\n    },\n    [`& .${LoginClasses.icon}`]: {\n        backgroundColor: theme.palette.secondary[500],\n    },\n}));\n\nLogin.propTypes = {\n    backgroundImage: PropTypes.string,\n    children: PropTypes.node,\n    className: PropTypes.string,\n};\n\nLogin.defaultProps = {\n    children: <DefaultLoginForm />,\n};\n","import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport { Button, CardContent, CircularProgress } from '@mui/material';\nimport {\n    Form,\n    required,\n    useTranslate,\n    useLogin,\n    useNotify,\n    useSafeSetState,\n} from 'ra-core';\nimport { TextInput } from '../input';\n\nexport const LoginForm = (props: LoginFormProps) => {\n    const { redirectTo, className } = props;\n    const [loading, setLoading] = useSafeSetState(false);\n    const login = useLogin();\n    const translate = useTranslate();\n    const notify = useNotify();\n\n    const submit = (values: FormData) => {\n        setLoading(true);\n        login(values, redirectTo)\n            .then(() => {\n                setLoading(false);\n            })\n            .catch(error => {\n                setLoading(false);\n                notify(\n                    typeof error === 'string'\n                        ? error\n                        : typeof error === 'undefined' || !error.message\n                        ? 'ra.auth.sign_in_error'\n                        : error.message,\n                    {\n                        type: 'warning',\n                        messageArgs: {\n                            _:\n                                typeof error === 'string'\n                                    ? error\n                                    : error && error.message\n                                    ? error.message\n                                    : undefined,\n                        },\n                    }\n                );\n            });\n    };\n\n    return (\n        <StyledForm\n            onSubmit={submit}\n            mode=\"onChange\"\n            noValidate\n            className={className}\n        >\n            <CardContent className={LoginFormClasses.content}>\n                <TextInput\n                    autoFocus\n                    source=\"username\"\n                    label={translate('ra.auth.username')}\n                    validate={required()}\n                    fullWidth\n                />\n                <TextInput\n                    source=\"password\"\n                    label={translate('ra.auth.password')}\n                    type=\"password\"\n                    autoComplete=\"current-password\"\n                    validate={required()}\n                    fullWidth\n                />\n\n                <Button\n                    variant=\"contained\"\n                    type=\"submit\"\n                    color=\"primary\"\n                    disabled={loading}\n                    fullWidth\n                    className={LoginFormClasses.button}\n                >\n                    {loading ? (\n                        <CircularProgress\n                            className={LoginFormClasses.icon}\n                            size={19}\n                            thickness={3}\n                        />\n                    ) : (\n                        translate('ra.auth.sign_in')\n                    )}\n                </Button>\n            </CardContent>\n        </StyledForm>\n    );\n};\n\nconst PREFIX = 'RaLoginForm';\n\nexport const LoginFormClasses = {\n    content: `${PREFIX}-content`,\n    button: `${PREFIX}-button`,\n    icon: `${PREFIX}-icon`,\n};\n\nconst StyledForm = styled(Form, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    [`& .${LoginFormClasses.content}`]: {\n        width: 300,\n    },\n    [`& .${LoginFormClasses.button}`]: {\n        marginTop: theme.spacing(2),\n    },\n    [`& .${LoginFormClasses.icon}`]: {\n        margin: theme.spacing(0.3),\n    },\n}));\n\nexport interface LoginFormProps {\n    redirectTo?: string;\n    className?: string;\n}\n\ninterface FormData {\n    username: string;\n    password: string;\n}\nLoginForm.propTypes = {\n    redirectTo: PropTypes.string,\n};\n","import * as React from 'react';\nimport { cloneElement, Children, ReactElement, useEffect, useRef } from 'react';\nimport clsx from 'clsx';\nimport {\n    isRequired,\n    FieldTitle,\n    composeSyncValidators,\n    RaRecord,\n    useApplyInputDefaultValues,\n    useGetValidationErrorMessage,\n    useResourceContext,\n} from 'ra-core';\nimport { useFieldArray, useFormContext, useWatch } from 'react-hook-form';\nimport {\n    InputLabel,\n    FormControl,\n    FormHelperText,\n    FormControlProps,\n} from '@mui/material';\nimport isEqual from 'lodash/isEqual';\n\nimport { LinearProgress } from '../../layout';\nimport { CommonInputProps } from '../CommonInputProps';\nimport { InputHelperText } from '../InputHelperText';\nimport { sanitizeInputRestProps } from '../sanitizeInputRestProps';\nimport { Labeled } from '../../Labeled';\nimport { ArrayInputContext } from './ArrayInputContext';\n\n/**\n * To edit arrays of data embedded inside a record, <ArrayInput> creates a list of sub-forms.\n *\n *  @example\n *\n *      import { ArrayInput, SimpleFormIterator, DateInput, TextInput } from 'react-admin';\n *\n *      <ArrayInput source=\"backlinks\">\n *          <SimpleFormIterator>\n *              <DateInput source=\"date\" />\n *              <TextInput source=\"url\" />\n *          </SimpleFormIterator>\n *      </ArrayInput>\n *\n * <ArrayInput> allows the edition of embedded arrays, like the backlinks field\n * in the following post record:\n *\n * {\n *   id: 123\n *   backlinks: [\n *         {\n *             date: '2012-08-10T00:00:00.000Z',\n *             url: 'http://example.com/foo/bar.html',\n *         },\n *         {\n *             date: '2012-08-14T00:00:00.000Z',\n *             url: 'https://blog.johndoe.com/2012/08/12/foobar.html',\n *         }\n *    ]\n * }\n *\n * <ArrayInput> expects a single child, which must be a *form iterator* component.\n * A form iterator is a component accepting a fields object as passed by\n * react-hook-form-arrays's useFieldArray() hook, and defining a layout for\n * an array of fields. For instance, the <SimpleFormIterator> component\n * displays an array of fields in an unordered list (<ul>), one sub-form by\n * list item (<li>). It also provides controls for adding and removing\n * a sub-record (a backlink in this example).\n *\n * @see {@link https://react-hook-form.com/api/usefieldarray}\n */\nexport const ArrayInput = (props: ArrayInputProps) => {\n    const {\n        className,\n        defaultValue,\n        label,\n        isFetching,\n        isLoading,\n        children,\n        helperText,\n        record,\n        resource: resourceFromProps,\n        source,\n        validate,\n        variant,\n        disabled,\n        margin = 'dense',\n        ...rest\n    } = props;\n    const sanitizedValidate = Array.isArray(validate)\n        ? composeSyncValidators(validate)\n        : validate;\n    const getValidationErrorMessage = useGetValidationErrorMessage();\n\n    const fieldProps = useFieldArray({\n        name: source,\n    });\n\n    const {\n        getFieldState,\n        clearErrors,\n        formState,\n        getValues,\n        register,\n        setError,\n        unregister,\n    } = useFormContext();\n\n    const { isSubmitted } = formState;\n\n    // We need to register the array itself as a field to enable validation at its level\n    useEffect(() => {\n        register(source);\n\n        return () => {\n            unregister(source, { keepValue: true });\n        };\n    }, [register, unregister, source]);\n\n    useApplyInputDefaultValues(props);\n\n    const value = useWatch({ name: source });\n    const { isDirty, invalid, error } = getFieldState(source, formState);\n\n    // As react-hook-form does not handle validation on the array itself,\n    // we need to do it manually\n    const errorRef = useRef(null);\n    useEffect(() => {\n        const applyValidation = async () => {\n            const newError = await sanitizedValidate(value, getValues(), props);\n            if (newError && !isEqual(errorRef.current, newError)) {\n                errorRef.current = newError;\n                setError(source, {\n                    type: 'manual',\n                    message: getValidationErrorMessage(newError),\n                });\n            }\n\n            if (!newError && error) {\n                errorRef.current = null;\n                clearErrors(source);\n            }\n        };\n\n        if (sanitizedValidate) {\n            applyValidation();\n        }\n    }, [\n        clearErrors,\n        error,\n        sanitizedValidate,\n        value,\n        getValues,\n        props,\n        setError,\n        source,\n        getValidationErrorMessage,\n    ]);\n\n    if (isLoading) {\n        return (\n            <Labeled label={label} className={className}>\n                <LinearProgress />\n            </Labeled>\n        );\n    }\n\n    return (\n        <FormControl\n            fullWidth\n            margin=\"normal\"\n            className={clsx('ra-input', `ra-input-${source}`, className)}\n            error={(isDirty || isSubmitted) && invalid}\n            {...sanitizeInputRestProps(rest)}\n        >\n            <InputLabel\n                htmlFor={source}\n                shrink\n                error={(isDirty || isSubmitted) && invalid}\n            >\n                <FieldTitle\n                    label={label}\n                    source={source}\n                    resource={resourceFromProps}\n                    isRequired={isRequired(validate)}\n                />\n            </InputLabel>\n            <ArrayInputContext.Provider value={fieldProps}>\n                {cloneElement(Children.only(children), {\n                    ...fieldProps,\n                    record,\n                    resource: resourceFromProps,\n                    source,\n                    variant,\n                    margin,\n                    disabled,\n                })}\n            </ArrayInputContext.Provider>\n            {!!((isDirty || isSubmitted) && invalid) || helperText ? (\n                <FormHelperText error={(isDirty || isSubmitted) && invalid}>\n                    <InputHelperText\n                        touched={isDirty || isSubmitted}\n                        error={error?.message}\n                        helperText={helperText}\n                    />\n                </FormHelperText>\n            ) : null}\n        </FormControl>\n    );\n};\n\nArrayInput.defaultProps = {\n    options: {},\n    fullWidth: true,\n};\n\nexport const getArrayInputError = error => {\n    if (Array.isArray(error)) {\n        return undefined;\n    }\n    return error;\n};\n\nexport interface ArrayInputProps\n    extends CommonInputProps,\n        Omit<FormControlProps, 'defaultValue' | 'onBlur' | 'onChange'> {\n    className?: string;\n    children: ReactElement;\n    disabled?: boolean;\n    isFetching?: boolean;\n    isLoading?: boolean;\n    record?: Partial<RaRecord>;\n}\n","import * as React from 'react';\nimport { FC } from 'react';\nimport { styled } from '@mui/material/styles';\nimport { Children, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    AppBar as MuiAppBar,\n    AppBarProps as MuiAppBarProps,\n    Toolbar,\n    Typography,\n    useMediaQuery,\n    Theme,\n} from '@mui/material';\nimport { ComponentPropType, useLocales } from 'ra-core';\n\nimport { SidebarToggleButton } from './SidebarToggleButton';\nimport { LoadingIndicator } from './LoadingIndicator';\nimport { UserMenu } from './UserMenu';\nimport { HideOnScroll } from './HideOnScroll';\nimport { LocalesMenuButton } from '../button';\n\n/**\n * The AppBar component renders a custom MuiAppBar.\n *\n * @param {Object} props\n * @param {ReactNode} props.children React node/s to be rendered as children of the AppBar\n * @param {string} props.className CSS class applied to the MuiAppBar component\n * @param {string} props.color The color of the AppBar\n * @param {boolean} props.open State of the <Admin/> Sidebar\n * @param {Element | boolean} props.userMenu A custom user menu component for the AppBar. <UserMenu/> component by default. Pass false to disable.\n *\n * @example\n *\n * const MyAppBar = props => {\n\n *   return (\n *       <AppBar {...props}>\n *           <Typography\n *               variant=\"h6\"\n *               color=\"inherit\"\n *               className={classes.title}\n *               id=\"react-admin-title\"\n *           />\n *       </AppBar>\n *   );\n *};\n *\n * @example Without a user menu\n *\n * const MyAppBar = props => {\n\n *   return (\n *       <AppBar {...props} userMenu={false} />\n *   );\n *};\n */\nexport const AppBar: FC<AppBarProps> = memo(props => {\n    const {\n        children,\n        className,\n        color = 'secondary',\n        open,\n        title,\n        userMenu = DefaultUserMenu,\n        container: Container = HideOnScroll,\n        ...rest\n    } = props;\n\n    const locales = useLocales();\n    const isXSmall = useMediaQuery<Theme>(theme =>\n        theme.breakpoints.down('sm')\n    );\n\n    return (\n        <Container className={className}>\n            <StyledAppBar\n                className={AppBarClasses.appBar}\n                color={color}\n                {...rest}\n            >\n                <Toolbar\n                    disableGutters\n                    variant={isXSmall ? 'regular' : 'dense'}\n                    className={AppBarClasses.toolbar}\n                >\n                    <SidebarToggleButton className={AppBarClasses.menuButton} />\n                    {Children.count(children) === 0 ? (\n                        <Typography\n                            variant=\"h6\"\n                            color=\"inherit\"\n                            className={AppBarClasses.title}\n                            id=\"react-admin-title\"\n                        />\n                    ) : (\n                        children\n                    )}\n                    {locales && locales.length > 1 ? (\n                        <LocalesMenuButton />\n                    ) : null}\n                    <LoadingIndicator />\n                    {typeof userMenu === 'boolean' ? (\n                        userMenu === true ? (\n                            <UserMenu />\n                        ) : null\n                    ) : (\n                        userMenu\n                    )}\n                </Toolbar>\n            </StyledAppBar>\n        </Container>\n    );\n});\n\nAppBar.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    color: PropTypes.oneOf([\n        'default',\n        'inherit',\n        'primary',\n        'secondary',\n        'transparent',\n    ]),\n    container: ComponentPropType,\n    // @deprecated\n    open: PropTypes.bool,\n    userMenu: PropTypes.oneOfType([PropTypes.element, PropTypes.bool]),\n};\n\nconst DefaultUserMenu = <UserMenu />;\n\nexport interface AppBarProps extends Omit<MuiAppBarProps, 'title'> {\n    container?: React.ElementType<any>;\n    // @deprecated\n    open?: boolean;\n    title?: string | JSX.Element;\n    userMenu?: JSX.Element | boolean;\n}\n\nconst PREFIX = 'RaAppBar';\n\nexport const AppBarClasses = {\n    appBar: `${PREFIX}-appBar`,\n    toolbar: `${PREFIX}-toolbar`,\n    menuButton: `${PREFIX}-menuButton`,\n    menuButtonIconClosed: `${PREFIX}-menuButtonIconClosed`,\n    menuButtonIconOpen: `${PREFIX}-menuButtonIconOpen`,\n    title: `${PREFIX}-title`,\n};\n\nconst StyledAppBar = styled(MuiAppBar, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    [`& .${AppBarClasses.toolbar}`]: {\n        paddingRight: 24,\n    },\n\n    [`& .${AppBarClasses.menuButton}`]: {\n        marginLeft: '0.2em',\n        marginRight: '0.2em',\n    },\n\n    [`& .${AppBarClasses.title}`]: {\n        flex: 1,\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n        overflow: 'hidden',\n    },\n}));\n","import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { IconButton, Tooltip } from '@mui/material';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport { useTranslate } from 'ra-core';\n\nimport { useSidebarState } from './useSidebarState';\n\n/**\n * A button that toggles the sidebar. Used by default in the <AppBar>.\n * @param props The component props\n * @param {String} props.className An optional class name to apply to the button\n\n */\nexport const SidebarToggleButton = (props: SidebarToggleButtonProps) => {\n    const translate = useTranslate();\n\n    const { className } = props;\n    const [open, setOpen] = useSidebarState();\n\n    return (\n        <Tooltip\n            className={className}\n            title={translate(\n                open ? 'ra.action.close_menu' : 'ra.action.open_menu',\n                {\n                    _: 'Open/Close menu',\n                }\n            )}\n            enterDelay={500}\n        >\n            <StyledIconButton\n                color=\"inherit\"\n                onClick={() => setOpen(!open)}\n                size=\"large\"\n            >\n                <MenuIcon\n                    classes={{\n                        root: open\n                            ? SidebarToggleButtonClasses.menuButtonIconOpen\n                            : SidebarToggleButtonClasses.menuButtonIconClosed,\n                    }}\n                />\n            </StyledIconButton>\n        </Tooltip>\n    );\n};\n\nexport type SidebarToggleButtonProps = {\n    className?: string;\n};\n\nconst PREFIX = 'RaSidebarToggleButton';\n\nexport const SidebarToggleButtonClasses = {\n    menuButtonIconClosed: `${PREFIX}-menuButtonIconClosed`,\n    menuButtonIconOpen: `${PREFIX}-menuButtonIconOpen`,\n};\n\nconst StyledIconButton = styled(IconButton, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    [`& .${SidebarToggleButtonClasses.menuButtonIconClosed}`]: {\n        transition: theme.transitions.create(['transform'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        transform: 'rotate(0deg)',\n    },\n\n    [`& .${SidebarToggleButtonClasses.menuButtonIconOpen}`]: {\n        transition: theme.transitions.create(['transform'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        transform: 'rotate(180deg)',\n    },\n}));\n","import { useStore } from 'ra-core';\n\n/**\n * A hook that returns the sidebar open state and a function to toggle it.\n *\n * @example\n * const ToggleSidebar = () => {\n *     const [open, setOpen] = useSidebarState();\n *     return (\n *         <Button onClick={() => setOpen(!open)}>\n *             {open ? 'Open' : 'Close'}\n *         </Button>\n *     );\n * };\n */\nexport const useSidebarState = (): useSidebarStateResult =>\n    useStore<boolean>('sidebar.open', true);\n\nexport type useSidebarStateResult = [boolean, (open: boolean) => void];\n","import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { useTheme } from '@mui/material/styles';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport { useLoading } from 'ra-core';\n\nimport { RefreshIconButton } from '../button';\nimport { SxProps } from '@mui/system';\n\nexport const LoadingIndicator = (props: LoadingIndicatorProps) => {\n    const { className, sx, ...rest } = props;\n    const loading = useLoading();\n\n    const theme = useTheme();\n    return (\n        <Root className={className} sx={sx}>\n            {loading ? (\n                <CircularProgress\n                    className={clsx(\n                        'app-loader',\n                        LoadingIndicatorClasses.loader\n                    )}\n                    color=\"inherit\"\n                    size={theme.spacing(2)}\n                    thickness={6}\n                    {...rest}\n                />\n            ) : (\n                <RefreshIconButton\n                    className={LoadingIndicatorClasses.loadedIcon}\n                />\n            )}\n        </Root>\n    );\n};\n\nLoadingIndicator.propTypes = {\n    classes: PropTypes.object,\n    className: PropTypes.string,\n    width: PropTypes.string,\n};\n\ninterface LoadingIndicatorProps {\n    className?: string;\n    sx?: SxProps;\n}\n\nconst PREFIX = 'RaLoadingIndicator';\n\nexport const LoadingIndicatorClasses = {\n    loader: `${PREFIX}-loader`,\n    loadedIcon: `${PREFIX}-loadedIcon`,\n};\n\nconst Root = styled('div', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    [`& .${LoadingIndicatorClasses.loader}`]: {\n        marginLeft: theme.spacing(2),\n        marginRight: theme.spacing(2),\n    },\n\n    [`& .${LoadingIndicatorClasses.loadedIcon}`]: {},\n}));\n","import CloneButton, { CloneButtonProps } from './CloneButton';\nimport CreateButton, {\n    CreateButtonProps,\n    CreateButtonClasses,\n} from './CreateButton';\nimport ShowButton, { ShowButtonProps } from './ShowButton';\nimport SortButton, { SortButtonProps } from './SortButton';\n\nexport * from './BulkDeleteButton';\nexport * from './BulkDeleteWithConfirmButton';\nexport * from './BulkDeleteWithUndoButton';\nexport * from './BulkExportButton';\nexport * from './BulkUpdateButton';\nexport * from './BulkUpdateWithConfirmButton';\nexport * from './BulkUpdateWithUndoButton';\nexport * from './Button';\nexport * from './DeleteButton';\nexport * from './DeleteWithConfirmButton';\nexport * from './DeleteWithUndoButton';\nexport * from './EditButton';\nexport * from './ExportButton';\nexport * from './IconButtonWithTooltip';\nexport * from './LocalesMenuButton';\nexport * from './ListButton';\nexport * from './RefreshButton';\nexport * from './RefreshIconButton';\nexport * from './SaveButton';\nexport * from './SkipNavigationButton';\nexport * from './ToggleThemeButton';\n\nexport type {\n    CloneButtonProps,\n    CreateButtonProps,\n    ShowButtonProps,\n    SortButtonProps,\n};\n\nexport {\n    CloneButton,\n    CreateButton,\n    CreateButtonClasses,\n    ShowButton,\n    SortButton,\n};\n","import * as React from 'react';\nimport { memo, ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport Queue from '@mui/icons-material/Queue';\nimport { Link } from 'react-router-dom';\nimport { stringify } from 'query-string';\nimport {\n    RaRecord,\n    useResourceContext,\n    useRecordContext,\n    useCreatePath,\n} from 'ra-core';\n\nimport { Button, ButtonProps } from './Button';\n\nexport const CloneButton = (props: CloneButtonProps) => {\n    const {\n        label = 'ra.action.clone',\n        scrollToTop = true,\n        icon = defaultIcon,\n        ...rest\n    } = props;\n    const resource = useResourceContext(props);\n    const record = useRecordContext(props);\n    const createPath = useCreatePath();\n    const pathname = createPath({ resource, type: 'create' });\n    return (\n        <Button\n            component={Link}\n            to={\n                record\n                    ? {\n                          pathname,\n                          search: stringify({\n                              source: JSON.stringify(omitId(record)),\n                          }),\n                          state: { _scrollToTop: scrollToTop },\n                      }\n                    : pathname\n            }\n            label={label}\n            onClick={stopPropagation}\n            {...sanitizeRestProps(rest)}\n        >\n            {icon}\n        </Button>\n    );\n};\n\nconst defaultIcon = <Queue />;\n\n// useful to prevent click bubbling in a datagrid with rowClick\nconst stopPropagation = e => e.stopPropagation();\n\nconst omitId = ({ id, ...rest }: Partial<RaRecord>) => rest;\n\nconst sanitizeRestProps = ({\n    resource,\n    record,\n    ...rest\n}: Omit<CloneButtonProps, 'label' | 'scrollToTop' | 'icon'>) => rest;\n\ninterface Props {\n    record?: Partial<RaRecord>;\n    icon?: ReactElement;\n    scrollToTop?: boolean;\n}\n\nexport type CloneButtonProps = Props & Omit<ButtonProps, 'record'>;\n\nCloneButton.propTypes = {\n    icon: PropTypes.element,\n    label: PropTypes.string,\n    record: PropTypes.any,\n};\n\nexport default memo(CloneButton);\n","import * as React from 'react';\nimport { ReactElement, ElementType } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Button as MuiButton,\n    ButtonProps as MuiButtonProps,\n    Tooltip,\n    IconButton,\n    useMediaQuery,\n    PropTypes as MuiPropTypes,\n    Theme,\n} from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport {\n    MutationMode,\n    RaRecord,\n    RedirectionSideEffect,\n    useTranslate,\n} from 'ra-core';\nimport { Path } from 'react-router';\n\nexport type LocationDescriptor = Partial<Path> & {\n    redirect?: boolean;\n    state?: any;\n    replace?: boolean;\n};\n\n/**\n * A generic Button with side icon. Only the icon is displayed on small screens.\n *\n * The component translates the label. Pass the icon as child.\n * The icon displays on the left side of the button by default. Set alignIcon prop to 'right' to inverse.\n *\n * @example\n *\n * <Button label=\"Edit\" color=\"secondary\" onClick={doEdit}>\n *   <ContentCreate />\n * </Button>\n *\n */\nexport const Button = (props: ButtonProps) => {\n    const {\n        alignIcon = 'left',\n        children,\n        className,\n        disabled,\n        label,\n        color = 'primary',\n        size = 'small',\n        to: locationDescriptor,\n        ...rest\n    } = props;\n    const translate = useTranslate();\n    const translatedLabel = label ? translate(label, { _: label }) : undefined;\n    const linkParams = getLinkParams(locationDescriptor);\n\n    const isXSmall = useMediaQuery((theme: Theme) =>\n        theme.breakpoints.down('sm')\n    );\n    const restProps = sanitizeButtonRestProps(rest);\n\n    return isXSmall ? (\n        label && !disabled ? (\n            <Tooltip title={translatedLabel}>\n                <IconButton\n                    aria-label={translatedLabel}\n                    className={className}\n                    color={color}\n                    {...restProps}\n                    {...linkParams}\n                    size=\"large\"\n                >\n                    {children}\n                </IconButton>\n            </Tooltip>\n        ) : (\n            <IconButton\n                className={className}\n                color={color}\n                disabled={disabled}\n                {...restProps}\n                {...linkParams}\n                size=\"large\"\n            >\n                {children}\n            </IconButton>\n        )\n    ) : (\n        <StyledButton\n            className={className}\n            color={color}\n            size={size}\n            aria-label={translatedLabel}\n            disabled={disabled}\n            startIcon={alignIcon === 'left' && children ? children : undefined}\n            endIcon={alignIcon === 'right' && children ? children : undefined}\n            {...restProps}\n            {...linkParams}\n        >\n            {translatedLabel}\n        </StyledButton>\n    );\n};\n\ninterface Props {\n    alignIcon?: 'left' | 'right';\n    children?: ReactElement;\n    className?: string;\n    color?: MuiPropTypes.Color;\n    component?: ElementType;\n    to?: string | LocationDescriptor;\n    disabled?: boolean;\n    label?: string;\n    size?: 'small' | 'medium' | 'large';\n    redirect?: RedirectionSideEffect;\n    variant?: string;\n    // May be injected by Toolbar\n    record?: RaRecord;\n    resource?: string;\n    mutationMode?: MutationMode;\n}\n\nexport type ButtonProps = Props & MuiButtonProps;\n\nexport const sanitizeButtonRestProps = ({\n    // The next props are injected by Toolbar\n    invalid,\n    pristine,\n    record,\n    redirect,\n    resource,\n    mutationMode,\n    hasCreate,\n    ...rest\n}: any) => rest;\n\nButton.propTypes = {\n    alignIcon: PropTypes.oneOf(['left', 'right']),\n    children: PropTypes.element,\n    className: PropTypes.string,\n    color: PropTypes.oneOfType([\n        PropTypes.oneOf([\n            'inherit',\n            'default',\n            'primary',\n            'secondary',\n            'error',\n            'info',\n            'success',\n            'warning',\n        ]),\n        PropTypes.string,\n    ]),\n    disabled: PropTypes.bool,\n    label: PropTypes.string,\n    size: PropTypes.oneOf(['small', 'medium', 'large']),\n};\n\nconst PREFIX = 'RaButton';\n\nconst StyledButton = styled(MuiButton, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})({\n    '&.MuiButton-sizeSmall': {\n        // fix for icon misalignment on small buttons, see https://github.com/mui/material-ui/pull/30240\n        lineHeight: 1.5,\n    },\n});\n\nconst getLinkParams = (locationDescriptor?: LocationDescriptor | string) => {\n    // eslint-disable-next-line eqeqeq\n    if (locationDescriptor == undefined) {\n        return undefined;\n    }\n\n    if (typeof locationDescriptor === 'string') {\n        return { to: locationDescriptor };\n    }\n\n    const { redirect, replace, state, ...to } = locationDescriptor;\n    return {\n        to,\n        redirect,\n        replace,\n        state,\n    };\n};\n","import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { ReactElement, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { Fab, useMediaQuery, Theme } from '@mui/material';\nimport ContentAdd from '@mui/icons-material/Add';\nimport clsx from 'clsx';\nimport { Link } from 'react-router-dom';\nimport { useTranslate, useResourceContext, useCreatePath } from 'ra-core';\n\nimport { Button, ButtonProps, sanitizeButtonRestProps } from './Button';\n\n/**\n * Opens the Create view of a given resource\n *\n * Renders as a regular button on desktop, and a Floating Action Button\n * on mobile.\n *\n * @example // basic usage\n * import { CreateButton } from 'react-admin';\n *\n * const CommentCreateButton = () => (\n *     <CreateButton label=\"Create comment\" />\n * );\n */\nconst CreateButton = (props: CreateButtonProps) => {\n    const {\n        className,\n        icon = defaultIcon,\n        label = 'ra.action.create',\n        scrollToTop = true,\n        variant,\n        ...rest\n    } = props;\n\n    const resource = useResourceContext(props);\n    const createPath = useCreatePath();\n    const translate = useTranslate();\n    const isSmall = useMediaQuery((theme: Theme) =>\n        theme.breakpoints.down('md')\n    );\n\n    return isSmall ? (\n        <StyledFab\n            component={Link}\n            to={createPath({ resource, type: 'create' })}\n            state={scrollStates[String(scrollToTop)]}\n            color=\"primary\"\n            className={clsx(CreateButtonClasses.floating, className)}\n            aria-label={label && translate(label)}\n            {...sanitizeButtonRestProps(rest)}\n        >\n            {icon}\n        </StyledFab>\n    ) : (\n        <Button\n            component={Link}\n            to={createPath({ resource, type: 'create' })}\n            state={scrollStates[String(scrollToTop)]}\n            className={className}\n            label={label}\n            variant={variant}\n            {...(rest as any)}\n        >\n            {icon}\n        </Button>\n    );\n};\n\n// avoids using useMemo to get a constant value for the link state\nconst scrollStates = {\n    true: { _scrollToTop: true },\n    false: {},\n};\n\nconst defaultIcon = <ContentAdd />;\n\ninterface Props {\n    resource?: string;\n    icon?: ReactElement;\n    scrollToTop?: boolean;\n}\n\nexport type CreateButtonProps = Props & ButtonProps;\n\nCreateButton.propTypes = {\n    resource: PropTypes.string,\n    className: PropTypes.string,\n    icon: PropTypes.element,\n    label: PropTypes.string,\n};\n\nconst PREFIX = 'RaCreateButton';\n\nexport const CreateButtonClasses = {\n    floating: `${PREFIX}-floating`,\n};\n\nconst StyledFab = styled(Fab, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    [`&.${CreateButtonClasses.floating}`]: {\n        color: theme.palette.getContrastText(theme.palette.primary.main),\n        margin: 0,\n        top: 'auto',\n        right: 20,\n        bottom: 60,\n        left: 'auto',\n        position: 'fixed',\n        zIndex: 1000,\n    },\n}));\n\nexport default memo(CreateButton, (prevProps, nextProps) => {\n    return (\n        prevProps.resource === nextProps.resource &&\n        prevProps.label === nextProps.label &&\n        prevProps.translate === nextProps.translate &&\n        prevProps.disabled === nextProps.disabled\n    );\n});\n","import * as React from 'react';\nimport { memo, ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport ImageEye from '@mui/icons-material/RemoveRedEye';\nimport { Link } from 'react-router-dom';\nimport {\n    RaRecord,\n    useResourceContext,\n    useRecordContext,\n    useCreatePath,\n} from 'ra-core';\n\nimport { Button, ButtonProps } from './Button';\n\n/**\n * Opens the Show view of a given record\n *\n * @example // basic usage\n * import { ShowButton } from 'react-admin';\n *\n * const CommentShowButton = ({ record }) => (\n *     <ShowButton label=\"Show comment\" record={record} />\n * );\n */\nconst ShowButton = (props: ShowButtonProps) => {\n    const {\n        icon = defaultIcon,\n        label = 'ra.action.show',\n        scrollToTop = true,\n        ...rest\n    } = props;\n    const resource = useResourceContext(props);\n    const record = useRecordContext(props);\n    const createPath = useCreatePath();\n    if (!record) return null;\n    return (\n        <Button\n            component={Link}\n            to={createPath({ type: 'show', resource, id: record.id })}\n            state={scrollStates[String(scrollToTop)]}\n            label={label}\n            onClick={stopPropagation}\n            {...(rest as any)}\n        >\n            {icon}\n        </Button>\n    );\n};\n\n// avoids using useMemo to get a constant value for the link state\nconst scrollStates = {\n    true: { _scrollToTop: true },\n    false: {},\n};\n\nconst defaultIcon = <ImageEye />;\n\n// useful to prevent click bubbling in a datagrid with rowClick\nconst stopPropagation = e => e.stopPropagation();\n\ninterface Props {\n    icon?: ReactElement;\n    label?: string;\n    record?: RaRecord;\n    scrollToTop?: boolean;\n}\n\nexport type ShowButtonProps = Props & ButtonProps;\n\nShowButton.propTypes = {\n    icon: PropTypes.element,\n    label: PropTypes.string,\n    record: PropTypes.any,\n    scrollToTop: PropTypes.bool,\n};\n\nconst PureShowButton = memo(\n    ShowButton,\n    (props: ShowButtonProps, nextProps: ShowButtonProps) =>\n        props.resource === nextProps.resource &&\n        (props.record && nextProps.record\n            ? props.record.id === nextProps.record.id\n            : props.record == nextProps.record) && // eslint-disable-line eqeqeq\n        props.label === nextProps.label &&\n        props.disabled === nextProps.disabled\n);\n\nexport default PureShowButton;\n","import * as React from 'react';\nimport { ReactElement, memo } from 'react';\nimport {\n    Button,\n    Menu,\n    MenuItem,\n    Tooltip,\n    IconButton,\n    useMediaQuery,\n    Theme,\n} from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport SortIcon from '@mui/icons-material/Sort';\nimport ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';\nimport {\n    useListSortContext,\n    useTranslate,\n    useTranslateLabel,\n    shallowEqual,\n} from 'ra-core';\n\n/**\n * A button allowing to change the sort field and order.\n *\n * To be used inside a ListContext (e.g. inside a <List> or <ReferenceManyField>)\n *\n * Expects one 'fields' prop, containing an array of field strings that shall\n * be used and displayed for sorting.\n *\n * When users clicks on the <SortButton>, they see a dropdown list with the\n * proposed sorting fields. Once they click on one of these fields, the related\n * list refreshes, re-sorted.\n *\n * @example\n *\n * import * as React from 'react';\n * import { TopToolbar, SortButton, CreateButton, ExportButton } from 'react-admin';\n *\n * const ListActions = () => (\n *     <TopToolbar>\n *         <SortButton fields={['reference', 'sales', 'stock']} />\n *         <CreateButton />\n *         <ExportButton />\n *     </TopToolbar>\n * );\n */\nconst SortButton = (props: SortButtonProps) => {\n    const { fields, label = 'ra.sort.sort_by', icon = defaultIcon } = props;\n    const { resource, sort, setSort } = useListSortContext();\n    const translate = useTranslate();\n    const translateLabel = useTranslateLabel();\n    const isXSmall = useMediaQuery((theme: Theme) =>\n        theme.breakpoints.down('sm')\n    );\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const handleChangeSort = (\n        event: React.MouseEvent<HTMLLIElement, MouseEvent>\n    ) => {\n        const field = event.currentTarget.dataset.sort;\n        setSort({\n            field,\n            order: field === sort.field ? inverseOrder(sort.order) : 'ASC',\n        });\n        setAnchorEl(null);\n    };\n\n    const buttonLabel = translate(label, {\n        field: translateLabel({\n            resource,\n            source: sort.field,\n        }),\n        order: translate(`ra.sort.${sort.order}`),\n        _: label,\n    });\n\n    return (\n        <>\n            {isXSmall ? (\n                <Tooltip title={buttonLabel}>\n                    <IconButton\n                        aria-label={buttonLabel}\n                        color=\"primary\"\n                        onClick={handleClick}\n                        size=\"large\"\n                    >\n                        {icon}\n                    </IconButton>\n                </Tooltip>\n            ) : (\n                <StyledButton\n                    aria-controls=\"simple-menu\"\n                    aria-haspopup=\"true\"\n                    color=\"primary\"\n                    onClick={handleClick}\n                    startIcon={icon}\n                    endIcon={<ArrowDropDownIcon />}\n                    size=\"small\"\n                >\n                    {buttonLabel}\n                </StyledButton>\n            )}\n            <Menu\n                id=\"simple-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n            >\n                {fields.map(field => (\n                    <MenuItem\n                        onClick={handleChangeSort}\n                        data-sort={field}\n                        key={field}\n                    >\n                        {translateLabel({\n                            resource,\n                            source: field,\n                        })}{' '}\n                        {translate(\n                            `ra.sort.${\n                                sort.field === field\n                                    ? inverseOrder(sort.order)\n                                    : 'ASC'\n                            }`\n                        )}\n                    </MenuItem>\n                ))}\n            </Menu>\n        </>\n    );\n};\n\nconst defaultIcon = <SortIcon />;\n\nconst inverseOrder = (sort: string) => (sort === 'ASC' ? 'DESC' : 'ASC');\n\nconst arePropsEqual = (prevProps, nextProps) =>\n    shallowEqual(prevProps.fields, nextProps.fields);\n\nexport interface SortButtonProps {\n    fields: string[];\n    label?: string;\n    icon?: ReactElement;\n}\n\nconst StyledButton = styled(Button, {\n    name: 'RaSortButton',\n    overridesResolver: (props, styles) => styles.root,\n})({\n    '&.MuiButton-sizeSmall': {\n        // fix for icon misalignment on small buttons, see https://github.com/mui/material-ui/pull/30240\n        lineHeight: 1.5,\n    },\n    '& .MuiButton-endIcon': { ml: 0 },\n});\n\nexport default memo(SortButton, arePropsEqual);\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    BulkDeleteWithConfirmButton,\n    BulkDeleteWithConfirmButtonProps,\n} from './BulkDeleteWithConfirmButton';\nimport {\n    BulkDeleteWithUndoButton,\n    BulkDeleteWithUndoButtonProps,\n} from './BulkDeleteWithUndoButton';\nimport { MutationMode } from 'ra-core';\n\n/**\n * Deletes the selected rows.\n *\n * To be used inside the <List bulkActionButtons> prop (where it's enabled by default).\n *\n * @example // basic usage\n * import * as React from 'react';\n * import { Fragment } from 'react';\n * import { BulkDeleteButton, BulkExportButton } from 'react-admin';\n *\n * const PostBulkActionButtons = () => (\n *     <Fragment>\n *         <BulkExportButton />\n *         <BulkDeleteButton />\n *     </Fragment>\n * );\n *\n * export const PostList = (props) => (\n *     <List {...props} bulkActionButtons={<PostBulkActionButtons />}>\n *         ...\n *     </List>\n * );\n */\nexport const BulkDeleteButton = ({\n    mutationMode = 'undoable',\n    ...props\n}: BulkDeleteButtonProps) =>\n    mutationMode === 'undoable' ? (\n        <BulkDeleteWithUndoButton {...props} />\n    ) : (\n        <BulkDeleteWithConfirmButton mutationMode={mutationMode} {...props} />\n    );\n\ninterface Props {\n    mutationMode?: MutationMode;\n}\n\nexport type BulkDeleteButtonProps = Props &\n    (BulkDeleteWithUndoButtonProps | BulkDeleteWithConfirmButtonProps);\n\nBulkDeleteButton.propTypes = {\n    label: PropTypes.string,\n    resource: PropTypes.string,\n    selectedIds: PropTypes.arrayOf(PropTypes.any),\n    mutationMode: PropTypes.oneOf(['pessimistic', 'optimistic', 'undoable']),\n    icon: PropTypes.element,\n};\n","import * as React from 'react';\nimport { Fragment, ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport ActionDelete from '@mui/icons-material/Delete';\nimport inflection from 'inflection';\nimport { alpha, styled } from '@mui/material/styles';\nimport {\n    MutationMode,\n    useDeleteMany,\n    useListContext,\n    useNotify,\n    useRefresh,\n    useResourceContext,\n    useTranslate,\n    useUnselectAll,\n    useSafeSetState,\n} from 'ra-core';\n\nimport { Confirm } from '../layout';\nimport { Button, ButtonProps } from './Button';\nimport { BulkActionProps } from '../types';\n\nexport const BulkDeleteWithConfirmButton = (\n    props: BulkDeleteWithConfirmButtonProps\n) => {\n    const {\n        confirmTitle = 'ra.message.bulk_delete_title',\n        confirmContent = 'ra.message.bulk_delete_content',\n        icon = defaultIcon,\n        label = 'ra.action.delete',\n        mutationMode = 'pessimistic',\n        onClick,\n        ...rest\n    } = props;\n    const { selectedIds } = useListContext(props);\n    const [isOpen, setOpen] = useSafeSetState(false);\n    const notify = useNotify();\n    const resource = useResourceContext(props);\n    const unselectAll = useUnselectAll(resource);\n    const refresh = useRefresh();\n    const translate = useTranslate();\n    const [deleteMany, { isLoading }] = useDeleteMany(\n        resource,\n        { ids: selectedIds },\n        {\n            onSuccess: () => {\n                refresh();\n                notify('ra.notification.deleted', {\n                    type: 'info',\n                    messageArgs: { smart_count: selectedIds.length },\n                });\n                unselectAll();\n                setOpen(false);\n            },\n            onError: (error: Error) => {\n                notify(\n                    typeof error === 'string'\n                        ? error\n                        : error.message || 'ra.notification.http_error',\n                    {\n                        type: 'warning',\n                        messageArgs: {\n                            _:\n                                typeof error === 'string'\n                                    ? error\n                                    : error && error.message\n                                    ? error.message\n                                    : undefined,\n                        },\n                    }\n                );\n                setOpen(false);\n            },\n            mutationMode,\n        }\n    );\n\n    const handleClick = e => {\n        setOpen(true);\n        e.stopPropagation();\n    };\n\n    const handleDialogClose = () => {\n        setOpen(false);\n    };\n\n    const handleDelete = e => {\n        deleteMany();\n\n        if (typeof onClick === 'function') {\n            onClick(e);\n        }\n    };\n\n    return (\n        <Fragment>\n            <StyledButton\n                onClick={handleClick}\n                label={label}\n                {...sanitizeRestProps(rest)}\n            >\n                {icon}\n            </StyledButton>\n            <Confirm\n                isOpen={isOpen}\n                loading={isLoading}\n                title={confirmTitle}\n                content={confirmContent}\n                translateOptions={{\n                    smart_count: selectedIds.length,\n                    name: translate(`resources.${resource}.forcedCaseName`, {\n                        smart_count: selectedIds.length,\n                        _: inflection.humanize(\n                            translate(`resources.${resource}.name`, {\n                                smart_count: selectedIds.length,\n                                _: inflection.inflect(\n                                    resource,\n                                    selectedIds.length\n                                ),\n                            }),\n                            true\n                        ),\n                    }),\n                }}\n                onConfirm={handleDelete}\n                onClose={handleDialogClose}\n            />\n        </Fragment>\n    );\n};\n\nconst sanitizeRestProps = ({\n    classes,\n    filterValues,\n    label,\n    selectedIds,\n    ...rest\n}: Omit<\n    BulkDeleteWithConfirmButtonProps,\n    'resource' | 'icon' | 'mutationMode'\n>) => rest;\n\nexport interface BulkDeleteWithConfirmButtonProps\n    extends BulkActionProps,\n        ButtonProps {\n    confirmContent?: React.ReactNode;\n    confirmTitle?: string;\n    icon?: ReactElement;\n    mutationMode: MutationMode;\n}\n\nconst PREFIX = 'RaBulkDeleteWithConfirmButton';\n\nconst StyledButton = styled(Button, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    color: theme.palette.error.main,\n    '&:hover': {\n        backgroundColor: alpha(theme.palette.error.main, 0.12),\n        // Reset on mouse devices\n        '@media (hover: none)': {\n            backgroundColor: 'transparent',\n        },\n    },\n}));\n\nconst defaultIcon = <ActionDelete />;\n\nBulkDeleteWithConfirmButton.propTypes = {\n    confirmTitle: PropTypes.string,\n    confirmContent: PropTypes.string,\n    icon: PropTypes.element,\n    label: PropTypes.string,\n    mutationMode: PropTypes.oneOf(['pessimistic', 'optimistic', 'undoable']),\n    resource: PropTypes.string,\n    selectedIds: PropTypes.arrayOf(PropTypes.any),\n};\n","import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport ActionDelete from '@mui/icons-material/Delete';\nimport { alpha } from '@mui/material/styles';\nimport {\n    useDeleteMany,\n    useRefresh,\n    useNotify,\n    useUnselectAll,\n    useResourceContext,\n    useListContext,\n} from 'ra-core';\n\nimport { Button, ButtonProps } from './Button';\nimport { BulkActionProps } from '../types';\n\nexport const BulkDeleteWithUndoButton = (\n    props: BulkDeleteWithUndoButtonProps\n) => {\n    const {\n        label = 'ra.action.delete',\n        icon = defaultIcon,\n        onClick,\n        ...rest\n    } = props;\n    const { selectedIds } = useListContext(props);\n\n    const notify = useNotify();\n    const resource = useResourceContext(props);\n    const unselectAll = useUnselectAll(resource);\n    const refresh = useRefresh();\n    const [deleteMany, { isLoading }] = useDeleteMany();\n\n    const handleClick = e => {\n        deleteMany(\n            resource,\n            { ids: selectedIds },\n            {\n                onSuccess: () => {\n                    notify('ra.notification.deleted', {\n                        type: 'info',\n                        messageArgs: { smart_count: selectedIds.length },\n                        undoable: true,\n                    });\n                    unselectAll();\n                },\n                onError: (error: Error) => {\n                    notify(\n                        typeof error === 'string'\n                            ? error\n                            : error.message || 'ra.notification.http_error',\n                        {\n                            type: 'warning',\n                            messageArgs: {\n                                _:\n                                    typeof error === 'string'\n                                        ? error\n                                        : error && error.message\n                                        ? error.message\n                                        : undefined,\n                            },\n                        }\n                    );\n                    refresh();\n                },\n                mutationMode: 'undoable',\n            }\n        );\n        if (typeof onClick === 'function') {\n            onClick(e);\n        }\n    };\n\n    return (\n        <StyledButton\n            onClick={handleClick}\n            label={label}\n            disabled={isLoading}\n            {...sanitizeRestProps(rest)}\n        >\n            {icon}\n        </StyledButton>\n    );\n};\n\nconst defaultIcon = <ActionDelete />;\n\nconst sanitizeRestProps = ({\n    classes,\n    filterValues,\n    label,\n    selectedIds,\n    ...rest\n}: Omit<BulkDeleteWithUndoButtonProps, 'resource' | 'icon'>) => rest;\n\nexport interface BulkDeleteWithUndoButtonProps\n    extends BulkActionProps,\n        ButtonProps {\n    icon?: ReactElement;\n}\n\nconst PREFIX = 'RaBulkDeleteWithUndoButton';\n\nconst StyledButton = styled(Button, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    color: theme.palette.error.main,\n    '&:hover': {\n        backgroundColor: alpha(theme.palette.error.main, 0.12),\n        // Reset on mouse devices\n        '@media (hover: none)': {\n            backgroundColor: 'transparent',\n        },\n    },\n}));\n\nBulkDeleteWithUndoButton.propTypes = {\n    label: PropTypes.string,\n    resource: PropTypes.string,\n    selectedIds: PropTypes.arrayOf(PropTypes.any),\n    icon: PropTypes.element,\n};\n","import * as React from 'react';\nimport { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport DownloadIcon from '@mui/icons-material/GetApp';\nimport {\n    fetchRelatedRecords,\n    useDataProvider,\n    useNotify,\n    Identifier,\n    Exporter,\n    useListContext,\n} from 'ra-core';\n\nimport { Button, ButtonProps } from './Button';\n\n/**\n * Export the selected rows\n *\n * To be used inside the <List bulkActionButtons> prop.\n *\n * @example // basic usage\n * import * as React from 'react';\n * import { Fragment } from 'react';\n * import { BulkDeleteButton, BulkExportButton } from 'react-admin';\n *\n * const PostBulkActionButtons = () => (\n *     <Fragment>\n *         <BulkExportButton />\n *         <BulkDeleteButton />\n *     </Fragment>\n * );\n *\n * export const PostList = (props) => (\n *     <List {...props} bulkActionButtons={<PostBulkActionButtons />}>\n *         ...\n *     </List>\n * );\n */\nexport const BulkExportButton = (props: BulkExportButtonProps) => {\n    const {\n        onClick,\n        label = 'ra.action.export',\n        icon = defaultIcon,\n        exporter: customExporter,\n        ...rest\n    } = props;\n    const {\n        exporter: exporterFromContext,\n        resource,\n        selectedIds,\n    } = useListContext(props);\n    const exporter = customExporter || exporterFromContext;\n    const dataProvider = useDataProvider();\n    const notify = useNotify();\n    const handleClick = useCallback(\n        event => {\n            exporter &&\n                dataProvider\n                    .getMany(resource, { ids: selectedIds })\n                    .then(({ data }) =>\n                        exporter(\n                            data,\n                            fetchRelatedRecords(dataProvider),\n                            dataProvider,\n                            resource\n                        )\n                    )\n                    .catch(error => {\n                        console.error(error);\n                        notify('ra.notification.http_error', {\n                            type: 'warning',\n                        });\n                    });\n            if (typeof onClick === 'function') {\n                onClick(event);\n            }\n        },\n        [dataProvider, exporter, notify, onClick, resource, selectedIds]\n    );\n\n    return (\n        <Button\n            onClick={handleClick}\n            label={label}\n            {...sanitizeRestProps(rest)}\n        >\n            {icon}\n        </Button>\n    );\n};\n\nconst defaultIcon = <DownloadIcon />;\n\nconst sanitizeRestProps = ({\n    filterValues,\n    selectedIds,\n    resource,\n    ...rest\n}: Omit<BulkExportButtonProps, 'exporter' | 'label'>) => rest;\n\ninterface Props {\n    exporter?: Exporter;\n    filterValues?: any;\n    icon?: JSX.Element;\n    label?: string;\n    onClick?: (e: Event) => void;\n    selectedIds?: Identifier[];\n    resource?: string;\n}\n\nexport type BulkExportButtonProps = Props & ButtonProps;\n\nBulkExportButton.propTypes = {\n    exporter: PropTypes.func,\n    label: PropTypes.string,\n    resource: PropTypes.string,\n    selectedIds: PropTypes.arrayOf(PropTypes.any),\n    icon: PropTypes.element,\n};\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    BulkUpdateWithConfirmButton,\n    BulkUpdateWithConfirmButtonProps,\n} from './BulkUpdateWithConfirmButton';\nimport {\n    BulkUpdateWithUndoButton,\n    BulkUpdateWithUndoButtonProps,\n} from './BulkUpdateWithUndoButton';\nimport { MutationMode } from 'ra-core';\n\n/**\n * Updates the selected rows.\n *\n * To be used inside the <List bulkActionButtons> prop (where it's enabled by default).\n *\n * @example // basic usage\n * import * as React from 'react';\n * import { Fragment } from 'react';\n * import { BulkUpdateButton, BulkExportButton } from 'react-admin';\n *\n * const PostBulkActionButtons = () => (\n *     <Fragment>\n *         <BulkExportButton />\n *         <BulkUpdateButton label=\"Reset Views\" data={{ views: 0 }} />\n *     </Fragment>\n * );\n *\n * export const PostList = (props) => (\n *     <List {...props} bulkActionButtons={<PostBulkActionButtons />}>\n *         ...\n *     </List>\n * );\n */\nexport const BulkUpdateButton = (props: BulkUpdateButtonProps) => {\n    const { mutationMode, ...rest } = props;\n\n    return mutationMode === 'undoable' ? (\n        <BulkUpdateWithUndoButton {...rest} />\n    ) : (\n        <BulkUpdateWithConfirmButton mutationMode={mutationMode} {...rest} />\n    );\n};\n\ninterface Props {\n    mutationMode?: MutationMode;\n}\n\nexport type BulkUpdateButtonProps = Props &\n    (BulkUpdateWithUndoButtonProps | BulkUpdateWithConfirmButtonProps);\n\nBulkUpdateButton.propTypes = {\n    label: PropTypes.string,\n    resource: PropTypes.string,\n    selectedIds: PropTypes.arrayOf(PropTypes.any),\n    mutationMode: PropTypes.oneOf(['pessimistic', 'optimistic', 'undoable']),\n    icon: PropTypes.element,\n};\n\nBulkUpdateButton.defaultProps = {\n    mutationMode: 'undoable',\n    data: [],\n};\n","import * as React from 'react';\nimport { Fragment, useState, ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport ActionUpdate from '@mui/icons-material/Update';\nimport inflection from 'inflection';\nimport { alpha, styled } from '@mui/material/styles';\nimport {\n    useListContext,\n    useTranslate,\n    useUpdateMany,\n    useRefresh,\n    useNotify,\n    useUnselectAll,\n    useResourceContext,\n    MutationMode,\n} from 'ra-core';\n\nimport { Confirm } from '../layout';\nimport { Button, ButtonProps } from './Button';\nimport { BulkActionProps } from '../types';\n\nexport const BulkUpdateWithConfirmButton = (\n    props: BulkUpdateWithConfirmButtonProps\n) => {\n    const notify = useNotify();\n    const refresh = useRefresh();\n    const translate = useTranslate();\n    const resource = useResourceContext(props);\n    const unselectAll = useUnselectAll(resource);\n    const [isOpen, setOpen] = useState(false);\n    const { selectedIds } = useListContext(props);\n\n    const {\n        confirmTitle = 'ra.message.bulk_update_title',\n        confirmContent = 'ra.message.bulk_update_content',\n        data,\n        icon = defaultIcon,\n        label = 'ra.action.update',\n        mutationMode = 'pessimistic',\n        onClick,\n        onSuccess = () => {\n            refresh();\n            notify('ra.notification.updated', {\n                type: 'info',\n                messageArgs: { smart_count: selectedIds.length },\n            });\n            unselectAll();\n            setOpen(false);\n        },\n        onError = (error: Error | string) => {\n            notify(\n                typeof error === 'string'\n                    ? error\n                    : error.message || 'ra.notification.http_error',\n                {\n                    type: 'warning',\n                    messageArgs: {\n                        _:\n                            typeof error === 'string'\n                                ? error\n                                : error && error.message\n                                ? error.message\n                                : undefined,\n                    },\n                }\n            );\n            setOpen(false);\n        },\n        ...rest\n    } = props;\n\n    const [updateMany, { isLoading }] = useUpdateMany(\n        resource,\n        { ids: selectedIds, data },\n        {\n            onSuccess,\n            onError,\n            mutationMode,\n        }\n    );\n\n    const handleClick = e => {\n        setOpen(true);\n        e.stopPropagation();\n    };\n\n    const handleDialogClose = () => {\n        setOpen(false);\n    };\n\n    const handleUpdate = e => {\n        updateMany();\n\n        if (typeof onClick === 'function') {\n            onClick(e);\n        }\n    };\n\n    return (\n        <Fragment>\n            <StyledButton\n                onClick={handleClick}\n                label={label}\n                {...sanitizeRestProps(rest)}\n            >\n                {icon}\n            </StyledButton>\n            <Confirm\n                isOpen={isOpen}\n                loading={isLoading}\n                title={confirmTitle}\n                content={confirmContent}\n                translateOptions={{\n                    smart_count: selectedIds.length,\n                    name: translate(`resources.${resource}.forcedCaseName`, {\n                        smart_count: selectedIds.length,\n                        _: inflection.humanize(\n                            translate(`resources.${resource}.name`, {\n                                smart_count: selectedIds.length,\n                                _: inflection.inflect(\n                                    resource,\n                                    selectedIds.length\n                                ),\n                            }),\n                            true\n                        ),\n                    }),\n                }}\n                onConfirm={handleUpdate}\n                onClose={handleDialogClose}\n            />\n        </Fragment>\n    );\n};\n\nconst sanitizeRestProps = ({\n    filterValues,\n    label,\n    onSuccess,\n    onError,\n    ...rest\n}: Omit<\n    BulkUpdateWithConfirmButtonProps,\n    'resource' | 'selectedIds' | 'icon' | 'data'\n>) => rest;\n\nexport interface BulkUpdateWithConfirmButtonProps\n    extends BulkActionProps,\n        ButtonProps {\n    confirmContent?: React.ReactNode;\n    confirmTitle?: string;\n    icon?: ReactElement;\n    data: any;\n    onSuccess?: () => void;\n    onError?: (error: any) => void;\n    mutationMode?: MutationMode;\n}\n\nBulkUpdateWithConfirmButton.propTypes = {\n    confirmTitle: PropTypes.string,\n    confirmContent: PropTypes.string,\n    label: PropTypes.string,\n    resource: PropTypes.string,\n    selectedIds: PropTypes.arrayOf(PropTypes.any),\n    icon: PropTypes.element,\n    data: PropTypes.any.isRequired,\n    mutationMode: PropTypes.oneOf(['pessimistic', 'optimistic', 'undoable']),\n};\n\nconst PREFIX = 'RaBulkUpdateWithConfirmButton';\n\nconst StyledButton = styled(Button, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    color: theme.palette.primary.main,\n    '&:hover': {\n        backgroundColor: alpha(theme.palette.primary.main, 0.12),\n        // Reset on mouse devices\n        '@media (hover: none)': {\n            backgroundColor: 'transparent',\n        },\n    },\n}));\n\nconst defaultIcon = <ActionUpdate />;\n","import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport ActionUpdate from '@mui/icons-material/Update';\nimport { alpha } from '@mui/material/styles';\nimport {\n    useUpdateMany,\n    useRefresh,\n    useNotify,\n    useUnselectAll,\n    useResourceContext,\n    useListContext,\n} from 'ra-core';\n\nimport { Button, ButtonProps } from './Button';\nimport { BulkActionProps } from '../types';\n\nexport const BulkUpdateWithUndoButton = (\n    props: BulkUpdateWithUndoButtonProps\n) => {\n    const { selectedIds } = useListContext(props);\n\n    const notify = useNotify();\n    const resource = useResourceContext(props);\n    const unselectAll = useUnselectAll(resource);\n    const refresh = useRefresh();\n\n    const {\n        data,\n        label = 'ra.action.update',\n        icon = defaultIcon,\n        onClick,\n        onSuccess = () => {\n            notify('ra.notification.updated', {\n                type: 'info',\n                messageArgs: { smart_count: selectedIds.length },\n                undoable: true,\n            });\n            unselectAll();\n            refresh();\n        },\n        onError = (error: Error | string) => {\n            notify(\n                typeof error === 'string'\n                    ? error\n                    : error.message || 'ra.notification.http_error',\n                {\n                    type: 'warning',\n                    messageArgs: {\n                        _:\n                            typeof error === 'string'\n                                ? error\n                                : error && error.message\n                                ? error.message\n                                : undefined,\n                    },\n                }\n            );\n            refresh();\n        },\n        ...rest\n    } = props;\n\n    const [updateMany, { isLoading }] = useUpdateMany(\n        resource,\n        { ids: selectedIds, data },\n        {\n            onSuccess,\n            onError,\n            mutationMode: 'undoable',\n        }\n    );\n\n    const handleClick = e => {\n        updateMany();\n        if (typeof onClick === 'function') {\n            onClick(e);\n        }\n    };\n\n    return (\n        <StyledButton\n            onClick={handleClick}\n            label={label}\n            disabled={isLoading}\n            {...sanitizeRestProps(rest)}\n        >\n            {icon}\n        </StyledButton>\n    );\n};\n\nconst defaultIcon = <ActionUpdate />;\n\nconst sanitizeRestProps = ({\n    filterValues,\n    label,\n    selectedIds,\n    onSuccess,\n    onError,\n    ...rest\n}: Omit<BulkUpdateWithUndoButtonProps, 'resource' | 'icon' | 'data'>) => rest;\n\nexport interface BulkUpdateWithUndoButtonProps\n    extends BulkActionProps,\n        ButtonProps {\n    icon?: ReactElement;\n    data: any;\n    onSuccess?: () => void;\n    onError?: (error: any) => void;\n}\n\nBulkUpdateWithUndoButton.propTypes = {\n    label: PropTypes.string,\n    resource: PropTypes.string,\n    selectedIds: PropTypes.arrayOf(PropTypes.any),\n    icon: PropTypes.element,\n    data: PropTypes.any.isRequired,\n};\n\nconst PREFIX = 'RaBulkUpdateWithUndoButton';\n\nconst StyledButton = styled(Button, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    color: theme.palette.primary.main,\n    '&:hover': {\n        backgroundColor: alpha(theme.palette.primary.main, 0.12),\n        // Reset on mouse devices\n        '@media (hover: none)': {\n            backgroundColor: 'transparent',\n        },\n    },\n}));\n","import * as React from 'react';\nimport { ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport { UseMutationOptions } from 'react-query';\nimport {\n    RaRecord,\n    RedirectionSideEffect,\n    MutationMode,\n    DeleteParams,\n    useRecordContext,\n    useSaveContext,\n    SaveContextValue,\n} from 'ra-core';\n\nimport { ButtonProps } from './Button';\nimport { DeleteWithUndoButton } from './DeleteWithUndoButton';\nimport { DeleteWithConfirmButton } from './DeleteWithConfirmButton';\n\n/**\n * Button used to delete a single record. Added by default by the <Toolbar> of edit and show views.\n *\n * @typedef {Object} Props The props you can use (other props are injected if you used it in the <Toolbar>)\n * @prop {boolean} mutationMode Either 'pessimistic', 'optimistic' or 'undoable'. Determine whether the deletion uses an undo button in a notification or a confirmation dialog. Defaults to 'undoable'.\n * @prop {Object} record The current resource record\n * @prop {string} className\n * @prop {string} label Button label. Defaults to 'ra.action.delete, translated.\n * @prop {boolean} disabled Disable the button.\n * @prop {string} variant MUI variant for the button. Defaults to 'contained'.\n * @prop {ReactElement} icon Override the icon. Defaults to the Delete icon from MUI.\n *\n * @param {Props} props\n *\n * @example Usage in the <TopToolbar> of an <Edit> form\n *\n * import * as React from 'react';\n * import { Edit, DeleteButton, TopToolbar } from 'react-admin';\n *\n * const EditActions = props => {\n *     const { data, resource } = props;\n *     return (\n *         <TopToolbar>\n *             <DeleteButton\n *                 mutationMode=\"pessimistic\" // Renders the <DeleteWithConfirmButton>\n *             />\n *         </TopToolbar>\n *     );\n * };\n *\n * const Edit = props => {\n *     return <Edit actions={<EditActions />} {...props} />;\n * };\n */\nexport const DeleteButton = <RecordType extends RaRecord = any>(\n    props: DeleteButtonProps<RecordType>\n) => {\n    const { mutationMode, ...rest } = props;\n    const record = useRecordContext(props);\n    const saveContext = useSaveContext(props);\n    if (!record || record.id == null) {\n        return null;\n    }\n\n    const finalMutationMode = mutationMode\n        ? mutationMode\n        : saveContext?.mutationMode\n        ? saveContext.mutationMode\n        : 'undoable';\n\n    return finalMutationMode === 'undoable' ? (\n        // @ts-ignore I looked for the error for one hour without finding it\n        <DeleteWithUndoButton<RecordType> record={record} {...rest} />\n    ) : (\n        <DeleteWithConfirmButton<RecordType>\n            // @ts-ignore I looked for the error for one hour without finding it\n            mutationMode={finalMutationMode}\n            record={record}\n            {...rest}\n        />\n    );\n};\n\nexport interface DeleteButtonProps<RecordType extends RaRecord = any>\n    extends Omit<ButtonProps, 'record'>,\n        SaveContextValue {\n    className?: string;\n    confirmTitle?: string;\n    confirmContent?: string;\n    icon?: ReactElement;\n    label?: string;\n    mutationMode?: MutationMode;\n    record?: RecordType;\n    redirect?: RedirectionSideEffect;\n    resource?: string;\n    // May be injected by Toolbar\n    mutationOptions?: UseMutationOptions<\n        RecordType,\n        unknown,\n        DeleteParams<RecordType>\n    >;\n}\n\nDeleteButton.propTypes = {\n    label: PropTypes.string,\n    mutationMode: PropTypes.oneOf(['pessimistic', 'optimistic', 'undoable']),\n    record: PropTypes.any,\n    // @ts-ignore\n    redirect: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.bool,\n        PropTypes.func,\n    ]),\n    resource: PropTypes.string,\n    icon: PropTypes.element,\n};\n","import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { ReactElement, ReactEventHandler } from 'react';\nimport PropTypes from 'prop-types';\nimport { alpha } from '@mui/material/styles';\nimport ActionDelete from '@mui/icons-material/Delete';\nimport clsx from 'clsx';\nimport { UseMutationOptions } from 'react-query';\nimport {\n    RaRecord,\n    RedirectionSideEffect,\n    useDeleteWithUndoController,\n    DeleteParams,\n    useRecordContext,\n    useResourceContext,\n} from 'ra-core';\n\nimport { Button, ButtonProps } from './Button';\n\nexport const DeleteWithUndoButton = <RecordType extends RaRecord = any>(\n    props: DeleteWithUndoButtonProps<RecordType>\n) => {\n    const {\n        label = 'ra.action.delete',\n        className,\n        icon = defaultIcon,\n        onClick,\n        redirect = 'list',\n        mutationOptions,\n        ...rest\n    } = props;\n\n    const record = useRecordContext(props);\n    const resource = useResourceContext(props);\n    const { isLoading, handleDelete } = useDeleteWithUndoController({\n        record,\n        resource,\n        redirect,\n        onClick,\n        mutationOptions,\n    });\n\n    return (\n        <StyledButton\n            onClick={handleDelete}\n            disabled={isLoading}\n            label={label}\n            className={clsx('ra-delete-button', className)}\n            key=\"button\"\n            {...rest}\n        >\n            {icon}\n        </StyledButton>\n    );\n};\n\nconst defaultIcon = <ActionDelete />;\n\nexport interface DeleteWithUndoButtonProps<RecordType extends RaRecord = any>\n    extends Omit<ButtonProps, 'record'> {\n    className?: string;\n    icon?: ReactElement;\n    label?: string;\n    onClick?: ReactEventHandler<any>;\n    record?: RecordType;\n    redirect?: RedirectionSideEffect;\n    resource?: string;\n    // May be injected by Toolbar - sanitized in Button\n    mutationOptions?: UseMutationOptions<\n        RecordType,\n        unknown,\n        DeleteParams<RecordType>\n    >;\n}\n\nDeleteWithUndoButton.propTypes = {\n    className: PropTypes.string,\n    label: PropTypes.string,\n    record: PropTypes.any,\n    redirect: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.bool,\n        PropTypes.func,\n    ]),\n    resource: PropTypes.string,\n    icon: PropTypes.element,\n};\n\nconst PREFIX = 'RaDeleteWithUndoButton';\n\nconst StyledButton = styled(Button, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    color: theme.palette.error.main,\n    '&:hover': {\n        backgroundColor: alpha(theme.palette.error.main, 0.12),\n        // Reset on mouse devices\n        '@media (hover: none)': {\n            backgroundColor: 'transparent',\n        },\n    },\n}));\n","import React, { Fragment, ReactEventHandler, ReactElement } from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport { alpha } from '@mui/material/styles';\nimport ActionDelete from '@mui/icons-material/Delete';\nimport clsx from 'clsx';\nimport inflection from 'inflection';\nimport { UseMutationOptions } from 'react-query';\nimport {\n    MutationMode,\n    RaRecord,\n    DeleteParams,\n    RedirectionSideEffect,\n    useDeleteWithConfirmController,\n    useRecordContext,\n    useResourceContext,\n    useTranslate,\n} from 'ra-core';\n\nimport { Confirm } from '../layout';\nimport { Button, ButtonProps } from './Button';\n\nexport const DeleteWithConfirmButton = <RecordType extends RaRecord = any>(\n    props: DeleteWithConfirmButtonProps<RecordType>\n) => {\n    const {\n        className,\n        confirmTitle = 'ra.message.delete_title',\n        confirmContent = 'ra.message.delete_content',\n        icon = defaultIcon,\n        label = 'ra.action.delete',\n        mutationMode = 'pessimistic',\n        onClick,\n        redirect = 'list',\n        translateOptions = {},\n        mutationOptions,\n        ...rest\n    } = props;\n    const translate = useTranslate();\n    const record = useRecordContext(props);\n    const resource = useResourceContext(props);\n\n    const {\n        open,\n        isLoading,\n        handleDialogOpen,\n        handleDialogClose,\n        handleDelete,\n    } = useDeleteWithConfirmController({\n        record,\n        redirect,\n        mutationMode,\n        onClick,\n        mutationOptions,\n        resource,\n    });\n\n    return (\n        <Fragment>\n            <StyledButton\n                onClick={handleDialogOpen}\n                label={label}\n                className={clsx('ra-delete-button', className)}\n                key=\"button\"\n                {...rest}\n            >\n                {icon}\n            </StyledButton>\n            <Confirm\n                isOpen={open}\n                loading={isLoading}\n                title={confirmTitle}\n                content={confirmContent}\n                translateOptions={{\n                    name: translate(`resources.${resource}.forcedCaseName`, {\n                        smart_count: 1,\n                        _: inflection.humanize(\n                            translate(`resources.${resource}.name`, {\n                                smart_count: 1,\n                                _: inflection.singularize(resource),\n                            }),\n                            true\n                        ),\n                    }),\n                    id: record.id,\n                    ...translateOptions,\n                }}\n                onConfirm={handleDelete}\n                onClose={handleDialogClose}\n            />\n        </Fragment>\n    );\n};\n\nconst defaultIcon = <ActionDelete />;\n\nexport interface DeleteWithConfirmButtonProps<RecordType extends RaRecord = any>\n    extends Omit<ButtonProps, 'record'> {\n    className?: string;\n    confirmTitle?: string;\n    confirmContent?: React.ReactNode;\n    icon?: ReactElement;\n    label?: string;\n    mutationMode?: MutationMode;\n    onClick?: ReactEventHandler<any>;\n    record?: RecordType;\n    redirect?: RedirectionSideEffect;\n    resource?: string;\n    // May be injected by Toolbar - sanitized in Button\n    translateOptions?: object;\n    mutationOptions?: UseMutationOptions<\n        RecordType,\n        unknown,\n        DeleteParams<RecordType>\n    >;\n}\n\nDeleteWithConfirmButton.propTypes = {\n    className: PropTypes.string,\n    confirmTitle: PropTypes.string,\n    confirmContent: PropTypes.string,\n    label: PropTypes.string,\n    mutationMode: PropTypes.oneOf(['pessimistic', 'optimistic', 'undoable']),\n    record: PropTypes.any,\n    redirect: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.bool,\n        PropTypes.func,\n    ]),\n    resource: PropTypes.string,\n    icon: PropTypes.element,\n    translateOptions: PropTypes.object,\n};\n\nconst PREFIX = 'RaDeleteWithConfirmButton';\n\nconst StyledButton = styled(Button, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    color: theme.palette.error.main,\n    '&:hover': {\n        backgroundColor: alpha(theme.palette.error.main, 0.12),\n        // Reset on mouse devices\n        '@media (hover: none)': {\n            backgroundColor: 'transparent',\n        },\n    },\n}));\n","import * as React from 'react';\nimport { ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport ContentCreate from '@mui/icons-material/Create';\nimport { ButtonProps as MuiButtonProps } from '@mui/material/Button';\nimport { Link } from 'react-router-dom';\nimport {\n    RaRecord,\n    useResourceContext,\n    useRecordContext,\n    useCreatePath,\n} from 'ra-core';\n\nimport { Button, ButtonProps } from './Button';\n\n/**\n * Opens the Edit view for the current record.\n *\n * Reads the record and resource from the context.\n *\n * @example // basic usage\n * import { EditButton } from 'react-admin';\n *\n * const CommentEditButton = () => (\n *     <EditButton label=\"Edit comment\" />\n * );\n */\nexport const EditButton = (props: EditButtonProps) => {\n    const {\n        icon = defaultIcon,\n        label = 'ra.action.edit',\n        scrollToTop = true,\n        ...rest\n    } = props;\n    const resource = useResourceContext(props);\n    const record = useRecordContext(props);\n    const createPath = useCreatePath();\n    if (!record) return null;\n    return (\n        <Button\n            component={Link}\n            to={createPath({ type: 'edit', resource, id: record.id })}\n            state={scrollStates[String(scrollToTop)]}\n            label={label}\n            onClick={stopPropagation}\n            {...(rest as any)}\n        >\n            {icon}\n        </Button>\n    );\n};\n\n// avoids using useMemo to get a constant value for the link state\nconst scrollStates = {\n    true: { _scrollToTop: true },\n    false: {},\n};\n\nconst defaultIcon = <ContentCreate />;\n\n// useful to prevent click bubbling in a datagrid with rowClick\nconst stopPropagation = e => e.stopPropagation();\n\ninterface Props {\n    icon?: ReactElement;\n    label?: string;\n    record?: RaRecord;\n    scrollToTop?: boolean;\n}\n\nexport type EditButtonProps = Props & ButtonProps & MuiButtonProps;\n\nEditButton.propTypes = {\n    icon: PropTypes.element,\n    label: PropTypes.string,\n    record: PropTypes.any,\n    scrollToTop: PropTypes.bool,\n};\n","import * as React from 'react';\nimport { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport DownloadIcon from '@mui/icons-material/GetApp';\nimport {\n    fetchRelatedRecords,\n    useDataProvider,\n    useNotify,\n    useListContext,\n    SortPayload,\n    Exporter,\n    FilterPayload,\n    useResourceContext,\n} from 'ra-core';\nimport { Button, ButtonProps } from './Button';\n\nexport const ExportButton = (props: ExportButtonProps) => {\n    const {\n        maxResults = 1000,\n        onClick,\n        label = 'ra.action.export',\n        icon = defaultIcon,\n        exporter: customExporter,\n        ...rest\n    } = props;\n    const {\n        filter,\n        filterValues,\n        sort,\n        exporter: exporterFromContext,\n        total,\n    } = useListContext(props);\n    const resource = useResourceContext(props);\n    const exporter = customExporter || exporterFromContext;\n    const dataProvider = useDataProvider();\n    const notify = useNotify();\n    const handleClick = useCallback(\n        event => {\n            dataProvider\n                .getList(resource, {\n                    sort,\n                    filter: filter\n                        ? { ...filterValues, ...filter }\n                        : filterValues,\n                    pagination: { page: 1, perPage: maxResults },\n                })\n                .then(\n                    ({ data }) =>\n                        exporter &&\n                        exporter(\n                            data,\n                            fetchRelatedRecords(dataProvider),\n                            dataProvider,\n                            resource\n                        )\n                )\n                .catch(error => {\n                    console.error(error);\n                    notify('ra.notification.http_error', { type: 'warning' });\n                });\n            if (typeof onClick === 'function') {\n                onClick(event);\n            }\n        },\n        [\n            dataProvider,\n            exporter,\n            filter,\n            filterValues,\n            maxResults,\n            notify,\n            onClick,\n            resource,\n            sort,\n        ]\n    );\n\n    return (\n        <Button\n            onClick={handleClick}\n            label={label}\n            disabled={total === 0}\n            {...sanitizeRestProps(rest)}\n        >\n            {icon}\n        </Button>\n    );\n};\n\nconst defaultIcon = <DownloadIcon />;\n\nconst sanitizeRestProps = ({\n    filterValues,\n    resource,\n    ...rest\n}: Omit<ExportButtonProps, 'sort' | 'maxResults' | 'label' | 'exporter'>) =>\n    rest;\n\ninterface Props {\n    exporter?: Exporter;\n    filterValues?: FilterPayload;\n    icon?: JSX.Element;\n    label?: string;\n    maxResults?: number;\n    onClick?: (e: Event) => void;\n    resource?: string;\n    sort?: SortPayload;\n}\n\nexport type ExportButtonProps = Props & ButtonProps;\n\nExportButton.propTypes = {\n    exporter: PropTypes.func,\n    filterValues: PropTypes.object,\n    label: PropTypes.string,\n    maxResults: PropTypes.number,\n    resource: PropTypes.string,\n    sort: PropTypes.exact({\n        field: PropTypes.string,\n        order: PropTypes.string,\n    }),\n    icon: PropTypes.element,\n};\n","import * as React from 'react';\nimport { MouseEvent } from 'react';\nimport { IconButton, IconButtonProps, Tooltip } from '@mui/material';\nimport { useTranslate } from 'ra-core';\n\n/**\n * An IconButton with a tooltip which ensures the tooltip is closed on click to avoid ghost tooltips\n * when the button position changes.\n */\nexport const IconButtonWithTooltip = ({\n    label,\n    onClick,\n    ...props\n}: IconButtonWithTooltipProps) => {\n    const translate = useTranslate();\n    const [open, setOpen] = React.useState(false);\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleOpen = () => {\n        setOpen(true);\n    };\n\n    const translatedLabel = translate(label, { _: label });\n\n    const handleClick = (event: MouseEvent<HTMLButtonElement>) => {\n        handleClose();\n        onClick(event);\n    };\n\n    return (\n        <Tooltip\n            title={translatedLabel}\n            open={open}\n            onOpen={handleOpen}\n            onClose={handleClose}\n        >\n            <IconButton\n                aria-label={translatedLabel}\n                onClick={handleClick}\n                {...props}\n                size=\"large\"\n            />\n        </Tooltip>\n    );\n};\n\nexport interface IconButtonWithTooltipProps extends IconButtonProps {\n    label: string;\n}\n","import * as React from 'react';\nimport { MouseEvent, useState } from 'react';\nimport { useLocaleState, useLocales } from 'ra-core';\nimport { Box, Button, Menu, MenuItem, styled } from '@mui/material';\nimport LanguageIcon from '@mui/icons-material/Translate';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\n\n/**\n * Language selector. Changes the locale in the app and persists it in\n * preferences so that the app opens with the right locale in the future.\n *\n * @example\n *\n *     const MyAppBar: FC = props => (\n *         <AppBar {...props}>\n *             <Box flex=\"1\">\n *                 <Typography variant=\"h6\" id=\"react-admin-title\"></Typography>\n *             </Box>\n *             <LocalesMenuButton\n *                 languages={[\n *                     { locale: 'en', name: 'English' },\n *                     { locale: 'fr', name: 'Français' },\n *                 ]}\n *             />\n *         </AppBar>\n *     );\n */\nexport const LocalesMenuButton = (props: LocalesMenuButtonProps) => {\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n    const languages = useLocales({ locales: props.languages });\n    const [locale, setLocale] = useLocaleState();\n\n    const getNameForLocale = (locale: string): string => {\n        const language = languages.find(language => language.locale === locale);\n        return language ? language.name : '';\n    };\n\n    const changeLocale = (locale: string) => (): void => {\n        setLocale(locale);\n        setAnchorEl(null);\n    };\n\n    const handleLanguageClick = (event: MouseEvent<HTMLElement>): void => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = (): void => {\n        setAnchorEl(null);\n    };\n\n    return (\n        <Root>\n            <Button\n                color=\"inherit\"\n                aria-controls=\"simple-menu\"\n                aria-label=\"\"\n                aria-haspopup=\"true\"\n                onClick={handleLanguageClick}\n            >\n                <LanguageIcon />\n                <div className={LocalesMenuButtonClasses.selectedLanguage}>\n                    {getNameForLocale(locale)}\n                </div>\n                <ExpandMoreIcon fontSize=\"small\" />\n            </Button>\n            <Menu\n                id=\"simple-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n            >\n                {languages.map(language => (\n                    <MenuItem\n                        key={language.locale}\n                        onClick={changeLocale(language.locale)}\n                        selected={language.locale === locale}\n                    >\n                        {language.name}\n                    </MenuItem>\n                ))}\n            </Menu>\n        </Root>\n    );\n};\n\nconst PREFIX = 'RaLocalesMenuButton';\n\nexport const LocalesMenuButtonClasses = {\n    selectedLanguage: `${PREFIX}-selectedLanguage`,\n};\n\nconst Root = styled(Box, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    [`& .${LocalesMenuButtonClasses.selectedLanguage}`]: {\n        marginLeft: theme.spacing(1),\n    },\n}));\n\nexport interface LocalesMenuButtonProps {\n    languages?: { locale: string; name: string }[];\n}\n","import * as React from 'react';\nimport { ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport ActionList from '@mui/icons-material/List';\nimport { Link } from 'react-router-dom';\nimport { useResourceContext, useCreatePath } from 'ra-core';\n\nimport { Button, ButtonProps } from './Button';\n\n/**\n * Opens the List view of a given resource\n *\n * @example // basic usage\n * import { ListButton } from 'react-admin';\n *\n * const CommentListButton = () => (\n *     <ListButton label=\"Comments\" />\n * );\n *\n * @example // linking back to the list from the Edit view\n * import { TopToolbar, ListButton, ShowButton, Edit } from 'react-admin';\n *\n * const PostEditActions = () => (\n *     <TopToolbar>\n *         <ListButton />\n *         <ShowButton />\n *     </TopToolbar>\n * );\n *\n * export const PostEdit = (props) => (\n *     <Edit actions={<PostEditActions />} {...props}>\n *         ...\n *     </Edit>\n * );\n */\nexport const ListButton = (props: ListButtonProps) => {\n    const {\n        icon = defaultIcon,\n        label = 'ra.action.list',\n        scrollToTop = true,\n        ...rest\n    } = props;\n    const resource = useResourceContext(props);\n    const createPath = useCreatePath();\n    return (\n        <Button\n            component={Link}\n            to={createPath({ type: 'list', resource })}\n            state={scrollStates[String(scrollToTop)]}\n            label={label}\n            {...(rest as any)}\n        >\n            {icon}\n        </Button>\n    );\n};\n\n// avoids using useMemo to get a constant value for the link state\nconst scrollStates = {\n    true: { _scrollToTop: true },\n    false: {},\n};\n\nconst defaultIcon = <ActionList />;\n\ninterface Props {\n    icon?: ReactElement;\n    label?: string;\n    scrollToTop?: boolean;\n}\n\nexport type ListButtonProps = Props & ButtonProps;\n\nListButton.propTypes = {\n    icon: PropTypes.element,\n    label: PropTypes.string,\n};\n","import * as React from 'react';\nimport { ReactElement, MouseEvent, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport NavigationRefresh from '@mui/icons-material/Refresh';\nimport { useRefresh } from 'ra-core';\n\nimport { Button, ButtonProps } from './Button';\n\nexport const RefreshButton = (props: RefreshButtonProps) => {\n    const {\n        label = 'ra.action.refresh',\n        icon = defaultIcon,\n        onClick,\n        ...rest\n    } = props;\n    const refresh = useRefresh();\n    const handleClick = useCallback(\n        event => {\n            event.preventDefault();\n            refresh();\n            if (typeof onClick === 'function') {\n                onClick(event);\n            }\n        },\n        [refresh, onClick]\n    );\n\n    return (\n        <Button label={label} onClick={handleClick} {...rest}>\n            {icon}\n        </Button>\n    );\n};\n\nconst defaultIcon = <NavigationRefresh />;\n\ninterface Props {\n    label?: string;\n    icon?: ReactElement;\n    onClick?: (e: MouseEvent) => void;\n}\n\nexport type RefreshButtonProps = Props & ButtonProps;\n\nRefreshButton.propTypes = {\n    label: PropTypes.string,\n    icon: PropTypes.element,\n    onClick: PropTypes.func,\n};\n","import * as React from 'react';\nimport { useCallback, ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport Tooltip from '@mui/material/Tooltip';\nimport IconButton, { IconButtonProps } from '@mui/material/IconButton';\nimport NavigationRefresh from '@mui/icons-material/Refresh';\nimport { useRefresh, useTranslate } from 'ra-core';\n\nexport const RefreshIconButton = (props: RefreshIconButtonProps) => {\n    const {\n        label = 'ra.action.refresh',\n        icon = defaultIcon,\n        onClick,\n        className,\n        ...rest\n    } = props;\n    const refresh = useRefresh();\n    const translate = useTranslate();\n    const handleClick = useCallback(\n        event => {\n            event.preventDefault();\n            refresh();\n            if (typeof onClick === 'function') {\n                onClick(event);\n            }\n        },\n        [refresh, onClick]\n    );\n\n    return (\n        <Tooltip title={label && translate(label, { _: label })}>\n            <IconButton\n                aria-label={label && translate(label, { _: label })}\n                className={className}\n                color=\"inherit\"\n                onClick={handleClick}\n                {...rest}\n                size=\"large\"\n            >\n                {icon}\n            </IconButton>\n        </Tooltip>\n    );\n};\n\nconst defaultIcon = <NavigationRefresh />;\n\ninterface Props {\n    className?: string;\n    icon?: ReactElement;\n    label?: string;\n    onClick?: (e: MouseEvent) => void;\n}\n\nexport type RefreshIconButtonProps = Props & IconButtonProps;\n\nRefreshIconButton.propTypes = {\n    className: PropTypes.string,\n    label: PropTypes.string,\n    icon: PropTypes.element,\n};\n","import * as React from 'react';\nimport { MouseEventHandler, ReactElement, useCallback } from 'react';\nimport { UseMutationOptions } from 'react-query';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport { Button, ButtonProps, CircularProgress } from '@mui/material';\nimport ContentSave from '@mui/icons-material/Save';\nimport { useFormContext, useFormState } from 'react-hook-form';\nimport {\n    CreateParams,\n    MutationMode,\n    RaRecord,\n    TransformData,\n    UpdateParams,\n    useSaveContext,\n    useTranslate,\n    warning,\n    setSubmissionErrors,\n} from 'ra-core';\n\nimport { sanitizeButtonRestProps } from './Button';\n\n/**\n * Submit button for resource forms (Edit and Create).\n *\n * @typedef {Object} Props the props you can use (other props are injected by the <Toolbar>)\n * @prop {string} className\n * @prop {string} label Button label. Defaults to 'ra.action.save', translated.\n * @prop {boolean} disabled Disable the button.\n * @prop {string} variant MUI variant for the button. Defaults to 'contained'.\n * @prop {ReactElement} icon\n * @prop {function} mutationOptions Object of options passed to react-query.\n * @prop {function} transform Callback to execute before calling the dataProvider. Receives the data from the form, must return that transformed data. Can be asynchronous (and return a Promise)\n * @prop {boolean} alwaysEnable Force enabling the <SaveButton>. If it's not defined, the `<SaveButton>` will be enabled using `react-hook-form`'s `isValidating` state props and form context's `saving` prop (disabled if isValidating or saving, enabled otherwise).\n *\n * @param {Props} props\n *\n * @example // with custom success side effect\n *\n * const MySaveButton = props => {\n *     const notify = useNotify();\n *     const redirect = useRedirect();\n *     const onSuccess = (response) => {\n *         notify(`Post \"${response.data.title}\" saved!`);\n *         redirect('/posts');\n *     };\n *     return <SaveButton {...props} mutationOptions={{ onSuccess }} />;\n * }\n */\nexport const SaveButton = <RecordType extends RaRecord = any>(\n    props: SaveButtonProps<RecordType>\n) => {\n    const {\n        color = 'primary',\n        icon = defaultIcon,\n        invalid,\n        label = 'ra.action.save',\n        onClick,\n        mutationOptions,\n        saving,\n        disabled: disabledProp,\n        type = 'submit',\n        transform,\n        variant = 'contained',\n        alwaysEnable = false,\n        ...rest\n    } = props;\n    const translate = useTranslate();\n    const form = useFormContext();\n    const saveContext = useSaveContext();\n    const { isDirty, isValidating } = useFormState();\n    // Use form isDirty, isValidating and form context saving to enable or disable the save button\n    // if alwaysEnable is undefined\n    const disabled = valueOrDefault(\n        alwaysEnable === false || alwaysEnable === undefined\n            ? undefined\n            : !alwaysEnable,\n        disabledProp || !isDirty || isValidating || saveContext?.saving\n    );\n\n    warning(\n        type === 'submit' &&\n            ((mutationOptions &&\n                (mutationOptions.onSuccess || mutationOptions.onError)) ||\n                transform),\n        'Cannot use <SaveButton mutationOptions> props on a button of type \"submit\". To override the default mutation options on a particular save button, set the <SaveButton type=\"button\"> prop, or set mutationOptions in the main view component (<Create> or <Edit>).'\n    );\n\n    const handleSubmit = useCallback(\n        async values => {\n            let errors;\n            if (saveContext?.save) {\n                errors = await saveContext.save(values, {\n                    ...mutationOptions,\n                    transform,\n                });\n            }\n            if (errors != null) {\n                setSubmissionErrors(errors, form.setError);\n            }\n        },\n        [form.setError, saveContext, mutationOptions, transform]\n    );\n\n    const handleClick: MouseEventHandler<HTMLButtonElement> = useCallback(\n        async event => {\n            if (onClick) {\n                onClick(event);\n            }\n            if (event.defaultPrevented) {\n                return;\n            }\n            if (type === 'button') {\n                // this button doesn't submit the form, so it doesn't trigger useIsFormInvalid in <FormContent>\n                // therefore we need to check for errors manually\n                event.stopPropagation();\n                await form.handleSubmit(handleSubmit)(event);\n            }\n        },\n        [onClick, type, form, handleSubmit]\n    );\n\n    const displayedLabel = label && translate(label, { _: label });\n    const finalSaving =\n        typeof saving !== 'undefined' ? saving : saveContext?.saving;\n\n    return (\n        <StyledButton\n            variant={variant}\n            type={type}\n            color={color}\n            aria-label={displayedLabel}\n            disabled={disabled}\n            onClick={handleClick}\n            // TODO: find a way to display the loading state (LoadingButton from mui Lab?)\n            {...sanitizeButtonRestProps(rest)}\n        >\n            {finalSaving ? <CircularProgress size={18} thickness={2} /> : icon}\n            {displayedLabel}\n        </StyledButton>\n    );\n};\n\nconst defaultIcon = <ContentSave />;\n\ninterface Props<RecordType extends RaRecord = any> {\n    className?: string;\n    disabled?: boolean;\n    icon?: ReactElement;\n    invalid?: boolean;\n    label?: string;\n    mutationOptions?: UseMutationOptions<\n        RecordType,\n        unknown,\n        CreateParams<RecordType> | UpdateParams<RecordType>\n    >;\n    transform?: TransformData;\n    saving?: boolean;\n    variant?: string;\n    // May be injected by Toolbar - sanitized in Button\n    record?: RaRecord;\n    resource?: string;\n    mutationMode?: MutationMode;\n}\n\nexport type SaveButtonProps<RecordType extends RaRecord = any> = Props<\n    RecordType\n> &\n    ButtonProps & {\n        alwaysEnable?: boolean;\n    };\n\nSaveButton.propTypes = {\n    className: PropTypes.string,\n    invalid: PropTypes.bool,\n    label: PropTypes.string,\n    saving: PropTypes.bool,\n    variant: PropTypes.oneOf(['text', 'outlined', 'contained']),\n    icon: PropTypes.element,\n    alwaysEnable: PropTypes.bool,\n};\n\nconst PREFIX = 'RaSaveButton';\n\nconst StyledButton = styled(Button, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    position: 'relative',\n    [`& .MuiSvgIcon-root, & .MuiIcon-root, & .MuiCircularProgress-root`]: {\n        marginRight: theme.spacing(1),\n    },\n    [`& .MuiSvgIcon-root, & .MuiIcon-root`]: {\n        fontSize: 18,\n    },\n}));\n\nconst valueOrDefault = (value, defaultValue) =>\n    typeof value === 'undefined' ? defaultValue : value;\n","import React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { Button } from './Button';\nimport { useTranslate } from 'ra-core';\n\nexport const SkipNavigationButton = () => {\n    const translate = useTranslate();\n\n    return (\n        <StyledButton\n            onClick={skipToContent}\n            className={'skip-nav-button'}\n            label={translate('ra.navigation.skip_nav')}\n            variant=\"contained\"\n        />\n    );\n};\n\nconst PREFIX = 'RaSkipNavigationButton';\n\nconst StyledButton = styled(Button, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    position: 'fixed',\n    padding: theme.spacing(1),\n    backgroundColor: theme.palette.background.default,\n    color: theme.palette.getContrastText(theme.palette.background.default),\n    transition: theme.transitions.create(['top', 'opacity'], {\n        easing: theme.transitions.easing.easeIn,\n        duration: theme.transitions.duration.leavingScreen,\n    }),\n    left: theme.spacing(2),\n    top: theme.spacing(-10),\n    zIndex: 5000,\n    '&:hover': {\n        opacity: 0.8,\n        backgroundColor: theme.palette.background.default,\n    },\n    '&:focus': {\n        top: theme.spacing(2),\n        transition: theme.transitions.create(['top', 'opacity'], {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n}));\n\nconst skipToContent = () => {\n    if (typeof document === 'undefined') return;\n    const element = document.getElementById('main-content');\n\n    if (!element) {\n        if (process.env.NODE_ENV !== 'production') {\n            console.warn(\n                'No element with id \"main-content\" was found. Ensure the element that contains your main content has an id of \"main-content\".'\n            );\n        }\n\n        return;\n    }\n\n    element.setAttribute('tabIndex', '-1');\n    element.focus();\n    element.blur();\n    element.removeAttribute('tabIndex');\n};\n","import React from 'react';\nimport { Tooltip, IconButton } from '@mui/material';\nimport Brightness4Icon from '@mui/icons-material/Brightness4';\nimport Brightness7Icon from '@mui/icons-material/Brightness7';\nimport { useTranslate } from 'ra-core';\nimport { useTheme } from '../layout';\nimport { RaThemeOptions } from '..';\n\n/**\n * Button toggling the theme (light or dark).\n *\n * @example\n *\n * const MyAppBar = props => (\n *     <AppBar {...props}>\n *         <Box flex=\"1\">\n *             <Typography variant=\"h6\" id=\"react-admin-title\"></Typography>\n *         </Box>\n *         <ToggleThemeButton lightTheme={lightTheme} darkTheme={darkTheme} />\n *     </AppBar>\n * );\n *\n * const MyLayout = props => <Layout {...props} appBar={MyAppBar} />;\n */\nexport const ToggleThemeButton = (props: ToggleThemeButtonProps) => {\n    const translate = useTranslate();\n    const { darkTheme, lightTheme } = props;\n    const [theme, setTheme] = useTheme(lightTheme);\n\n    const handleTogglePaletteType = (): void => {\n        setTheme(theme?.palette.mode === 'dark' ? lightTheme : darkTheme);\n    };\n    const toggleThemeTitle = translate('ra.action.toggle_theme', {\n        _: 'Toggle Theme',\n    });\n\n    return (\n        <Tooltip title={toggleThemeTitle} enterDelay={300}>\n            <IconButton\n                color=\"inherit\"\n                onClick={handleTogglePaletteType}\n                aria-label={toggleThemeTitle}\n            >\n                {theme?.palette.mode === 'dark' ? (\n                    <Brightness7Icon />\n                ) : (\n                    <Brightness4Icon />\n                )}\n            </IconButton>\n        </Tooltip>\n    );\n};\n\nexport interface ToggleThemeButtonProps {\n    darkTheme: RaThemeOptions;\n    lightTheme?: RaThemeOptions;\n}\n","import * as React from 'react';\nimport { ReactNode, useCallback, useMemo, useState } from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport { useAuthProvider, useGetIdentity, useTranslate } from 'ra-core';\nimport {\n    Tooltip,\n    IconButton,\n    Menu,\n    Button,\n    Avatar,\n    PopoverOrigin,\n    useMediaQuery,\n    Theme,\n} from '@mui/material';\nimport AccountCircle from '@mui/icons-material/AccountCircle';\nimport { UserMenuContextProvider } from './UserMenuContextProvider';\nimport { Logout } from '../auth/Logout';\n\n/**\n * The UserMenu component renders a Mui Button that shows a Menu.\n * It accepts children that must be Mui MenuItem components.\n *\n * @example\n * import { Logout, UserMenu, useUserMenu } from 'react-admin';\n * import MenuItem from '@mui/material/MenuItem';\n * import ListItemIcon from '@mui/material/ListItemIcon';\n * import ListItemText from '@mui/material/ListItemText';\n * import SettingsIcon from '@mui/icons-material/Settings';\n\n * const ConfigurationMenu = React.forwardRef((props, ref) => {\n *     const { onClose } = useUserMenu();\n *     return (\n *         <MenuItem\n *             ref={ref}\n *             {...props}\n *             to=\"/configuration\"\n *             onClick={onClose}\n *         >\n *             <ListItemIcon>\n *                 <SettingsIcon />\n *             </ListItemIcon>\n *             <ListItemText>Configuration</ListItemText>\n *         </MenuItem>\n *     );\n * });\n *\n * export const MyUserMenu = () => (\n *     <UserMenu>\n *         <ConfigurationMenu />\n *         <Logout />\n *     </UserMenu>\n * );\n * @param props\n * @param {ReactNode} props.children React node/s to be rendered as children of the UserMenu. Must be Mui MenuItem components\n * @param {string} props.className CSS class applied to the MuiAppBar component\n * @param {string} props.label The label of the UserMenu button. Accepts translation keys\n * @param {Element} props.icon The icon of the UserMenu button.\n *\n */\nexport const UserMenu = (props: UserMenuProps) => {\n    const [anchorEl, setAnchorEl] = useState(null);\n    const translate = useTranslate();\n    const { isLoading, identity } = useGetIdentity();\n    const authProvider = useAuthProvider();\n    const isLargeEnough = useMediaQuery<Theme>(theme =>\n        theme.breakpoints.up('sm')\n    );\n\n    const {\n        children = !!authProvider ? <Logout /> : null,\n        className,\n        label = 'ra.auth.user_menu',\n        icon = defaultIcon,\n    } = props;\n\n    const handleMenu = event => setAnchorEl(event.currentTarget);\n    const handleClose = useCallback(() => setAnchorEl(null), []);\n    const context = useMemo(() => ({ onClose: handleClose }), [handleClose]);\n    if (!children) return null;\n    const open = Boolean(anchorEl);\n\n    return (\n        <Root className={className}>\n            {isLargeEnough && !isLoading && identity?.fullName ? (\n                <Button\n                    aria-label={label && translate(label, { _: label })}\n                    className={UserMenuClasses.userButton}\n                    color=\"inherit\"\n                    startIcon={\n                        identity.avatar ? (\n                            <Avatar\n                                className={UserMenuClasses.avatar}\n                                src={identity.avatar}\n                                alt={identity.fullName}\n                            />\n                        ) : (\n                            icon\n                        )\n                    }\n                    onClick={handleMenu}\n                >\n                    {identity.fullName}\n                </Button>\n            ) : (\n                <Tooltip title={label && translate(label, { _: label })}>\n                    <IconButton\n                        aria-label={label && translate(label, { _: label })}\n                        aria-owns={open ? 'menu-appbar' : null}\n                        aria-haspopup={true}\n                        color=\"inherit\"\n                        onClick={handleMenu}\n                        size=\"large\"\n                    >\n                        {!isLoading && identity?.avatar ? (\n                            <Avatar\n                                className={UserMenuClasses.avatar}\n                                src={identity.avatar}\n                                alt={identity.fullName}\n                            />\n                        ) : (\n                            icon\n                        )}\n                    </IconButton>\n                </Tooltip>\n            )}\n            <UserMenuContextProvider value={context}>\n                <Menu\n                    id=\"menu-appbar\"\n                    disableScrollLock\n                    anchorEl={anchorEl}\n                    anchorOrigin={AnchorOrigin}\n                    transformOrigin={TransformOrigin}\n                    open={open}\n                    onClose={handleClose}\n                >\n                    {children}\n                </Menu>\n            </UserMenuContextProvider>\n        </Root>\n    );\n};\n\nUserMenu.propTypes = {\n    children: PropTypes.node,\n    classes: PropTypes.object,\n    label: PropTypes.string,\n    icon: PropTypes.node,\n};\n\nexport interface UserMenuProps {\n    children?: ReactNode;\n    className?: string;\n    label?: string;\n    icon?: ReactNode;\n}\n\nconst PREFIX = 'RaUserMenu';\n\nexport const UserMenuClasses = {\n    userButton: `${PREFIX}-userButton`,\n    avatar: `${PREFIX}-avatar`,\n};\n\nconst Root = styled('div', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    [`& .${UserMenuClasses.userButton}`]: {\n        textTransform: 'none',\n    },\n\n    [`& .${UserMenuClasses.avatar}`]: {\n        width: theme.spacing(4),\n        height: theme.spacing(4),\n    },\n}));\n\nconst defaultIcon = <AccountCircle />;\n\nconst AnchorOrigin: PopoverOrigin = {\n    vertical: 'bottom',\n    horizontal: 'right',\n};\n\nconst TransformOrigin: PopoverOrigin = {\n    vertical: 'top',\n    horizontal: 'right',\n};\n","import * as React from 'react';\nimport { ReactNode } from 'react';\nimport { UserMenuContext, UserMenuContextValue } from './UserMenuContext';\n\n/**\n * A React context provider that provides access to the user menu context.\n * @param props\n * @param {ReactNode} props.children\n * @param {UserMenuContextValue} props.value The user menu context\n */\nexport const UserMenuContextProvider = ({ children, value }) => (\n    <UserMenuContext.Provider value={value}>\n        {children}\n    </UserMenuContext.Provider>\n);\n\nexport type UserMenuContextProviderProps = {\n    children: ReactNode;\n    value: UserMenuContextValue;\n};\n","import { createContext } from 'react';\n\n/**\n * This context provides access to a function for closing the user menu.\n *\n * @example\n * import { Logout, MenuItemLink, UserMenu, useUserMenu } from 'react-admin';\n *\n * const ConfigurationMenu = () => {\n *     const { onClose } = useUserMenu();\n *     return (\n *         <MenuItemLink\n *             to=\"/configuration\"\n *             primaryText=\"pos.configuration\"\n *             leftIcon={<SettingsIcon />}\n *             sidebarIsOpen\n *             onClick={onClose}\n *         />\n *     );\n * };\n *\n * export const MyUserMenu = () => (\n *     <UserMenu>\n *         <ConfigurationMenu />\n *         <Logout />\n *     </UserMenu>\n * );\n */\nexport const UserMenuContext = createContext<UserMenuContextValue>(undefined);\n\nexport type UserMenuContextValue = {\n    /**\n     * Closes the user menu\n     * @see UserMenu\n     */\n    onClose: () => void;\n};\n","import * as React from 'react';\nimport { styled, Theme } from '@mui/material/styles';\nimport { useCallback, FunctionComponent, ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    ListItemIcon,\n    ListItemText,\n    MenuItem,\n    useMediaQuery,\n} from '@mui/material';\nimport { MenuItemProps } from '@mui/material/MenuItem';\n\nimport ExitIcon from '@mui/icons-material/PowerSettingsNew';\nimport clsx from 'clsx';\nimport { useTranslate, useLogout } from 'ra-core';\n\n/**\n * Logout button component, to be passed to the Admin component\n *\n * Used for the Logout Menu item in the sidebar\n */\nexport const Logout: FunctionComponent<\n    LogoutProps & MenuItemProps<'li'>\n> = React.forwardRef(function Logout(props, ref) {\n    const { className, redirectTo, icon, ...rest } = props;\n\n    const isXSmall = useMediaQuery((theme: Theme) =>\n        theme.breakpoints.down('sm')\n    );\n    const translate = useTranslate();\n    const logout = useLogout();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const handleClick = useCallback(() => logout(null, redirectTo, false), [\n        redirectTo,\n        logout,\n    ]);\n    return (\n        <StyledMenuItem\n            className={clsx('logout', className)}\n            onClick={handleClick}\n            ref={ref}\n            // @ts-ignore\n            component={isXSmall ? 'span' : 'li'}\n            {...rest}\n        >\n            <ListItemIcon className={LogoutClasses.icon}>\n                {icon ? icon : <ExitIcon />}\n            </ListItemIcon>\n            <ListItemText>{translate('ra.auth.logout')}</ListItemText>\n        </StyledMenuItem>\n    );\n});\n\nLogout.propTypes = {\n    className: PropTypes.string,\n    redirectTo: PropTypes.string,\n    icon: PropTypes.element,\n};\n\nconst PREFIX = 'RaLogout';\n\nexport const LogoutClasses = {\n    icon: `${PREFIX}-icon`,\n};\n\nconst StyledMenuItem = styled(MenuItem, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    color: theme.palette.text.secondary,\n\n    [`& .${LogoutClasses.icon}`]: { minWidth: theme.spacing(5) },\n}));\n\nexport interface LogoutProps {\n    className?: string;\n    redirectTo?: string;\n    icon?: ReactElement;\n}\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport useScrollTrigger from '@mui/material/useScrollTrigger';\nimport Slide from '@mui/material/Slide';\n\nexport const HideOnScroll = (props: HideOnScrollProps) => {\n    const { children } = props;\n    const trigger = useScrollTrigger();\n    return (\n        <Slide appear={false} direction=\"down\" in={!trigger}>\n            {children}\n        </Slide>\n    );\n};\n\nHideOnScroll.propTypes = {\n    children: PropTypes.node.isRequired,\n};\n\nexport interface HideOnScrollProps {\n    children: React.ReactElement;\n}\n","import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { ReactNode } from 'react';\nimport PropTypes from 'prop-types';\nimport CardContent from '@mui/material/CardContent';\n\n/**\n * Overrides MUI CardContent to allow inner content\n *\n * When using several CardContent inside the same Card, the top and bottom\n * padding double the spacing between each CardContent, leading to too much\n * wasted space. Use this component as a CardContent alternative.\n */\nexport const CardContentInner = (props: CardContentInnerProps): JSX.Element => {\n    const { className, children } = props;\n\n    return <Root className={className}>{children}</Root>;\n};\n\nCardContentInner.propTypes = {\n    className: PropTypes.string,\n    classes: PropTypes.object,\n    children: PropTypes.node,\n};\n\nexport interface CardContentInnerProps {\n    className?: string;\n    children: ReactNode;\n}\n\nconst PREFIX = 'RaCardContentInner';\n\nexport const CardContentInnerClasses = {\n    root: `${PREFIX}-root`,\n};\n\nconst Root = styled(CardContent, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    paddingTop: 0,\n    paddingBottom: 0,\n    '&:first-of-type': {\n        paddingTop: 16,\n    },\n    '&:last-child': {\n        paddingBottom: 16,\n        [theme.breakpoints.only('xs')]: {\n            paddingBottom: 70,\n        },\n    },\n}));\n","import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { useCallback, MouseEventHandler } from 'react';\nimport PropTypes, { ReactComponentLike } from 'prop-types';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport Button from '@mui/material/Button';\nimport { alpha } from '@mui/material/styles';\nimport ActionCheck from '@mui/icons-material/CheckCircle';\nimport AlertError from '@mui/icons-material/ErrorOutline';\nimport clsx from 'clsx';\nimport { useTranslate } from 'ra-core';\nimport { SxProps } from '@mui/system';\n\n/**\n * Confirmation dialog\n *\n * @example\n * <Confirm\n *     isOpen={true}\n *     title=\"Delete Item\"\n *     content=\"Are you sure you want to delete this item?\"\n *     confirm=\"Yes\"\n *     confirmColor=\"primary\"\n *     ConfirmIcon=ActionCheck\n *     CancelIcon=AlertError\n *     cancel=\"Cancel\"\n *     onConfirm={() => { // do something }}\n *     onClose={() => { // do something }}\n * />\n */\nexport const Confirm = (props: ConfirmProps) => {\n    const {\n        className,\n        isOpen = false,\n        loading,\n        title,\n        content,\n        cancel = 'ra.action.cancel',\n        confirm = 'ra.action.confirm',\n        confirmColor = 'primary',\n        ConfirmIcon = ActionCheck,\n        CancelIcon = AlertError,\n        onClose,\n        onConfirm,\n        translateOptions = {},\n        sx,\n    } = props;\n\n    const translate = useTranslate();\n\n    const handleConfirm = useCallback(\n        e => {\n            e.stopPropagation();\n            onConfirm(e);\n        },\n        [onConfirm]\n    );\n\n    const handleClick = useCallback(e => {\n        e.stopPropagation();\n    }, []);\n\n    return (\n        <StyledDialog\n            className={className}\n            open={isOpen}\n            onClose={onClose}\n            onClick={handleClick}\n            aria-labelledby=\"alert-dialog-title\"\n            sx={sx}\n        >\n            <DialogTitle id=\"alert-dialog-title\">\n                {translate(title, { _: title, ...translateOptions })}\n            </DialogTitle>\n            <DialogContent>\n                {typeof content === 'string' ? (\n                    <DialogContentText>\n                        {translate(content, {\n                            _: content,\n                            ...translateOptions,\n                        })}\n                    </DialogContentText>\n                ) : (\n                    content\n                )}\n            </DialogContent>\n            <DialogActions>\n                <Button disabled={loading} onClick={onClose}>\n                    <CancelIcon className={ConfirmClasses.iconPaddingStyle} />\n                    {translate(cancel, { _: cancel })}\n                </Button>\n                <Button\n                    disabled={loading}\n                    onClick={handleConfirm}\n                    className={clsx('ra-confirm', {\n                        [ConfirmClasses.confirmWarning]:\n                            confirmColor === 'warning',\n                        [ConfirmClasses.confirmPrimary]:\n                            confirmColor === 'primary',\n                    })}\n                    autoFocus\n                >\n                    <ConfirmIcon className={ConfirmClasses.iconPaddingStyle} />\n                    {translate(confirm, { _: confirm })}\n                </Button>\n            </DialogActions>\n        </StyledDialog>\n    );\n};\n\nexport interface ConfirmProps {\n    cancel?: string;\n    className?: string;\n    confirm?: string;\n    confirmColor?: string;\n    ConfirmIcon?: ReactComponentLike;\n    CancelIcon?: ReactComponentLike;\n    content: React.ReactNode;\n    isOpen?: boolean;\n    loading?: boolean;\n    onClose: MouseEventHandler;\n    onConfirm: MouseEventHandler;\n    title: string;\n    translateOptions?: object;\n    sx?: SxProps;\n}\n\nConfirm.propTypes = {\n    cancel: PropTypes.string,\n    className: PropTypes.string,\n    confirm: PropTypes.string,\n    confirmColor: PropTypes.string,\n    ConfirmIcon: PropTypes.elementType,\n    CancelIcon: PropTypes.elementType,\n    content: PropTypes.node.isRequired,\n    isOpen: PropTypes.bool,\n    loading: PropTypes.bool,\n    onClose: PropTypes.func.isRequired,\n    onConfirm: PropTypes.func.isRequired,\n    title: PropTypes.string.isRequired,\n    sx: PropTypes.any,\n};\n\nconst PREFIX = 'RaConfirm';\n\nexport const ConfirmClasses = {\n    confirmPrimary: `${PREFIX}-confirmPrimary`,\n    confirmWarning: `${PREFIX}-confirmWarning`,\n    iconPaddingStyle: `${PREFIX}-iconPaddingStyle`,\n};\n\nconst StyledDialog = styled(Dialog, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    [`& .${ConfirmClasses.confirmPrimary}`]: {\n        color: theme.palette.primary.main,\n    },\n\n    [`& .${ConfirmClasses.confirmWarning}`]: {\n        color: theme.palette.error.main,\n        '&:hover': {\n            backgroundColor: alpha(theme.palette.error.main, 0.12),\n            // Reset on mouse devices\n            '@media (hover: none)': {\n                backgroundColor: 'transparent',\n            },\n        },\n    },\n\n    [`& .${ConfirmClasses.iconPaddingStyle}`]: {\n        paddingRight: '0.5em',\n    },\n}));\n","import React, { ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport DashboardIcon from '@mui/icons-material/Dashboard';\nimport { useTranslate, useBasename } from 'ra-core';\n\nimport { MenuItemLink } from './MenuItemLink';\n\nexport const DashboardMenuItem = (props: DashboardMenuItemProps) => {\n    const { locale, leftIcon = <DashboardIcon />, ...rest } = props;\n    const translate = useTranslate();\n    const basename = useBasename();\n    return (\n        <MenuItemLink\n            to={`${basename}/`}\n            primaryText={translate('ra.page.dashboard')}\n            leftIcon={leftIcon}\n            {...rest}\n        />\n    );\n};\n\nexport interface DashboardMenuItemProps {\n    leftIcon?: ReactElement;\n    locale?: string;\n    onClick?: () => void;\n    dense?: boolean;\n    /**\n     * @deprecated\n     */\n    sidebarIsOpen?: boolean;\n}\n\nDashboardMenuItem.propTypes = {\n    leftIcon: PropTypes.element,\n    locale: PropTypes.string,\n    onClick: PropTypes.func,\n    dense: PropTypes.bool,\n    sidebarIsOpen: PropTypes.bool,\n};\n","import React, { forwardRef, useCallback, ReactElement, ReactNode } from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { Link, LinkProps, useMatch } from 'react-router-dom';\nimport {\n    MenuItem,\n    MenuItemProps,\n    ListItemIcon,\n    Tooltip,\n    TooltipProps,\n    useMediaQuery,\n    Theme,\n} from '@mui/material';\n\nimport { useSidebarState } from './useSidebarState';\nimport { useTranslate, useBasename } from 'ra-core';\n\n/**\n * Displays a menu item with a label and an icon - or only the icon with a tooltip when the sidebar is minimized.\n * It also handles the automatic closing of the menu on tap on mobile.\n *\n * @typedef {Object} Props the props you can use\n * @prop {string|Location} to The menu item's target. It is passed to a React Router NavLink component.\n * @prop {string|ReactNode} primaryText The menu content, displayed when the menu isn't minimized. |\n * @prop {ReactNode} leftIcon The menu icon\n *\n * Additional props are passed down to the underling MUI <MenuItem> component\n * @see https://material-ui.com/api/menu-item/#menuitem-api\n *\n * @example // You can create a custom menu component using the <DashboardMenuItem> and <MenuItemLink> components:\n *\n * // in src/Menu.js\n * import * as React from 'react';\n * import { DashboardMenuItem, MenuItemLink } from 'react-admin';\n * import BookIcon from '@mui/icons-material/Book';\n * import ChatBubbleIcon from '@mui/icons-material/ChatBubble';\n * import PeopleIcon from '@mui/icons-material/People';\n * import LabelIcon from '@mui/icons-material/Label';\n *\n * export const Menu = () => (\n *     <div>\n *         <DashboardMenuItem />\n *         <MenuItemLink to=\"/posts\" primaryText=\"Posts\" leftIcon={<BookIcon />}/>\n *         <MenuItemLink to=\"/comments\" primaryText=\"Comments\" leftIcon={<ChatBubbleIcon />}/>\n *         <MenuItemLink to=\"/users\" primaryText=\"Users\" leftIcon={<PeopleIcon />}/>\n *         <MenuItemLink to=\"/custom-route\" primaryText=\"Miscellaneous\" leftIcon={<LabelIcon />}/>\n *     </div>\n * );\n *\n * // to use this custom menu component, pass it to a custom Layout:\n * // in src/Layout.js\n * import { Layout } from 'react-admin';\n * import { Menu } from './Menu';\n *\n * export const Layout = (props) => <Layout {...props} menu={Menu} />;\n *\n * // then, use this layout in the <Admin layout> prop:\n * // in src/App.js\n * import { Layout }  from './Layout';\n *\n * const App = () => (\n *     <Admin layout={Layout} dataProvider={simpleRestProvider('http://path.to.my.api')}>\n *         // ...\n *     </Admin>\n * );\n */\nexport const MenuItemLink = forwardRef((props: MenuItemLinkProps, ref) => {\n    const {\n        className,\n        primaryText,\n        leftIcon,\n        onClick,\n        sidebarIsOpen,\n        tooltipProps,\n        ...rest\n    } = props;\n\n    const isSmall = useMediaQuery<Theme>(theme => theme.breakpoints.down('md'));\n    const translate = useTranslate();\n    const basename = useBasename();\n\n    const [open, setOpen] = useSidebarState();\n    const handleMenuTap = useCallback(\n        e => {\n            if (isSmall) {\n                setOpen(false);\n            }\n            onClick && onClick(e);\n        },\n        [setOpen, isSmall, onClick]\n    );\n\n    const to =\n        (typeof props.to === 'string' ? props.to : props.to.pathname) || '';\n    const match = useMatch({ path: to, end: to === `${basename}/` });\n\n    const renderMenuItem = () => {\n        return (\n            <StyledMenuItem\n                className={clsx(className, {\n                    [MenuItemLinkClasses.active]: !!match,\n                })}\n                component={LinkRef}\n                // @ts-ignore\n                ref={ref}\n                tabIndex={0}\n                {...rest}\n                onClick={handleMenuTap}\n            >\n                {leftIcon && (\n                    <ListItemIcon className={MenuItemLinkClasses.icon}>\n                        {leftIcon}\n                    </ListItemIcon>\n                )}\n                {typeof primaryText === 'string'\n                    ? translate(primaryText, { _: primaryText })\n                    : primaryText}\n            </StyledMenuItem>\n        );\n    };\n\n    return open ? (\n        renderMenuItem()\n    ) : (\n        <Tooltip\n            title={\n                typeof primaryText === 'string'\n                    ? translate(primaryText, { _: primaryText })\n                    : primaryText\n            }\n            placement=\"right\"\n            {...tooltipProps}\n        >\n            {renderMenuItem()}\n        </Tooltip>\n    );\n});\n\ninterface Props {\n    leftIcon?: ReactElement;\n    primaryText?: ReactNode;\n    /**\n     * @deprecated\n     */\n    sidebarIsOpen?: boolean;\n    tooltipProps?: TooltipProps;\n}\n\nexport type MenuItemLinkProps = Props & LinkProps & MenuItemProps<'li'>;\n\nMenuItemLink.propTypes = {\n    className: PropTypes.string,\n    leftIcon: PropTypes.element,\n    onClick: PropTypes.func,\n    primaryText: PropTypes.node,\n    to: PropTypes.oneOfType([PropTypes.string, PropTypes.object]).isRequired,\n    sidebarIsOpen: PropTypes.bool,\n};\n\nconst PREFIX = 'RaMenuItemLink';\n\nexport const MenuItemLinkClasses = {\n    active: `${PREFIX}-active`,\n    icon: `${PREFIX}-icon`,\n};\n\nconst StyledMenuItem = styled(MenuItem, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    color: theme.palette.text.secondary,\n\n    [`&.${MenuItemLinkClasses.active}`]: {\n        color: theme.palette.text.primary,\n    },\n\n    [`& .${MenuItemLinkClasses.icon}`]: { minWidth: theme.spacing(5) },\n}));\n\nconst LinkRef = forwardRef<HTMLAnchorElement, LinkProps>((props, ref) => (\n    <Link ref={ref} {...props} />\n));\n","import * as React from 'react';\nimport mediaQuery from 'css-mediaquery';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\n\n/**\n * Test utility to simulate a device form factor for server-side mediaQueries\n *\n * Do not use inside a browser.\n *\n * @example\n *\n * <DeviceTestWrapper width=\"sm\">\n *     <MyResponsiveComponent />\n * <DeviceTestWrapper>\n */\nexport const DeviceTestWrapper = ({\n    width = 'md',\n    children,\n}: DeviceTestWrapperProps): JSX.Element => {\n    const theme = createTheme();\n    // Use https://github.com/ericf/css-mediaquery as polyfill.\n    const ssrMatchMedia = query => ({\n        matches: mediaQuery.match(query, {\n            // The estimated CSS width of the browser.\n            // For the sake of this demo, we are using a fixed value.\n            // In production, you can look into client-hint https://caniuse.com/#search=client%20hint\n            // or user-agent resolution.\n            width: theme.breakpoints.values[width],\n        }),\n    });\n\n    return (\n        <ThemeProvider\n            theme={{\n                ...theme,\n                components: {\n                    MuiUseMediaQuery: {\n                        defaultProps: {\n                            ssrMatchMedia,\n                            matchMedia: ssrMatchMedia,\n                        },\n                    },\n                },\n            }}\n        >\n            {children}\n        </ThemeProvider>\n    );\n};\n\nexport interface DeviceTestWrapperProps {\n    width: 'md' | 'xs' | 'sm' | 'lg' | 'xl';\n    children: JSX.Element;\n}\n","import * as React from 'react';\nimport { ComponentType, ErrorInfo, Fragment, HtmlHTMLAttributes } from 'react';\nimport { FallbackProps } from 'react-error-boundary';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport {\n    Button,\n    Accordion,\n    AccordionDetails,\n    AccordionSummary,\n    Typography,\n} from '@mui/material';\nimport ErrorIcon from '@mui/icons-material/Report';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport History from '@mui/icons-material/History';\nimport { TitleComponent, useTranslate } from 'ra-core';\nimport { Title, TitlePropType } from './Title';\nimport { useResetErrorBoundaryOnLocationChange } from './useResetErrorBoundaryOnLocationChange';\n\nexport const Error = (\n    props: InternalErrorProps & {\n        errorComponent?: ComponentType<ErrorProps>;\n    }\n) => {\n    const {\n        error,\n        errorComponent: ErrorComponent,\n        errorInfo,\n        resetErrorBoundary,\n        className,\n        title,\n        ...rest\n    } = props;\n\n    const translate = useTranslate();\n    useResetErrorBoundaryOnLocationChange(resetErrorBoundary);\n\n    if (ErrorComponent) {\n        return (\n            <ErrorComponent error={error} errorInfo={errorInfo} title={title} />\n        );\n    }\n\n    return (\n        <Fragment>\n            {title && <Title title={title} />}\n            <Root className={className} {...rest}>\n                <h1 className={ErrorClasses.title} role=\"alert\">\n                    <ErrorIcon className={ErrorClasses.icon} />\n                    {translate('ra.page.error')}\n                </h1>\n                <div>{translate('ra.message.error')}</div>\n                {process.env.NODE_ENV !== 'production' && (\n                    <>\n                        <Accordion className={ErrorClasses.panel}>\n                            <AccordionSummary\n                                expandIcon={<ExpandMoreIcon />}\n                                className={ErrorClasses.panelSumary}\n                            >\n                                {translate(error.message, {\n                                    _: error.message,\n                                })}\n                            </AccordionSummary>\n                            <AccordionDetails\n                                className={ErrorClasses.panelDetails}\n                            >\n                                {/*\n                                    error message is repeated here to allow users to copy it. AccordionSummary doesn't support text selection.\n                                */}\n                                <p>\n                                    {translate(error.message, {\n                                        _: error.message,\n                                    })}\n                                </p>\n                                <p>{errorInfo?.componentStack}</p>\n                            </AccordionDetails>\n                        </Accordion>\n\n                        <div className={ErrorClasses.advice}>\n                            <Typography align=\"center\">\n                                Need help with this error? Try the following:\n                            </Typography>\n                            <Typography component=\"div\">\n                                <ul>\n                                    <li>\n                                        Check the{' '}\n                                        <a href=\"https://marmelab.com/react-admin/Readme.html\">\n                                            react-admin documentation\n                                        </a>\n                                    </li>\n                                    <li>\n                                        Search on{' '}\n                                        <a href=\"https://stackoverflow.com/questions/tagged/react-admin\">\n                                            StackOverflow\n                                        </a>{' '}\n                                        for community answers\n                                    </li>\n                                    <li>\n                                        Get help from the core team via{' '}\n                                        <a href=\"https://marmelab.com/ra-enterprise/#fromsww\">\n                                            react-admin Enterprise Edition\n                                        </a>\n                                    </li>\n                                </ul>\n                            </Typography>\n                        </div>\n                    </>\n                )}\n                <div className={ErrorClasses.toolbar}>\n                    <Button\n                        variant=\"contained\"\n                        startIcon={<History />}\n                        onClick={goBack}\n                    >\n                        {translate('ra.action.back')}\n                    </Button>\n                </div>\n            </Root>\n        </Fragment>\n    );\n};\n\nError.propTypes = {\n    className: PropTypes.string,\n    error: PropTypes.object.isRequired,\n    errorInfo: PropTypes.object,\n    title: TitlePropType,\n};\n\ninterface InternalErrorProps\n    extends Omit<HtmlHTMLAttributes<HTMLDivElement>, 'title'>,\n        FallbackProps,\n        ErrorProps {\n    className?: string;\n}\n\nexport interface ErrorProps extends Pick<FallbackProps, 'error'> {\n    errorInfo?: ErrorInfo;\n    title?: TitleComponent;\n}\n\nconst PREFIX = 'RaError';\n\nexport const ErrorClasses = {\n    container: `${PREFIX}-container`,\n    title: `${PREFIX}-title`,\n    icon: `${PREFIX}-icon`,\n    panel: `${PREFIX}-panel`,\n    panelSumary: `${PREFIX}-panelSumary`,\n    panelDetails: `${PREFIX}-panelDetails`,\n    toolbar: `${PREFIX}-toolbar`,\n    advice: `${PREFIX}-advice`,\n};\n\nconst Root = styled('div', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    [theme.breakpoints.down('md')]: {\n        padding: '1em',\n    },\n    fontFamily: 'Roboto, sans-serif',\n    opacity: 0.5,\n\n    [`& .${ErrorClasses.title}`]: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n\n    [`& .${ErrorClasses.icon}`]: {\n        width: '2em',\n        height: '2em',\n        marginRight: '0.5em',\n    },\n\n    [`& .${ErrorClasses.panel}`]: {\n        marginTop: '1em',\n        maxWidth: '60em',\n    },\n\n    [`& .${ErrorClasses.panelSumary}`]: {\n        userSelect: 'all',\n    },\n\n    [`& .${ErrorClasses.panelDetails}`]: {\n        whiteSpace: 'pre-wrap',\n    },\n\n    [`& .${ErrorClasses.toolbar}`]: {\n        marginTop: '2em',\n    },\n\n    [`& .${ErrorClasses.advice}`]: {\n        marginTop: '2em',\n    },\n}));\n\nfunction goBack() {\n    window.history.go(-1);\n}\n","import * as React from 'react';\nimport { ReactElement } from 'react';\nimport { createPortal } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { useTranslate, RaRecord, warning } from 'ra-core';\n\nexport const Title = (props: TitleProps) => {\n    const { className, defaultTitle, title, ...rest } = props;\n    const translate = useTranslate();\n    const container =\n        typeof document !== 'undefined'\n            ? document.getElementById('react-admin-title')\n            : null;\n\n    if (!container) return null;\n\n    warning(!defaultTitle && !title, 'Missing title prop in <Title> element');\n\n    const titleElement = !title ? (\n        <span className={className} {...rest}>\n            {defaultTitle}\n        </span>\n    ) : typeof title === 'string' ? (\n        <span className={className} {...rest}>\n            {translate(title, { _: title })}\n        </span>\n    ) : (\n        title\n    );\n    return createPortal(titleElement, container);\n};\n\nexport const TitlePropType = PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.element,\n]);\n\nTitle.propTypes = {\n    defaultTitle: PropTypes.string,\n    className: PropTypes.string,\n    record: PropTypes.any,\n    title: TitlePropType,\n};\n\nexport interface TitleProps {\n    className?: string;\n    defaultTitle?: string;\n    record?: Partial<RaRecord>;\n    title?: string | ReactElement;\n}\n","import { useEffect, useRef } from 'react';\nimport { useLocation } from 'react-router';\n\n/**\n * A hook to use inside the component passed to FallbackComponent\n * of react-error-boundary. It resets the error boundary state whenever\n * the location changes\n * @param {Function} resetErrorBoundary\n */\nexport const useResetErrorBoundaryOnLocationChange = (\n    resetErrorBoundary: () => void\n) => {\n    const { pathname } = useLocation();\n    const originalPathname = useRef(pathname);\n\n    useEffect(() => {\n        if (pathname !== originalPathname.current) {\n            resetErrorBoundary();\n        }\n    }, [pathname, resetErrorBoundary]);\n};\n","import React, {\n    useState,\n    ErrorInfo,\n    ReactNode,\n    ComponentType,\n    HtmlHTMLAttributes,\n} from 'react';\nimport { ErrorBoundary } from 'react-error-boundary';\nimport clsx from 'clsx';\nimport { styled } from '@mui/material/styles';\nimport { CoreLayoutProps } from 'ra-core';\n\nimport { AppBar as DefaultAppBar, AppBarProps } from './AppBar';\nimport { Sidebar as DefaultSidebar } from './Sidebar';\nimport { Menu as DefaultMenu, MenuProps } from './Menu';\nimport { Error, ErrorProps } from './Error';\nimport { SkipNavigationButton } from '../button';\nimport { useSidebarState } from './useSidebarState';\n\nexport const Layout = (props: LayoutProps) => {\n    const {\n        appBar: AppBar = DefaultAppBar,\n        children,\n        className,\n        dashboard,\n        error: errorComponent,\n        menu: Menu = DefaultMenu,\n        sidebar: Sidebar = DefaultSidebar,\n        title,\n        ...rest\n    } = props;\n\n    const [open] = useSidebarState();\n    const [errorInfo, setErrorInfo] = useState<ErrorInfo>(null);\n\n    const handleError = (error: Error, info: ErrorInfo) => {\n        setErrorInfo(info);\n    };\n\n    return (\n        <StyledLayout className={clsx('layout', className)} {...rest}>\n            <SkipNavigationButton />\n            <div className={LayoutClasses.appFrame}>\n                <AppBar open={open} title={title} />\n                <main className={LayoutClasses.contentWithSidebar}>\n                    <Sidebar>\n                        <Menu hasDashboard={!!dashboard} />\n                    </Sidebar>\n                    <div id=\"main-content\" className={LayoutClasses.content}>\n                        <ErrorBoundary\n                            onError={handleError}\n                            fallbackRender={({ error, resetErrorBoundary }) => (\n                                <Error\n                                    error={error}\n                                    errorComponent={errorComponent}\n                                    errorInfo={errorInfo}\n                                    resetErrorBoundary={resetErrorBoundary}\n                                    title={title}\n                                />\n                            )}\n                        >\n                            {children}\n                        </ErrorBoundary>\n                    </div>\n                </main>\n            </div>\n        </StyledLayout>\n    );\n};\n\nexport interface LayoutProps\n    extends CoreLayoutProps,\n        Omit<HtmlHTMLAttributes<HTMLDivElement>, 'title'> {\n    appBar?: ComponentType<AppBarProps>;\n    className?: string;\n    error?: ComponentType<ErrorProps>;\n    menu?: ComponentType<MenuProps>;\n    sidebar?: ComponentType<{ children: ReactNode }>;\n}\n\nexport interface LayoutState {\n    hasError: boolean;\n    error?: Error;\n    errorInfo?: ErrorInfo;\n}\n\nconst PREFIX = 'RaLayout';\nexport const LayoutClasses = {\n    appFrame: `${PREFIX}-appFrame`,\n    contentWithSidebar: `${PREFIX}-contentWithSidebar`,\n    content: `${PREFIX}-content`,\n};\n\nconst StyledLayout = styled('div', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    display: 'flex',\n    flexDirection: 'column',\n    zIndex: 1,\n    minHeight: '100vh',\n    backgroundColor: theme.palette.background.default,\n    position: 'relative',\n    minWidth: 'fit-content',\n    width: '100%',\n    color: theme.palette.getContrastText(theme.palette.background.default),\n\n    [`& .${LayoutClasses.appFrame}`]: {\n        display: 'flex',\n        flexDirection: 'column',\n        flexGrow: 1,\n        [theme.breakpoints.up('xs')]: {\n            marginTop: theme.spacing(6),\n        },\n        [theme.breakpoints.down('sm')]: {\n            marginTop: theme.spacing(7),\n        },\n    },\n    [`& .${LayoutClasses.contentWithSidebar}`]: {\n        display: 'flex',\n        flexGrow: 1,\n    },\n    [`& .${LayoutClasses.content}`]: {\n        backgroundColor: theme.palette.background.default,\n        zIndex: 2,\n        display: 'flex',\n        flexDirection: 'column',\n        flexGrow: 1,\n        flexBasis: 0,\n        [theme.breakpoints.up('xs')]: {\n            paddingRight: theme.spacing(2),\n            paddingLeft: theme.spacing(1),\n        },\n        [theme.breakpoints.down('md')]: {\n            padding: 0,\n        },\n    },\n}));\n","import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport { Drawer, DrawerProps, useMediaQuery, Theme } from '@mui/material';\nimport lodashGet from 'lodash/get';\nimport { useLocale } from 'ra-core';\n\nimport { useSidebarState } from './useSidebarState';\n\nexport const Sidebar = (props: SidebarProps) => {\n    const { children, closedSize, size, ...rest } = props;\n    const isXSmall = useMediaQuery<Theme>(theme =>\n        theme.breakpoints.down('sm')\n    );\n    const isSmall = useMediaQuery<Theme>(theme => theme.breakpoints.down('md'));\n    const [open, setOpen] = useSidebarState();\n    useLocale(); // force redraw on locale change\n\n    const toggleSidebar = () => setOpen(!open);\n\n    return isXSmall ? (\n        <StyledDrawer\n            variant=\"temporary\"\n            open={open}\n            onClose={toggleSidebar}\n            classes={SidebarClasses}\n            {...rest}\n        >\n            {children}\n        </StyledDrawer>\n    ) : isSmall ? (\n        <StyledDrawer\n            variant=\"permanent\"\n            open={open}\n            onClose={toggleSidebar}\n            classes={SidebarClasses}\n            {...rest}\n        >\n            <div className={SidebarClasses.fixed}>{children}</div>\n        </StyledDrawer>\n    ) : (\n        <StyledDrawer\n            variant=\"permanent\"\n            open={open}\n            onClose={toggleSidebar}\n            classes={SidebarClasses}\n            {...rest}\n        >\n            <div className={SidebarClasses.fixed}>{children}</div>\n        </StyledDrawer>\n    );\n};\n\nSidebar.propTypes = {\n    children: PropTypes.node.isRequired,\n};\n\nexport interface SidebarProps extends DrawerProps {\n    children: ReactElement;\n    closedSize?: number;\n\n    size?: number;\n}\n\nconst PREFIX = 'RaSidebar';\n\nexport const SidebarClasses = {\n    docked: `${PREFIX}-docked`,\n    paper: `${PREFIX}-paper`,\n    paperAnchorLeft: `${PREFIX}-paperAnchorLeft`,\n    paperAnchorRight: `${PREFIX}-paperAnchorRight`,\n    paperAnchorTop: `${PREFIX}-paperAnchorTop`,\n    paperAnchorBottom: `${PREFIX}-paperAnchorBottom`,\n    paperAnchorDockedLeft: `${PREFIX}-paperAnchorDockedLeft`,\n    paperAnchorDockedTop: `${PREFIX}-paperAnchorDockedTop`,\n    paperAnchorDockedRight: `${PREFIX}-paperAnchorDockedRight`,\n    paperAnchorDockedBottom: `${PREFIX}-paperAnchorDockedBottom`,\n    modal: `${PREFIX}-modal`,\n    fixed: `${PREFIX}-fixed`,\n};\n\nconst StyledDrawer = styled(Drawer, {\n    name: PREFIX,\n    slot: 'Root',\n    overridesResolver: (props, styles) => styles.root,\n})(({ open, theme }) => ({\n    height: 'calc(100vh - 3em)',\n\n    [`& .${SidebarClasses.docked}`]: {},\n    [`& .${SidebarClasses.paper}`]: {},\n    [`& .${SidebarClasses.paperAnchorLeft}`]: {},\n    [`& .${SidebarClasses.paperAnchorRight}`]: {},\n    [`& .${SidebarClasses.paperAnchorTop}`]: {},\n    [`& .${SidebarClasses.paperAnchorBottom}`]: {},\n    [`& .${SidebarClasses.paperAnchorDockedLeft}`]: {},\n    [`& .${SidebarClasses.paperAnchorDockedTop}`]: {},\n    [`& .${SidebarClasses.paperAnchorDockedRight}`]: {},\n    [`& .${SidebarClasses.paperAnchorDockedBottom}`]: {},\n    [`& .${SidebarClasses.modal}`]: {},\n\n    [`& .${SidebarClasses.fixed}`]: {\n        position: 'fixed',\n        height: 'calc(100vh - 3em)',\n        overflowX: 'hidden',\n        // hide scrollbar\n        scrollbarWidth: 'none',\n        msOverflowStyle: 'none',\n        '&::-webkit-scrollbar': {\n            display: 'none',\n        },\n    },\n\n    [`& .MuiPaper-root`]: {\n        position: 'relative',\n        width: open\n            ? lodashGet(theme, 'sidebar.width', DRAWER_WIDTH)\n            : lodashGet(theme, 'sidebar.closedWidth', CLOSED_DRAWER_WIDTH),\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        backgroundColor: 'transparent',\n        borderRight: 'none',\n        [theme.breakpoints.only('xs')]: {\n            marginTop: 0,\n            height: '100vh',\n            position: 'inherit',\n            backgroundColor: theme.palette.background.default,\n        },\n        [theme.breakpoints.up('md')]: {\n            border: 'none',\n        },\n        zIndex: 'inherit',\n    },\n}));\n\nexport const DRAWER_WIDTH = 240;\nexport const CLOSED_DRAWER_WIDTH = 55;\n","import * as React from 'react';\nimport { ReactNode, createElement } from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport lodashGet from 'lodash/get';\nimport DefaultIcon from '@mui/icons-material/ViewList';\nimport clsx from 'clsx';\nimport {\n    useResourceDefinitions,\n    useGetResourceLabel,\n    useCreatePath,\n} from 'ra-core';\n\nimport { DRAWER_WIDTH, CLOSED_DRAWER_WIDTH } from './Sidebar';\nimport { useSidebarState } from './useSidebarState';\nimport { DashboardMenuItem } from './DashboardMenuItem';\nimport { MenuItemLink } from './MenuItemLink';\n\nexport const Menu = (props: MenuProps) => {\n    const resources = useResourceDefinitions();\n    const getResourceLabel = useGetResourceLabel();\n    const createPath = useCreatePath();\n    const {\n        hasDashboard,\n        dense,\n        children = (\n            <>\n                {hasDashboard && <DashboardMenuItem dense={dense} />}\n                {Object.keys(resources)\n                    .filter(name => resources[name].hasList)\n                    .map(name => (\n                        <MenuItemLink\n                            key={name}\n                            to={createPath({\n                                resource: name,\n                                type: 'list',\n                            })}\n                            state={{ _scrollToTop: true }}\n                            primaryText={getResourceLabel(name, 2)}\n                            leftIcon={\n                                resources[name].icon ? (\n                                    createElement(resources[name].icon)\n                                ) : (\n                                    <DefaultIcon />\n                                )\n                            }\n                            dense={dense}\n                        />\n                    ))}\n            </>\n        ),\n        className,\n        ...rest\n    } = props;\n\n    const [open] = useSidebarState();\n\n    return (\n        <Root\n            className={clsx(\n                {\n                    [MenuClasses.open]: open,\n                    [MenuClasses.closed]: !open,\n                },\n                className\n            )}\n            {...rest}\n        >\n            {children}\n        </Root>\n    );\n};\n\nexport interface MenuProps {\n    children?: ReactNode;\n    className?: string;\n    dense?: boolean;\n    hasDashboard?: boolean;\n}\n\nMenu.propTypes = {\n    className: PropTypes.string,\n    dense: PropTypes.bool,\n    hasDashboard: PropTypes.bool,\n};\n\nconst PREFIX = 'RaMenu';\n\nexport const MenuClasses = {\n    open: `${PREFIX}-open`,\n    closed: `${PREFIX}-closed`,\n};\n\nconst Root = styled('div', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'flex-start',\n    marginTop: '0.5em',\n    marginBottom: '1em',\n    [theme.breakpoints.only('xs')]: {\n        marginTop: 0,\n    },\n    transition: theme.transitions.create('width', {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n    }),\n\n    [`&.${MenuClasses.open}`]: {\n        width: lodashGet(theme, 'sidebar.width', DRAWER_WIDTH),\n    },\n\n    [`&.${MenuClasses.closed}`]: {\n        width: lodashGet(theme, 'sidebar.closedWidth', CLOSED_DRAWER_WIDTH),\n    },\n}));\n","import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport Progress, {\n    LinearProgressProps as ProgressProps,\n} from '@mui/material/LinearProgress';\nimport PropTypes from 'prop-types';\nimport { useTimeout } from 'ra-core';\n\n/**\n * Progress bar formatted to replace an input or a field in a form layout\n *\n * Avoids visual jumps when replaced by value or form input\n *\n * @see ReferenceField\n * @see ReferenceInput\n *\n * @typedef {Object} Props the props you can use\n * @prop {Object} classes CSS class names\n * @prop {string} className CSS class applied to the LinearProgress component\n * @prop {integer} timeout Milliseconds to wait before showing the progress bar. One second by default\n *\n * @param {Props} props\n */\nexport const LinearProgress = ({\n    timeout = 1000,\n    ...props\n}: LinearProgressProps) => {\n    const { className, ...rest } = props;\n\n    const oneSecondHasPassed = useTimeout(timeout);\n\n    return oneSecondHasPassed ? (\n        <StyledProgress className={className} {...rest} />\n    ) : null;\n};\n\nLinearProgress.propTypes = {\n    className: PropTypes.string,\n    timeout: PropTypes.number,\n};\n\n// What? TypeScript loses the displayName if we don't set it explicitly\nLinearProgress.displayName = 'LinearProgress';\n\nexport interface LinearProgressProps extends ProgressProps {\n    timeout?: number;\n}\n\nconst PREFIX = 'RaLinearProgress';\n\nconst StyledProgress = styled(Progress, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    margin: `${theme.spacing(1)} 0`,\n    width: theme.spacing(20),\n}));\n","import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport { useTranslate } from 'ra-core';\n\nexport const Loading = props => {\n    const {\n        className,\n        loadingPrimary = 'ra.page.loading',\n        loadingSecondary = 'ra.message.loading',\n    } = props;\n\n    const translate = useTranslate();\n    return (\n        <Root className={className}>\n            <div className={LoadingClasses.message}>\n                <CircularProgress\n                    className={LoadingClasses.icon}\n                    color=\"primary\"\n                />\n                <h1>{translate(loadingPrimary)}</h1>\n                <div>{translate(loadingSecondary)}.</div>\n            </div>\n        </Root>\n    );\n};\n\nLoading.propTypes = {\n    className: PropTypes.string,\n    loadingPrimary: PropTypes.string,\n    loadingSecondary: PropTypes.string,\n};\n\nLoading.defaultProps = {\n    loadingPrimary: 'ra.page.loading',\n    loadingSecondary: 'ra.message.loading',\n};\n\nconst PREFIX = 'RaLoading';\n\nexport const LoadingClasses = {\n    root: `${PREFIX}-root`,\n    icon: `${PREFIX}-icon`,\n    message: `${PREFIX}-message`,\n};\n\nconst Root = styled('div', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    [theme.breakpoints.up('md')]: {\n        height: '100%',\n    },\n    [theme.breakpoints.down('xl')]: {\n        height: '100vh',\n        marginTop: '-3em',\n    },\n\n    [`& .${LoadingClasses.icon}`]: {\n        width: '9em',\n        height: '9em',\n    },\n\n    [`& .${LoadingClasses.message}`]: {\n        textAlign: 'center',\n        fontFamily: 'Roboto, sans-serif',\n        opacity: 0.5,\n        margin: '0 1em',\n    },\n}));\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Loading } from './Loading';\n\nexport const LoadingPage = ({\n    loadingPrimary = 'ra.page.loading',\n    loadingSecondary = 'ra.message.loading',\n    ...props\n}) => (\n    <Loading\n        loadingPrimary={loadingPrimary}\n        loadingSecondary={loadingSecondary}\n        {...props}\n    />\n);\n\nLoadingPage.propTypes = {\n    theme: PropTypes.object,\n    className: PropTypes.string,\n    loadingPrimary: PropTypes.string,\n    loadingSecondary: PropTypes.string,\n};\n","import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport Button from '@mui/material/Button';\nimport HotTub from '@mui/icons-material/HotTub';\nimport History from '@mui/icons-material/History';\n\nimport { useAuthenticated, useTranslate } from 'ra-core';\nimport { Title } from './Title';\n\nexport const NotFound = props => {\n    const { className, title, ...rest } = props;\n\n    const translate = useTranslate();\n    useAuthenticated();\n    return (\n        <Root className={className} {...sanitizeRestProps(rest)}>\n            <Title defaultTitle={title} />\n            <div className={NotFoundClasses.message}>\n                <HotTub className={NotFoundClasses.icon} />\n                <h1>{translate('ra.page.not_found')}</h1>\n                <div>{translate('ra.message.not_found')}.</div>\n            </div>\n            <div className={NotFoundClasses.toolbar}>\n                <Button\n                    variant=\"contained\"\n                    startIcon={<History />}\n                    onClick={goBack}\n                >\n                    {translate('ra.action.back')}\n                </Button>\n            </div>\n        </Root>\n    );\n};\n\nconst sanitizeRestProps = ({\n    staticContext,\n    history,\n    location,\n    match,\n    ...rest\n}) => rest;\n\nNotFound.propTypes = {\n    className: PropTypes.string,\n    title: PropTypes.string,\n    location: PropTypes.object,\n};\n\nconst PREFIX = 'RaNotFound';\n\nexport const NotFoundClasses = {\n    icon: `${PREFIX}-icon`,\n    message: `${PREFIX}-message`,\n    toolbar: `${PREFIX}-toolbar`,\n};\n\nconst Root = styled('div', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    [theme.breakpoints.up('md')]: {\n        height: '100%',\n    },\n    [theme.breakpoints.down('md')]: {\n        height: '100vh',\n        marginTop: '-3em',\n    },\n\n    [`& .${NotFoundClasses.icon}`]: {\n        width: '9em',\n        height: '9em',\n    },\n\n    [`& .${NotFoundClasses.message}`]: {\n        textAlign: 'center',\n        fontFamily: 'Roboto, sans-serif',\n        opacity: 0.5,\n        margin: '0 1em',\n    },\n\n    [`& .${NotFoundClasses.toolbar}`]: {\n        textAlign: 'center',\n        marginTop: '2em',\n    },\n}));\n\nfunction goBack() {\n    window.history.go(-1);\n}\n","import * as React from 'react';\nimport { styled, Theme } from '@mui/material/styles';\nimport { useState, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Snackbar, SnackbarProps, SnackbarOrigin } from '@mui/material';\nimport clsx from 'clsx';\n\nimport {\n    useNotificationContext,\n    undoableEventEmitter,\n    useTranslate,\n} from 'ra-core';\n\nconst defaultAnchorOrigin: SnackbarOrigin = {\n    vertical: 'bottom',\n    horizontal: 'center',\n};\n\n/**\n * Provides a way to show a notification.\n * @see useNotify\n *\n * @example <caption>Basic usage</caption>\n * <Notification />\n *\n * @param props The component props\n * @param {string} props.type The notification type. Defaults to 'info'.\n * @param {number} props.autoHideDuration Duration in milliseconds to wait until hiding a given notification. Defaults to 4000.\n * @param {boolean} props.multiLine Set it to `true` if the notification message should be shown in more than one line.\n */\nexport const Notification = (props: NotificationProps) => {\n    const {\n        className,\n        type = 'info',\n        autoHideDuration = 4000,\n        multiLine = false,\n        anchorOrigin = defaultAnchorOrigin,\n        ...rest\n    } = props;\n    const { notifications, takeNotification } = useNotificationContext();\n    const [open, setOpen] = useState(false);\n    const [messageInfo, setMessageInfo] = React.useState(undefined);\n    const translate = useTranslate();\n\n    useEffect(() => {\n        if (notifications.length && !messageInfo) {\n            // Set a new snack when we don't have an active one\n            setMessageInfo(takeNotification());\n            setOpen(true);\n        } else if (notifications.length && messageInfo && open) {\n            // Close an active snack when a new one is added\n            setOpen(false);\n        }\n    }, [notifications, messageInfo, open, takeNotification]);\n\n    const handleRequestClose = useCallback(() => {\n        setOpen(false);\n    }, [setOpen]);\n\n    const handleExited = useCallback(() => {\n        if (messageInfo && messageInfo.notificationOptions.undoable) {\n            undoableEventEmitter.emit('end', { isUndo: false });\n        }\n        setMessageInfo(undefined);\n    }, [messageInfo]);\n\n    const handleUndo = useCallback(() => {\n        undoableEventEmitter.emit('end', { isUndo: true });\n        setOpen(false);\n    }, []);\n\n    if (!messageInfo) return null;\n\n    return (\n        <StyledSnackbar\n            className={className}\n            open={open}\n            message={\n                messageInfo.message &&\n                translate(\n                    messageInfo.message,\n                    messageInfo.notificationOptions.messageArgs\n                )\n            }\n            autoHideDuration={\n                messageInfo.notificationOptions.autoHideDuration ||\n                autoHideDuration\n            }\n            disableWindowBlurListener={messageInfo.notificationOptions.undoable}\n            TransitionProps={{ onExited: handleExited }}\n            onClose={handleRequestClose}\n            ContentProps={{\n                className: clsx(NotificationClasses[messageInfo.type || type], {\n                    [NotificationClasses.multiLine]:\n                        messageInfo.multiLine || multiLine,\n                }),\n            }}\n            action={\n                messageInfo.notificationOptions.undoable ? (\n                    <Button\n                        color=\"primary\"\n                        className={NotificationClasses.undo}\n                        size=\"small\"\n                        onClick={handleUndo}\n                    >\n                        <>{translate('ra.action.undo')}</>\n                    </Button>\n                ) : null\n            }\n            anchorOrigin={anchorOrigin}\n            {...rest}\n        />\n    );\n};\n\nNotification.propTypes = {\n    type: PropTypes.string,\n    autoHideDuration: PropTypes.number,\n    multiLine: PropTypes.bool,\n};\n\nconst PREFIX = 'RaNotification';\n\nexport const NotificationClasses = {\n    success: `${PREFIX}-success`,\n    error: `${PREFIX}-error`,\n    warning: `${PREFIX}-warning`,\n    undo: `${PREFIX}-undo`,\n    multiLine: `${PREFIX}-multiLine`,\n};\n\nconst StyledSnackbar = styled(Snackbar, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme, type }: NotificationProps & { theme?: Theme }) => ({\n    [`& .${NotificationClasses.success}`]: {\n        backgroundColor: theme.palette.success.main,\n        color: theme.palette.success.contrastText,\n    },\n\n    [`& .${NotificationClasses.error}`]: {\n        backgroundColor: theme.palette.error.dark,\n        color: theme.palette.error.contrastText,\n    },\n\n    [`& .${NotificationClasses.warning}`]: {\n        backgroundColor: theme.palette.error.light,\n        color: theme.palette.error.contrastText,\n    },\n\n    [`& .${NotificationClasses.undo}`]: {\n        color:\n            type === 'success'\n                ? theme.palette.success.contrastText\n                : theme.palette.primary.light,\n    },\n    [`& .${NotificationClasses.multiLine}`]: {\n        whiteSpace: 'pre-wrap',\n    },\n}));\n\nexport interface NotificationProps extends Omit<SnackbarProps, 'open'> {\n    type?: string;\n    autoHideDuration?: number;\n    multiLine?: boolean;\n}\n","import { useStore } from 'ra-core';\nimport { ThemeOptions } from '@mui/material';\n\nexport type ThemeSetter = (theme: ThemeOptions) => void;\n\nexport const useTheme = (\n    themeOverride?: ThemeOptions\n): [ThemeOptions, ThemeSetter] => useStore('theme', themeOverride);\n","import * as React from 'react';\nimport { ReactNode, useMemo } from 'react';\nimport {\n    ThemeProvider as MuiThemeProvider,\n    createTheme,\n} from '@mui/material/styles';\nimport { ThemeOptions } from '@mui/material';\n\nimport { useTheme } from './useTheme';\n\n/**\n * This sets the MUI theme based on the store.\n *\n * @param props\n * @param props.children The children of the component.\n * @param props.theme The initial theme.\n */\nexport const ThemeProvider = ({\n    children,\n    theme: themeOverride,\n}: ThemeProviderProps) => {\n    const [theme] = useTheme(themeOverride);\n    const themeValue = useMemo(() => {\n        try {\n            return createTheme(theme);\n        } catch (e) {\n            console.warn('Failed to reuse custom theme from store', e);\n            return createTheme();\n        }\n    }, [theme]);\n\n    return <MuiThemeProvider theme={themeValue}>{children}</MuiThemeProvider>;\n};\n\nexport interface ThemeProviderProps {\n    children: ReactNode;\n    theme: ThemeOptions;\n}\n","import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport Toolbar, { ToolbarProps } from '@mui/material/Toolbar';\n\nexport const TopToolbar = (props: ToolbarProps) => <StyledToolbar {...props} />;\n\nTopToolbar.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n};\n\nexport default TopToolbar;\nconst PREFIX = 'RaTopToolbar';\n\nconst StyledToolbar = styled(Toolbar, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    display: 'flex',\n    justifyContent: 'flex-end',\n    alignItems: 'flex-end',\n    paddingBottom: theme.spacing(1),\n    gap: theme.spacing(1),\n    [theme.breakpoints.up('sm')]: {\n        minHeight: theme.spacing(6),\n    },\n    [theme.breakpoints.up('xs')]: {\n        paddingLeft: 0,\n        paddingRight: 0,\n    },\n    [theme.breakpoints.down('md')]: {\n        paddingRight: theme.spacing(2),\n    },\n    [theme.breakpoints.down('sm')]: {\n        padding: theme.spacing(1),\n        backgroundColor: theme.palette.background.paper,\n    },\n}));\n","import { useContext } from 'react';\nimport { UserMenuContext } from './UserMenuContext';\n\n/**\n * A hook to retrieve the user menu context, which provides access to a function for closing the user menu.\n * @returns {UserMenuContextValue}\n *\n * @example\n * import { Logout, MenuItemLink, UserMenu, useUserMenu } from 'react-admin';\n *\n * const ConfigurationMenu = () => {\n *     const { onClose } = useUserMenu();\n *     return (\n *         <MenuItemLink\n *             to=\"/configuration\"\n *             primaryText=\"pos.configuration\"\n *             leftIcon={<SettingsIcon />}\n *             sidebarIsOpen\n *             onClick={onClose}\n *         />\n *     );\n * };\n *\n * export const MyUserMenu = () => (\n *     <UserMenu>\n *         <ConfigurationMenu />\n *         <Logout />\n *     </UserMenu>\n * );\n */\nexport const useUserMenu = () => useContext(UserMenuContext);\n","import * as React from 'react';\nimport { isValidElement, ReactElement } from 'react';\nimport { useTranslate, ValidationError, ValidationErrorMessage } from 'ra-core';\n\nexport const InputHelperText = (props: InputHelperTextProps) => {\n    const { helperText, touched, error } = props;\n    const translate = useTranslate();\n\n    return touched && error ? (\n        <ValidationError error={error} />\n    ) : isValidElement(helperText) ? (\n        helperText\n    ) : typeof helperText === 'string' ? (\n        <>{translate(helperText, { _: helperText })}</>\n    ) : helperText !== false ? (\n        // MUI's HelperText cannot reserve space unless we pass a single\n        // space as child, which isn't possible when the child is a component.\n        // Therefore, we must reserve the space ourselves by passing the same\n        // markup as MUI.\n        // @see https://github.com/mui-org/material-ui/blob/62e439b7022d519ab638d65201e204b59b77f8da/packages/material-ui/src/FormHelperText/FormHelperText.js#L85-L90\n        // eslint-disable-next-line react/no-danger\n        <span dangerouslySetInnerHTML={defaultInnerHTML} />\n    ) : null;\n};\n\nconst defaultInnerHTML = { __html: '&#8203;' };\n\nexport interface InputHelperTextProps {\n    helperText?: string | ReactElement | boolean;\n    error?: ValidationErrorMessage;\n    touched: boolean;\n}\n","export const sanitizeInputRestProps = ({\n    afterSubmit,\n    allowNull,\n    alwaysOn,\n    beforeSubmit,\n    component,\n    data,\n    defaultValue,\n    error,\n    format,\n    formatOnBlur,\n    formClassName,\n    initialValue,\n    initializeForm,\n    input,\n    isEqual,\n    isRequired,\n    label,\n    limitChoicesToValue,\n    locale,\n    meta,\n    multiple,\n    name,\n    options,\n    optionText,\n    optionValue,\n    parse,\n    record,\n    ref,\n    refetch,\n    render,\n    resource,\n    setFilter,\n    setPagination,\n    setSort,\n    source,\n    submitError,\n    subscription,\n    textAlign,\n    translate,\n    translateChoice,\n    validate,\n    validateFields,\n    value,\n    ...rest\n}: any) => rest;\n","import * as React from 'react';\nimport { ElementType, ReactElement } from 'react';\nimport { Stack, StackProps, Theme, Typography } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport { Property } from 'csstype';\nimport clsx from 'clsx';\n\nimport { FieldTitle } from 'ra-core';\nimport { ResponsiveStyleValue } from '@mui/system';\n\n/**\n * Wrap a field or an input with a label if necessary.\n *\n * The label is displayed if:\n * - the field or input has a label prop that is not false, or\n * - the field or input has a source prop\n *\n * @example\n * <Labeled>\n *     <FooComponent source=\"title\" />\n * </Labeled>\n */\nexport const Labeled = ({\n    children,\n    className = '',\n    color = 'textSecondary',\n    component = 'span',\n    fullWidth,\n    isRequired,\n    label,\n    resource,\n    source,\n    ...rest\n}: LabeledProps) =>\n    label !== false &&\n    children.props.label !== false &&\n    typeof children.type !== 'string' &&\n    // @ts-ignore\n    children.type?.displayName !== 'Labeled' &&\n    // @ts-ignore\n    children.type?.displayName !== 'Labeled' ? (\n        <Root\n            // @ts-ignore https://github.com/mui/material-ui/issues/29875\n            component={component}\n            className={clsx(className, {\n                [LabeledClasses.fullWidth]: fullWidth,\n            })}\n            {...rest}\n        >\n            <Typography color={color} className={LabeledClasses.label}>\n                <FieldTitle\n                    label={label || children.props.label}\n                    source={source || children.props.source}\n                    resource={resource}\n                    isRequired={isRequired}\n                />\n            </Typography>\n            {children}\n        </Root>\n    ) : (\n        <div className={className}>{children}</div>\n    );\n\nLabeled.displayName = 'Labeled';\n\nexport interface LabeledProps extends StackProps {\n    children: ReactElement;\n    className?: string;\n    color?:\n        | ResponsiveStyleValue<Property.Color | Property.Color[]>\n        | ((\n              theme: Theme\n          ) => ResponsiveStyleValue<Property.Color | Property.Color[]>);\n    component?: ElementType;\n    fullWidth?: boolean;\n    htmlFor?: string;\n    isRequired?: boolean;\n    label?: string | ReactElement | false;\n    resource?: string;\n    source?: string;\n}\n\nconst PREFIX = 'RaLabeled';\n\nexport const LabeledClasses = {\n    label: `${PREFIX}-label`,\n    fullWidth: `${PREFIX}-fullWidth`,\n};\n\nconst Root = styled(Stack, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    display: 'inline-flex',\n    marginBottom: '0.2em',\n\n    [`&.${LabeledClasses.fullWidth}`]: {\n        width: '100%',\n    },\n\n    [`& .${LabeledClasses.label}`]: {\n        fontSize: '0.75em',\n        marginBottom: '0.2em',\n    },\n}));\n","import { createContext } from 'react';\nimport { UseFieldArrayReturn } from 'react-hook-form';\n\n/**\n * A React context that provides access to an ArrayInput methods as provided by react-hook-form\n * Useful to create custom array input iterators.\n * @see {ArrayInput}\n * @see {@link https://react-hook-form.com/api/usefieldarray}\n */\nexport const ArrayInputContext = createContext<ArrayInputContextValue>(\n    undefined\n);\n\nexport type ArrayInputContextValue = UseFieldArrayReturn;\n","import * as React from 'react';\nimport {\n    cloneElement,\n    MouseEvent,\n    MouseEventHandler,\n    ReactElement,\n    ReactNode,\n    useCallback,\n    useMemo,\n} from 'react';\nimport { styled } from '@mui/material';\nimport clsx from 'clsx';\nimport get from 'lodash/get';\nimport PropTypes from 'prop-types';\nimport { RaRecord, useRecordContext } from 'ra-core';\nimport { UseFieldArrayReturn } from 'react-hook-form';\n\nimport { useArrayInput } from './useArrayInput';\nimport {\n    SimpleFormIteratorClasses,\n    SimpleFormIteratorPrefix,\n} from './useSimpleFormIteratorStyles';\nimport { SimpleFormIteratorContext } from './SimpleFormIteratorContext';\nimport {\n    DisableRemoveFunction,\n    SimpleFormIteratorItem,\n} from './SimpleFormIteratorItem';\nimport { AddItemButton as DefaultAddItemButton } from './AddItemButton';\nimport { RemoveItemButton as DefaultRemoveItemButton } from './RemoveItemButton';\nimport { ReOrderButtons as DefaultReOrderButtons } from './ReOrderButtons';\n\nexport const SimpleFormIterator = (props: SimpleFormIteratorProps) => {\n    const {\n        addButton = <DefaultAddItemButton />,\n        removeButton = <DefaultRemoveItemButton />,\n        reOrderButtons = <DefaultReOrderButtons />,\n        children,\n        className,\n        resource,\n        source,\n        disabled,\n        disableAdd,\n        disableRemove,\n        disableReordering,\n        getItemLabel = DefaultLabelFn,\n    } = props;\n    const { append, fields, move, remove } = useArrayInput(props);\n    const record = useRecordContext(props);\n\n    const removeField = useCallback(\n        (index: number) => {\n            remove(index);\n        },\n        [remove]\n    );\n\n    const addField = useCallback(\n        (item: any = undefined) => {\n            append(item);\n        },\n        [append]\n    );\n\n    // add field and call the onClick event of the button passed as addButton prop\n    const handleAddButtonClick = (\n        originalOnClickHandler: MouseEventHandler\n    ) => (event: MouseEvent) => {\n        addField();\n        if (originalOnClickHandler) {\n            originalOnClickHandler(event);\n        }\n    };\n\n    const handleReorder = useCallback(\n        (origin: number, destination: number) => {\n            move(origin, destination);\n        },\n        [move]\n    );\n\n    const records = get(record, source);\n\n    const context = useMemo(\n        () => ({\n            total: fields.length,\n            add: addField,\n            remove: removeField,\n            reOrder: handleReorder,\n            source,\n        }),\n        [addField, fields.length, handleReorder, removeField, source]\n    );\n    return fields ? (\n        <SimpleFormIteratorContext.Provider value={context}>\n            <Root className={className}>\n                {fields.map((member, index) => (\n                    <SimpleFormIteratorItem\n                        key={member.id}\n                        disabled={disabled}\n                        disableRemove={disableRemove}\n                        disableReordering={disableReordering}\n                        fields={fields}\n                        getItemLabel={getItemLabel}\n                        index={index}\n                        member={`${source}.${index}`}\n                        onRemoveField={removeField}\n                        onReorder={handleReorder}\n                        record={(records && records[index]) || {}}\n                        removeButton={removeButton}\n                        reOrderButtons={reOrderButtons}\n                        resource={resource}\n                        source={source}\n                    >\n                        {children}\n                    </SimpleFormIteratorItem>\n                ))}\n                {!disabled && !disableAdd && (\n                    <li className={SimpleFormIteratorClasses.line}>\n                        <span className={SimpleFormIteratorClasses.action}>\n                            {cloneElement(addButton, {\n                                onClick: handleAddButtonClick(\n                                    addButton.props.onClick\n                                ),\n                                className: clsx(\n                                    'button-add',\n                                    `button-add-${source}`\n                                ),\n                            })}\n                        </span>\n                    </li>\n                )}\n            </Root>\n        </SimpleFormIteratorContext.Provider>\n    ) : null;\n};\n\nSimpleFormIterator.defaultProps = {\n    disableAdd: false,\n    disableRemove: false,\n};\n\nSimpleFormIterator.propTypes = {\n    defaultValue: PropTypes.any,\n    addButton: PropTypes.element,\n    removeButton: PropTypes.element,\n    children: PropTypes.node,\n    className: PropTypes.string,\n    field: PropTypes.object,\n    fields: PropTypes.array,\n    fieldState: PropTypes.object,\n    formState: PropTypes.object,\n    record: PropTypes.object,\n    source: PropTypes.string,\n    resource: PropTypes.string,\n    translate: PropTypes.func,\n    disableAdd: PropTypes.bool,\n    disableRemove: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n    TransitionProps: PropTypes.shape({}),\n};\n\nexport interface SimpleFormIteratorProps extends Partial<UseFieldArrayReturn> {\n    addButton?: ReactElement;\n    children?: ReactNode;\n    className?: string;\n    defaultValue?: any;\n    disabled?: boolean;\n    disableAdd?: boolean;\n    disableRemove?: boolean | DisableRemoveFunction;\n    disableReordering?: boolean;\n    getItemLabel?: (index: number) => string;\n    meta?: {\n        // the type defined in FieldArrayRenderProps says error is boolean, which is wrong.\n        error?: any;\n        submitFailed?: boolean;\n    };\n    record?: RaRecord;\n    removeButton?: ReactElement;\n    reOrderButtons?: ReactElement;\n    resource?: string;\n    source?: string;\n}\n\nconst Root = styled('ul', {\n    name: SimpleFormIteratorPrefix,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    padding: 0,\n    marginBottom: 0,\n    '& > li:last-child': {\n        borderBottom: 'none',\n    },\n    [`& .${SimpleFormIteratorClasses.line}`]: {\n        display: 'flex',\n        listStyleType: 'none',\n        borderBottom: `solid 1px ${theme.palette.divider}`,\n        [theme.breakpoints.down('sm')]: { display: 'block' },\n    },\n    [`& .${SimpleFormIteratorClasses.index}`]: {\n        [theme.breakpoints.down('md')]: { display: 'none' },\n        marginRight: theme.spacing(1),\n    },\n    [`& .${SimpleFormIteratorClasses.indexContainer}`]: {\n        display: 'flex',\n        paddingTop: '1em',\n        marginRight: theme.spacing(1),\n        alignItems: 'center',\n    },\n    [`& .${SimpleFormIteratorClasses.form}`]: {\n        alignItems: 'flex-start',\n        display: 'flex',\n        flexDirection: 'column',\n        flex: 2,\n    },\n    [`& .${SimpleFormIteratorClasses.action}`]: {\n        paddingTop: '0.5em',\n    },\n    [`& .${SimpleFormIteratorClasses.leftIcon}`]: {\n        marginRight: theme.spacing(1),\n    },\n}));\n\nconst DefaultLabelFn = index => index + 1;\n","import { useContext, useMemo } from 'react';\nimport { ArrayInputContext, ArrayInputContextValue } from './ArrayInputContext';\n\n/**\n * A hook to access an array input methods as provided by react-hook-form.\n * Useful to create custom array input iterators.\n * @see {ArrayInput}\n * @see https://react-hook-form.com/api/usefieldarray\n */\nexport const useArrayInput = (\n    props?: Partial<ArrayInputContextValue>\n): ArrayInputContextValue => {\n    const context = useContext(ArrayInputContext);\n    const memo = useMemo(\n        () => ({\n            append: props?.append,\n            fields: props?.fields,\n            insert: props?.insert,\n            move: props?.move,\n            prepend: props?.prepend,\n            remove: props?.remove,\n            replace: props?.replace,\n            swap: props?.swap,\n            update: props?.update,\n        }),\n        [props]\n    );\n\n    if (props?.fields) {\n        return memo;\n    }\n\n    return context;\n};\n","export const SimpleFormIteratorPrefix = 'RaSimpleFormIterator';\n\nexport const SimpleFormIteratorClasses = {\n    line: `${SimpleFormIteratorPrefix}-line`,\n    index: `${SimpleFormIteratorPrefix}-index`,\n    indexContainer: `${SimpleFormIteratorPrefix}-indexContainer`,\n    form: `${SimpleFormIteratorPrefix}-form`,\n    action: `${SimpleFormIteratorPrefix}-action`,\n    leftIcon: `${SimpleFormIteratorPrefix}-leftIcon`,\n};\n","import { createContext } from 'react';\n\n/**\n * A React context that provides access to a SimpleFormIterator data (the total number of items) and mutators (add, reorder and remove).\n * Useful to create custom array input iterators.\n * @see {SimpleFormIterator}\n * @see {ArrayInput}\n */\nexport const SimpleFormIteratorContext = createContext<\n    SimpleFormIteratorContextValue\n>(undefined);\n\nexport type SimpleFormIteratorContextValue = {\n    add: () => void;\n    remove: (index: number) => void;\n    reOrder: (index: number, newIndex: number) => void;\n    source: string;\n    total: number;\n};\n","import * as React from 'react';\nimport {\n    Children,\n    cloneElement,\n    MouseEvent,\n    MouseEventHandler,\n    isValidElement,\n    ReactElement,\n    ReactNode,\n    useMemo,\n} from 'react';\nimport { Typography } from '@mui/material';\nimport clsx from 'clsx';\nimport { RaRecord } from 'ra-core';\n\nimport { SimpleFormIteratorClasses } from './useSimpleFormIteratorStyles';\nimport { useSimpleFormIterator } from './useSimpleFormIterator';\nimport { ArrayInputContextValue } from './ArrayInputContext';\nimport {\n    SimpleFormIteratorItemContext,\n    SimpleFormIteratorItemContextValue,\n} from './SimpleFormIteratorItemContext';\n\nexport const SimpleFormIteratorItem = React.forwardRef(\n    (props: SimpleFormIteratorItemProps, ref: any) => {\n        const {\n            children,\n            disabled,\n            disableReordering,\n            disableRemove,\n            getItemLabel,\n            index,\n            member,\n            record,\n            removeButton,\n            reOrderButtons,\n            resource,\n            source,\n        } = props;\n\n        const { total, reOrder, remove } = useSimpleFormIterator();\n        // Returns a boolean to indicate whether to disable the remove button for certain fields.\n        // If disableRemove is a function, then call the function with the current record to\n        // determining if the button should be disabled. Otherwise, use a boolean property that\n        // enables or disables the button for all of the fields.\n        const disableRemoveField = (record: RaRecord) => {\n            if (typeof disableRemove === 'boolean') {\n                return disableRemove;\n            }\n            return disableRemove && disableRemove(record);\n        };\n\n        // remove field and call the onClick event of the button passed as removeButton prop\n        const handleRemoveButtonClick = (\n            originalOnClickHandler: MouseEventHandler,\n            index: number\n        ) => (event: MouseEvent) => {\n            remove(index);\n            if (originalOnClickHandler) {\n                originalOnClickHandler(event);\n            }\n        };\n\n        const context = useMemo<SimpleFormIteratorItemContextValue>(\n            () => ({\n                index,\n                total,\n                reOrder: newIndex => reOrder(index, newIndex),\n                remove: () => remove(index),\n            }),\n            [index, total, reOrder, remove]\n        );\n\n        return (\n            <SimpleFormIteratorItemContext.Provider value={context}>\n                <li className={SimpleFormIteratorClasses.line} ref={ref}>\n                    <div>\n                        <div\n                            className={SimpleFormIteratorClasses.indexContainer}\n                        >\n                            <Typography\n                                variant=\"body1\"\n                                className={SimpleFormIteratorClasses.index}\n                            >\n                                {getItemLabel(index)}\n                            </Typography>\n                            {!disabled &&\n                                !disableReordering &&\n                                cloneElement(reOrderButtons, {\n                                    index,\n                                    max: total,\n                                    reOrder,\n                                    className: clsx(\n                                        'button-reorder',\n                                        `button-reorder-${source}-${index}`\n                                    ),\n                                })}\n                        </div>\n                    </div>\n                    <section className={SimpleFormIteratorClasses.form}>\n                        {Children.map(\n                            children,\n                            (input: ReactElement, index2) => {\n                                if (!isValidElement<any>(input)) {\n                                    return null;\n                                }\n                                const { source, ...inputProps } = input.props;\n                                return cloneElement(input, {\n                                    source: source\n                                        ? `${member}.${source}`\n                                        : member,\n                                    index: source ? undefined : index2,\n                                    resource,\n                                    disabled,\n                                    ...inputProps,\n                                });\n                            }\n                        )}\n                    </section>\n                    {!disabled && !disableRemoveField(record) && (\n                        <span className={SimpleFormIteratorClasses.action}>\n                            {cloneElement(removeButton, {\n                                onClick: handleRemoveButtonClick(\n                                    removeButton.props.onClick,\n                                    index\n                                ),\n                                className: clsx(\n                                    'button-remove',\n                                    `button-remove-${source}-${index}`\n                                ),\n                            })}\n                        </span>\n                    )}\n                </li>\n            </SimpleFormIteratorItemContext.Provider>\n        );\n    }\n);\n\nexport type DisableRemoveFunction = (record: RaRecord) => boolean;\n\nexport type SimpleFormIteratorItemProps = Partial<ArrayInputContextValue> & {\n    children?: ReactNode;\n    disabled?: boolean;\n    disableRemove?: boolean | DisableRemoveFunction;\n    disableReordering?: boolean;\n    getItemLabel?: (index: number) => string;\n    index: number;\n    member: string;\n    onRemoveField: (index: number) => void;\n    onReorder: (origin: number, destination: number) => void;\n    record: RaRecord;\n    removeButton?: ReactElement;\n    reOrderButtons?: ReactElement;\n    resource: string;\n    source: string;\n};\n","import { useContext } from 'react';\nimport { SimpleFormIteratorContext } from './SimpleFormIteratorContext';\n\n/**\n * A hook that provides access to a SimpleFormIterator data (the total number of items) and mutators (add, reorder and remove).\n * Useful to create custom array input iterators.\n * @see {SimpleFormIterator}\n * @see {ArrayInput}\n */\nexport const useSimpleFormIterator = () =>\n    useContext(SimpleFormIteratorContext);\n","import { createContext } from 'react';\n\n/**\n * A React context that provides access to a SimpleFormIterator item meta (its index and the total number of items) and mutators (reorder and remove this remove).\n * Useful to create custom array input iterators.\n * @see {SimpleFormIterator}\n * @see {ArrayInput}\n */\nexport const SimpleFormIteratorItemContext = createContext<\n    SimpleFormIteratorItemContextValue\n>(undefined);\n\nexport type SimpleFormIteratorItemContextValue = {\n    index: number;\n    total: number;\n    remove: () => void;\n    reOrder: (newIndex: number) => void;\n};\n","import * as React from 'react';\nimport AddIcon from '@mui/icons-material/AddCircleOutline';\nimport { useSimpleFormIterator } from './useSimpleFormIterator';\n\nimport { Button, ButtonProps } from '../../button';\n\nexport const AddItemButton = (props: Omit<ButtonProps, 'onClick'>) => {\n    const { add } = useSimpleFormIterator();\n    return (\n        <Button label=\"ra.action.add\" onClick={() => add()} {...props}>\n            <AddIcon />\n        </Button>\n    );\n};\n","import * as React from 'react';\nimport CloseIcon from '@mui/icons-material/RemoveCircleOutline';\n\nimport { Button, ButtonProps } from '../../button';\nimport { useSimpleFormIteratorItem } from './useSimpleFormIteratorItem';\n\nexport const RemoveItemButton = (props: Omit<ButtonProps, 'onClick'>) => {\n    const { remove } = useSimpleFormIteratorItem();\n\n    return (\n        <Button label=\"ra.action.remove\" onClick={() => remove()} {...props}>\n            <CloseIcon />\n        </Button>\n    );\n};\n","import { useContext } from 'react';\nimport { SimpleFormIteratorItemContext } from './SimpleFormIteratorItemContext';\n\n/**\n * A hook that provides access to a SimpleFormIterator item meta (its index and the total number of items) and mutators (reorder and remove this remove).\n * Useful to create custom array input iterators.\n * @see {SimpleFormIterator}\n * @see {ArrayInput}\n */\nexport const useSimpleFormIteratorItem = () =>\n    useContext(SimpleFormIteratorItemContext);\n","import * as React from 'react';\n\nimport { IconButtonWithTooltip } from '../../button';\nimport ArrowUpwardIcon from '@mui/icons-material/ArrowUpward';\nimport ArrowDownwardIcon from '@mui/icons-material/ArrowDownward';\nimport { useSimpleFormIteratorItem } from './useSimpleFormIteratorItem';\n\nexport const ReOrderButtons = ({ className }: { className?: string }) => {\n    const { index, total, reOrder } = useSimpleFormIteratorItem();\n\n    return (\n        <div className={className}>\n            <IconButtonWithTooltip\n                label=\"ra.action.move_up\"\n                size=\"small\"\n                onClick={() => reOrder(index - 1)}\n                disabled={index <= 0}\n            >\n                <ArrowUpwardIcon />\n            </IconButtonWithTooltip>\n            <IconButtonWithTooltip\n                label=\"ra.action.move_down\"\n                size=\"small\"\n                onClick={() => reOrder(index + 1)}\n                disabled={total == null || index >= total - 1}\n            >\n                <ArrowDownwardIcon />\n            </IconButtonWithTooltip>\n        </div>\n    );\n};\n","import * as React from 'react';\nimport {\n    isValidElement,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n    useState,\n} from 'react';\nimport debounce from 'lodash/debounce';\nimport get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport clsx from 'clsx';\nimport {\n    Autocomplete,\n    AutocompleteProps,\n    Chip,\n    TextField,\n    TextFieldProps,\n} from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport {\n    ChoicesProps,\n    FieldTitle,\n    RaRecord,\n    useChoicesContext,\n    useInput,\n    useSuggestions,\n    UseSuggestionsOptions,\n    useTimeout,\n    useTranslate,\n    warning,\n} from 'ra-core';\nimport {\n    SupportCreateSuggestionOptions,\n    useSupportCreateSuggestion,\n} from './useSupportCreateSuggestion';\nimport { CommonInputProps } from './CommonInputProps';\nimport { InputHelperText } from './InputHelperText';\nimport { sanitizeInputRestProps } from './sanitizeInputRestProps';\n\n/**\n * An Input component for an autocomplete field, using an array of objects for the options\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * By default, the options are built from:\n *  - the 'id' property as the option value,\n *  - the 'name' property as the option text\n * @example\n * const choices = [\n *    { id: 'M', name: 'Male' },\n *    { id: 'F', name: 'Female' },\n * ];\n * <AutocompleteInput source=\"gender\" choices={choices} />\n *\n * You can also customize the properties to use for the option name and value,\n * thanks to the 'optionText' and 'optionValue' attributes.\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },\n *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },\n * ];\n * <AutocompleteInput source=\"author_id\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <AutocompleteInput source=\"author_id\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that can access\n * the related choice through the `useRecordContext` hook. You can use Field components there.\n * Note that you must also specify the `matchSuggestion` and `inputText` props\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const matchSuggestion = (filterValue, choice) => choice.first_name.match(filterValue) || choice.last_name.match(filterValue)\n * const inputText = (record) => `${record.fullName} (${record.language})`;\n *\n * const FullNameField = () => {\n *     const record = useRecordContext();\n *     return <span>{record.first_name} {record.last_name}</span>;\n * }\n * <AutocompleteInput source=\"author\" choices={choices} optionText={<FullNameField />} matchSuggestion={matchSuggestion} inputText={inputText} />\n *\n * The choices are translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'M', name: 'myroot.gender.male' },\n *    { id: 'F', name: 'myroot.gender.female' },\n * ];\n *\n * However, in some cases (e.g. inside a `<ReferenceInput>`), you may not want\n * the choice to be translated. In that case, set the `translateChoice` prop to false.\n * @example\n * <AutocompleteInput source=\"gender\" choices={choices} translateChoice={false}/>\n *\n * The object passed as `options` props is passed to the MUI <TextField> component\n *\n * @example\n * <AutocompleteInput source=\"author_id\" options={{ color: 'secondary', InputLabelProps: { shrink: true } }} />\n */\nexport const AutocompleteInput = <\n    OptionType extends RaRecord = RaRecord,\n    Multiple extends boolean | undefined = false,\n    DisableClearable extends boolean | undefined = false,\n    SupportCreate extends boolean | undefined = false\n>(\n    props: AutocompleteInputProps<\n        OptionType,\n        Multiple,\n        DisableClearable,\n        SupportCreate\n    >\n) => {\n    const {\n        choices: choicesProp,\n        className,\n        clearText = 'ra.action.clear_input_value',\n        closeText = 'ra.action.close',\n        create,\n        createLabel,\n        createItemLabel,\n        createValue,\n        debounce: debounceDelay = 250,\n        defaultValue = '',\n        emptyText,\n        emptyValue = '',\n        field: fieldOverride,\n        format,\n        helperText,\n        id: idOverride,\n        inputText,\n        isFetching: isFetchingProp,\n        isLoading: isLoadingProp,\n        isRequired: isRequiredOverride,\n        label,\n        limitChoicesToValue,\n        matchSuggestion,\n        margin,\n        fieldState: fieldStateOverride,\n        filterToQuery = DefaultFilterToQuery,\n        formState: formStateOverride,\n        multiple = false,\n        noOptionsText,\n        onBlur,\n        onChange,\n        onCreate,\n        openText = 'ra.action.open',\n        optionText = 'name',\n        optionValue = 'id',\n        parse,\n        resource: resourceProp,\n        shouldRenderSuggestions,\n        setFilter,\n        size,\n        source: sourceProp,\n        suggestionLimit,\n        TextFieldProps,\n        translateChoice,\n        validate,\n        variant,\n        ...rest\n    } = props;\n\n    const {\n        allChoices,\n        isLoading,\n        resource,\n        source,\n        setFilters,\n    } = useChoicesContext({\n        choices: choicesProp,\n        isFetching: isFetchingProp,\n        isLoading: isLoadingProp,\n        resource: resourceProp,\n        source: sourceProp,\n    });\n\n    const translate = useTranslate();\n    const {\n        id,\n        field,\n        isRequired,\n        fieldState: { error, invalid, isTouched },\n        formState: { isSubmitted },\n    } = useInput({\n        defaultValue,\n        format,\n        id: idOverride,\n        field: fieldOverride,\n        fieldState: fieldStateOverride,\n        formState: formStateOverride,\n        onBlur,\n        onChange,\n        parse,\n        resource,\n        source,\n        validate,\n        ...rest,\n    });\n\n    const selectedChoice = useSelectedChoice<\n        OptionType,\n        Multiple,\n        DisableClearable,\n        SupportCreate\n    >(field.value, {\n        choices: allChoices,\n        // @ts-ignore\n        multiple,\n        optionValue,\n    });\n\n    useEffect(() => {\n        // eslint-disable-next-line eqeqeq\n        if (isValidElement(optionText) && inputText == undefined) {\n            throw new Error(`\nIf you provided a React element for the optionText prop, you must also provide the inputText prop (used for the text input)`);\n        }\n        // eslint-disable-next-line eqeqeq\n        if (isValidElement(optionText) && matchSuggestion == undefined) {\n            throw new Error(`\nIf you provided a React element for the optionText prop, you must also provide the matchSuggestion prop (used to match the user input with a choice)`);\n        }\n    }, [optionText, inputText, matchSuggestion]);\n\n    useEffect(() => {\n        warning(\n            /* eslint-disable eqeqeq */\n            shouldRenderSuggestions != undefined && noOptionsText == undefined,\n            `When providing a shouldRenderSuggestions function, we recommend you also provide the noOptionsText prop and set it to a text explaining users why no options are displayed. It supports translation keys.`\n        );\n        /* eslint-enable eqeqeq */\n    }, [shouldRenderSuggestions, noOptionsText]);\n\n    const { getChoiceText, getChoiceValue, getSuggestions } = useSuggestions({\n        choices: allChoices,\n        emptyText,\n        emptyValue,\n        limitChoicesToValue,\n        matchSuggestion,\n        optionText,\n        optionValue,\n        selectedItem: selectedChoice,\n        suggestionLimit,\n        translateChoice,\n    });\n\n    const [filterValue, setFilterValue] = useState('');\n\n    const handleChange = (newValue: any) => {\n        if (multiple) {\n            if (Array.isArray(newValue)) {\n                field.onChange(newValue.map(getChoiceValue));\n            } else {\n                field.onChange([\n                    ...(field.value ?? []),\n                    getChoiceValue(newValue),\n                ]);\n            }\n        } else {\n            field.onChange(getChoiceValue(newValue) || '');\n        }\n    };\n\n    // eslint-disable-next-line\n    const debouncedSetFilter = useCallback(\n        debounce(filter => {\n            if (setFilter) {\n                return setFilter(filter);\n            }\n\n            if (choicesProp) {\n                return;\n            }\n\n            setFilters(filterToQuery(filter), undefined, true);\n        }, debounceDelay),\n        [debounceDelay, setFilters, setFilter]\n    );\n\n    // We must reset the filter every time the value changes to ensure we\n    // display at least some choices even if the input has a value.\n    // Otherwise, it would only display the currently selected one and the user\n    // would have to first clear the input before seeing any other choices\n    const currentValue = useRef(field.value);\n    useEffect(() => {\n        if (!isEqual(currentValue.current, field.value)) {\n            currentValue.current = field.value;\n            debouncedSetFilter('');\n        }\n    }, [field.value]); // eslint-disable-line\n\n    const {\n        getCreateItem,\n        handleChange: handleChangeWithCreateSupport,\n        createElement,\n    } = useSupportCreateSuggestion({\n        create,\n        createLabel,\n        createItemLabel,\n        createValue,\n        handleChange,\n        filter: filterValue,\n        onCreate,\n        optionText,\n    });\n\n    const getOptionLabel = useCallback(\n        (option: any) => {\n            // eslint-disable-next-line eqeqeq\n            if (option == undefined) {\n                return '';\n            }\n            // Value selected with enter, right from the input\n            if (typeof option === 'string') {\n                return option;\n            }\n\n            // eslint-disable-next-line eqeqeq\n            if (inputText != undefined) {\n                return inputText(option);\n            }\n\n            return getChoiceText(option);\n        },\n        [getChoiceText, inputText]\n    );\n\n    useEffect(() => {\n        if (!multiple) {\n            const optionLabel = getOptionLabel(selectedChoice);\n            if (typeof optionLabel === 'string') {\n                setFilterValue(optionLabel);\n            } else {\n                throw new Error(\n                    'When optionText returns a React element, you must also provide the inputText prop'\n                );\n            }\n        }\n    }, [getOptionLabel, multiple, selectedChoice]);\n\n    const handleInputChange = (\n        event: any,\n        newInputValue: string,\n        reason: string\n    ) => {\n        setFilterValue(newInputValue);\n        debouncedSetFilter(newInputValue);\n    };\n\n    const doesQueryMatchSuggestion = useCallback(\n        filter => {\n            let selectedItemTexts = [];\n\n            if (multiple) {\n                selectedItemTexts = selectedChoice.map(item =>\n                    getOptionLabel(item)\n                );\n            } else {\n                selectedItemTexts = [getOptionLabel(selectedChoice)];\n            }\n\n            const hasOption = !!allChoices\n                ? allChoices.some(choice => getOptionLabel(choice) === filter)\n                : false;\n\n            return selectedItemTexts.includes(filter) || hasOption;\n        },\n        [allChoices, getOptionLabel, multiple, selectedChoice]\n    );\n\n    const filterOptions = (options, params) => {\n        const { inputValue } = params;\n        if (\n            (onCreate || create) &&\n            inputValue !== '' &&\n            !doesQueryMatchSuggestion(filterValue)\n        ) {\n            return options.concat(getCreateItem(inputValue));\n        }\n\n        return options;\n    };\n\n    const handleAutocompleteChange = (\n        event: any,\n        newValue: any,\n        reason: string\n    ) => {\n        handleChangeWithCreateSupport(newValue != null ? newValue : '');\n    };\n\n    const oneSecondHasPassed = useTimeout(1000, filterValue);\n\n    // To avoid displaying an empty list of choices while a search is in progress,\n    // we store the last choices in a ref. We'll display those last choices until\n    // a second has passed.\n    const currentChoices = useRef(allChoices);\n    useEffect(() => {\n        if (allChoices && (allChoices.length > 0 || oneSecondHasPassed)) {\n            currentChoices.current = allChoices;\n        }\n    }, [allChoices, oneSecondHasPassed]);\n\n    const suggestions = useMemo(() => {\n        if (setFilters && allChoices?.length === 0 && !oneSecondHasPassed) {\n            return currentChoices.current;\n        }\n        return getSuggestions(filterValue);\n    }, [\n        allChoices,\n        filterValue,\n        getSuggestions,\n        oneSecondHasPassed,\n        setFilters,\n    ]);\n\n    const isOptionEqualToValue = (option, value) => {\n        // eslint-disable-next-line eqeqeq\n        return getChoiceValue(option) == getChoiceValue(value);\n    };\n\n    return (\n        <>\n            <StyledAutocomplete\n                blurOnSelect\n                className={clsx('ra-input', `ra-input-${source}`, className)}\n                clearText={translate(clearText, { _: clearText })}\n                closeText={translate(closeText, { _: closeText })}\n                openOnFocus\n                openText={translate(openText, { _: openText })}\n                id={id}\n                isOptionEqualToValue={isOptionEqualToValue}\n                filterSelectedOptions\n                renderInput={params => (\n                    <TextField\n                        name={field.name}\n                        label={\n                            <FieldTitle\n                                label={label}\n                                source={source}\n                                resource={resourceProp}\n                                isRequired={\n                                    typeof isRequiredOverride !== 'undefined'\n                                        ? isRequiredOverride\n                                        : isRequired\n                                }\n                            />\n                        }\n                        error={(isTouched || isSubmitted) && invalid}\n                        helperText={\n                            <InputHelperText\n                                touched={isTouched || isSubmitted}\n                                error={error?.message}\n                                helperText={helperText}\n                            />\n                        }\n                        margin={margin}\n                        variant={variant}\n                        className={AutocompleteInputClasses.textField}\n                        {...TextFieldProps}\n                        {...params}\n                        size={size}\n                    />\n                )}\n                multiple={multiple}\n                renderTags={(value, getTagProps) =>\n                    value.map((option, index) => (\n                        <Chip\n                            label={\n                                isValidElement(optionText)\n                                    ? inputText(option)\n                                    : getChoiceText(option)\n                            }\n                            sx={{\n                                '.MuiSvgIcon-root': {\n                                    // FIXME: Workaround to allow choices deletion\n                                    // Maybe related to storybook and mui using different versions of emotion\n                                    zIndex: 100,\n                                },\n                            }}\n                            size=\"small\"\n                            {...getTagProps({ index })}\n                        />\n                    ))\n                }\n                noOptionsText={\n                    typeof noOptionsText === 'string'\n                        ? translate(noOptionsText, { _: noOptionsText })\n                        : noOptionsText\n                }\n                selectOnFocus\n                clearOnBlur\n                {...sanitizeInputRestProps(rest)}\n                freeSolo={!!create || !!onCreate}\n                handleHomeEndKeys={!!create || !!onCreate}\n                filterOptions={filterOptions}\n                options={\n                    shouldRenderSuggestions == undefined || // eslint-disable-line eqeqeq\n                    shouldRenderSuggestions(filterValue)\n                        ? suggestions\n                        : []\n                }\n                getOptionLabel={getOptionLabel}\n                inputValue={filterValue}\n                loading={\n                    isLoading && suggestions.length === 0 && oneSecondHasPassed\n                }\n                value={selectedChoice}\n                onChange={handleAutocompleteChange}\n                onBlur={field.onBlur}\n                onInputChange={handleInputChange}\n                renderOption={(props, record) => (\n                    <li {...props}>{getChoiceText(record)}</li>\n                )}\n            />\n            {createElement}\n        </>\n    );\n};\n\nconst PREFIX = 'RaAutocompleteInput';\n\nexport const AutocompleteInputClasses = {\n    textField: `${PREFIX}-textField`,\n};\n\nconst StyledAutocomplete = styled(Autocomplete, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    [`& .${AutocompleteInputClasses.textField}`]: {\n        minWidth: theme.spacing(20),\n    },\n}));\n\n// @ts-ignore\nexport interface AutocompleteInputProps<\n    OptionType extends any = RaRecord,\n    Multiple extends boolean | undefined = false,\n    DisableClearable extends boolean | undefined = false,\n    SupportCreate extends boolean | undefined = false\n> extends Omit<CommonInputProps, 'source'>,\n        ChoicesProps,\n        UseSuggestionsOptions,\n        Omit<SupportCreateSuggestionOptions, 'handleChange' | 'optionText'>,\n        Omit<\n            AutocompleteProps<\n                OptionType,\n                Multiple,\n                DisableClearable,\n                SupportCreate\n            >,\n            'onChange' | 'options' | 'renderInput'\n        > {\n    debounce?: number;\n    filterToQuery?: (searchText: string) => any;\n    inputText?: (option: any) => string;\n    setFilter?: (value: string) => void;\n    shouldRenderSuggestions?: any;\n    // Source is optional as AutocompleteInput can be used inside a ReferenceInput that already defines the source\n    source?: string;\n    TextFieldProps?: TextFieldProps;\n}\n\n/**\n * Returns the selected choice (or choices if multiple) by matching the input value with the choices.\n */\nconst useSelectedChoice = <\n    OptionType extends any = RaRecord,\n    Multiple extends boolean | undefined = false,\n    DisableClearable extends boolean | undefined = false,\n    SupportCreate extends boolean | undefined = false\n>(\n    value: any,\n    {\n        choices,\n        multiple,\n        optionValue,\n    }: AutocompleteInputProps<\n        OptionType,\n        Multiple,\n        DisableClearable,\n        SupportCreate\n    >\n) => {\n    const selectedChoiceRef = useRef(\n        getSelectedItems(choices, value, optionValue, multiple)\n    );\n    const [selectedChoice, setSelectedChoice] = useState<RaRecord | RaRecord[]>(\n        () => getSelectedItems(choices, value, optionValue, multiple)\n    );\n\n    // As the selected choices are objects, we want to ensure we pass the same\n    // reference to the Autocomplete as it would reset its filter value otherwise.\n    useEffect(() => {\n        const newSelectedItems = getSelectedItems(\n            choices,\n            value,\n            optionValue,\n            multiple\n        );\n\n        if (!isEqual(selectedChoiceRef.current, newSelectedItems)) {\n            selectedChoiceRef.current = newSelectedItems;\n            setSelectedChoice(newSelectedItems);\n        }\n    }, [choices, value, multiple, optionValue]);\n    return selectedChoice || null;\n};\n\nconst getSelectedItems = (\n    choices = [],\n    value,\n    optionValue = 'id',\n    multiple\n) => {\n    if (multiple) {\n        return (value || [])\n            .map(item =>\n                choices.find(choice => item === get(choice, optionValue))\n            )\n            .filter(item => !!item);\n    }\n    return choices.find(choice => get(choice, optionValue) === value) || '';\n};\n\nconst DefaultFilterToQuery = searchText => ({ q: searchText });\n","import * as React from 'react';\nimport {\n    ChangeEvent,\n    createContext,\n    isValidElement,\n    ReactElement,\n    useContext,\n    useEffect,\n    useMemo,\n    useRef,\n    useState,\n} from 'react';\nimport { Identifier, OptionText, useTranslate } from 'ra-core';\nimport set from 'lodash/set';\n\n/**\n * This hook provides support for suggestion creation in inputs which have choices.\n *\n * @param options The hook option\n * @param {ReactElement} options.create A react element which will be rendered when users choose to create a new choice. This component must call the `useCreateSuggestionContext` hook which provides `onCancel`, `onCreate` and `filter`. See the examples.\n * @param {String} options.createLabel Optional. The label for the choice item allowing users to create a new choice. Can be a translation key. Defaults to `ra.action.create`.\n * @param {String} options.createItemLabel Optional. The label for the choice item allowing users to create a new choice when they already entered a filter. Can be a translation key. The translation will receive an `item` parameter. Defaults to `ra.action.create_item`.\n * @param {any} options.createValue Optional. The value for the choice item allowing users to create a new choice. Defaults to `@@ra-create`.\n * @param {String} options.filter Optional. The filter users may have already entered. Useful for autocomplete inputs for example.\n * @param {OnCreateHandler} options.onCreate Optional. A function which will be called when users choose to create a new choice, if the `create` option wasn't provided.\n * @param {Function} options.handleChange A function to pass to the input. Receives the same parameter as the original event handler and an additional newItem parameter if a new item was create.\n * @returns {UseSupportCreateValue} An object with the following properties:\n * - getCreateItem: a function which will return the label of the choice for create a new choice.\n * - createElement: a React element to render after the input. It will be rendered when users choose to create a new choice. It renders null otherwise.\n */\nexport const useSupportCreateSuggestion = (\n    options: SupportCreateSuggestionOptions\n): UseSupportCreateValue => {\n    const {\n        create,\n        createLabel = 'ra.action.create',\n        createItemLabel = 'ra.action.create_item',\n        createValue = '@@ra-create',\n        optionText = 'name',\n        filter,\n        handleChange,\n        onCreate,\n    } = options;\n    const translate = useTranslate();\n    const [renderOnCreate, setRenderOnCreate] = useState(false);\n    const filterRef = useRef(filter);\n\n    useEffect(() => {\n        if (filterRef.current !== filter && filter !== '') {\n            filterRef.current = filter;\n        }\n    }, [filter]);\n\n    const context = useMemo(\n        () => ({\n            filter: filterRef.current,\n            onCancel: () => setRenderOnCreate(false),\n            onCreate: item => {\n                setRenderOnCreate(false);\n                handleChange(item);\n            },\n        }),\n        [handleChange]\n    );\n\n    return {\n        getCreateItem: () => {\n            if (typeof optionText !== 'string') {\n                return {\n                    id: createValue,\n                    name:\n                        filter && createItemLabel\n                            ? translate(createItemLabel, {\n                                  item: filter,\n                                  _: createItemLabel,\n                              })\n                            : translate(createLabel, { _: createLabel }),\n                };\n            }\n            return set(\n                {\n                    id: createValue,\n                },\n                optionText,\n                filter && createItemLabel\n                    ? translate(createItemLabel, {\n                          item: filter,\n                          _: createItemLabel,\n                      })\n                    : translate(createLabel, { _: createLabel })\n            );\n        },\n        handleChange: async (eventOrValue: MouseEvent | any) => {\n            const value = eventOrValue?.target?.value || eventOrValue;\n            const finalValue = Array.isArray(value) ? [...value].pop() : value;\n\n            if (finalValue?.id === createValue || finalValue === createValue) {\n                if (!isValidElement(create)) {\n                    const newSuggestion = await onCreate(filter);\n                    if (newSuggestion) {\n                        handleChange(newSuggestion);\n                        return;\n                    }\n                } else {\n                    setRenderOnCreate(true);\n                    return;\n                }\n            }\n            handleChange(eventOrValue);\n        },\n        createElement:\n            renderOnCreate && isValidElement(create) ? (\n                <CreateSuggestionContext.Provider value={context}>\n                    {create}\n                </CreateSuggestionContext.Provider>\n            ) : null,\n    };\n};\n\nexport interface SupportCreateSuggestionOptions {\n    create?: ReactElement;\n    createValue?: string;\n    createLabel?: string;\n    createItemLabel?: string;\n    filter?: string;\n    handleChange: (value: any) => void;\n    onCreate?: OnCreateHandler;\n    optionText?: OptionText;\n}\n\nexport interface UseSupportCreateValue {\n    getCreateItem: (\n        filterValue?: string\n    ) => { id: Identifier; [key: string]: any };\n    handleChange: (eventOrValue: ChangeEvent | any) => Promise<void>;\n    createElement: ReactElement | null;\n}\n\nconst CreateSuggestionContext = createContext<CreateSuggestionContextValue>(\n    undefined\n);\n\ninterface CreateSuggestionContextValue {\n    filter?: string;\n    onCreate: (choice: any) => void;\n    onCancel: () => void;\n}\nexport const useCreateSuggestionContext = () =>\n    useContext(CreateSuggestionContext);\n\nexport type OnCreateHandler = (filter?: string) => any | Promise<any>;\n","import * as React from 'react';\nimport { RaRecord } from 'ra-core';\nimport { AutocompleteInput, AutocompleteInputProps } from './AutocompleteInput';\n\n/**\n * An Input component for an autocomplete field, using an array of objects for the options\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * By default, the options are built from:\n *  - the 'id' property as the option value,\n *  - the 'name' property as the option text\n * @example\n * const choices = [\n *    { id: 'M', name: 'Male' },\n *    { id: 'F', name: 'Female' },\n * ];\n * <AutocompleteArrayInput source=\"gender\" choices={choices} />\n *\n * You can also customize the properties to use for the option name and value,\n * thanks to the 'optionText' and 'optionValue' attributes.\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },\n *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },\n * ];\n * <AutocompleteArrayInput source=\"author_id\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <AutocompleteArrayInput source=\"author_id\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that can access\n * the related choice through the `useRecordContext` hook. You can use Field components there.\n * Note that you must also specify the `matchSuggestion` and `inputText` props\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const matchSuggestion = (filterValue, choice) => choice.first_name.match(filterValue) || choice.last_name.match(filterValue)\n * const inputText = (record) => `${record.fullName} (${record.language})`;\n *\n * const FullNameField = () => {\n *     const record = useRecordContext();\n *     return <span>{record.first_name} {record.last_name}</span>;\n * }\n *\n * <AutocompleteArrayInput source=\"gender\" choices={choices} optionText={<FullNameField />} matchSuggestion={matchSuggestion} />\n *\n * The choices are translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'M', name: 'myroot.gender.male' },\n *    { id: 'F', name: 'myroot.gender.female' },\n * ];\n *\n * However, in some cases (e.g. inside a `<ReferenceInput>`), you may not want\n * the choice to be translated. In that case, set the `translateChoice` prop to false.\n * @example\n * <AutocompleteArrayInput source=\"gender\" choices={choices} translateChoice={false}/>\n */\nexport const AutocompleteArrayInput = <\n    OptionType extends RaRecord = RaRecord,\n    DisableClearable extends boolean | undefined = false,\n    SupportCreate extends boolean | undefined = false\n>({\n    defaultValue,\n    ...props\n}: AutocompleteArrayInputProps) => (\n    // @ts-ignore\n    <AutocompleteInput<OptionType, true, DisableClearable, SupportCreate>\n        {...props}\n        multiple\n        defaultValue={defaultValue ?? []}\n    />\n);\n\nexport type AutocompleteArrayInputProps<\n    OptionType extends any = RaRecord,\n    DisableClearable extends boolean | undefined = false,\n    SupportCreate extends boolean | undefined = false\n> = Omit<\n    AutocompleteInputProps<OptionType, true, DisableClearable, SupportCreate>,\n    'defaultValue'\n> & {\n    defaultValue?: any[];\n};\n","import * as React from 'react';\nimport { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport FormGroup, { FormGroupProps } from '@mui/material/FormGroup';\nimport Switch, { SwitchProps } from '@mui/material/Switch';\nimport { FieldTitle, useInput } from 'ra-core';\n\nimport { CommonInputProps } from './CommonInputProps';\nimport { sanitizeInputRestProps } from './sanitizeInputRestProps';\nimport { InputHelperText } from './InputHelperText';\nimport { InputPropTypes } from './InputPropTypes';\n\nexport const BooleanInput = (props: BooleanInputProps) => {\n    const {\n        className,\n        row = false,\n        defaultValue = false,\n        format,\n        label,\n        fullWidth,\n        helperText,\n        onBlur,\n        onChange,\n        onFocus,\n        disabled,\n        parse,\n        resource,\n        source,\n        validate,\n        options,\n        sx,\n        ...rest\n    } = props;\n    const {\n        id,\n        field,\n        isRequired,\n        fieldState: { error, invalid, isTouched },\n        formState: { isSubmitted },\n    } = useInput({\n        defaultValue,\n        format,\n        parse,\n        resource,\n        source,\n        onBlur,\n        onChange,\n        type: 'checkbox',\n        validate,\n        ...rest,\n    });\n\n    const handleChange = useCallback(\n        event => {\n            field.onChange(event);\n            // Ensure field is considered as touched\n            field.onBlur();\n        },\n        [field]\n    );\n\n    return (\n        <FormGroup\n            className={clsx('ra-input', `ra-input-${source}`, className)}\n            row={row}\n            sx={sx}\n        >\n            <FormControlLabel\n                control={\n                    <Switch\n                        id={id}\n                        name={field.name}\n                        color=\"primary\"\n                        onChange={handleChange}\n                        onFocus={onFocus}\n                        checked={field.value}\n                        {...sanitizeInputRestProps(rest)}\n                        {...options}\n                        disabled={disabled}\n                    />\n                }\n                label={\n                    <FieldTitle\n                        label={label}\n                        source={source}\n                        resource={resource}\n                        isRequired={isRequired}\n                    />\n                }\n            />\n            <FormHelperText error={(isTouched || isSubmitted) && invalid}>\n                <InputHelperText\n                    touched={isTouched || isSubmitted}\n                    error={error?.message}\n                    helperText={helperText}\n                />\n            </FormHelperText>\n        </FormGroup>\n    );\n};\n\nBooleanInput.propTypes = {\n    ...InputPropTypes,\n    // @ts-ignore\n    options: PropTypes.shape(Switch.propTypes),\n    disabled: PropTypes.bool,\n};\n\nBooleanInput.defaultProps = {\n    options: {},\n};\n\nexport type BooleanInputProps = CommonInputProps &\n    SwitchProps &\n    Omit<FormGroupProps, 'defaultValue' | 'onChange' | 'onBlur' | 'onFocus'> & {\n        options: SwitchProps;\n    };\n","import PropTypes from 'prop-types';\n\n/**\n * Common PropTypes for all react-admin inputs\n */\nexport const InputPropTypes = {\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    resource: PropTypes.string,\n    source: PropTypes.string,\n};\n","import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport clsx from 'clsx';\nimport { useCallback, FunctionComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport FormLabel from '@mui/material/FormLabel';\nimport FormControl, { FormControlProps } from '@mui/material/FormControl';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport { CheckboxProps } from '@mui/material/Checkbox';\nimport {\n    FieldTitle,\n    useInput,\n    ChoicesProps,\n    warning,\n    useChoicesContext,\n} from 'ra-core';\n\nimport { CommonInputProps } from './CommonInputProps';\nimport { sanitizeInputRestProps } from './sanitizeInputRestProps';\nimport { CheckboxGroupInputItem } from './CheckboxGroupInputItem';\nimport { InputHelperText } from './InputHelperText';\nimport { Labeled } from '../Labeled';\nimport { LinearProgress } from '../layout';\n\n/**\n * An Input component for a checkbox group, using an array of objects for the options\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * The expected input must be an array of identifiers (e.g. [12, 31]) which correspond to\n * the 'optionValue' of 'choices' attribute objects.\n *\n * By default, the options are built from:\n *  - the 'id' property as the option value,\n *  - the 'name' property as the option text\n * @example\n * const choices = [\n *     { id: 12, name: 'Ray Hakt' },\n *     { id: 31, name: 'Ann Gullar' },\n *     { id: 42, name: 'Sean Phonee' },\n * ];\n * <CheckboxGroupInput source=\"recipients\" choices={choices} />\n *\n * You can also customize the properties to use for the option name and value,\n * thanks to the 'optionText' and 'optionValue' attributes.\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi' },\n *    { _id: 456, full_name: 'Jane Austen' },\n * ];\n * <CheckboxGroupInput source=\"recipients\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <CheckboxGroupInput source=\"recipients\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that can access\n * the related choice through the `useRecordContext` hook. You can use Field components there.\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const FullNameField = () => {\n *     const record = useRecordContext();\n *     return <span>{record.first_name} {record.last_name}</span>;\n * };\n *\n * <CheckboxGroupInput source=\"recipients\" choices={choices} optionText={<FullNameField />}/>\n *\n * The choices are translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'programming', name: 'myroot.category.programming' },\n *    { id: 'lifestyle', name: 'myroot.category.lifestyle' },\n *    { id: 'photography', name: 'myroot.category.photography' },\n * ];\n *\n * However, in some cases (e.g. inside a `<ReferenceArrayInput>`), you may not want\n * the choice to be translated. In that case, set the `translateChoice` prop to false.\n * @example\n * <CheckboxGroupInput source=\"tags\" choices={choices} translateChoice={false}/>\n *\n * The object passed as `options` props is passed to the MUI <Checkbox> components\n */\nexport const CheckboxGroupInput: FunctionComponent<CheckboxGroupInputProps> = props => {\n    const {\n        choices: choicesProp,\n        className,\n        classes: classesOverride,\n        format,\n        helperText,\n        label,\n        isLoading: isLoadingProp,\n        isFetching: isFetchingProp,\n        margin = 'dense',\n        onBlur,\n        onChange,\n        optionText = 'name',\n        optionValue = 'id',\n        parse,\n        resource: resourceProp,\n        row = true,\n        source: sourceProp,\n        translateChoice = true,\n        validate,\n        ...rest\n    } = props;\n\n    const { allChoices, isLoading, resource, source } = useChoicesContext({\n        choices: choicesProp,\n        isFetching: isFetchingProp,\n        isLoading: isLoadingProp,\n        resource: resourceProp,\n        source: sourceProp,\n    });\n\n    warning(\n        source === undefined,\n        `If you're not wrapping the CheckboxGroupInput inside a ReferenceArrayInput, you must provide the source prop`\n    );\n\n    warning(\n        allChoices === undefined,\n        `If you're not wrapping the CheckboxGroupInput inside a ReferenceArrayInput, you must provide the choices prop`\n    );\n\n    const {\n        field: { onChange: formOnChange, onBlur: formOnBlur, value },\n        fieldState: { error, invalid, isTouched },\n        formState: { isSubmitted },\n        id,\n        isRequired,\n    } = useInput({\n        format,\n        parse,\n        resource,\n        source,\n        validate,\n        onChange,\n        onBlur,\n        ...rest,\n    });\n\n    const handleCheck = useCallback(\n        (event, isChecked) => {\n            let newValue;\n\n            if (\n                allChoices.every(\n                    item => typeof get(item, optionValue) === 'number'\n                )\n            ) {\n                try {\n                    // try to convert string value to number, e.g. '123'\n                    newValue = JSON.parse(event.target.value);\n                } catch (e) {\n                    // impossible to convert value, e.g. 'abc'\n                    newValue = event.target.value;\n                }\n            } else {\n                newValue = event.target.value;\n            }\n\n            if (isChecked) {\n                formOnChange([...(value || []), ...[newValue]]);\n            } else {\n                formOnChange(value.filter(v => v != newValue)); // eslint-disable-line eqeqeq\n            }\n            formOnBlur(); // Ensure field is flagged as touched\n        },\n        [allChoices, formOnChange, formOnBlur, optionValue, value]\n    );\n\n    if (isLoading && allChoices?.length === 0) {\n        return (\n            <Labeled\n                id={id}\n                label={label}\n                source={source}\n                resource={resource}\n                className={clsx('ra-input', `ra-input-${source}`, className)}\n                isRequired={isRequired}\n                {...rest}\n            >\n                <LinearProgress />\n            </Labeled>\n        );\n    }\n\n    return (\n        <StyledFormControl\n            component=\"fieldset\"\n            margin={margin}\n            error={(isTouched || isSubmitted) && invalid}\n            className={clsx('ra-input', `ra-input-${source}`, className)}\n            {...sanitizeRestProps(rest)}\n        >\n            <FormLabel\n                component=\"legend\"\n                className={CheckboxGroupInputClasses.label}\n            >\n                <FieldTitle\n                    label={label}\n                    source={source}\n                    resource={resource}\n                    isRequired={isRequired}\n                />\n            </FormLabel>\n            <FormGroup row={row}>\n                {allChoices?.map(choice => (\n                    <CheckboxGroupInputItem\n                        key={get(choice, optionValue)}\n                        choice={choice}\n                        id={id}\n                        onChange={handleCheck}\n                        optionText={optionText}\n                        optionValue={optionValue}\n                        translateChoice={translateChoice}\n                        value={value}\n                        {...sanitizeRestProps(rest)}\n                    />\n                ))}\n            </FormGroup>\n            <FormHelperText>\n                <InputHelperText\n                    touched={isTouched || isSubmitted}\n                    error={error?.message}\n                    helperText={helperText}\n                />\n            </FormHelperText>\n        </StyledFormControl>\n    );\n};\n\nconst sanitizeRestProps = ({\n    refetch,\n    setFilter,\n    setPagination,\n    setSort,\n    loaded,\n    touched,\n    ...rest\n}: any) => sanitizeInputRestProps(rest);\n\nCheckboxGroupInput.propTypes = {\n    choices: PropTypes.arrayOf(PropTypes.any),\n    className: PropTypes.string,\n    source: PropTypes.string,\n    optionText: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.func,\n        PropTypes.element,\n    ]),\n    optionValue: PropTypes.string,\n    row: PropTypes.bool,\n    resource: PropTypes.string,\n    translateChoice: PropTypes.bool,\n};\n\nexport type CheckboxGroupInputProps = Omit<CommonInputProps, 'source'> &\n    ChoicesProps &\n    CheckboxProps &\n    FormControlProps & {\n        row?: boolean;\n        // Optional as this input can be used inside a ReferenceInput\n        source?: string;\n    };\n\nconst PREFIX = 'RaCheckboxGroupInput';\n\nexport const CheckboxGroupInputClasses = {\n    label: `${PREFIX}-label`,\n};\n\nconst StyledFormControl = styled(FormControl, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    [`& .${CheckboxGroupInputClasses.label}`]: {\n        transform: 'translate(0, 8px) scale(0.75)',\n        transformOrigin: `top ${theme.direction === 'ltr' ? 'left' : 'right'}`,\n    },\n}));\n","import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Checkbox from '@mui/material/Checkbox';\nimport { useChoices } from 'ra-core';\n\nexport const CheckboxGroupInputItem = props => {\n    const {\n        id,\n        choice,\n        className,\n        fullWidth,\n        onChange,\n        optionText,\n        optionValue,\n        options,\n        translateChoice,\n        value,\n        ...rest\n    } = props;\n\n    const { getChoiceText, getChoiceValue } = useChoices({\n        optionText,\n        optionValue,\n        translateChoice,\n    });\n\n    const choiceName = getChoiceText(choice);\n\n    return (\n        <StyledFormControlLabel\n            htmlFor={`${id}_${getChoiceValue(choice)}`}\n            key={getChoiceValue(choice)}\n            onChange={onChange}\n            className={className}\n            control={\n                <Checkbox\n                    id={`${id}_${getChoiceValue(choice)}`}\n                    color=\"primary\"\n                    className={CheckboxGroupInputItemClasses.checkbox}\n                    checked={\n                        value\n                            ? value.find(v => v == getChoiceValue(choice)) !== // eslint-disable-line eqeqeq\n                              undefined\n                            : false\n                    }\n                    value={String(getChoiceValue(choice))}\n                    {...options}\n                    {...rest}\n                />\n            }\n            label={choiceName}\n        />\n    );\n};\n\nconst PREFIX = 'RaCheckboxGroupInputItem';\n\nexport const CheckboxGroupInputItemClasses = {\n    checkbox: `${PREFIX}-checkbox`,\n};\n\nconst StyledFormControlLabel = styled(FormControlLabel, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})({\n    [`& .${CheckboxGroupInputItemClasses.checkbox}`]: {\n        height: 32,\n    },\n});\n","import * as React from 'react';\nimport { cloneElement, ReactElement, ReactNode, useCallback } from 'react';\nimport clsx from 'clsx';\nimport {\n    ChoicesProps,\n    Identifier,\n    ListContextProvider,\n    useChoicesContext,\n    useInput,\n} from 'ra-core';\nimport {\n    CommonInputProps,\n    InputHelperText,\n    SupportCreateSuggestionOptions,\n} from '.';\nimport { Datagrid, DatagridProps } from '../list/datagrid';\nimport { FilterButton, FilterForm } from '../list/filter';\nimport { FilterContext } from '../list/FilterContext';\nimport { Pagination as DefaultPagination } from '../list/pagination';\n\nconst defaultPagination = <DefaultPagination />;\n\n/**\n * WIP: This component is not yet ready to be used.\n *\n * An input for selecting items displayed in a datagrid\n *\n * @example\n * const membersFilters = [\n *     <TextInput label=\"Search\" source=\"q\" alwaysOn />,\n * ];\n * const TeamEdit = () => (\n *    <Edit>\n *        <SimpleForm>\n *            <TextInput source=\"name\" />\n *            <ReferenceArrayInput\n *                source=\"members\"\n *                reference=\"users\"\n *                filter={{ is_retired: false }}\n *                perPage={50}\n *                sort={{ field: 'lastName', order: 'ASC' }}\n *            >\n *                <DatagridInput\n *                    filters={membersFilters}\n *                >\n *                    <TextField source=\"firstName\" />\n *                    <TextField source=\"lastName\" />\n *                </DatagridInput>\n *            </ReferenceArrayInput>\n *        </SimpleForm>\n *    </Edit>\n * );\n */\nexport const DatagridInput = (props: DatagridInputProps) => {\n    const {\n        choices,\n        className,\n        pagination = defaultPagination,\n        filters,\n        source: sourceProp,\n        resource: resourceProp,\n        ...rest\n    } = props;\n\n    const {\n        allChoices,\n        availableChoices,\n        selectedChoices,\n        source,\n        ...choicesContext\n    } = useChoicesContext({\n        choices,\n        resource: resourceProp,\n        source: sourceProp,\n    });\n    const { field, fieldState, formState } = useInput({\n        ...props,\n        ...choicesContext,\n        source,\n    });\n\n    const onSelect = useCallback(\n        (idsToAdd: Identifier[]) => {\n            field.onChange(idsToAdd);\n        },\n        [field]\n    );\n\n    const onToggleItem = useCallback(\n        (id: Identifier) => {\n            if (field.value.includes(id)) {\n                field.onChange(field.value.filter(item => item !== id));\n            } else {\n                field.onChange([...field.value, id]);\n            }\n        },\n        [field]\n    );\n\n    const onUnselectItems = useCallback(() => {\n        field.onChange([]);\n    }, [field]);\n\n    const listContext = React.useMemo(\n        () => ({\n            ...choicesContext,\n            data: availableChoices,\n            onSelect,\n            onToggleItem,\n            onUnselectItems,\n            selectedIds: field.value,\n        }),\n        [\n            availableChoices,\n            choicesContext,\n            field,\n            onSelect,\n            onToggleItem,\n            onUnselectItems,\n        ]\n    );\n    return (\n        <div className={clsx('ra-input', `ra-input-${source}`, className)}>\n            <ListContextProvider value={listContext}>\n                {filters ? (\n                    Array.isArray(filters) ? (\n                        <FilterContext.Provider value={filters}>\n                            <>\n                                <FilterForm />\n                                <FilterButton />\n                            </>\n                        </FilterContext.Provider>\n                    ) : (\n                        <>\n                            {cloneElement(filters, {\n                                context: 'form',\n                            })}\n                            {cloneElement(filters, {\n                                context: 'button',\n                            })}\n                        </>\n                    )\n                ) : null}\n                <Datagrid {...rest} />\n                {pagination !== false && pagination}\n                <InputHelperText\n                    touched={fieldState.isTouched || formState.isSubmitted}\n                    error={fieldState.error?.message}\n                />\n            </ListContextProvider>\n        </div>\n    );\n};\n\nexport type DatagridInputProps = Omit<CommonInputProps, 'source'> &\n    ChoicesProps &\n    Omit<SupportCreateSuggestionOptions, 'handleChange'> &\n    DatagridProps & {\n        children?: ReactNode;\n        source?: string;\n        filters?: ReactElement | ReactElement[];\n        pagination?: ReactElement | false;\n    };\n","import DatagridBody, {\n    DatagridBodyProps,\n    PureDatagridBody,\n} from './DatagridBody';\nimport DatagridCell, { DatagridCellProps } from './DatagridCell';\nimport DatagridHeaderCell, {\n    DatagridHeaderCellClasses,\n    DatagridHeaderCellProps,\n} from './DatagridHeaderCell';\nimport DatagridLoading, { DatagridLoadingProps } from './DatagridLoading';\nimport DatagridRow, {\n    DatagridRowProps,\n    PureDatagridRow,\n    RowClickFunction,\n} from './DatagridRow';\nimport ExpandRowButton, { ExpandRowButtonProps } from './ExpandRowButton';\n\nexport * from './Datagrid';\nexport * from './DatagridHeader';\nexport * from './useDatagridStyles';\n\nexport {\n    DatagridLoading,\n    DatagridBody,\n    DatagridRow,\n    DatagridHeaderCell,\n    DatagridHeaderCellClasses,\n    DatagridCell,\n    ExpandRowButton,\n    PureDatagridBody,\n    PureDatagridRow,\n};\n\nexport type {\n    DatagridBodyProps,\n    DatagridCellProps,\n    DatagridHeaderCellProps,\n    DatagridLoadingProps,\n    DatagridRowProps,\n    ExpandRowButtonProps,\n    RowClickFunction,\n};\n","import * as React from 'react';\nimport { cloneElement, memo, FC, ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport { TableBody, TableBodyProps } from '@mui/material';\nimport clsx from 'clsx';\nimport { Identifier, RaRecord } from 'ra-core';\n\nimport { DatagridClasses } from './useDatagridStyles';\nimport DatagridRow, { PureDatagridRow, RowClickFunction } from './DatagridRow';\n\nconst DatagridBody: FC<DatagridBodyProps> = React.forwardRef(\n    (\n        {\n            children,\n            className,\n            data,\n            expand,\n            hasBulkActions,\n            hover,\n            onToggleItem,\n            resource,\n            row,\n            rowClick,\n            rowStyle,\n            selectedIds,\n            isRowSelectable,\n            ...rest\n        },\n        ref\n    ) => (\n        <TableBody\n            ref={ref}\n            className={clsx('datagrid-body', className, DatagridClasses.tbody)}\n            {...rest}\n        >\n            {data.map((record, rowIndex) =>\n                cloneElement(\n                    row,\n                    {\n                        className: clsx(DatagridClasses.row, {\n                            [DatagridClasses.rowEven]: rowIndex % 2 === 0,\n                            [DatagridClasses.rowOdd]: rowIndex % 2 !== 0,\n                        }),\n                        expand,\n                        hasBulkActions: hasBulkActions && !!selectedIds,\n                        hover,\n                        id: record.id,\n                        key: record.id ?? `row${rowIndex}`,\n                        onToggleItem,\n                        record,\n                        resource,\n                        rowClick,\n                        selectable: !isRowSelectable || isRowSelectable(record),\n                        selected: selectedIds?.includes(record.id),\n                        style: rowStyle ? rowStyle(record, rowIndex) : null,\n                    },\n                    children\n                )\n            )}\n        </TableBody>\n    )\n);\n\nDatagridBody.propTypes = {\n    className: PropTypes.string,\n    children: PropTypes.node,\n    // @ts-ignore\n    data: PropTypes.arrayOf(PropTypes.object).isRequired,\n    // @ts-ignore\n    expand: PropTypes.oneOfType([PropTypes.element, PropTypes.elementType]),\n    hasBulkActions: PropTypes.bool.isRequired,\n    hover: PropTypes.bool,\n    onToggleItem: PropTypes.func,\n    resource: PropTypes.string,\n    row: PropTypes.element,\n    rowClick: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n    rowStyle: PropTypes.func,\n    selectedIds: PropTypes.arrayOf(PropTypes.any),\n    styles: PropTypes.object,\n    isRowSelectable: PropTypes.func,\n};\n\nDatagridBody.defaultProps = {\n    data: [],\n    hasBulkActions: false,\n    row: <DatagridRow />,\n};\n\nexport interface DatagridBodyProps extends Omit<TableBodyProps, 'classes'> {\n    className?: string;\n    data?: any[];\n    expand?:\n        | ReactElement\n        | FC<{\n              id: Identifier;\n              record: RaRecord;\n              resource: string;\n          }>;\n    hasBulkActions?: boolean;\n    hover?: boolean;\n    onToggleItem?: (\n        id: Identifier,\n        event: React.TouchEvent | React.MouseEvent\n    ) => void;\n    record?: RaRecord;\n    resource?: string;\n    row?: ReactElement;\n    rowClick?: string | RowClickFunction;\n    rowStyle?: (record: RaRecord, index: number) => any;\n    selectedIds?: Identifier[];\n    isRowSelectable?: (record: RaRecord) => boolean;\n}\n\n// trick MUI Table into thinking this is one of the child type it supports\n// @ts-ignore\nDatagridBody.muiName = 'TableBody';\n\nexport const PureDatagridBody = memo(DatagridBody);\n\n// trick MUI Table into thinking this is one of the child type it supports\n// @ts-ignore\nPureDatagridBody.muiName = 'TableBody';\n// @ts-ignore\nPureDatagridBody.defaultProps = {\n    row: <PureDatagridRow />,\n};\n\nexport default DatagridBody;\n","import { styled } from '@mui/material';\n\nconst PREFIX = 'RaDatagrid';\n\nexport const DatagridClasses = {\n    table: `${PREFIX}-table`,\n    tableWrapper: `${PREFIX}-tableWrapper`,\n    thead: `${PREFIX}-thead`,\n    tbody: `${PREFIX}-tbody`,\n    headerRow: `${PREFIX}-headerRow`,\n    headerCell: `${PREFIX}-headerCell`,\n    checkbox: `${PREFIX}-checkbox`,\n    row: `${PREFIX}-row`,\n    clickableRow: `${PREFIX}-clickableRow`,\n    rowEven: `${PREFIX}-rowEven`,\n    rowOdd: `${PREFIX}-rowOdd`,\n    rowCell: `${PREFIX}-rowCell`,\n    selectable: `${PREFIX}-selectable`,\n    expandHeader: `${PREFIX}-expandHeader`,\n    expandIconCell: `${PREFIX}-expandIconCell`,\n    expandIcon: `${PREFIX}-expandIcon`,\n    expandable: `${PREFIX}-expandable`,\n    expanded: `${PREFIX}-expanded`,\n    expandedPanel: `${PREFIX}-expandedPanel`,\n};\n\nexport const DatagridRoot = styled('div', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    [`& .${DatagridClasses.table}`]: {\n        tableLayout: 'auto',\n    },\n    [`& .${DatagridClasses.tableWrapper}`]: {},\n    [`& .${DatagridClasses.thead}`]: {},\n    [`& .${DatagridClasses.tbody}`]: {},\n    [`& .${DatagridClasses.headerRow}`]: {},\n    [`& .${DatagridClasses.headerCell}`]: {\n        position: 'sticky',\n        top: 0,\n        zIndex: 2,\n        backgroundColor: theme.palette.background.paper,\n        '&:first-of-type': {\n            borderTopLeftRadius: theme.shape.borderRadius,\n        },\n        '&:last-child': {\n            borderTopRightRadius: theme.shape.borderRadius,\n        },\n    },\n    [`& .${DatagridClasses.checkbox}`]: {},\n    [`& .${DatagridClasses.row}`]: {},\n    [`& .${DatagridClasses.clickableRow}`]: {\n        cursor: 'pointer',\n    },\n    [`& .${DatagridClasses.rowEven}`]: {},\n    [`& .${DatagridClasses.rowOdd}`]: {},\n    [`& .${DatagridClasses.rowCell}`]: {},\n    [`& .${DatagridClasses.expandHeader}`]: {\n        padding: 0,\n        width: theme.spacing(6),\n    },\n    [`& .${DatagridClasses.expandIconCell}`]: {\n        width: theme.spacing(6),\n    },\n    [`& .${DatagridClasses.expandIcon}`]: {\n        padding: theme.spacing(1),\n        transform: 'rotate(-90deg)',\n        transition: theme.transitions.create('transform', {\n            duration: theme.transitions.duration.shortest,\n        }),\n    },\n    [`& .${DatagridClasses.expandIcon}.${DatagridClasses.expanded}`]: {\n        transform: 'rotate(0deg)',\n    },\n    [`& .${DatagridClasses.expandedPanel}`]: {},\n}));\n","import React, {\n    isValidElement,\n    cloneElement,\n    createElement,\n    useState,\n    useEffect,\n    useCallback,\n    memo,\n    FC,\n    ReactElement,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { TableCell, TableRow, TableRowProps, Checkbox } from '@mui/material';\nimport {\n    Identifier,\n    RaRecord,\n    RecordContextProvider,\n    shallowEqual,\n    useExpanded,\n    useResourceContext,\n    useTranslate,\n    useCreatePath,\n    useRecordContext,\n} from 'ra-core';\nimport { useNavigate } from 'react-router-dom';\n\nimport DatagridCell from './DatagridCell';\nimport ExpandRowButton from './ExpandRowButton';\nimport { DatagridClasses } from './useDatagridStyles';\nimport { useDatagridContext } from './useDatagridContext';\n\nconst computeNbColumns = (expand, children, hasBulkActions) =>\n    expand\n        ? 1 + // show expand button\n          (hasBulkActions ? 1 : 0) + // checkbox column\n          React.Children.toArray(children).filter(child => !!child).length // non-null children\n        : 0; // we don't need to compute columns if there is no expand panel;\n\nconst DatagridRow: FC<DatagridRowProps> = React.forwardRef((props, ref) => {\n    const {\n        children,\n        className,\n        expand,\n        hasBulkActions,\n        hover,\n        id,\n        onToggleItem,\n        record: recordOverride,\n        rowClick,\n        selected,\n        style,\n        selectable,\n        ...rest\n    } = props;\n\n    const context = useDatagridContext();\n    const translate = useTranslate();\n    const record = useRecordContext(props);\n    const expandable =\n        (!context ||\n            !context.isRowExpandable ||\n            context.isRowExpandable(record)) &&\n        expand;\n    const resource = useResourceContext(props);\n    const createPath = useCreatePath();\n    const [expanded, toggleExpanded] = useExpanded(\n        resource,\n        id,\n        context && context.expandSingle\n    );\n    const [nbColumns, setNbColumns] = useState(() =>\n        computeNbColumns(expandable, children, hasBulkActions)\n    );\n    useEffect(() => {\n        // Fields can be hidden dynamically based on permissions;\n        // The expand panel must span over the remaining columns\n        // So we must recompute the number of columns to span on\n        const newNbColumns = computeNbColumns(\n            expandable,\n            children,\n            hasBulkActions\n        );\n        if (newNbColumns !== nbColumns) {\n            setNbColumns(newNbColumns);\n        }\n    }, [expandable, nbColumns, children, hasBulkActions]);\n\n    const navigate = useNavigate();\n\n    const handleToggleExpand = useCallback(\n        event => {\n            toggleExpanded();\n            event.stopPropagation();\n        },\n        [toggleExpanded]\n    );\n    const handleToggleSelection = useCallback(\n        event => {\n            if (!selectable) return;\n            onToggleItem(id, event);\n            event.stopPropagation();\n        },\n        [id, onToggleItem, selectable]\n    );\n    const handleClick = useCallback(\n        async event => {\n            event.persist();\n            const type =\n                typeof rowClick === 'function'\n                    ? await rowClick(id, resource, record)\n                    : rowClick;\n            if (type === false || type == null) {\n                return;\n            }\n            if (['edit', 'show'].includes(type)) {\n                navigate(createPath({ resource, id, type }));\n                return;\n            }\n            if (type === 'expand') {\n                handleToggleExpand(event);\n                return;\n            }\n            if (type === 'toggleSelection') {\n                handleToggleSelection(event);\n                return;\n            }\n            navigate(type);\n        },\n        [\n            rowClick,\n            id,\n            resource,\n            record,\n            navigate,\n            createPath,\n            handleToggleExpand,\n            handleToggleSelection,\n        ]\n    );\n\n    return (\n        <RecordContextProvider value={record}>\n            <TableRow\n                ref={ref}\n                className={clsx(className, {\n                    [DatagridClasses.expandable]: expandable,\n                    [DatagridClasses.selectable]: selectable,\n                    [DatagridClasses.clickableRow]:\n                        typeof rowClick === 'function' ? true : rowClick,\n                })}\n                key={id}\n                style={style}\n                hover={hover}\n                onClick={handleClick}\n                {...rest}\n            >\n                {expand && (\n                    <TableCell\n                        padding=\"none\"\n                        className={DatagridClasses.expandIconCell}\n                    >\n                        {expandable && (\n                            <ExpandRowButton\n                                className={clsx(DatagridClasses.expandIcon, {\n                                    [DatagridClasses.expanded]: expanded,\n                                })}\n                                expanded={expanded}\n                                onClick={handleToggleExpand}\n                                expandContentId={`${id}-expand`}\n                            />\n                        )}\n                    </TableCell>\n                )}\n                {hasBulkActions && (\n                    <TableCell padding=\"checkbox\">\n                        {selectable && (\n                            <Checkbox\n                                aria-label={translate('ra.action.select_row', {\n                                    _: 'Select this row',\n                                })}\n                                color=\"primary\"\n                                className={`select-item ${DatagridClasses.checkbox}`}\n                                checked={selected}\n                                onClick={handleToggleSelection}\n                            />\n                        )}\n                    </TableCell>\n                )}\n                {React.Children.map(children, (field, index) =>\n                    isValidElement(field) ? (\n                        <DatagridCell\n                            key={`${id}-${\n                                (field.props as any).source || index\n                            }`}\n                            className={clsx(\n                                `column-${(field.props as any).source}`,\n                                DatagridClasses.rowCell\n                            )}\n                            record={record}\n                            {...{ field, resource }}\n                        />\n                    ) : null\n                )}\n            </TableRow>\n            {expandable && expanded && (\n                <TableRow\n                    key={`${id}-expand`}\n                    id={`${id}-expand`}\n                    className={DatagridClasses.expandedPanel}\n                >\n                    <TableCell colSpan={nbColumns}>\n                        {isValidElement(expand)\n                            ? cloneElement(expand, {\n                                  // @ts-ignore\n                                  record,\n                                  resource,\n                                  id: String(id),\n                              })\n                            : createElement(expand, {\n                                  record,\n                                  resource,\n                                  id: String(id),\n                              })}\n                    </TableCell>\n                </TableRow>\n            )}\n        </RecordContextProvider>\n    );\n});\n\nDatagridRow.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    // @ts-ignore\n    expand: PropTypes.oneOfType([PropTypes.element, PropTypes.elementType]),\n    hasBulkActions: PropTypes.bool.isRequired,\n    hover: PropTypes.bool,\n    id: PropTypes.any,\n    onToggleItem: PropTypes.func,\n    // @ts-ignore\n    record: PropTypes.object,\n    resource: PropTypes.string,\n    // @ts-ignore\n    rowClick: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n    selected: PropTypes.bool,\n    style: PropTypes.object,\n    selectable: PropTypes.bool,\n};\n\nDatagridRow.defaultProps = {\n    hasBulkActions: false,\n    hover: true,\n    selected: false,\n    selectable: true,\n};\n\nexport interface DatagridRowProps\n    extends Omit<TableRowProps, 'id' | 'classes'> {\n    className?: string;\n    expand?:\n        | ReactElement\n        | FC<{\n              id: Identifier;\n              record: RaRecord;\n              resource: string;\n          }>;\n    hasBulkActions?: boolean;\n    hover?: boolean;\n    id?: Identifier;\n    onToggleItem?: (\n        id: Identifier,\n        event: React.TouchEvent | React.MouseEvent\n    ) => void;\n    record?: RaRecord;\n    resource?: string;\n    rowClick?: RowClickFunction | string | false;\n    selected?: boolean;\n    style?: any;\n    selectable?: boolean;\n}\n\nexport type RowClickFunction = (\n    id: Identifier,\n    resource: string,\n    record: RaRecord\n) => string | Promise<string>;\n\nconst areEqual = (prevProps, nextProps) => {\n    const { children: _1, expand: _2, ...prevPropsWithoutChildren } = prevProps;\n    const { children: _3, expand: _4, ...nextPropsWithoutChildren } = nextProps;\n    return shallowEqual(prevPropsWithoutChildren, nextPropsWithoutChildren);\n};\n\nexport const PureDatagridRow = memo(DatagridRow, areEqual);\n\nPureDatagridRow.displayName = 'PureDatagridRow';\n\nexport default DatagridRow;\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport TableCell, { TableCellProps } from '@mui/material/TableCell';\nimport clsx from 'clsx';\nimport { RaRecord } from 'ra-core';\n\nconst DatagridCell = React.forwardRef<HTMLTableCellElement, DatagridCellProps>(\n    ({ className, field, record, resource, ...rest }, ref) => (\n        <TableCell\n            className={clsx(className, field.props.cellClassName)}\n            align={field.props.textAlign}\n            ref={ref}\n            {...rest}\n        >\n            {field}\n        </TableCell>\n    )\n);\n\nDatagridCell.propTypes = {\n    className: PropTypes.string,\n    field: PropTypes.element,\n    // @ts-ignore\n    record: PropTypes.object, // eslint-disable-line react/forbid-prop-types\n    resource: PropTypes.string,\n};\n\nexport interface DatagridCellProps extends TableCellProps {\n    className?: string;\n    field?: JSX.Element;\n    record?: RaRecord;\n    resource?: string;\n}\n\n// What? TypeScript loses the displayName if we don't set it explicitly\nDatagridCell.displayName = 'DatagridCell';\n\nexport default DatagridCell;\n","import * as React from 'react';\nimport { ElementType, memo } from 'react';\nimport IconButton, { IconButtonProps } from '@mui/material/IconButton';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport { useTranslate } from 'ra-core';\n\nconst ExpandRowButton = ({\n    expanded,\n    expandContentId,\n    ...props\n}: ExpandRowButtonProps) => {\n    const translate = useTranslate();\n    return (\n        <IconButton\n            aria-label={translate(\n                expanded ? 'ra.action.close' : 'ra.action.expand'\n            )}\n            aria-expanded={expanded}\n            aria-controls={expandContentId}\n            tabIndex={-1}\n            aria-hidden=\"true\"\n            component=\"div\"\n            {...props}\n            size=\"small\"\n        >\n            <ExpandMoreIcon fontSize=\"inherit\" />\n        </IconButton>\n    );\n};\n\nexport interface ExpandRowButtonProps extends IconButtonProps {\n    component?: ElementType;\n    expanded: boolean;\n    expandContentId?: string;\n}\n\nexport default memo(ExpandRowButton);\n","import { useContext, useMemo } from 'react';\nimport { DatagridProps } from './Datagrid';\nimport DatagridContext, { DatagridContextValue } from './DatagridContext';\nimport defaults from 'lodash/defaults';\n\nexport const useDatagridContext = (\n    props?: DatagridProps\n): DatagridContextValue => {\n    const context = useContext(DatagridContext);\n\n    return useMemo(\n        () =>\n            defaults(\n                {},\n                props != null ? { isRowExpandable: props.isRowExpandable } : {},\n                context\n            ),\n        [context, props]\n    );\n};\n","import { createContext } from 'react';\nimport { RaRecord } from 'ra-core';\n\nconst DatagridContext = createContext<DatagridContextValue>({});\n\nDatagridContext.displayName = 'DatagridContext';\n\nexport type DatagridContextValue = {\n    isRowExpandable?: (record: RaRecord) => boolean;\n    expandSingle?: boolean;\n};\n\nexport default DatagridContext;\n","import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { TableCell, TableSortLabel, Tooltip } from '@mui/material';\nimport { TableCellProps } from '@mui/material/TableCell';\nimport {\n    FieldTitle,\n    useTranslate,\n    SortPayload,\n    useResourceContext,\n} from 'ra-core';\n\nexport const DatagridHeaderCell = (\n    props: DatagridHeaderCellProps\n): JSX.Element => {\n    const { className, field, sort, updateSort, isSorting, ...rest } = props;\n    const resource = useResourceContext(props);\n\n    const translate = useTranslate();\n\n    return (\n        <StyledTableCell\n            className={clsx(className, field.props.headerClassName)}\n            align={field.props.textAlign}\n            variant=\"head\"\n            {...rest}\n        >\n            {updateSort &&\n            field.props.sortable !== false &&\n            (field.props.sortBy || field.props.source) ? (\n                <Tooltip\n                    title={translate('ra.action.sort')}\n                    placement={\n                        field.props.textAlign === 'right'\n                            ? 'bottom-end'\n                            : 'bottom-start'\n                    }\n                    enterDelay={300}\n                >\n                    <TableSortLabel\n                        active={\n                            sort.field ===\n                            (field.props.sortBy || field.props.source)\n                        }\n                        direction={sort.order === 'ASC' ? 'asc' : 'desc'}\n                        data-field={field.props.sortBy || field.props.source}\n                        data-order={field.props.sortByOrder || 'ASC'}\n                        onClick={updateSort}\n                        classes={DatagridHeaderCellClasses}\n                    >\n                        <FieldTitle\n                            label={field.props.label}\n                            source={field.props.source}\n                            resource={resource}\n                        />\n                    </TableSortLabel>\n                </Tooltip>\n            ) : (\n                <FieldTitle\n                    label={field.props.label}\n                    source={field.props.source}\n                    resource={resource}\n                />\n            )}\n        </StyledTableCell>\n    );\n};\n\nDatagridHeaderCell.propTypes = {\n    className: PropTypes.string,\n    field: PropTypes.element,\n    sort: PropTypes.shape({\n        field: PropTypes.string,\n        order: PropTypes.string,\n    }).isRequired,\n    isSorting: PropTypes.bool,\n    resource: PropTypes.string,\n    updateSort: PropTypes.func,\n};\n\nexport interface DatagridHeaderCellProps\n    extends Omit<TableCellProps, 'classes'> {\n    className?: string;\n    field?: JSX.Element;\n    isSorting?: boolean;\n    resource: string;\n    sort: SortPayload;\n    updateSort?: (event: any) => void;\n}\n\nexport default memo(\n    DatagridHeaderCell,\n    (props, nextProps) =>\n        props.updateSort === nextProps.updateSort &&\n        props.sort.field === nextProps.sort.field &&\n        props.sort.order === nextProps.sort.order &&\n        props.isSorting === nextProps.isSorting &&\n        props.resource === nextProps.resource\n);\n\nconst PREFIX = 'RaDatagridHeaderCell';\n\nexport const DatagridHeaderCellClasses = {\n    icon: `${PREFIX}-icon`,\n};\n\n// Remove the sort icons when not active\nconst StyledTableCell = styled(TableCell, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    [`& .MuiTableSortLabel-icon`]: {\n        display: 'none',\n    },\n    [`& .Mui-active .MuiTableSortLabel-icon`]: {\n        display: 'inline',\n    },\n}));\n","import * as React from 'react';\nimport { ReactElement, FC, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Table,\n    TableCell,\n    TableHead,\n    TableRow,\n    TableBody,\n    IconButton,\n    Checkbox,\n} from '@mui/material';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport clsx from 'clsx';\nimport { useTimeout, Identifier, RaRecord } from 'ra-core';\n\nimport { DatagridClasses } from './useDatagridStyles';\nimport { Placeholder } from '../Placeholder';\n\nconst times = (nbChildren, fn) =>\n    Array.from({ length: nbChildren }, (_, key) => fn(key));\n\nconst DatagridLoading = ({\n    className,\n    expand,\n    hasBulkActions,\n    nbChildren,\n    nbFakeLines = 5,\n    size,\n}: DatagridLoadingProps): JSX.Element => {\n    const oneSecondHasPassed = useTimeout(1000);\n\n    return oneSecondHasPassed ? (\n        <Table className={clsx(DatagridClasses.table, className)} size={size}>\n            <TableHead>\n                <TableRow className={DatagridClasses.row}>\n                    {expand && (\n                        <TableCell\n                            padding=\"none\"\n                            className={DatagridClasses.expandHeader}\n                        />\n                    )}\n                    {hasBulkActions && (\n                        <TableCell\n                            padding=\"checkbox\"\n                            className={DatagridClasses.expandIconCell}\n                        >\n                            <Checkbox\n                                className=\"select-all\"\n                                color=\"primary\"\n                                checked={false}\n                            />\n                        </TableCell>\n                    )}\n                    {times(nbChildren, key => (\n                        <TableCell\n                            variant=\"head\"\n                            className={DatagridClasses.headerCell}\n                            key={key}\n                        >\n                            <Placeholder />\n                        </TableCell>\n                    ))}\n                </TableRow>\n            </TableHead>\n            <TableBody>\n                {times(nbFakeLines, key1 => (\n                    <TableRow key={key1} style={{ opacity: 1 / (key1 + 1) }}>\n                        {expand && (\n                            <TableCell\n                                padding=\"none\"\n                                className={DatagridClasses.expandIconCell}\n                            >\n                                <IconButton\n                                    className={DatagridClasses.expandIcon}\n                                    component=\"div\"\n                                    aria-hidden=\"true\"\n                                    size=\"large\"\n                                >\n                                    <ExpandMoreIcon />\n                                </IconButton>\n                            </TableCell>\n                        )}\n                        {hasBulkActions && (\n                            <TableCell\n                                padding=\"checkbox\"\n                                className={DatagridClasses.expandIconCell}\n                            >\n                                <Checkbox\n                                    className=\"select-all\"\n                                    color=\"primary\"\n                                    checked={false}\n                                />\n                            </TableCell>\n                        )}\n                        {times(nbChildren, key2 => (\n                            <TableCell\n                                className={DatagridClasses.rowCell}\n                                key={key2}\n                            >\n                                <Placeholder />\n                            </TableCell>\n                        ))}\n                    </TableRow>\n                ))}\n            </TableBody>\n        </Table>\n    ) : null;\n};\n\nDatagridLoading.propTypes = {\n    className: PropTypes.string,\n    expand: PropTypes.oneOfType([PropTypes.element, PropTypes.elementType]),\n    hasBulkActions: PropTypes.bool,\n    nbChildren: PropTypes.number,\n    nbFakeLines: PropTypes.number,\n    size: PropTypes.oneOf(['small', 'medium']),\n};\n\nexport interface DatagridLoadingProps {\n    className?: string;\n    expand?:\n        | ReactElement\n        | FC<{\n              id: Identifier;\n              record: RaRecord;\n              resource: string;\n          }>;\n    hasBulkActions?: boolean;\n    nbChildren: number;\n    nbFakeLines?: number;\n    size?: 'small' | 'medium';\n}\n\nexport default memo(DatagridLoading);\n","import * as React from 'react';\nimport { styled } from '@mui/material/styles';\n\ninterface PlaceholderProps {\n    className?: string;\n}\n\nexport const Placeholder = (props: PlaceholderProps) => (\n    <Root className={props.className}>&nbsp;</Root>\n);\n\nconst PREFIX = 'RaPlaceholder';\n\nconst Root = styled('span', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    backgroundColor: theme.palette.grey[300],\n    display: 'flex',\n}));\n","import * as React from 'react';\nimport {\n    cloneElement,\n    createElement,\n    isValidElement,\n    useCallback,\n    useRef,\n    useEffect,\n    FC,\n    ComponentType,\n    ReactElement,\n    useMemo,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    sanitizeListRestProps,\n    useListContext,\n    Identifier,\n    RaRecord,\n    SortPayload,\n} from 'ra-core';\nimport { Table, TableProps } from '@mui/material';\nimport clsx from 'clsx';\nimport union from 'lodash/union';\nimport difference from 'lodash/difference';\n\nimport { DatagridHeader } from './DatagridHeader';\nimport DatagridLoading from './DatagridLoading';\nimport DatagridBody, { PureDatagridBody } from './DatagridBody';\nimport { RowClickFunction } from './DatagridRow';\nimport DatagridContextProvider from './DatagridContextProvider';\nimport { DatagridClasses, DatagridRoot } from './useDatagridStyles';\nimport { BulkActionsToolbar } from '../BulkActionsToolbar';\nimport { BulkDeleteButton } from '../../button';\n\nconst defaultBulkActionButtons = <BulkDeleteButton />;\n\n/**\n * The Datagrid component renders a list of records as a table.\n * It is usually used as a child of the <List> and <ReferenceManyField> components.\n *\n * Props:\n *  - body\n *  - bulkActionButtons\n *  - children\n *  - empty\n *  - expand\n *  - header\n *  - hover\n *  - isRowExpandable\n *  - isRowSelectable\n *  - optimized\n *  - rowStyle\n *  - rowClick\n *  - size\n *  - sx\n *\n * @example // Display all posts as a datagrid\n * const postRowStyle = (record, index) => ({\n *     backgroundColor: record.nb_views >= 500 ? '#efe' : 'white',\n * });\n * export const PostList = (props) => (\n *     <List {...props}>\n *         <Datagrid rowStyle={postRowStyle}>\n *             <TextField source=\"id\" />\n *             <TextField source=\"title\" />\n *             <TextField source=\"body\" />\n *             <EditButton />\n *         </Datagrid>\n *     </List>\n * );\n *\n * @example // Display all the comments of the current post as a datagrid\n * <ReferenceManyField reference=\"comments\" target=\"post_id\">\n *     <Datagrid>\n *         <TextField source=\"id\" />\n *         <TextField source=\"body\" />\n *         <DateField source=\"created_at\" />\n *         <EditButton />\n *     </Datagrid>\n * </ReferenceManyField>\n *\n * @example // Usage outside of a <List> or a <ReferenceManyField>.\n *\n * const sort = { field: 'published_at', order: 'DESC' };\n *\n * export const MyCustomList = (props) => {\n *     const { data, total, isLoading } = useGetList(\n *         'posts',\n *         { pagination: { page: 1, perPage: 10 }, sort: sort }\n *     );\n *\n *     return (\n *         <Datagrid\n *             data={data}\n *             total={total}\n *             isLoading={isLoading}\n *             sort={sort}\n *             selectedIds={[]}\n *             setSort={() => {\n *                 console.log('set sort');\n *             }}\n *             onSelect={() => {\n *                 console.log('on select');\n *             }}\n *             onToggleItem={() => {\n *                 console.log('on toggle item');\n *             }}\n *         >\n *             <TextField source=\"id\" />\n *             <TextField source=\"title\" />\n *         </Datagrid>\n *     );\n * }\n */\nexport const Datagrid: FC<DatagridProps> = React.forwardRef((props, ref) => {\n    const {\n        optimized = false,\n        body = optimized ? PureDatagridBody : DatagridBody,\n        header = DatagridHeader,\n        children,\n        className,\n        empty,\n        expand,\n        bulkActionButtons = defaultBulkActionButtons,\n        hover,\n        isRowSelectable,\n        isRowExpandable,\n        resource,\n        rowClick,\n        rowStyle,\n        size = 'small',\n        sx,\n        expandSingle = false,\n        ...rest\n    } = props;\n\n    const {\n        sort,\n        data,\n        isLoading,\n        onSelect,\n        onToggleItem,\n        selectedIds,\n        setSort,\n        total,\n    } = useListContext(props);\n\n    const hasBulkActions = !!bulkActionButtons !== false;\n\n    const contextValue = useMemo(() => ({ isRowExpandable, expandSingle }), [\n        isRowExpandable,\n        expandSingle,\n    ]);\n\n    const lastSelected = useRef(null);\n\n    useEffect(() => {\n        if (!selectedIds || selectedIds.length === 0) {\n            lastSelected.current = null;\n        }\n    }, [JSON.stringify(selectedIds)]); // eslint-disable-line react-hooks/exhaustive-deps\n\n    // we manage row selection at the datagrid level to allow shift+click to select an array of rows\n    const handleToggleItem = useCallback(\n        (id, event) => {\n            const ids = data.map(record => record.id);\n            const lastSelectedIndex = ids.indexOf(lastSelected.current);\n            lastSelected.current = event.target.checked ? id : null;\n\n            if (event.shiftKey && lastSelectedIndex !== -1) {\n                const index = ids.indexOf(id);\n                const idsBetweenSelections = ids.slice(\n                    Math.min(lastSelectedIndex, index),\n                    Math.max(lastSelectedIndex, index) + 1\n                );\n\n                const newSelectedIds = event.target.checked\n                    ? union(selectedIds, idsBetweenSelections)\n                    : difference(selectedIds, idsBetweenSelections);\n\n                onSelect(\n                    isRowSelectable\n                        ? newSelectedIds.filter((id: Identifier) =>\n                              isRowSelectable(\n                                  data.find(record => record.id === id)\n                              )\n                          )\n                        : newSelectedIds\n                );\n            } else {\n                onToggleItem(id);\n            }\n        },\n        [data, isRowSelectable, onSelect, onToggleItem, selectedIds]\n    );\n\n    if (isLoading === true) {\n        return (\n            <DatagridLoading\n                className={className}\n                expand={expand}\n                hasBulkActions={hasBulkActions}\n                nbChildren={React.Children.count(children)}\n                size={size}\n            />\n        );\n    }\n\n    /**\n     * Once loaded, the data for the list may be empty. Instead of\n     * displaying the table header with zero data rows,\n     * the datagrid displays nothing or a custom empty component.\n     */\n    if (data.length === 0 || total === 0) {\n        if (empty) {\n            return empty;\n        }\n\n        return null;\n    }\n\n    /**\n     * After the initial load, if the data for the list isn't empty,\n     * and even if the data is refreshing (e.g. after a filter change),\n     * the datagrid displays the current data.\n     */\n    return (\n        <DatagridContextProvider value={contextValue}>\n            <DatagridRoot sx={sx}>\n                {bulkActionButtons !== false ? (\n                    <BulkActionsToolbar selectedIds={selectedIds}>\n                        {isValidElement(bulkActionButtons)\n                            ? bulkActionButtons\n                            : defaultBulkActionButtons}\n                    </BulkActionsToolbar>\n                ) : null}\n                <div className={DatagridClasses.tableWrapper}>\n                    <Table\n                        ref={ref}\n                        className={clsx(DatagridClasses.table, className)}\n                        size={size}\n                        {...sanitizeRestProps(rest)}\n                    >\n                        {createOrCloneElement(\n                            header,\n                            {\n                                children,\n                                sort,\n                                data,\n                                hasExpand: !!expand,\n                                hasBulkActions,\n                                isRowSelectable,\n                                onSelect,\n                                resource,\n                                selectedIds,\n                                setSort,\n                            },\n                            children\n                        )}\n                        {createOrCloneElement(\n                            body,\n                            {\n                                expand,\n                                rowClick,\n                                data,\n                                hasBulkActions,\n                                hover,\n                                onToggleItem: handleToggleItem,\n                                resource,\n                                rowStyle,\n                                selectedIds,\n                                isRowSelectable,\n                            },\n                            children\n                        )}\n                    </Table>\n                </div>\n            </DatagridRoot>\n        </DatagridContextProvider>\n    );\n});\n\nconst createOrCloneElement = (element, props, children) =>\n    isValidElement(element)\n        ? cloneElement(element, props, children)\n        : createElement(element, props, children);\n\nDatagrid.propTypes = {\n    // @ts-ignore\n    body: PropTypes.oneOfType([PropTypes.element, PropTypes.elementType]),\n    // @ts-ignore-line\n    bulkActionButtons: PropTypes.oneOfType([PropTypes.bool, PropTypes.element]),\n    children: PropTypes.node.isRequired,\n    className: PropTypes.string,\n    sort: PropTypes.exact({\n        field: PropTypes.string,\n        order: PropTypes.string,\n    }),\n    data: PropTypes.arrayOf(PropTypes.any),\n    empty: PropTypes.element,\n    // @ts-ignore\n    expand: PropTypes.oneOfType([PropTypes.element, PropTypes.elementType]),\n    // @ts-ignore\n    header: PropTypes.oneOfType([PropTypes.element, PropTypes.elementType]),\n    hover: PropTypes.bool,\n    isLoading: PropTypes.bool,\n    onSelect: PropTypes.func,\n    onToggleItem: PropTypes.func,\n    resource: PropTypes.string,\n    rowClick: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n    rowStyle: PropTypes.func,\n    selectedIds: PropTypes.arrayOf(PropTypes.any),\n    setSort: PropTypes.func,\n    total: PropTypes.number,\n    isRowSelectable: PropTypes.func,\n    isRowExpandable: PropTypes.func,\n    expandSingle: PropTypes.bool,\n};\n\nexport interface DatagridProps<RecordType extends RaRecord = any>\n    extends Omit<TableProps, 'size' | 'classes' | 'onSelect'> {\n    body?: ReactElement | ComponentType;\n    className?: string;\n    bulkActionButtons?: ReactElement | false;\n    expand?:\n        | ReactElement\n        | FC<{\n              id: Identifier;\n              record: RecordType;\n              resource: string;\n          }>;\n    header?: ReactElement | ComponentType;\n    hover?: boolean;\n    empty?: ReactElement;\n    isRowSelectable?: (record: RecordType) => boolean;\n    isRowExpandable?: (record: RecordType) => boolean;\n    optimized?: boolean;\n    rowClick?: string | RowClickFunction;\n    rowStyle?: (record: RecordType, index: number) => any;\n    size?: 'medium' | 'small';\n    // can be injected when using the component without context\n    sort?: SortPayload;\n    data?: RecordType[];\n    isLoading?: boolean;\n    onSelect?: (ids: Identifier[]) => void;\n    onToggleItem?: (id: Identifier) => void;\n    setSort?: (sort: SortPayload) => void;\n    selectedIds?: Identifier[];\n    expandSingle?: boolean;\n    total?: number;\n}\n\nconst injectedProps = [\n    'isRequired',\n    'setFilter',\n    'setPagination',\n    'limitChoicesToValue',\n    'translateChoice',\n    // Datagrid may be used as an alternative to SelectInput\n    'field',\n    'fieldState',\n    'formState',\n];\n\nconst sanitizeRestProps = props =>\n    Object.keys(sanitizeListRestProps(props))\n        .filter(propName => !injectedProps.includes(propName))\n        .reduce((acc, key) => ({ ...acc, [key]: props[key] }), {});\n\nDatagrid.displayName = 'Datagrid';\n","import * as React from 'react';\nimport { Children, isValidElement, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    useListContext,\n    useResourceContext,\n    Identifier,\n    RaRecord,\n    SortPayload,\n    useTranslate,\n} from 'ra-core';\nimport { Checkbox, TableCell, TableHead, TableRow } from '@mui/material';\nimport clsx from 'clsx';\n\nimport DatagridHeaderCell from './DatagridHeaderCell';\nimport { DatagridClasses } from './useDatagridStyles';\n\n/**\n * The default Datagrid Header component.\n *\n * Renders select all checkbox as well as column header buttons used for sorting.\n */\nexport const DatagridHeader = (props: DatagridHeaderProps) => {\n    const {\n        children,\n        className,\n        hasExpand = false,\n        hasBulkActions = false,\n        isRowSelectable,\n    } = props;\n    const resource = useResourceContext(props);\n    const translate = useTranslate();\n    const { sort, data, onSelect, selectedIds, setSort } = useListContext(\n        props\n    );\n\n    const updateSortCallback = useCallback(\n        event => {\n            event.stopPropagation();\n            const newField = event.currentTarget.dataset.field;\n            const newOrder =\n                sort.field === newField\n                    ? sort.order === 'ASC'\n                        ? 'DESC'\n                        : 'ASC'\n                    : event.currentTarget.dataset.order;\n\n            setSort({ field: newField, order: newOrder });\n        },\n        [sort.field, sort.order, setSort]\n    );\n\n    const updateSort = setSort ? updateSortCallback : null;\n\n    const handleSelectAll = useCallback(\n        event =>\n            onSelect(\n                event.target.checked\n                    ? selectedIds.concat(\n                          data\n                              .filter(\n                                  record => !selectedIds.includes(record.id)\n                              )\n                              .filter(record =>\n                                  isRowSelectable\n                                      ? isRowSelectable(record)\n                                      : true\n                              )\n                              .map(record => record.id)\n                      )\n                    : []\n            ),\n        [data, onSelect, isRowSelectable, selectedIds]\n    );\n\n    const selectableIds = Array.isArray(data)\n        ? isRowSelectable\n            ? data\n                  .filter(record => isRowSelectable(record))\n                  .map(record => record.id)\n            : data.map(record => record.id)\n        : [];\n\n    return (\n        <TableHead className={clsx(className, DatagridClasses.thead)}>\n            <TableRow\n                className={clsx(DatagridClasses.row, DatagridClasses.headerRow)}\n            >\n                {hasExpand && (\n                    <TableCell\n                        padding=\"none\"\n                        className={clsx(\n                            DatagridClasses.headerCell,\n                            DatagridClasses.expandHeader\n                        )}\n                    />\n                )}\n                {hasBulkActions && selectedIds && (\n                    <TableCell\n                        padding=\"checkbox\"\n                        className={DatagridClasses.headerCell}\n                    >\n                        <Checkbox\n                            aria-label={translate('ra.action.select_all', {\n                                _: 'Select all',\n                            })}\n                            className=\"select-all\"\n                            color=\"primary\"\n                            checked={\n                                selectedIds.length > 0 &&\n                                selectableIds.length > 0 &&\n                                selectableIds.every(id =>\n                                    selectedIds.includes(id)\n                                )\n                            }\n                            onChange={handleSelectAll}\n                        />\n                    </TableCell>\n                )}\n                {Children.map(children, (field, index) =>\n                    isValidElement(field) ? (\n                        <DatagridHeaderCell\n                            className={clsx(\n                                DatagridClasses.headerCell,\n                                `column-${(field.props as any).source}`\n                            )}\n                            sort={sort}\n                            field={field}\n                            isSorting={\n                                sort.field ===\n                                ((field.props as any).sortBy ||\n                                    (field.props as any).source)\n                            }\n                            key={(field.props as any).source || index}\n                            resource={resource}\n                            updateSort={updateSort}\n                        />\n                    ) : null\n                )}\n            </TableRow>\n        </TableHead>\n    );\n};\n\nDatagridHeader.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    sort: PropTypes.exact({\n        field: PropTypes.string,\n        order: PropTypes.string,\n    }),\n    data: PropTypes.arrayOf(PropTypes.any),\n    hasExpand: PropTypes.bool,\n    hasBulkActions: PropTypes.bool,\n    isRowSelectable: PropTypes.func,\n    isRowExpandable: PropTypes.func,\n    onSelect: PropTypes.func,\n    onToggleItem: PropTypes.func,\n    resource: PropTypes.string,\n    selectedIds: PropTypes.arrayOf(PropTypes.any),\n    setSort: PropTypes.func,\n};\n\nexport interface DatagridHeaderProps<RecordType extends RaRecord = any> {\n    children?: React.ReactNode;\n    className?: string;\n    hasExpand?: boolean;\n    hasBulkActions?: boolean;\n    isRowSelectable?: (record: RecordType) => boolean;\n    isRowExpandable?: (record: RecordType) => boolean;\n    size?: 'medium' | 'small';\n    // can be injected when using the component without context\n    sort?: SortPayload;\n    data?: RecordType[];\n    onSelect?: (ids: Identifier[]) => void;\n    onToggleItem?: (id: Identifier) => void;\n    resource?: string;\n    selectedIds?: Identifier[];\n    setSort?: (sort: SortPayload) => void;\n}\n\nDatagridHeader.displayName = 'DatagridHeader';\n","import React, { ReactElement, ReactNode } from 'react';\nimport DatagridContext, { DatagridContextValue } from './DatagridContext';\n\nconst DatagridContextProvider = ({\n    children,\n    value,\n}: {\n    children: ReactNode;\n    value: DatagridContextValue;\n}): ReactElement => (\n    <DatagridContext.Provider value={value}>\n        {children}\n    </DatagridContext.Provider>\n);\n\nexport default DatagridContextProvider;\n","import * as React from 'react';\nimport {\n    Children,\n    ReactNode,\n    cloneElement,\n    isValidElement,\n    useCallback,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport { styled } from '@mui/material/styles';\nimport clsx from 'clsx';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport { lighten } from '@mui/material/styles';\nimport IconButton from '@mui/material/IconButton';\nimport CloseIcon from '@mui/icons-material/Close';\nimport {\n    useTranslate,\n    sanitizeListRestProps,\n    useListContext,\n    Identifier,\n} from 'ra-core';\n\nimport TopToolbar from '../layout/TopToolbar';\n\nexport const BulkActionsToolbar = (props: BulkActionsToolbarProps) => {\n    const {\n        label = 'ra.action.bulk_actions',\n        children,\n        className,\n        ...rest\n    } = props;\n    const {\n        filterValues,\n        resource,\n        selectedIds = [],\n        onUnselectItems,\n    } = useListContext(props);\n\n    const translate = useTranslate();\n\n    const handleUnselectAllClick = useCallback(() => {\n        onUnselectItems();\n    }, [onUnselectItems]);\n\n    return (\n        <Root className={className}>\n            <Toolbar\n                data-test=\"bulk-actions-toolbar\"\n                className={clsx(BulkActionsToolbarClasses.toolbar, {\n                    [BulkActionsToolbarClasses.collapsed]:\n                        selectedIds.length === 0,\n                })}\n                {...sanitizeListRestProps(rest)}\n            >\n                <div className={BulkActionsToolbarClasses.title}>\n                    <IconButton\n                        className={BulkActionsToolbarClasses.icon}\n                        aria-label={translate('ra.action.unselect')}\n                        title={translate('ra.action.unselect')}\n                        onClick={handleUnselectAllClick}\n                        size=\"small\"\n                    >\n                        <CloseIcon fontSize=\"small\" />\n                    </IconButton>\n                    <Typography color=\"inherit\" variant=\"subtitle1\">\n                        {translate(label, {\n                            _: label,\n                            smart_count: selectedIds.length,\n                        })}\n                    </Typography>\n                </div>\n                <TopToolbar className={BulkActionsToolbarClasses.topToolbar}>\n                    {Children.map(children, child =>\n                        isValidElement(child)\n                            ? cloneElement(child, {\n                                  filterValues,\n                                  resource,\n                                  selectedIds,\n                              })\n                            : null\n                    )}\n                </TopToolbar>\n            </Toolbar>\n        </Root>\n    );\n};\n\nBulkActionsToolbar.propTypes = {\n    children: PropTypes.node,\n    label: PropTypes.string,\n};\n\nexport interface BulkActionsToolbarProps {\n    children?: ReactNode;\n    label?: string;\n    selectedIds?: Identifier[];\n    className?: string;\n}\n\nconst PREFIX = 'RaBulkActionsToolbar';\n\nexport const BulkActionsToolbarClasses = {\n    toolbar: `${PREFIX}-toolbar`,\n    topToolbar: `${PREFIX}-topToolbar`,\n    buttons: `${PREFIX}-buttons`,\n    collapsed: `${PREFIX}-collapsed`,\n    title: `${PREFIX}-title`,\n    icon: `${PREFIX}-icon`,\n};\n\nconst Root = styled('div', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    position: 'relative',\n    [`& .${BulkActionsToolbarClasses.toolbar}`]: {\n        position: 'absolute',\n        left: 0,\n        right: 0,\n        zIndex: 3,\n        color:\n            theme.palette.mode === 'light'\n                ? theme.palette.primary.main\n                : theme.palette.text.primary,\n        justifyContent: 'space-between',\n        backgroundColor:\n            theme.palette.mode === 'light'\n                ? lighten(theme.palette.primary.light, 0.8)\n                : theme.palette.primary.dark,\n        minHeight: theme.spacing(6),\n        height: theme.spacing(6),\n        transform: `translateY(-${theme.spacing(6)})`,\n        transition: `${theme.transitions.create(\n            'height'\n        )}, ${theme.transitions.create(\n            'min-height'\n        )}, ${theme.transitions.create('transform')}`,\n        borderTopLeftRadius: theme.shape.borderRadius,\n        borderTopRightRadius: theme.shape.borderRadius,\n    },\n\n    [`& .${BulkActionsToolbarClasses.topToolbar}`]: {\n        paddingBottom: 0,\n        minHeight: 'auto',\n    },\n\n    [`& .${BulkActionsToolbarClasses.buttons}`]: {},\n\n    [`& .${BulkActionsToolbarClasses.collapsed}`]: {\n        minHeight: 0,\n        height: 0,\n        transform: `translateY(0)`,\n        overflowY: 'hidden',\n    },\n\n    [`& .${BulkActionsToolbarClasses.title}`]: {\n        display: 'flex',\n        flex: '0 0 auto',\n    },\n\n    [`& .${BulkActionsToolbarClasses.icon}`]: {\n        marginLeft: '-0.5em',\n        marginRight: '0.5em',\n    },\n}));\n","import * as React from 'react';\nimport { Children, ReactNode } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { FilterForm } from './FilterForm';\nimport { FilterButton } from './FilterButton';\nimport { FilterContext } from '../FilterContext';\n\n/**\n * Filter button/form combo\n *\n * @example\n *\n * const PostFilter = (props) => (\n *     <Filter {...props}>\n *         <TextInput label=\"Search\" source=\"q\" alwaysOn />\n *         <TextInput label=\"Title\" source=\"title\" defaultValue=\"Hello, World!\" />\n *     </Filter>\n * );\n *\n * export const PostList = (props) => (\n *     <List {...props} filters={<PostFilter />}>\n *         ...\n *     </List>\n * );\n *\n */\nexport const Filter = (props: FilterProps) => {\n    const { children } = props;\n    const renderButton = () => {\n        return <FilterButton className={FilterClasses.button} />;\n    };\n\n    const renderForm = () => {\n        return <FilterForm className={FilterClasses.form} />;\n    };\n\n    return (\n        <FilterContext.Provider value={Children.toArray(children)}>\n            {props.context === 'button' ? renderButton() : renderForm()}\n        </FilterContext.Provider>\n    );\n};\n\nFilter.propTypes = {\n    children: PropTypes.node,\n    classes: PropTypes.object,\n    context: PropTypes.oneOf(['form', 'button']),\n};\n\nconst PREFIX = 'RaFilter';\n\nexport const FilterClasses = {\n    button: `${PREFIX}-button`,\n    form: `${PREFIX}-form`,\n};\n\nexport interface FilterProps {\n    children: ReactNode;\n    context?: 'form' | 'button';\n    variant?: string;\n}\n","import * as React from 'react';\nimport {\n    HtmlHTMLAttributes,\n    ReactNode,\n    useEffect,\n    useCallback,\n    useContext,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport { styled } from '@mui/material/styles';\nimport {\n    ListFilterContextValue,\n    useListContext,\n    useResourceContext,\n} from 'ra-core';\nimport {\n    FieldValues,\n    FormProvider,\n    useForm,\n    useFormContext,\n} from 'react-hook-form';\nimport lodashSet from 'lodash/set';\nimport lodashUnset from 'lodash/unset';\nimport lodashGet from 'lodash/get';\nimport cloneDeep from 'lodash/cloneDeep';\n\nimport { FilterFormInput } from './FilterFormInput';\nimport { FilterContext } from '../FilterContext';\n\nexport const FilterForm = (props: FilterFormProps) => {\n    const { defaultValues, filters: filtersProps, ...rest } = props;\n\n    const { setFilters, displayedFilters, filterValues } = useListContext(\n        props\n    );\n    const filters = useContext(FilterContext) || filtersProps;\n\n    const mergedInitialValuesWithDefaultValues = mergeInitialValuesWithDefaultValues(\n        defaultValues || filterValues,\n        filters\n    );\n\n    const form = useForm({\n        defaultValues: mergedInitialValuesWithDefaultValues,\n    });\n\n    // Reapply filterValues when the URL changes or a user removes a filter\n    useEffect(() => {\n        const newValues = getFilterFormValues(form.getValues(), filterValues);\n        form.reset(newValues);\n    }, [filterValues, form]);\n\n    useEffect(() => {\n        const subscription = form.watch(async (values, { name, type }) => {\n            // We must check whether the form is valid as watch will not check that for us.\n            // We can't rely on form state as it might not be synchronized yet\n            const isFormValid = await form.trigger();\n\n            if (isFormValid) {\n                if (lodashGet(values, name) === '') {\n                    const newValues = cloneDeep(values);\n                    lodashUnset(newValues, name);\n                    setFilters(newValues, displayedFilters);\n                } else {\n                    setFilters(values, displayedFilters);\n                }\n            }\n        });\n        return () => subscription.unsubscribe();\n    }, [displayedFilters, form, setFilters]);\n\n    return (\n        <FormProvider {...form}>\n            <FilterFormBase\n                onSubmit={handleFormSubmit}\n                filters={filters}\n                {...rest}\n            />\n        </FormProvider>\n    );\n};\n\nexport type FilterFormProps = FilterFormBaseProps & {\n    defaultValues?: FieldValues;\n};\n\nexport const FilterFormBase = (props: FilterFormBaseProps) => {\n    const { className, filters, ...rest } = props;\n    const resource = useResourceContext(props);\n    const form = useFormContext();\n    const { displayedFilters = {}, hideFilter } = useListContext(props);\n\n    useEffect(() => {\n        filters.forEach((filter: JSX.Element) => {\n            if (filter.props.alwaysOn && filter.props.defaultValue) {\n                throw new Error(\n                    'Cannot use alwaysOn and defaultValue on a filter input. Please set the filterDefaultValues props on the <List> element instead.'\n                );\n            }\n        });\n    }, [filters]);\n\n    const getShownFilters = () => {\n        const values = form.getValues();\n        return filters.filter((filterElement: JSX.Element) => {\n            const filterValue = lodashGet(values, filterElement.props.source);\n            return (\n                filterElement.props.alwaysOn ||\n                displayedFilters[filterElement.props.source] ||\n                (filterValue !== '' && typeof filterValue !== 'undefined')\n            );\n        });\n    };\n\n    const handleHide = useCallback(\n        event => hideFilter(event.currentTarget.dataset.key),\n        [hideFilter]\n    );\n\n    return (\n        <StyledForm\n            className={className}\n            {...sanitizeRestProps(rest)}\n            onSubmit={handleSubmit}\n        >\n            {getShownFilters().map((filterElement: JSX.Element) => (\n                <FilterFormInput\n                    key={filterElement.props.source}\n                    filterElement={filterElement}\n                    handleHide={handleHide}\n                    resource={resource}\n                />\n            ))}\n            <div className={FilterFormClasses.clearFix} />\n        </StyledForm>\n    );\n};\n\nconst handleSubmit = event => {\n    event.preventDefault();\n    return false;\n};\n\nFilterFormBase.propTypes = {\n    resource: PropTypes.string,\n    filters: PropTypes.arrayOf(PropTypes.node).isRequired,\n    displayedFilters: PropTypes.object,\n    hideFilter: PropTypes.func,\n    initialValues: PropTypes.object,\n    className: PropTypes.string,\n};\n\nconst sanitizeRestProps = ({\n    displayedFilters,\n    filterValues,\n    hasCreate,\n    hideFilter,\n    setFilters,\n    resource,\n    ...props\n}: Partial<FilterFormBaseProps> & { hasCreate?: boolean }) => props;\n\nexport type FilterFormBaseProps = Omit<\n    HtmlHTMLAttributes<HTMLFormElement>,\n    'children'\n> &\n    Partial<ListFilterContextValue> & {\n        className?: string;\n        resource?: string;\n        filters?: ReactNode[];\n    };\n\nexport const mergeInitialValuesWithDefaultValues = (\n    initialValues,\n    filters\n) => ({\n    ...filters\n        .filter(\n            (filterElement: JSX.Element) =>\n                filterElement.props.alwaysOn && filterElement.props.defaultValue\n        )\n        .reduce(\n            (acc, filterElement: JSX.Element) =>\n                lodashSet(\n                    { ...acc },\n                    filterElement.props.source,\n                    filterElement.props.defaultValue\n                ),\n            {} as any\n        ),\n    ...initialValues,\n});\n\nconst handleFormSubmit = () => {};\n\nconst PREFIX = 'RaFilterForm';\n\nexport const FilterFormClasses = {\n    clearFix: `${PREFIX}-clearFix`,\n};\n\nconst StyledForm = styled('form', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    marginTop: theme.spacing(-0.5),\n    marginBottom: theme.spacing(0.5),\n    minHeight: theme.spacing(8),\n    display: 'flex',\n    alignItems: 'flex-end',\n    flexWrap: 'wrap',\n    pointerEvents: 'none',\n\n    [`& .${FilterFormClasses.clearFix}`]: { clear: 'right' },\n    '& .MuiFormHelperText-root': { display: 'none' },\n}));\n\n/**\n * Because we are using controlled inputs with react-hook-form, we must provide a default value\n * for each input when resetting the form. (see https://react-hook-form.com/api/useform/reset).\n * To ensure we don't provide undefined which will result to the current input value being reapplied\n * and due to the dynamic nature of the filter form, we rebuild the filter form values from its current\n * values and make sure to pass at least an empty string for each input.\n */\nexport const getFilterFormValues = (\n    formValues: Record<string, any>,\n    filterValues: Record<string, any>\n) => {\n    return Object.keys(formValues).reduce((acc, key) => {\n        acc[key] = getInputValue(formValues, key, filterValues);\n        return acc;\n    }, cloneDeep(filterValues) ?? {});\n};\n\nconst getInputValue = (\n    formValues: Record<string, any>,\n    key: string,\n    filterValues: Record<string, any>\n) => {\n    if (formValues[key] === undefined || formValues[key] === null) {\n        return '';\n    }\n    if (Array.isArray(formValues[key])) {\n        return lodashGet(filterValues, key, '');\n    }\n    if (formValues[key] instanceof Date) {\n        return lodashGet(filterValues, key, '');\n    }\n    if (typeof formValues[key] === 'object') {\n        return Object.keys(formValues[key]).reduce((acc, innerKey) => {\n            acc[innerKey] = getInputValue(\n                formValues[key],\n                innerKey,\n                (filterValues || {})[key] ?? {}\n            );\n            return acc;\n        }, {});\n    }\n    return lodashGet(filterValues, key, '');\n};\n","import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport IconButton from '@mui/material/IconButton';\nimport ActionHide from '@mui/icons-material/HighlightOff';\nimport clsx from 'clsx';\nimport { useResourceContext, useTranslate } from 'ra-core';\n\nexport const FilterFormInput = props => {\n    const { filterElement, handleHide, className } = props;\n    const resource = useResourceContext(props);\n    const translate = useTranslate();\n\n    return (\n        <Root\n            data-source={filterElement.props.source}\n            className={clsx('filter-field', className)}\n        >\n            {!filterElement.props.alwaysOn && (\n                <IconButton\n                    className={clsx(\n                        'hide-filter',\n                        FilterFormInputClasses.hideButton\n                    )}\n                    onClick={handleHide}\n                    data-key={filterElement.props.source}\n                    title={translate('ra.action.remove_filter')}\n                    size=\"small\"\n                >\n                    <ActionHide />\n                </IconButton>\n            )}\n            {React.cloneElement(filterElement, {\n                resource,\n                record: emptyRecord,\n                size: 'small',\n                helperText: false,\n                // ignore defaultValue in Field because it was already set in Form (via mergedInitialValuesWithDefaultValues)\n                defaultValue: undefined,\n            })}\n            <div className={FilterFormInputClasses.spacer}>&nbsp;</div>\n        </Root>\n    );\n};\n\nFilterFormInput.propTypes = {\n    filterElement: PropTypes.node,\n    handleHide: PropTypes.func,\n    resource: PropTypes.string,\n};\n\nconst PREFIX = 'RaFilterFormInput';\n\nexport const FilterFormInputClasses = {\n    spacer: `${PREFIX}-spacer`,\n    hideButton: `${PREFIX}-hideButton`,\n};\n\nconst Root = styled('div', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    display: 'flex',\n    alignItems: 'flex-end',\n    pointerEvents: 'auto',\n\n    [`& .${FilterFormInputClasses.spacer}`]: { width: theme.spacing(2) },\n    [`& .${FilterFormInputClasses.hideButton}`]: {\n        marginBottom: theme.spacing(1),\n    },\n}));\n\nconst emptyRecord = {};\n","import * as React from 'react';\n\nexport type FilterContextType = React.ReactNode[];\n\n/**\n * Make filters accessible to sub components\n */\nexport const FilterContext = React.createContext<FilterContextType>(undefined);\n","import * as React from 'react';\nimport {\n    useState,\n    useCallback,\n    useRef,\n    ReactNode,\n    HtmlHTMLAttributes,\n    useContext,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport { Menu, MenuItem, styled } from '@mui/material';\nimport ContentFilter from '@mui/icons-material/FilterList';\nimport lodashGet from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport { useListContext, useResourceContext, useTranslate } from 'ra-core';\nimport { stringify } from 'query-string';\nimport { useNavigate } from 'react-router';\n\nimport { FilterButtonMenuItem } from './FilterButtonMenuItem';\nimport { Button } from '../../button';\nimport { FilterContext } from '../FilterContext';\nimport { extractValidSavedQueries, useSavedQueries } from './useSavedQueries';\nimport { AddSavedQueryDialog } from './AddSavedQueryDialog';\nimport { RemoveSavedQueryDialog } from './RemoveSavedQueryDialog';\n\nexport const FilterButton = (props: FilterButtonProps): JSX.Element => {\n    const { filters: filtersProp, className, ...rest } = props;\n    const filters = useContext(FilterContext) || filtersProp;\n    const resource = useResourceContext(props);\n    const translate = useTranslate();\n    const [savedQueries] = useSavedQueries(resource);\n    const navigate = useNavigate();\n    const {\n        displayedFilters = {},\n        filterValues,\n        perPage,\n        showFilter,\n        sort,\n    } = useListContext(props);\n    const hasFilterValues = !isEqual(filterValues, {});\n    const validSavedQueries = extractValidSavedQueries(savedQueries);\n    const hasSavedCurrentQuery = validSavedQueries.some(savedQuery =>\n        isEqual(savedQuery.value, {\n            filter: filterValues,\n            sort,\n            perPage,\n            displayedFilters,\n        })\n    );\n    const [open, setOpen] = useState(false);\n    const anchorEl = useRef();\n\n    if (filters === undefined) {\n        throw new Error('FilterButton requires filters prop to be set');\n    }\n\n    const hiddenFilters = filters.filter(\n        (filterElement: JSX.Element) =>\n            !filterElement.props.alwaysOn &&\n            !displayedFilters[filterElement.props.source] &&\n            typeof lodashGet(filterValues, filterElement.props.source) ===\n                'undefined'\n    );\n\n    const handleClickButton = useCallback(\n        event => {\n            // This prevents ghost click.\n            event.preventDefault();\n            setOpen(true);\n            anchorEl.current = event.currentTarget;\n        },\n        [anchorEl, setOpen]\n    );\n\n    const handleRequestClose = useCallback(() => {\n        setOpen(false);\n    }, [setOpen]);\n\n    const handleShow = useCallback(\n        ({ source, defaultValue }) => {\n            showFilter(source, defaultValue === '' ? undefined : defaultValue);\n            setOpen(false);\n        },\n        [showFilter, setOpen]\n    );\n\n    // add query dialog state\n    const [addSavedQueryDialogOpen, setAddSavedQueryDialogOpen] = useState(\n        false\n    );\n    const hideAddSavedQueryDialog = (): void => {\n        setAddSavedQueryDialogOpen(false);\n    };\n    const showAddSavedQueryDialog = (): void => {\n        setOpen(false);\n        setAddSavedQueryDialogOpen(true);\n    };\n\n    // remove query dialog state\n    const [\n        removeSavedQueryDialogOpen,\n        setRemoveSavedQueryDialogOpen,\n    ] = useState(false);\n    const hideRemoveSavedQueryDialog = (): void => {\n        setRemoveSavedQueryDialogOpen(false);\n    };\n    const showRemoveSavedQueryDialog = (): void => {\n        setOpen(false);\n        setRemoveSavedQueryDialogOpen(true);\n    };\n\n    if (hiddenFilters.length === 0 && !hasFilterValues) {\n        return null;\n    }\n    return (\n        <Root className={className} {...sanitizeRestProps(rest)}>\n            <Button\n                className=\"add-filter\"\n                label=\"ra.action.add_filter\"\n                aria-haspopup=\"true\"\n                onClick={handleClickButton}\n            >\n                <ContentFilter />\n            </Button>\n            <Menu\n                open={open}\n                anchorEl={anchorEl.current}\n                onClose={handleRequestClose}\n            >\n                {hiddenFilters.map((filterElement: JSX.Element, index) => (\n                    <FilterButtonMenuItem\n                        key={filterElement.props.source}\n                        filter={filterElement}\n                        resource={resource}\n                        onShow={handleShow}\n                        autoFocus={index === 0}\n                    />\n                ))}\n                {validSavedQueries.map((savedQuery, index) =>\n                    isEqual(savedQuery.value, {\n                        filter: filterValues,\n                        sort,\n                        perPage,\n                        displayedFilters,\n                    }) ? (\n                        <MenuItem\n                            onClick={showRemoveSavedQueryDialog}\n                            key={index}\n                        >\n                            {translate(\n                                'ra.saved_queries.remove_label_with_name',\n                                {\n                                    _: 'Remove query \"%{name}\"',\n                                    name: savedQuery.label,\n                                }\n                            )}\n                        </MenuItem>\n                    ) : (\n                        <MenuItem\n                            onClick={(): void => {\n                                navigate({\n                                    search: stringify({\n                                        filter: JSON.stringify(\n                                            savedQuery.value.filter\n                                        ),\n                                        sort: savedQuery.value.sort.field,\n                                        order: savedQuery.value.sort.order,\n                                        page: 1,\n                                        perPage: savedQuery.value.perPage,\n                                        displayedFilters: JSON.stringify(\n                                            savedQuery.value.displayedFilters\n                                        ),\n                                    }),\n                                });\n                                setOpen(false);\n                            }}\n                            key={index}\n                        >\n                            {savedQuery.label}\n                        </MenuItem>\n                    )\n                )}\n                {hasFilterValues && !hasSavedCurrentQuery ? (\n                    <MenuItem onClick={showAddSavedQueryDialog}>\n                        {translate('ra.saved_queries.new_label', {\n                            _: 'Save current query...',\n                        })}\n                    </MenuItem>\n                ) : null}\n            </Menu>\n            <AddSavedQueryDialog\n                open={addSavedQueryDialogOpen}\n                onClose={hideAddSavedQueryDialog}\n            />\n            <RemoveSavedQueryDialog\n                open={removeSavedQueryDialogOpen}\n                onClose={hideRemoveSavedQueryDialog}\n            />\n        </Root>\n    );\n};\n\nconst sanitizeRestProps = ({\n    displayedFilters = null,\n    filterValues = null,\n    showFilter = null,\n    ...rest\n}) => rest;\n\nFilterButton.propTypes = {\n    resource: PropTypes.string,\n    filters: PropTypes.arrayOf(PropTypes.node),\n    displayedFilters: PropTypes.object,\n    filterValues: PropTypes.object,\n    showFilter: PropTypes.func,\n    className: PropTypes.string,\n};\n\nexport interface FilterButtonProps extends HtmlHTMLAttributes<HTMLDivElement> {\n    className?: string;\n    resource?: string;\n    filterValues?: any;\n    showFilter?: (filterName: string, defaultValue: any) => void;\n    displayedFilters?: any;\n    filters?: ReactNode[];\n}\n\nconst PREFIX = 'RaFilterButton';\n\nconst Root = styled('div', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    display: 'inline-block',\n}));\n","import * as React from 'react';\nimport { forwardRef, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport MenuItem from '@mui/material/MenuItem';\nimport { FieldTitle, useResourceContext } from 'ra-core';\n\nexport const FilterButtonMenuItem = forwardRef<any, FilterButtonMenuItemProps>(\n    (props, ref) => {\n        const { filter, onShow, autoFocus } = props;\n        const resource = useResourceContext(props);\n        const handleShow = useCallback(() => {\n            onShow({\n                source: filter.props.source,\n                defaultValue: filter.props.defaultValue,\n            });\n        }, [filter.props.defaultValue, filter.props.source, onShow]);\n\n        return (\n            <MenuItem\n                className=\"new-filter-item\"\n                data-key={filter.props.source}\n                data-default-value={filter.props.defaultValue}\n                key={filter.props.source}\n                onClick={handleShow}\n                autoFocus={autoFocus}\n                ref={ref}\n                disabled={filter.props.disabled}\n            >\n                <FieldTitle\n                    label={filter.props.label}\n                    source={filter.props.source}\n                    resource={resource}\n                />\n            </MenuItem>\n        );\n    }\n);\n\nFilterButtonMenuItem.propTypes = {\n    filter: PropTypes.element.isRequired,\n    onShow: PropTypes.func.isRequired,\n    resource: PropTypes.string,\n    autoFocus: PropTypes.bool,\n};\n\nexport interface FilterButtonMenuItemProps {\n    filter: JSX.Element;\n    onShow: (params: { source: string; defaultValue: any }) => void;\n    resource: string;\n    autoFocus?: boolean;\n}\n","import { SortPayload, useStore } from 'ra-core';\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport const useSavedQueries = (resource: string) => {\n    return useStore<SavedQuery[]>(`${resource}.savedQueries`, []);\n};\n\nexport interface SavedQuery {\n    label: string;\n    value: {\n        filter?: any;\n        displayedFilters?: any[];\n        sort?: SortPayload;\n        perPage?: number;\n    };\n}\n\nexport const extractValidSavedQueries = (savedQueries: SavedQuery[]) => {\n    if (Array.isArray(savedQueries)) {\n        return savedQueries.filter(query => isValidSavedQuery(query));\n    }\n\n    return [];\n};\n\nexport const areValidSavedQueries = (savedQueries: SavedQuery[]) => {\n    if (\n        Array.isArray(savedQueries) &&\n        savedQueries.every(query => isValidSavedQuery(query))\n    ) {\n        return true;\n    }\n};\n\nexport const isValidSavedQuery = (savedQuery: SavedQuery) => {\n    if (\n        savedQuery.label &&\n        typeof savedQuery.label === 'string' &&\n        savedQuery.value &&\n        typeof Array.isArray(savedQuery.value.displayedFilters) &&\n        typeof savedQuery.value.perPage === 'number' &&\n        typeof savedQuery.value.sort?.field === 'string' &&\n        typeof savedQuery.value.sort?.order === 'string' &&\n        typeof savedQuery.value.filter === 'object'\n    ) {\n        return true;\n    }\n\n    return false;\n};\n","import * as React from 'react';\nimport { ReactElement, ChangeEvent, FormEvent, useState } from 'react';\nimport { useListContext, useTranslate } from 'ra-core';\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    TextField,\n} from '@mui/material';\n\nimport { extractValidSavedQueries, useSavedQueries } from './useSavedQueries';\n\nexport const AddSavedQueryDialog = ({\n    open,\n    onClose,\n}: AddSavedQueryDialogProps): ReactElement => {\n    const translate = useTranslate();\n    const {\n        resource,\n        filterValues,\n        displayedFilters,\n        sort,\n        perPage,\n    } = useListContext();\n\n    const [savedQueries, setSavedQueries] = useSavedQueries(resource);\n\n    // input state\n    const [queryName, setQueryName] = useState('');\n    const handleQueryNameChange = (\n        event: ChangeEvent<HTMLInputElement>\n    ): void => {\n        setQueryName(event.target.value);\n    };\n\n    const handleFormSubmit = (e: FormEvent<HTMLFormElement>): void => {\n        e.preventDefault();\n        addQuery();\n    };\n\n    const addQuery = (): void => {\n        const newSavedQuery = {\n            label: queryName,\n            value: {\n                filter: filterValues,\n                sort,\n                perPage,\n                displayedFilters,\n            },\n        };\n        const newSavedQueries = extractValidSavedQueries(savedQueries);\n        setSavedQueries(newSavedQueries.concat(newSavedQuery));\n        setQueryName('');\n        onClose();\n    };\n\n    return (\n        <Dialog\n            open={open}\n            onClose={onClose}\n            aria-labelledby=\"form-dialog-title\"\n        >\n            <DialogTitle id=\"form-dialog-title\">\n                {translate('ra.saved_queries.new_dialog_title', {\n                    _: 'Save current query as',\n                })}\n            </DialogTitle>\n            <DialogContent>\n                <form onSubmit={handleFormSubmit}>\n                    <TextField\n                        // eslint-disable-next-line jsx-a11y/no-autofocus\n                        autoFocus\n                        margin=\"dense\"\n                        id=\"name\"\n                        label={translate('ra.saved_queries.query_name', {\n                            _: 'Query name',\n                        })}\n                        fullWidth\n                        value={queryName}\n                        onChange={handleQueryNameChange}\n                    />\n                </form>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={onClose}>\n                    {translate('ra.action.cancel')}\n                </Button>\n                <Button onClick={addQuery} color=\"primary\">\n                    {translate('ra.action.save')}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport interface AddSavedQueryDialogProps {\n    open: boolean;\n    onClose: () => void;\n}\n","import * as React from 'react';\nimport { ReactElement } from 'react';\nimport isEqual from 'lodash/isEqual';\nimport { useListContext, useTranslate } from 'ra-core';\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n} from '@mui/material';\n\nimport { useSavedQueries, extractValidSavedQueries } from './useSavedQueries';\n\nexport interface RemoveSavedQueryDialogProps {\n    open: boolean;\n    onClose: () => void;\n}\n\nexport const RemoveSavedQueryDialog = ({\n    open,\n    onClose,\n}: RemoveSavedQueryDialogProps): ReactElement => {\n    const translate = useTranslate();\n    const {\n        resource,\n        filterValues,\n        sort,\n        perPage,\n        displayedFilters,\n    } = useListContext();\n\n    const [savedQueries, setSavedQueries] = useSavedQueries(resource);\n\n    const removeQuery = (): void => {\n        let savedQueryToRemove = {\n            filter: filterValues,\n            sort,\n            perPage,\n            displayedFilters,\n        };\n\n        const newSavedQueries = extractValidSavedQueries(savedQueries);\n        const index = newSavedQueries.findIndex(savedFilter =>\n            isEqual(savedFilter.value, savedQueryToRemove)\n        );\n        setSavedQueries([\n            ...newSavedQueries.slice(0, index),\n            ...newSavedQueries.slice(index + 1),\n        ]);\n        onClose();\n    };\n\n    return (\n        <Dialog\n            open={open}\n            onClose={onClose}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n        >\n            <DialogTitle id=\"alert-dialog-title\">\n                {translate('ra.saved_queries.remove_dialog_title', {\n                    _: 'Remove saved query?',\n                })}\n            </DialogTitle>\n            <DialogContent>\n                <DialogContentText>\n                    {translate('ra.saved_queries.remove_message', {\n                        _:\n                            'Are you sure you want to remove that item from your list of saved queries?',\n                    })}\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={onClose}>\n                    {translate('ra.action.cancel')}\n                </Button>\n                <Button\n                    onClick={removeQuery}\n                    color=\"primary\"\n                    // eslint-disable-next-line jsx-a11y/no-autofocus\n                    autoFocus\n                >\n                    {translate('ra.action.confirm')}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n","import * as React from 'react';\nimport { ReactNode } from 'react';\nimport { Box, BoxProps, List, Typography } from '@mui/material';\nimport { useTranslate } from 'ra-core';\n\n/**\n * Header and container for a list of filter list items\n *\n * Expects 2 props, and a list of <FilterListItem> as children:\n *\n * - label: The label for this filter section. Will be translated.\n * - icon: An icon react element\n *\n * @see FilterListItem\n *\n * @example\n *\n * import * as React from 'react';\n * import { Card, CardContent } from '@mui/material';\n * import MailIcon from '@mui/icons-material/MailOutline';\n * import { FilterList, FilterListItem } from 'react-admin';\n *\n * const FilterSidebar = () => (\n *     <Card>\n *         <CardContent>\n *             <FilterList\n *                 label=\"Subscribed to newsletter\"\n *                 icon={<MailIcon />}\n *             >\n *                 <FilterListItem\n *                     label=\"Yes\"\n *                     value={{ has_newsletter: true }}\n *                  />\n *                 <FilterListItem\n *                     label=\"No\"\n *                     value={{ has_newsletter: false }}\n *                  />\n *             </FilterList>\n *         </CardContent>\n *     </Card>\n * );\n */\nexport const FilterList = (props: FilterListProps) => {\n    const { label, icon, children, ...rest } = props;\n    const translate = useTranslate();\n    return (\n        <Box {...rest}>\n            <Box mt={2} display=\"flex\" alignItems=\"center\">\n                <Box mr={1}>{icon}</Box>\n                <Typography variant=\"overline\">{translate(label)}</Typography>\n            </Box>\n            <List dense disablePadding>\n                {children}\n            </List>\n        </Box>\n    );\n};\n\nexport interface FilterListProps extends BoxProps {\n    label: string;\n    icon: ReactNode;\n}\n","import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { memo, isValidElement, ReactElement } from 'react';\nimport {\n    IconButton,\n    ListItem,\n    ListItemButton,\n    ListItemProps,\n    ListItemText,\n    ListItemSecondaryAction,\n} from '@mui/material';\nimport CancelIcon from '@mui/icons-material/CancelOutlined';\nimport { useTranslate, useListFilterContext, shallowEqual } from 'ra-core';\nimport matches from 'lodash/matches';\nimport pickBy from 'lodash/pickBy';\n\nconst arePropsEqual = (prevProps, nextProps) =>\n    prevProps.label === nextProps.label &&\n    shallowEqual(prevProps.value, nextProps.value);\n\n/**\n * Button to enable/disable a list filter.\n *\n * Expects 2 props:\n *\n * - label: The text (or React element) to be displayed for this item.\n *   If it's a string, the component will translate it.\n * - value: An object to be merged into the filter value when enabling the filter\n *   (e.g. { is_published: true, published_at_gte: '2020-07-08' })\n *\n * @example\n *\n * import * as React from 'react';\n * import { Card, CardContent } from '@mui/material';\n * import MailIcon from '@mui/icons-material/MailOutline';\n * import { FilterList, FilterListItem } from 'react-admin';\n *\n * const FilterSidebar = () => (\n *     <Card>\n *         <CardContent>\n *             <FilterList\n *                 label=\"Subscribed to newsletter\"\n *                 icon={<MailIcon />}\n *             >\n *                 <FilterListItem\n *                     label=\"Yes\"\n *                     value={{ has_newsletter: true }}\n *                  />\n *                 <FilterListItem\n *                     label=\"No\"\n *                     value={{ has_newsletter: false }}\n *                  />\n *             </FilterList>\n *         </CardContent>\n *     </Card>\n * );\n *\n * @example // The value prop can contain multiple keys\n *\n * import * as React from 'react';\n * import {\n *     endOfYesterday,\n *     startOfWeek,\n *     subWeeks,\n *     startOfMonth,\n *     subMonths,\n * } from 'date-fns';\n * import { Card, CardContent } from '@mui/material';\n * import AccessTimeIcon from '@mui/icons-material/AccessTime';\n * import { FilterList, FilterListItem } from 'react-admin';\n *\n * const FilterSidebar = () => (\n *     <Card>\n *         <CardContent>\n *             <FilterList\n *                 label=\"Last visited\"\n *                 icon={<AccessTimeIcon />}\n *             >\n *                 <FilterListItem\n *                     label=\"Today\"\n *                     value={{\n *                         last_seen_gte: endOfYesterday().toISOString(),\n *                         last_seen_lte: undefined,\n *                     }}\n *                 />\n *                 <FilterListItem\n *                     label=\"This week\"\n *                     value={{\n *                         last_seen_gte: startOfWeek(\n *                             new Date()\n *                         ).toISOString(),\n *                         last_seen_lte: undefined,\n *                     }}\n *                 />\n *                 <FilterListItem\n *                     label=\"Last week\"\n *                     value={{\n *                         last_seen_gte: subWeeks(\n *                             startOfWeek(new Date()),\n *                             1\n *                         ).toISOString(),\n *                         last_seen_lte: startOfWeek(\n *                             new Date()\n *                         ).toISOString(),\n *                     }}\n *                 />\n *                 <FilterListItem\n *                     label=\"This month\"\n *                     value={{\n *                         last_seen_gte: startOfMonth(\n *                             new Date()\n *                         ).toISOString(),\n *                         last_seen_lte: undefined,\n *                     }}\n *                 />\n *                 <FilterListItem\n *                     label=\"Last month\"\n *                     value={{\n *                         last_seen_gte: subMonths(\n *                             startOfMonth(new Date()),\n *                             1\n *                         ).toISOString(),\n *                         last_seen_lte: startOfMonth(\n *                             new Date()\n *                         ).toISOString(),\n *                     }}\n *                 />\n *                 <FilterListItem\n *                     label=\"Earlier\"\n *                     value={{\n *                         last_seen_gte: undefined,\n *                         last_seen_lte: subMonths(\n *                             startOfMonth(new Date()),\n *                             1\n *                         ).toISOString(),\n *                     }}\n *                 />\n *             </FilterList>\n *         </CardContent>\n *     </Card>\n * );\n */\nexport const FilterListItem = memo((props: FilterListItemProps) => {\n    const { label, value, ...rest } = props;\n    const { filterValues, setFilters } = useListFilterContext();\n    const translate = useTranslate();\n\n    const isSelected = matches(\n        pickBy(value, val => typeof val !== 'undefined')\n    )(filterValues);\n\n    const addFilter = () => {\n        setFilters({ ...filterValues, ...value }, null, false);\n    };\n\n    const removeFilter = () => {\n        const keysToRemove = Object.keys(value);\n        const filters = Object.keys(filterValues).reduce(\n            (acc, key) =>\n                keysToRemove.includes(key)\n                    ? acc\n                    : { ...acc, [key]: filterValues[key] },\n            {}\n        );\n\n        setFilters(filters, null, false);\n    };\n\n    const toggleFilter = () => (isSelected ? removeFilter() : addFilter());\n\n    return (\n        <StyledListItem\n            onClick={toggleFilter}\n            selected={isSelected}\n            disablePadding\n            {...rest}\n        >\n            <ListItemButton\n                disableGutters\n                className={FilterListItemClasses.listItemButton}\n            >\n                <ListItemText\n                    primary={\n                        isValidElement(label)\n                            ? label\n                            : translate(label, { _: label })\n                    }\n                    className={FilterListItemClasses.listItemText}\n                    data-selected={isSelected ? 'true' : 'false'}\n                />\n                {isSelected && (\n                    <ListItemSecondaryAction>\n                        <IconButton\n                            size=\"small\"\n                            onClick={event => {\n                                event.stopPropagation();\n                                toggleFilter();\n                            }}\n                        >\n                            <CancelIcon />\n                        </IconButton>\n                    </ListItemSecondaryAction>\n                )}\n            </ListItemButton>\n        </StyledListItem>\n    );\n}, arePropsEqual);\n\nconst PREFIX = 'RaFilterListItem';\n\nexport const FilterListItemClasses = {\n    listItemButton: `${PREFIX}-listItemButton`,\n    listItemText: `${PREFIX}-listItemText`,\n};\n\nconst StyledListItem = styled(ListItem, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    [`& .${FilterListItemClasses.listItemButton}`]: {\n        paddingRight: '2em',\n        paddingLeft: '2em',\n    },\n    [`& .${FilterListItemClasses.listItemText}`]: {\n        margin: 0,\n    },\n}));\n\nexport interface FilterListItemProps extends Omit<ListItemProps, 'value'> {\n    label: string | ReactElement;\n    value: any;\n}\n","import * as React from 'react';\nimport { ChangeEvent, memo, useMemo } from 'react';\nimport { InputAdornment } from '@mui/material';\nimport { SxProps } from '@mui/system';\nimport SearchIcon from '@mui/icons-material/Search';\nimport { Form, useTranslate, useListFilterContext } from 'ra-core';\n\nimport { TextInput } from '../../input';\n\n/**\n * Form and search input for doing a full-text search filter.\n *\n * Triggers a search on change (with debounce).\n *\n * @example\n *\n * const FilterPanel = () => (\n *     <Card>\n *         <CardContent>\n *             <FilterLiveSearch source=\"title\" />\n *         </CardContent>\n *     </Card>\n * );\n */\nexport const FilterLiveSearch = memo(\n    (props: {\n        source?: string;\n        sx?: SxProps;\n        variant?: 'filled' | 'outlined';\n    }) => {\n        const { source = 'q', variant, ...rest } = props;\n        const { filterValues, setFilters } = useListFilterContext();\n        const translate = useTranslate();\n\n        const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n            if (event.target) {\n                setFilters(\n                    { ...filterValues, [source]: event.target.value },\n                    null\n                );\n            } else {\n                const { [source]: _, ...filters } = filterValues;\n                setFilters(filters, null);\n            }\n        };\n\n        const initialValues = useMemo(\n            () => ({\n                [source]: filterValues[source],\n            }),\n            [filterValues, source]\n        );\n\n        const onSubmit = () => undefined;\n        let label = translate('ra.action.search');\n\n        return (\n            <Form defaultValues={initialValues} onSubmit={onSubmit}>\n                <TextInput\n                    resettable\n                    helperText={false}\n                    source={source}\n                    InputProps={{\n                        endAdornment: (\n                            <InputAdornment position=\"end\">\n                                <SearchIcon color=\"disabled\" />\n                            </InputAdornment>\n                        ),\n                    }}\n                    onChange={handleChange}\n                    size=\"small\"\n                    {...(variant === 'outlined'\n                        ? { variant: 'outlined', label }\n                        : {\n                              placeholder: label,\n                              label: false,\n                              hiddenLabel: true,\n                          })}\n                    {...rest}\n                />\n            </Form>\n        );\n    }\n);\n","import * as React from 'react';\nimport { ReactElement, useState } from 'react';\nimport { IconButton, IconButtonProps } from '@mui/material';\nimport AddIcon from '@mui/icons-material/AddCircleOutline';\nimport { useTranslate } from 'ra-core';\n\nimport { AddSavedQueryDialog } from './AddSavedQueryDialog';\n\nexport const AddSavedQueryIconButton = (\n    props: IconButtonProps\n): ReactElement => {\n    const [open, setOpen] = useState(false);\n    const handleOpen = (): void => {\n        setOpen(true);\n    };\n    const handleClose = (): void => {\n        setOpen(false);\n    };\n    const translate = useTranslate();\n\n    return (\n        <>\n            <IconButton\n                aria-label={translate('ra.saved_queries.new_label', {\n                    _: 'Save current query...',\n                })}\n                size=\"small\"\n                onClick={handleOpen}\n                {...props}\n            >\n                <AddIcon />\n            </IconButton>\n\n            <AddSavedQueryDialog open={open} onClose={handleClose} />\n        </>\n    );\n};\n","import * as React from 'react';\nimport { ReactElement, useState } from 'react';\nimport { IconButton, IconButtonProps } from '@mui/material';\nimport RemoveIcon from '@mui/icons-material/RemoveCircleOutline';\nimport { useTranslate } from 'ra-core';\n\nimport { RemoveSavedQueryDialog } from './RemoveSavedQueryDialog';\n\nexport const RemoveSavedQueryIconButton = (\n    props: IconButtonProps\n): ReactElement => {\n    const [confirmationOpen, setConfirmationOpen] = useState(false);\n    const handleConfirmationClose = (): void => {\n        setConfirmationOpen(false);\n    };\n\n    const handleRemoveQueryClick = (): void => {\n        setConfirmationOpen(true);\n    };\n    const translate = useTranslate();\n\n    return (\n        <>\n            <IconButton\n                aria-label={translate('ra.saved_queries.remove_label', {\n                    _: 'Remove saved query',\n                })}\n                size=\"small\"\n                onClick={handleRemoveQueryClick}\n                {...props}\n            >\n                <RemoveIcon />\n            </IconButton>\n\n            <RemoveSavedQueryDialog\n                open={confirmationOpen}\n                onClose={handleConfirmationClose}\n            />\n        </>\n    );\n};\n","import * as React from 'react';\nimport { ReactNode } from 'react';\nimport { styled, Tooltip } from '@mui/material';\nimport BookmarkIcon from '@mui/icons-material/BookmarkBorder';\nimport HelpIcon from '@mui/icons-material/HelpOutline';\nimport { useListContext, useTranslate } from 'ra-core';\nimport isEqual from 'lodash/isEqual';\n\nimport { extractValidSavedQueries, useSavedQueries } from './useSavedQueries';\nimport { RemoveSavedQueryIconButton } from './RemoveSavedQueryIconButton';\nimport { AddSavedQueryIconButton } from './AddSavedQueryIconButton';\nimport { SavedQueryFilterListItem } from './SavedQueryFilterListItem';\nimport { FilterList } from './FilterList';\n\n/**\n * FilterList-like component allowing to save and restore a query (filters, sort, perPage).\n *\n * Use this component in a Filter sidebar to let users store custom queries\n * that they can reuse later. The saved queries will appear as FilterListItems,\n * and can be removed.\n *\n * This component uses useStore under the hood to store saved queries in\n * localStorage, one set of saved queries per resource.\n *\n * @example\n *\n * import { FilterList, FilterListItem, List, Datagrid, SavedQueriesList } from 'react-admin';\n * import { Card, CardContent } from '@mui/material';\n *\n * const PostFilterSidebar = () => (\n *     <Card>\n *         <CardContent>\n *             <SavedQueriesList />\n *             <FilterList label=\"Category\" icon={<CategoryIcon />}>\n *                 ...\n *             </FilterList>\n *             <FilterList label=\"Published\" icon={<DateRangeIcon />}>\n *                ...\n *             </FilterList>\n *             <FilterList label=\"Popularity\" icon={<DateRangeIcon />}>\n *                ...\n *             </FilterList>\n *         </CardContent>\n *     </Card>\n * );\n *\n * const PostList = () => (\n *     <List aside={<PostFilterSidebar />}>\n *         <Datagrid>\n *             ...\n *         </Datagrid>\n *     </List>\n * );\n *\n */\nexport const SavedQueriesList = ({\n    icon = defaultIcon,\n}: SavedQueriesListProps) => {\n    const translate = useTranslate();\n    const {\n        resource,\n        filterValues,\n        displayedFilters,\n        sort,\n        perPage,\n    } = useListContext();\n\n    const [savedQueries] = useSavedQueries(resource);\n    const validSavedQueries = extractValidSavedQueries(savedQueries);\n    const hasSavedCurrentFilterValue = validSavedQueries.some(savedQuery =>\n        isEqual(savedQuery.value, {\n            filter: filterValues,\n            sort,\n            perPage,\n            displayedFilters,\n        })\n    );\n    const hasFilterValues = !isEqual(filterValues, {});\n\n    return (\n        <Root label=\"ra.saved_queries.label\" icon={icon}>\n            {hasSavedCurrentFilterValue ? (\n                <RemoveSavedQueryIconButton\n                    className={SavedQueriesListClasses.floatingIcon}\n                />\n            ) : hasFilterValues ? (\n                <AddSavedQueryIconButton\n                    className={SavedQueriesListClasses.floatingIcon}\n                />\n            ) : (\n                <Tooltip\n                    title={translate('ra.saved_queries.help')}\n                    className={SavedQueriesListClasses.floatingTooltip}\n                >\n                    <HelpIcon />\n                </Tooltip>\n            )}\n            {validSavedQueries.map((savedQuery, index) => (\n                <SavedQueryFilterListItem\n                    label={savedQuery.label}\n                    value={savedQuery.value}\n                    key={index}\n                />\n            ))}\n        </Root>\n    );\n};\n\nconst PREFIX = 'RaSavedQueriesList';\n\nexport const SavedQueriesListClasses = {\n    floatingIcon: `${PREFIX}-floatingIcon`,\n    floatingTooltip: `${PREFIX}-floatingTooltip`,\n    titleContainer: `${PREFIX}-titleContainer`,\n    titleIcon: `${PREFIX}-titleIcon`,\n};\n\nconst Root = styled(FilterList, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    [`& .${SavedQueriesListClasses.floatingIcon}`]: {\n        position: 'absolute',\n        top: '-1.8em',\n        right: 0,\n    },\n    [`& .${SavedQueriesListClasses.floatingTooltip}`]: {\n        position: 'absolute',\n        top: '-1.2em',\n        right: 3,\n        color: theme.palette.action.disabled,\n    },\n}));\n\nconst defaultIcon = <BookmarkIcon />;\n\nexport interface SavedQueriesListProps {\n    icon?: ReactNode;\n}\n","import * as React from 'react';\nimport { ReactElement, memo } from 'react';\nimport {\n    IconButton,\n    ListItem,\n    ListItemButton,\n    ListItemProps,\n    ListItemText,\n    ListItemSecondaryAction,\n    styled,\n} from '@mui/material';\nimport CancelIcon from '@mui/icons-material/CancelOutlined';\nimport isEqual from 'lodash/isEqual';\nimport { useNavigate } from 'react-router-dom';\nimport { stringify } from 'query-string';\nimport { useListContext } from 'ra-core';\n\nimport { SavedQuery } from './useSavedQueries';\n\nconst arePropsEqual = (\n    prevProps: SavedQueryFilterListItemProps,\n    nextProps: SavedQueryFilterListItemProps\n): boolean =>\n    prevProps.label === nextProps.label &&\n    isEqual(prevProps.value, nextProps.value);\n\nexport const SavedQueryFilterListItem = memo(\n    (props: SavedQueryFilterListItemProps): ReactElement => {\n        const { className, label, sx, value } = props;\n        const {\n            filterValues,\n            sort,\n            perPage,\n            displayedFilters,\n        } = useListContext();\n        const navigate = useNavigate();\n\n        const isSelected = isEqual(value, {\n            filter: filterValues,\n            sort,\n            perPage,\n            displayedFilters,\n        });\n\n        const addFilter = (): void => {\n            navigate({\n                search: stringify({\n                    filter: JSON.stringify(value.filter),\n                    sort: value.sort.field,\n                    order: value.sort.order,\n                    page: 1,\n                    perPage: value.perPage,\n                    displayedFilters: value.displayedFilters,\n                }),\n            });\n        };\n\n        const removeFilter = (): void => {\n            navigate({\n                search: stringify({\n                    filter: JSON.stringify({}),\n                }),\n            });\n        };\n\n        const toggleFilter = (): void =>\n            isSelected ? removeFilter() : addFilter();\n\n        return (\n            // @ts-ignore\n            <StyledListItem\n                onClick={toggleFilter}\n                selected={isSelected}\n                className={className}\n                sx={sx}\n                disablePadding\n            >\n                <ListItemButton\n                    disableGutters\n                    className={SavedQueryFilterListItemClasses.listItemButton}\n                >\n                    <ListItemText\n                        primary={label}\n                        className={SavedQueryFilterListItemClasses.listItemText}\n                    />\n                    {isSelected && (\n                        <ListItemSecondaryAction>\n                            <IconButton size=\"small\" onClick={toggleFilter}>\n                                <CancelIcon />\n                            </IconButton>\n                        </ListItemSecondaryAction>\n                    )}\n                </ListItemButton>\n            </StyledListItem>\n        );\n    },\n    arePropsEqual\n);\n\nconst PREFIX = 'RaSavedQueryFilterListItem';\nexport const SavedQueryFilterListItemClasses = {\n    listItemButton: `${PREFIX}-listItemButton`,\n    listItemText: `${PREFIX}-listItemText`,\n};\n\nconst StyledListItem = styled(ListItem, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(() => ({\n    [`& .${SavedQueryFilterListItemClasses.listItemButton}`]: {\n        paddingRight: '2em',\n        paddingLeft: '2em',\n    },\n    [`& .${SavedQueryFilterListItemClasses.listItemText}`]: {\n        margin: 0,\n    },\n}));\n\nexport interface SavedQueryFilterListItemProps\n    extends SavedQuery,\n        Omit<ListItemProps, 'value'> {}\n","import * as React from 'react';\nimport { useCallback, useMemo, FC, memo, ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    TablePagination,\n    TablePaginationBaseProps,\n    Toolbar,\n    useMediaQuery,\n    Theme,\n} from '@mui/material';\nimport {\n    useTranslate,\n    useListPaginationContext,\n    sanitizeListRestProps,\n    ComponentPropType,\n} from 'ra-core';\n\nimport { PaginationActions } from './PaginationActions';\nimport { PaginationLimit } from './PaginationLimit';\n\nexport const Pagination: FC<PaginationProps> = memo(props => {\n    const {\n        rowsPerPageOptions = DefaultRowsPerPageOptions,\n        actions,\n        limit = DefaultLimit,\n        ...rest\n    } = props;\n    const {\n        isLoading,\n        hasNextPage,\n        page,\n        perPage,\n        total,\n        setPage,\n        setPerPage,\n    } = useListPaginationContext(props);\n    const translate = useTranslate();\n    const isSmall = useMediaQuery((theme: Theme) =>\n        theme.breakpoints.down('md')\n    );\n\n    const totalPages = useMemo(() => {\n        return total != null ? Math.ceil(total / perPage) : undefined;\n    }, [perPage, total]);\n\n    /**\n     * Warning: MUI's page is 0-based\n     */\n    const handlePageChange = useCallback(\n        (event, page) => {\n            event && event.stopPropagation();\n            if (page < 0 || page > totalPages - 1) {\n                throw new Error(\n                    translate('ra.navigation.page_out_of_boundaries', {\n                        page: page + 1,\n                    })\n                );\n            }\n            setPage(page + 1);\n        },\n        [totalPages, setPage, translate]\n    );\n\n    const handlePerPageChange = useCallback(\n        event => {\n            setPerPage(event.target.value);\n        },\n        [setPerPage]\n    );\n\n    const labelDisplayedRows = useCallback(\n        ({ from, to, count }) =>\n            count === -1 && hasNextPage\n                ? translate('ra.navigation.partial_page_range_info', {\n                      offsetBegin: from,\n                      offsetEnd: to,\n                      _: `%{from}-%{to} of more than %{to}`,\n                  })\n                : translate('ra.navigation.page_range_info', {\n                      offsetBegin: from,\n                      offsetEnd: to,\n                      total: count === -1 ? to : count,\n                      _: `%{from}-%{to} of %{count === -1 ? to : count}`,\n                  }),\n        [translate, hasNextPage]\n    );\n\n    const labelItem = useCallback(\n        type => translate(`ra.navigation.${type}`, { _: `Go to ${type} page` }),\n        [translate]\n    );\n\n    if (isLoading) {\n        return <Toolbar variant=\"dense\" />;\n    }\n\n    // Avoid rendering TablePagination if \"page\" value is invalid\n    if (total === 0 || page < 1 || (total != null && page > totalPages)) {\n        return limit;\n    }\n\n    if (isSmall) {\n        return (\n            <TablePagination\n                count={total == null ? -1 : total}\n                rowsPerPage={perPage}\n                page={page - 1}\n                onPageChange={handlePageChange}\n                rowsPerPageOptions={emptyArray}\n                component=\"span\"\n                labelDisplayedRows={labelDisplayedRows}\n                {...sanitizeListRestProps(rest)}\n            />\n        );\n    }\n\n    const ActionsComponent = actions\n        ? actions // overridden by caller\n        : !isLoading && total != null\n        ? PaginationActions // regular navigation\n        : undefined; // partial navigation (uses default TablePaginationActions)\n\n    return (\n        <TablePagination\n            count={total == null ? -1 : total}\n            rowsPerPage={perPage}\n            page={page - 1}\n            onPageChange={handlePageChange}\n            onRowsPerPageChange={handlePerPageChange}\n            // @ts-ignore\n            ActionsComponent={ActionsComponent}\n            nextIconButtonProps={{\n                disabled: !hasNextPage,\n            }}\n            component=\"span\"\n            labelRowsPerPage={translate('ra.navigation.page_rows_per_page')}\n            labelDisplayedRows={labelDisplayedRows}\n            getItemAriaLabel={labelItem}\n            rowsPerPageOptions={rowsPerPageOptions}\n            {...sanitizeListRestProps(rest)}\n        />\n    );\n});\n\nPagination.propTypes = {\n    actions: ComponentPropType,\n    limit: PropTypes.element,\n    rowsPerPageOptions: PropTypes.arrayOf(PropTypes.number),\n};\n\nconst DefaultLimit = <PaginationLimit />;\nconst DefaultRowsPerPageOptions = [5, 10, 25];\nconst emptyArray = [];\n\nexport interface PaginationProps extends TablePaginationBaseProps {\n    rowsPerPageOptions?: number[];\n    actions?: FC;\n    limit?: ReactElement;\n}\n","import * as React from 'react';\nimport { memo, FC } from 'react';\nimport { styled } from '@mui/material/styles';\nimport { Pagination, PaginationProps } from '@mui/material';\nimport PropTypes from 'prop-types';\nimport { useTranslate } from 'ra-core';\n\nexport const PaginationActions: FC<PaginationActionsProps> = memo(props => {\n    const {\n        page,\n        rowsPerPage,\n        count,\n        onPageChange,\n        size = 'small',\n        className,\n        ...rest\n    } = props;\n    const translate = useTranslate();\n\n    const nbPages = Math.ceil(count / rowsPerPage) || 1;\n\n    if (nbPages === 1) {\n        return <Root className={className} />;\n    }\n\n    const getItemAriaLabel = (\n        type: 'page' | 'first' | 'last' | 'next' | 'previous',\n        page: number,\n        selected: boolean\n    ) => {\n        if (type === 'page') {\n            return selected\n                ? translate('ra.navigation.current_page', {\n                      page,\n                      _: `page ${page}`,\n                  })\n                : translate('ra.navigation.page', {\n                      page,\n                      _: `Go to page ${page}`,\n                  });\n        }\n        return translate(`ra.navigation.${type}`, { _: `Go to ${type} page` });\n    };\n\n    return (\n        <Root className={className}>\n            <Pagination\n                size={size}\n                count={nbPages}\n                // <TablePagination>, the parent, uses 0-based pagination\n                // while <Pagination> uses 1-based pagination\n                page={page + 1}\n                onChange={(e: any, page) => onPageChange(e, page - 1)}\n                {...sanitizeRestProps(rest)}\n                getItemAriaLabel={getItemAriaLabel}\n            />\n        </Root>\n    );\n});\n\nexport interface PaginationActionsProps extends PaginationProps {\n    page: number;\n    rowsPerPage: number;\n    count: number;\n    onPageChange: (event: MouseEvent, page: number) => void;\n}\n/**\n * PaginationActions propTypes are copied over from MUI’s\n * TablePaginationActions propTypes. See\n * https://github.com/mui-org/material-ui/blob/869692ecf3812bc4577ed4dde81a9911c5949695/packages/material-ui/src/TablePaginationActions/TablePaginationActions.js#L53-L85\n * for reference.\n */\nPaginationActions.propTypes = {\n    count: PropTypes.number.isRequired,\n    onPageChange: PropTypes.func.isRequired,\n    page: PropTypes.number.isRequired,\n    rowsPerPage: PropTypes.number.isRequired,\n    color: PropTypes.oneOf(['primary', 'secondary', 'standard']),\n    size: PropTypes.oneOf(['small', 'medium', 'large']),\n};\n\nconst PREFIX = 'RaPaginationActions';\n\nconst Root = styled('div', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    flexShrink: 0,\n    ml: 4,\n}));\n\nconst sanitizeRestProps = ({\n    nextIconButtonProps,\n    backIconButtonProps,\n    ...rest\n}: any) => rest;\n","import * as React from 'react';\nimport { memo } from 'react';\nimport CardContent from '@mui/material/CardContent';\nimport Typography from '@mui/material/Typography';\nimport { useTranslate } from 'ra-core';\n\nexport const PaginationLimit = memo(() => {\n    const translate = useTranslate();\n    return (\n        <CardContent>\n            <Typography variant=\"body2\">\n                {translate('ra.navigation.no_results')}\n            </Typography>\n        </CardContent>\n    );\n});\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport TextField, { TextFieldProps } from '@mui/material/TextField';\nimport { useInput, FieldTitle } from 'ra-core';\n\nimport { CommonInputProps } from './CommonInputProps';\nimport { sanitizeInputRestProps } from './sanitizeInputRestProps';\nimport { InputHelperText } from './InputHelperText';\n\n/**\n * Form input to edit a Date string value in the \"YYYY-MM-DD\" format (e.g. '2021-06-23').\n *\n * Renders a date picker (the exact UI depends on the browser).\n *\n * @example\n * import { Edit, SimpleForm, DateInput } from 'react-admin';\n *\n * const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <DateInput source=\"published_at\" />\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * @example\n * // If the initial value is a Date object, DateInput converts it to a string\n * // but you must pass a custom parse method to convert the form value\n * // (which is always a date string) back to a Date object.\n * <DateInput source=\"published_at\" parse={val => new Date(val)} />\n */\nexport const DateInput = ({\n    className,\n    defaultValue,\n    format = getStringFromDate,\n    label,\n    name,\n    source,\n    resource,\n    helperText,\n    margin,\n    onBlur,\n    onChange,\n    parse,\n    validate,\n    variant,\n    ...rest\n}: DateInputProps) => {\n    const { field, fieldState, formState, id, isRequired } = useInput({\n        defaultValue,\n        name,\n        format,\n        parse,\n        onBlur,\n        onChange,\n        resource,\n        source,\n        validate,\n        ...rest,\n    });\n\n    const { error, invalid, isTouched } = fieldState;\n    const { isSubmitted } = formState;\n\n    return (\n        <TextField\n            id={id}\n            {...field}\n            className={clsx('ra-input', `ra-input-${source}`, className)}\n            type=\"date\"\n            size=\"small\"\n            variant={variant}\n            margin={margin}\n            error={(isTouched || isSubmitted) && invalid}\n            helperText={\n                <InputHelperText\n                    touched={isTouched || isSubmitted}\n                    error={error?.message}\n                    helperText={helperText}\n                />\n            }\n            label={\n                <FieldTitle\n                    label={label}\n                    source={source}\n                    resource={resource}\n                    isRequired={isRequired}\n                />\n            }\n            InputLabelProps={defaultInputLabelProps}\n            {...sanitizeInputRestProps(rest)}\n        />\n    );\n};\n\nDateInput.propTypes = {\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    resource: PropTypes.string,\n    source: PropTypes.string,\n};\n\nexport type DateInputProps = CommonInputProps &\n    Omit<TextFieldProps, 'helperText' | 'label'>;\n\n/**\n * Convert Date object to String\n *\n * @param {Date} value value to convert\n * @returns {String} A standardized date (yyyy-MM-dd), to be passed to an <input type=\"date\" />\n */\nconst convertDateToString = (value: Date) => {\n    if (!(value instanceof Date) || isNaN(value.getDate())) return '';\n    const pad = '00';\n    const yyyy = value.getFullYear().toString();\n    const MM = (value.getMonth() + 1).toString();\n    const dd = value.getDate().toString();\n    return `${yyyy}-${(pad + MM).slice(-2)}-${(pad + dd).slice(-2)}`;\n};\n\nconst dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;\nconst defaultInputLabelProps = { shrink: true };\n\nconst getStringFromDate = (value: string | Date) => {\n    // null, undefined and empty string values should not go through dateFormatter\n    // otherwise, it returns undefined and will make the input an uncontrolled one.\n    if (value == null || value === '') {\n        return '';\n    }\n\n    if (value instanceof Date) {\n        return convertDateToString(value);\n    }\n\n    // valid dates should not be converted\n    if (dateRegex.test(value)) {\n        return value;\n    }\n\n    return convertDateToString(new Date(value));\n};\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport TextField, { TextFieldProps } from '@mui/material/TextField';\nimport { useInput, FieldTitle } from 'ra-core';\n\nimport { CommonInputProps } from './CommonInputProps';\nimport { sanitizeInputRestProps } from './sanitizeInputRestProps';\nimport { InputHelperText } from './InputHelperText';\n\n/**\n * Converts a datetime string without timezone to a date object\n * with timezone, using the browser timezone.\n *\n * @param {string} value Date string, formatted as yyyy-MM-ddThh:mm\n * @return {Date}\n */\nconst parseDateTime = (value: string) => new Date(value);\n\n/**\n * Input component for entering a date and a time with timezone, using the browser locale\n */\nexport const DateTimeInput = ({\n    className,\n    defaultValue,\n    format = formatDateTime,\n    label,\n    helperText,\n    margin,\n    onBlur,\n    onChange,\n    source,\n    resource,\n    parse = parseDateTime,\n    validate,\n    variant,\n    ...rest\n}: DateTimeInputProps) => {\n    const { field, fieldState, formState, id, isRequired } = useInput({\n        defaultValue,\n        format,\n        parse,\n        onBlur,\n        onChange,\n        resource,\n        source,\n        validate,\n        ...rest,\n    });\n\n    const { error, invalid, isTouched } = fieldState;\n    const { isSubmitted } = formState;\n\n    return (\n        <TextField\n            id={id}\n            {...field}\n            className={clsx('ra-input', `ra-input-${source}`, className)}\n            type=\"datetime-local\"\n            size=\"small\"\n            variant={variant}\n            margin={margin}\n            error={(isTouched || isSubmitted) && invalid}\n            helperText={\n                <InputHelperText\n                    touched={isTouched || isSubmitted}\n                    error={error?.message}\n                    helperText={helperText}\n                />\n            }\n            label={\n                <FieldTitle\n                    label={label}\n                    source={source}\n                    resource={resource}\n                    isRequired={isRequired}\n                />\n            }\n            InputLabelProps={defaultInputLabelProps}\n            {...sanitizeInputRestProps(rest)}\n        />\n    );\n};\n\nDateTimeInput.propTypes = {\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    resource: PropTypes.string,\n    source: PropTypes.string,\n};\n\nexport type DateTimeInputProps = CommonInputProps &\n    Omit<TextFieldProps, 'helperText' | 'label'>;\n\nconst leftPad = (nb = 2) => value => ('0'.repeat(nb) + value).slice(-nb);\nconst leftPad4 = leftPad(4);\nconst leftPad2 = leftPad(2);\n\n/**\n * @param {Date} value value to convert\n * @returns {String} A standardized datetime (yyyy-MM-ddThh:mm), to be passed to an <input type=\"datetime-local\" />\n */\nconst convertDateToString = (value: Date) => {\n    if (!(value instanceof Date) || isNaN(value.getDate())) return '';\n    const yyyy = leftPad4(value.getFullYear());\n    const MM = leftPad2(value.getMonth() + 1);\n    const dd = leftPad2(value.getDate());\n    const hh = leftPad2(value.getHours());\n    const mm = leftPad2(value.getMinutes());\n    return `${yyyy}-${MM}-${dd}T${hh}:${mm}`;\n};\n\n// yyyy-MM-ddThh:mm\nconst dateTimeRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}$/;\nconst defaultInputLabelProps = { shrink: true };\n\n/**\n * Converts a date from the dataProvider, with timezone, to a date string\n * without timezone for use in an <input type=\"datetime-local\" />.\n *\n * @param {Date | String} value date string or object\n */\nconst formatDateTime = (value: string | Date) => {\n    // null, undefined and empty string values should not go through convertDateToString\n    // otherwise, it returns undefined and will make the input an uncontrolled one.\n    if (value == null || value === '') {\n        return '';\n    }\n\n    if (value instanceof Date) {\n        return convertDateToString(value);\n    }\n    // valid dates should not be converted\n    if (dateTimeRegex.test(value)) {\n        return value;\n    }\n\n    return convertDateToString(new Date(value));\n};\n","import React, {\n    Children,\n    cloneElement,\n    isValidElement,\n    ReactElement,\n    ReactNode,\n} from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { useDropzone, DropzoneOptions } from 'react-dropzone';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport { useInput, useTranslate, shallowEqual } from 'ra-core';\n\nimport { CommonInputProps } from './CommonInputProps';\nimport { Labeled } from '../Labeled';\nimport { FileInputPreview } from './FileInputPreview';\nimport { sanitizeInputRestProps } from './sanitizeInputRestProps';\nimport { InputHelperText } from './InputHelperText';\nimport { SxProps } from '@mui/system';\n\nexport const FileInput = (props: FileInputProps) => {\n    const {\n        accept,\n        children,\n        className,\n        format,\n        helperText,\n        inputProps: inputPropsOptions,\n        maxSize,\n        minSize,\n        multiple = false,\n        label,\n        labelMultiple = 'ra.input.file.upload_several',\n        labelSingle = 'ra.input.file.upload_single',\n        options = {},\n        onRemove: onRemoveProp,\n        parse,\n        placeholder,\n        resource,\n        source,\n        validate,\n        validateFileRemoval,\n        ...rest\n    } = props;\n    const { onDrop: onDropProp } = options;\n    const translate = useTranslate();\n\n    // turn a browser dropped file structure into expected structure\n    const transformFile = file => {\n        if (!(file instanceof File)) {\n            return file;\n        }\n\n        const { source, title } = (Children.only(children) as ReactElement<\n            any\n        >).props;\n\n        const preview = URL.createObjectURL(file);\n        const transformedFile = {\n            rawFile: file,\n            [source]: preview,\n        };\n\n        if (title) {\n            transformedFile[title] = file.name;\n        }\n\n        return transformedFile;\n    };\n\n    const transformFiles = (files: any[]) => {\n        if (!files) {\n            return multiple ? [] : null;\n        }\n\n        if (Array.isArray(files)) {\n            return files.map(transformFile);\n        }\n\n        return transformFile(files);\n    };\n\n    const {\n        id,\n        field: { onChange, value },\n        fieldState,\n        formState: { isSubmitted },\n        isRequired,\n    } = useInput({\n        format: format || transformFiles,\n        parse: parse || transformFiles,\n        source,\n        validate,\n        ...rest,\n    });\n    const { isTouched, error } = fieldState;\n    const files = value ? (Array.isArray(value) ? value : [value]) : [];\n\n    const onDrop = (newFiles, rejectedFiles, event) => {\n        const updatedFiles = multiple ? [...files, ...newFiles] : [...newFiles];\n\n        if (multiple) {\n            onChange(updatedFiles);\n        } else {\n            onChange(updatedFiles[0]);\n        }\n\n        if (onDropProp) {\n            onDropProp(newFiles, rejectedFiles, event);\n        }\n    };\n\n    const onRemove = file => async () => {\n        if (validateFileRemoval) {\n            try {\n                await validateFileRemoval(file);\n            } catch (e) {\n                return;\n            }\n        }\n        if (multiple) {\n            const filteredFiles = files.filter(\n                stateFile => !shallowEqual(stateFile, file)\n            );\n            onChange(filteredFiles as any);\n        } else {\n            onChange(null);\n        }\n\n        if (onRemoveProp) {\n            onRemoveProp(file);\n        }\n    };\n\n    const childrenElement =\n        children && isValidElement(Children.only(children))\n            ? (Children.only(children) as ReactElement<any>)\n            : undefined;\n\n    const { getRootProps, getInputProps } = useDropzone({\n        accept,\n        maxSize,\n        minSize,\n        multiple,\n        ...options,\n        onDrop,\n    });\n\n    return (\n        <StyledLabeled\n            htmlFor={id}\n            label={label}\n            className={clsx('ra-input', `ra-input-${source}`, className)}\n            source={source}\n            resource={resource}\n            isRequired={isRequired}\n            {...sanitizeInputRestProps(rest)}\n        >\n            <>\n                <div\n                    {...getRootProps({\n                        className: FileInputClasses.dropZone,\n                        'data-testid': 'dropzone',\n                    })}\n                >\n                    <input\n                        id={id}\n                        name={id}\n                        {...getInputProps({\n                            ...inputPropsOptions,\n                        })}\n                    />\n                    {placeholder ? (\n                        placeholder\n                    ) : multiple ? (\n                        <p>{translate(labelMultiple)}</p>\n                    ) : (\n                        <p>{translate(labelSingle)}</p>\n                    )}\n                </div>\n                <FormHelperText>\n                    <InputHelperText\n                        touched={isTouched || isSubmitted}\n                        error={error?.message}\n                        helperText={helperText}\n                    />\n                </FormHelperText>\n                {children && (\n                    <div className=\"previews\">\n                        {files.map((file, index) => (\n                            <FileInputPreview\n                                key={index}\n                                file={file}\n                                onRemove={onRemove(file)}\n                                className={FileInputClasses.removeButton}\n                            >\n                                {cloneElement(childrenElement as ReactElement, {\n                                    record: file,\n                                    className: FileInputClasses.preview,\n                                })}\n                            </FileInputPreview>\n                        ))}\n                    </div>\n                )}\n            </>\n        </StyledLabeled>\n    );\n};\n\nFileInput.propTypes = {\n    accept: PropTypes.string,\n    children: PropTypes.element,\n    className: PropTypes.string,\n    id: PropTypes.string,\n    isRequired: PropTypes.bool,\n    label: PropTypes.string,\n    labelMultiple: PropTypes.string,\n    labelSingle: PropTypes.string,\n    maxSize: PropTypes.number,\n    minSize: PropTypes.number,\n    multiple: PropTypes.bool,\n    validateFileRemoval: PropTypes.func,\n    options: PropTypes.object,\n    resource: PropTypes.string,\n    source: PropTypes.string,\n    placeholder: PropTypes.node,\n};\n\nconst PREFIX = 'RaFileInput';\n\nexport const FileInputClasses = {\n    dropZone: `${PREFIX}-dropZone`,\n    preview: `${PREFIX}-preview`,\n    removeButton: `${PREFIX}-removeButton`,\n};\n\nconst StyledLabeled = styled(Labeled, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    width: '100%',\n    [`& .${FileInputClasses.dropZone}`]: {\n        background: theme.palette.background.default,\n        cursor: 'pointer',\n        padding: theme.spacing(1),\n        textAlign: 'center',\n        color: theme.palette.getContrastText(theme.palette.background.default),\n    },\n    [`& .${FileInputClasses.preview}`]: {},\n    [`& .${FileInputClasses.removeButton}`]: {},\n}));\n\nexport type FileInputProps = CommonInputProps & {\n    accept?: DropzoneOptions['accept'];\n    className?: string;\n    children?: ReactNode;\n    labelMultiple?: string;\n    labelSingle?: string;\n    maxSize?: DropzoneOptions['maxSize'];\n    minSize?: DropzoneOptions['minSize'];\n    multiple?: DropzoneOptions['multiple'];\n    options?: DropzoneOptions;\n    onRemove?: Function;\n    placeholder?: ReactNode;\n    inputProps?: any;\n    validateFileRemoval?(file): boolean | Promise<boolean>;\n    sx?: SxProps;\n};\n","import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { useEffect, ReactNode } from 'react';\nimport PropTypes from 'prop-types';\nimport RemoveCircle from '@mui/icons-material/RemoveCircle';\nimport IconButton from '@mui/material/IconButton';\nimport { useTranslate } from 'ra-core';\n\nexport const FileInputPreview = (props: FileInputPreviewProps) => {\n    const { children, className, onRemove, file, ...rest } = props;\n\n    const translate = useTranslate();\n\n    useEffect(() => {\n        return () => {\n            const preview = file.rawFile ? file.rawFile.preview : file.preview;\n\n            if (preview) {\n                window.URL.revokeObjectURL(preview);\n            }\n        };\n    }, [file]);\n\n    return (\n        <Root className={className} {...rest}>\n            <IconButton\n                className={FileInputPreviewClasses.removeButton}\n                onClick={onRemove}\n                aria-label={translate('ra.action.delete')}\n                title={translate('ra.action.delete')}\n                size=\"large\"\n            >\n                <RemoveCircle className={FileInputPreviewClasses.removeIcon} />\n            </IconButton>\n            {children}\n        </Root>\n    );\n};\n\nFileInputPreview.propTypes = {\n    children: PropTypes.element.isRequired,\n    className: PropTypes.string,\n    file: PropTypes.object,\n    onRemove: PropTypes.func.isRequired,\n};\n\nFileInputPreview.defaultProps = {\n    file: undefined,\n};\n\nconst PREFIX = 'RaFileInputPreview';\n\nconst FileInputPreviewClasses = {\n    removeButton: `${PREFIX}-removeButton`,\n    removeIcon: `${PREFIX}-removeIcon`,\n};\n\nconst Root = styled('div', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    [`& .${FileInputPreviewClasses.removeButton}`]: {},\n\n    [`& .${FileInputPreviewClasses.removeIcon}`]: {\n        color: theme.palette.error.main,\n    },\n}));\n\nexport interface FileInputPreviewProps {\n    children: ReactNode;\n    className?: string;\n    onRemove: () => void;\n    file: any;\n}\n","import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { FileInput, FileInputProps, FileInputClasses } from './FileInput';\n\nexport const ImageInput = (props: ImageInputProps) => (\n    <StyledFileInput\n        labelMultiple=\"ra.input.image.upload_several\"\n        labelSingle=\"ra.input.image.upload_single\"\n        {...props}\n    />\n);\n\nexport type ImageInputProps = FileInputProps;\n\nconst PREFIX = 'RaImageInput';\n\nconst StyledFileInput = styled(FileInput, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    width: '100%',\n\n    [`& .${FileInputClasses.dropZone}`]: {\n        background: theme.palette.background.default,\n        cursor: 'pointer',\n        padding: theme.spacing(1),\n        textAlign: 'center',\n        color: theme.palette.getContrastText(theme.palette.background.default),\n    },\n\n    [`& .${FileInputClasses.preview}`]: {\n        display: 'inline-block',\n    },\n\n    [`& .${FileInputClasses.removeButton}`]: {\n        display: 'inline-block',\n        position: 'relative',\n        float: 'left',\n        '& button': {\n            position: 'absolute',\n            top: theme.spacing(1),\n            right: theme.spacing(1),\n            minWidth: theme.spacing(2),\n            opacity: 0,\n        },\n        '&:hover button': {\n            opacity: 1,\n        },\n    },\n}));\n","import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport TextField, { TextFieldProps } from '@mui/material/TextField';\nimport MenuItem from '@mui/material/MenuItem';\nimport clsx from 'clsx';\nimport { useInput, useTranslate, FieldTitle } from 'ra-core';\n\nimport { CommonInputProps } from './CommonInputProps';\nimport { sanitizeInputRestProps } from './sanitizeInputRestProps';\nimport { InputHelperText } from './InputHelperText';\n\nexport const NullableBooleanInput = (props: NullableBooleanInputProps) => {\n    const {\n        className,\n        format = getStringFromBoolean,\n        helperText,\n        label,\n        margin,\n        onBlur,\n        onChange,\n        parse = getBooleanFromString,\n        resource,\n        source,\n        validate,\n        variant,\n        nullLabel = 'ra.boolean.null',\n        falseLabel = 'ra.boolean.false',\n        trueLabel = 'ra.boolean.true',\n        ...rest\n    } = props;\n\n    const translate = useTranslate();\n\n    const {\n        field,\n        fieldState: { error, invalid, isTouched },\n        formState: { isSubmitted },\n        id,\n        isRequired,\n    } = useInput({\n        format,\n        parse,\n        onBlur,\n        onChange,\n        resource,\n        source,\n        validate,\n        ...rest,\n    });\n\n    return (\n        <StyledTextField\n            id={id}\n            size=\"small\"\n            {...field}\n            className={clsx(\n                'ra-input',\n                `ra-input-${source}`,\n                NullableBooleanInputClasses.input,\n                className\n            )}\n            select\n            margin={margin}\n            label={\n                <FieldTitle\n                    label={label}\n                    source={source}\n                    resource={resource}\n                    isRequired={isRequired}\n                />\n            }\n            error={(isTouched || isSubmitted) && invalid}\n            helperText={\n                <InputHelperText\n                    touched={isTouched || isSubmitted}\n                    error={error?.message}\n                    helperText={helperText}\n                />\n            }\n            variant={variant}\n            {...sanitizeInputRestProps(rest)}\n        >\n            <MenuItem value=\"\">{translate(nullLabel)}</MenuItem>\n            <MenuItem value=\"false\">{translate(falseLabel)}</MenuItem>\n            <MenuItem value=\"true\">{translate(trueLabel)}</MenuItem>\n        </StyledTextField>\n    );\n};\n\nNullableBooleanInput.propTypes = {\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    options: PropTypes.object,\n    resource: PropTypes.string,\n    source: PropTypes.string,\n    nullLabel: PropTypes.string,\n    falseLabel: PropTypes.string,\n    trueLabel: PropTypes.string,\n};\n\nconst PREFIX = 'RaNullableBooleanInput';\n\nexport const NullableBooleanInputClasses = {\n    input: `${PREFIX}-input`,\n};\n\nconst StyledTextField = styled(TextField, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme, fullWidth }) => ({\n    [`&.${NullableBooleanInputClasses.input}`]: {\n        width: fullWidth ? '100%' : theme.spacing(16),\n    },\n}));\n\nconst getBooleanFromString = (value: string): boolean | null => {\n    if (value === 'true') return true;\n    if (value === 'false') return false;\n    return null;\n};\n\nconst getStringFromBoolean = (value?: boolean | null): string => {\n    if (value === true) return 'true';\n    if (value === false) return 'false';\n    return '';\n};\n\nexport type NullableBooleanInputProps = CommonInputProps &\n    Omit<TextFieldProps, 'label' | 'helperText'> & {\n        nullLabel?: string;\n        falseLabel?: string;\n        trueLabel?: string;\n    };\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport TextField, { TextFieldProps } from '@mui/material/TextField';\nimport { useInput, FieldTitle } from 'ra-core';\n\nimport { CommonInputProps } from './CommonInputProps';\nimport { InputHelperText } from './InputHelperText';\nimport { sanitizeInputRestProps } from './sanitizeInputRestProps';\n\n/**\n * An Input component for a number\n *\n * Due to limitations in React controlled components and number formatting,\n * this input only updates the form value on blur.\n *\n * @example\n * <NumberInput source=\"nb_views\" />\n *\n * You can customize the `step` props (which defaults to \"any\")\n * @example\n * <NumberInput source=\"nb_views\" step={1} />\n *\n */\nexport const NumberInput = ({\n    className,\n    defaultValue = null,\n    format = convertNumberToString,\n    helperText,\n    label,\n    margin,\n    onBlur,\n    onChange,\n    parse,\n    resource,\n    source,\n    step,\n    min,\n    max,\n    validate,\n    variant,\n    inputProps: overrideInputProps,\n    ...rest\n}: NumberInputProps) => {\n    const {\n        field,\n        fieldState: { error, invalid, isTouched },\n        formState: { isSubmitted },\n        id,\n        isRequired,\n    } = useInput({\n        defaultValue,\n        resource,\n        source,\n        validate,\n        ...rest,\n    });\n\n    const inputProps = { ...overrideInputProps, step, min, max };\n\n    // This is a controlled input that doesn't transform the user input on change.\n    // The user input is only turned into a number on blur.\n    // This is to allow transitory values like '1.0' that will lead to '1.02'\n\n    // text typed by the user and displayed in the input, unparsed\n    const [value, setValue] = React.useState(format(field.value));\n\n    // update the input text when the record changes\n    React.useEffect(() => {\n        const stringValue = format(field.value);\n        setValue(value => (value !== stringValue ? stringValue : value));\n    }, [field.value]); // eslint-disable-line react-hooks/exhaustive-deps\n\n    // update the input text when the user types in the input\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        if (onChange) {\n            onChange(event);\n        }\n        if (\n            typeof event.target === 'undefined' ||\n            typeof event.target.value === 'undefined'\n        ) {\n            return;\n        }\n        setValue(event.target.value);\n    };\n\n    // set the numeric value on the form on blur\n    const handleBlur = (...event: any[]) => {\n        if (onBlur) {\n            onBlur(...event);\n        }\n        const eventParam = event[0] as React.FocusEvent<HTMLInputElement>;\n        if (\n            typeof eventParam.target === 'undefined' ||\n            typeof eventParam.target.value === 'undefined'\n        ) {\n            return;\n        }\n        const target = eventParam.target;\n        const newValue = target.valueAsNumber\n            ? parse\n                ? parse(target.valueAsNumber)\n                : target.valueAsNumber\n            : parse\n            ? parse(target.value)\n            : convertStringToNumber(target.value);\n        field.onChange(newValue);\n    };\n\n    return (\n        <TextField\n            id={id}\n            {...field}\n            // override the react-hook-form value, onChange and onBlur props\n            value={value}\n            onChange={handleChange}\n            onBlur={handleBlur}\n            className={clsx('ra-input', `ra-input-${source}`, className)}\n            type=\"number\"\n            size=\"small\"\n            variant={variant}\n            error={(isTouched || isSubmitted) && invalid}\n            helperText={\n                <InputHelperText\n                    touched={isTouched || isSubmitted}\n                    error={error?.message}\n                    helperText={helperText}\n                />\n            }\n            label={\n                <FieldTitle\n                    label={label}\n                    source={source}\n                    resource={resource}\n                    isRequired={isRequired}\n                />\n            }\n            margin={margin}\n            inputProps={inputProps}\n            {...sanitizeInputRestProps(rest)}\n        />\n    );\n};\n\nNumberInput.propTypes = {\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    options: PropTypes.object,\n    resource: PropTypes.string,\n    source: PropTypes.string,\n    step: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n};\n\nNumberInput.defaultProps = {\n    options: {},\n    step: 'any',\n    textAlign: 'right',\n};\n\nexport interface NumberInputProps\n    extends CommonInputProps,\n        Omit<\n            TextFieldProps,\n            'label' | 'helperText' | 'defaultValue' | 'onChange' | 'onBlur'\n        > {\n    step?: string | number;\n    min?: string | number;\n    max?: string | number;\n}\n\nconst convertStringToNumber = value => {\n    if (value == null || value === '') {\n        return null;\n    }\n    const float = parseFloat(value);\n\n    return isNaN(float) ? 0 : float;\n};\n\nconst convertNumberToString = value =>\n    value == null || isNaN(value) ? '' : value.toString();\n","import * as React from 'react';\nimport { useState } from 'react';\nimport { useTranslate } from 'ra-core';\nimport { InputAdornment, IconButton } from '@mui/material';\nimport Visibility from '@mui/icons-material/Visibility';\nimport VisibilityOff from '@mui/icons-material/VisibilityOff';\n\nimport { TextInput, TextInputProps } from './TextInput';\n\nexport const PasswordInput = (props: PasswordInputProps) => {\n    const { initiallyVisible = false, ...rest } = props;\n    const [visible, setVisible] = useState(initiallyVisible);\n    const translate = useTranslate();\n\n    const handleClick = () => {\n        setVisible(!visible);\n    };\n\n    return (\n        <TextInput\n            type={visible ? 'text' : 'password'}\n            size=\"small\"\n            InputProps={{\n                endAdornment: (\n                    <InputAdornment position=\"end\">\n                        <IconButton\n                            aria-label={translate(\n                                visible\n                                    ? 'ra.input.password.toggle_visible'\n                                    : 'ra.input.password.toggle_hidden'\n                            )}\n                            onClick={handleClick}\n                            size=\"large\"\n                        >\n                            {visible ? <Visibility /> : <VisibilityOff />}\n                        </IconButton>\n                    </InputAdornment>\n                ),\n            }}\n            {...rest}\n        />\n    );\n};\n\nexport interface PasswordInputProps extends TextInputProps {\n    initiallyVisible?: boolean;\n}\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { useInput, FieldTitle } from 'ra-core';\n\nimport { CommonInputProps } from './CommonInputProps';\nimport {\n    ResettableTextField,\n    ResettableTextFieldProps,\n} from './ResettableTextField';\nimport { InputHelperText } from './InputHelperText';\nimport { sanitizeInputRestProps } from './sanitizeInputRestProps';\n\n/**\n * An Input component for a string\n *\n * @example\n * <TextInput source=\"first_name\" />\n *\n * You can customize the `type` props (which defaults to \"text\").\n * Note that, due to a React bug, you should use `<NumberField>` instead of using type=\"number\".\n * @example\n * <TextInput source=\"email\" type=\"email\" />\n * <NumberInput source=\"nb_views\" />\n *\n * The object passed as `options` props is passed to the <ResettableTextField> component\n */\nexport const TextInput = (props: TextInputProps) => {\n    const {\n        className,\n        defaultValue = '',\n        label,\n        format,\n        helperText,\n        onBlur,\n        onChange,\n        parse,\n        resource,\n        source,\n        validate,\n        ...rest\n    } = props;\n    const {\n        field,\n        fieldState: { error, invalid, isTouched },\n        formState: { isSubmitted },\n        id,\n        isRequired,\n    } = useInput({\n        defaultValue,\n        format,\n        parse,\n        resource,\n        source,\n        type: 'text',\n        validate,\n        onBlur,\n        onChange,\n        ...rest,\n    });\n    return (\n        <ResettableTextField\n            id={id}\n            {...field}\n            className={clsx('ra-input', `ra-input-${source}`, className)}\n            label={\n                label !== '' &&\n                label !== false && (\n                    <FieldTitle\n                        label={label}\n                        source={source}\n                        resource={resource}\n                        isRequired={isRequired}\n                    />\n                )\n            }\n            error={(isTouched || isSubmitted) && invalid}\n            helperText={\n                <InputHelperText\n                    touched={isTouched || isSubmitted}\n                    error={error?.message}\n                    helperText={helperText}\n                />\n            }\n            {...sanitizeInputRestProps(rest)}\n        />\n    );\n};\n\nTextInput.propTypes = {\n    className: PropTypes.string,\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    options: PropTypes.object,\n    resource: PropTypes.string,\n    source: PropTypes.string,\n};\n\nTextInput.defaultProps = {\n    options: {},\n};\n\nexport type TextInputProps = CommonInputProps &\n    Omit<ResettableTextFieldProps, 'label' | 'helperText'>;\n","import * as React from 'react';\nimport { forwardRef, useCallback } from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport {\n    InputAdornment,\n    IconButton,\n    TextField as MuiTextField,\n    TextFieldProps,\n} from '@mui/material';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport { useTranslate } from 'ra-core';\n\n/**\n * An override of the default MUI TextField which is resettable\n */\nexport const ResettableTextField = forwardRef(\n    (props: ResettableTextFieldProps, ref) => {\n        const {\n            clearAlwaysVisible,\n            InputProps,\n            value,\n            resettable,\n            disabled,\n            variant,\n            margin,\n            className,\n            ...rest\n        } = props;\n\n        const translate = useTranslate();\n\n        const { onChange, onFocus, onBlur } = props;\n        const handleClickClearButton = useCallback(\n            event => {\n                event.preventDefault();\n                onChange('');\n            },\n            [onChange]\n        );\n\n        const handleFocus = useCallback(\n            event => {\n                onFocus && onFocus(event);\n            },\n            [onFocus]\n        );\n\n        const handleBlur = useCallback(\n            event => {\n                onBlur && onBlur(event);\n            },\n            [onBlur]\n        );\n\n        const {\n            clearButton,\n            clearIcon,\n            inputAdornedEnd,\n            selectAdornment,\n            visibleClearIcon,\n        } = ResettableTextFieldClasses;\n\n        const { endAdornment, ...InputPropsWithoutEndAdornment } =\n            InputProps || {};\n\n        if (clearAlwaysVisible && endAdornment) {\n            throw new Error(\n                'ResettableTextField cannot display both an endAdornment and a clear button always visible'\n            );\n        }\n\n        const getEndAdornment = () => {\n            if (!resettable) {\n                return endAdornment;\n            } else if (!value) {\n                if (clearAlwaysVisible) {\n                    // show clear button, inactive\n                    return (\n                        <InputAdornment\n                            position=\"end\"\n                            classes={{\n                                root: props.select ? selectAdornment : null,\n                            }}\n                        >\n                            <IconButton\n                                className={clearButton}\n                                aria-label={translate(\n                                    'ra.action.clear_input_value'\n                                )}\n                                title={translate('ra.action.clear_input_value')}\n                                disableRipple\n                                disabled={true}\n                                size=\"large\"\n                            >\n                                <ClearIcon\n                                    className={clsx(\n                                        clearIcon,\n                                        visibleClearIcon\n                                    )}\n                                />\n                            </IconButton>\n                        </InputAdornment>\n                    );\n                } else {\n                    if (endAdornment) {\n                        return endAdornment;\n                    } else {\n                        // show spacer\n                        return (\n                            <InputAdornment\n                                position=\"end\"\n                                classes={{\n                                    root: props.select ? selectAdornment : null,\n                                }}\n                            >\n                                <span className={clearButton}>&nbsp;</span>\n                            </InputAdornment>\n                        );\n                    }\n                }\n            } else {\n                // show clear\n                return (\n                    <InputAdornment\n                        position=\"end\"\n                        classes={{\n                            root: props.select ? selectAdornment : null,\n                        }}\n                    >\n                        <IconButton\n                            className={clearButton}\n                            aria-label={translate(\n                                'ra.action.clear_input_value'\n                            )}\n                            title={translate('ra.action.clear_input_value')}\n                            disableRipple\n                            onClick={handleClickClearButton}\n                            onMouseDown={handleMouseDownClearButton}\n                            disabled={disabled}\n                            size=\"large\"\n                        >\n                            <ClearIcon\n                                className={clsx(clearIcon, {\n                                    [visibleClearIcon]:\n                                        clearAlwaysVisible || value,\n                                })}\n                            />\n                        </IconButton>\n                    </InputAdornment>\n                );\n            }\n        };\n\n        return (\n            <StyledTextField\n                value={value}\n                InputProps={{\n                    classes:\n                        props.select && variant === 'filled'\n                            ? { adornedEnd: inputAdornedEnd }\n                            : {},\n                    endAdornment: getEndAdornment(),\n                    ...InputPropsWithoutEndAdornment,\n                }}\n                disabled={disabled}\n                variant={variant}\n                margin={margin}\n                className={className}\n                size=\"small\"\n                {...rest}\n                onFocus={handleFocus}\n                onBlur={handleBlur}\n                inputRef={ref}\n            />\n        );\n    }\n);\n\nResettableTextField.displayName = 'ResettableTextField';\n\nconst handleMouseDownClearButton = event => {\n    event.preventDefault();\n};\n\nResettableTextField.propTypes = {\n    clearAlwaysVisible: PropTypes.bool,\n    disabled: PropTypes.bool,\n    InputProps: PropTypes.object,\n    onBlur: PropTypes.func,\n    onChange: PropTypes.func.isRequired,\n    onFocus: PropTypes.func,\n    resettable: PropTypes.bool,\n    value: PropTypes.any,\n};\n\ninterface Props {\n    clearAlwaysVisible?: boolean;\n    resettable?: boolean;\n}\n\nexport type ResettableTextFieldProps = Props &\n    Omit<TextFieldProps, 'onChange'> & {\n        onChange?: (eventOrValue: any) => void;\n    };\n\nconst PREFIX = 'RaResettableTextField';\n\nexport const ResettableTextFieldClasses = {\n    clearIcon: `${PREFIX}-clearIcon`,\n    visibleClearIcon: `${PREFIX}-visibleClearIcon`,\n    clearButton: `${PREFIX}-clearButton`,\n    selectAdornment: `${PREFIX}-selectAdornment`,\n    inputAdornedEnd: `${PREFIX}-inputAdornedEnd`,\n};\n\nexport const ResettableTextFieldStyles = {\n    [`& .${ResettableTextFieldClasses.clearIcon}`]: {\n        height: 16,\n        width: 0,\n    },\n    [`& .${ResettableTextFieldClasses.visibleClearIcon}`]: {\n        width: 16,\n    },\n    [`& .${ResettableTextFieldClasses.clearButton}`]: {\n        height: 24,\n        width: 24,\n        padding: 0,\n    },\n    [`& .${ResettableTextFieldClasses.selectAdornment}`]: {\n        position: 'absolute',\n        right: 24,\n    },\n    [`& .${ResettableTextFieldClasses.inputAdornedEnd}`]: {\n        paddingRight: 0,\n    },\n};\n\nconst StyledTextField = styled(MuiTextField, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(ResettableTextFieldStyles);\n","import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport {\n    FormControl,\n    FormHelperText,\n    FormLabel,\n    RadioGroup,\n} from '@mui/material';\nimport { RadioGroupProps } from '@mui/material/RadioGroup';\nimport { FormControlProps } from '@mui/material/FormControl';\nimport get from 'lodash/get';\nimport {\n    useInput,\n    FieldTitle,\n    ChoicesProps,\n    warning,\n    useChoicesContext,\n} from 'ra-core';\n\nimport { CommonInputProps } from './CommonInputProps';\nimport { sanitizeInputRestProps } from './sanitizeInputRestProps';\nimport { InputHelperText } from './InputHelperText';\nimport { RadioButtonGroupInputItem } from './RadioButtonGroupInputItem';\nimport { Labeled } from '../Labeled';\nimport { LinearProgress } from '../layout';\n\n/**\n * An Input component for a radio button group, using an array of objects for the options\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * By default, the options are built from:\n *  - the 'id' property as the option value,\n *  - the 'name' property as the option text\n * @example\n * const choices = [\n *    { id: 'M', name: 'Male' },\n *    { id: 'F', name: 'Female' },\n * ];\n * <RadioButtonGroupInput source=\"gender\" choices={choices} />\n *\n * You can also customize the properties to use for the option name and value,\n * thanks to the 'optionText' and 'optionValue' attributes.\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },\n *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },\n * ];\n * <RadioButtonGroupInput source=\"author_id\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <CheckboxGroupInput source=\"recipients\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that can access\n * the related choice through the `useRecordContext` hook. You can use Field components there.\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const FullNameField = ({ record }) => <span>{record.first_name} {record.last_name}</span>;\n * <RadioButtonGroupInput source=\"recipients\" choices={choices} optionText={<FullNameField />}/>\n *\n * The choices are translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'M', name: 'myroot.gender.male' },\n *    { id: 'F', name: 'myroot.gender.female' },\n * ];\n *\n * However, in some cases (e.g. inside a `<ReferenceInput>`), you may not want\n * the choice to be translated. In that case, set the `translateChoice` prop to false.\n * @example\n * <RadioButtonGroupInput source=\"gender\" choices={choices} translateChoice={false}/>\n *\n * The object passed as `options` props is passed to the MUI <RadioButtonGroup> component\n */\nexport const RadioButtonGroupInput = (props: RadioButtonGroupInputProps) => {\n    const {\n        choices: choicesProp,\n        className,\n        format,\n        helperText,\n        isFetching: isFetchingProp,\n        isLoading: isLoadingProp,\n        label,\n        margin = 'dense',\n        onBlur,\n        onChange,\n        optionText,\n        optionValue,\n        parse,\n        resource: resourceProp,\n        row,\n        source: sourceProp,\n        translateChoice,\n        validate,\n        ...rest\n    } = props;\n\n    const { allChoices, isLoading, resource, source } = useChoicesContext({\n        choices: choicesProp,\n        isFetching: isFetchingProp,\n        isLoading: isLoadingProp,\n        resource: resourceProp,\n        source: sourceProp,\n    });\n\n    warning(\n        source === undefined,\n        `If you're not wrapping the RadioButtonGroupInput inside a ReferenceInput, you must provide the source prop`\n    );\n\n    warning(\n        allChoices === undefined,\n        `If you're not wrapping the RadioButtonGroupInput inside a ReferenceInput, you must provide the choices prop`\n    );\n\n    const { id, isRequired, fieldState, field, formState } = useInput({\n        format,\n        onBlur,\n        onChange,\n        parse,\n        resource,\n        source,\n        validate,\n        ...rest,\n    });\n\n    const { error, invalid, isTouched } = fieldState;\n    const { isSubmitted } = formState;\n\n    if (isLoading) {\n        return (\n            <Labeled\n                htmlFor={id}\n                label={label}\n                source={source}\n                resource={resource}\n                className={clsx('ra-input', `ra-input-${source}`, className)}\n                isRequired={isRequired}\n            >\n                <LinearProgress />\n            </Labeled>\n        );\n    }\n    return (\n        <StyledFormControl\n            component=\"fieldset\"\n            className={clsx('ra-input', `ra-input-${source}`, className)}\n            margin={margin}\n            error={(isTouched || isSubmitted) && invalid}\n            {...sanitizeRestProps(rest)}\n        >\n            <FormLabel\n                component=\"legend\"\n                className={RadioButtonGroupInputClasses.label}\n            >\n                <FieldTitle\n                    label={label}\n                    source={source}\n                    resource={resource}\n                    isRequired={isRequired}\n                />\n            </FormLabel>\n\n            <RadioGroup\n                id={id}\n                row={row}\n                {...field}\n                {...sanitizeRestProps(rest)}\n            >\n                {allChoices.map(choice => (\n                    <RadioButtonGroupInputItem\n                        key={get(choice, optionValue)}\n                        choice={choice}\n                        optionText={optionText}\n                        optionValue={optionValue}\n                        source={source}\n                        translateChoice={translateChoice}\n                    />\n                ))}\n            </RadioGroup>\n            <FormHelperText>\n                <InputHelperText\n                    touched={isTouched || isSubmitted}\n                    error={error?.message}\n                    helperText={helperText}\n                />\n            </FormHelperText>\n        </StyledFormControl>\n    );\n};\n\nRadioButtonGroupInput.propTypes = {\n    choices: PropTypes.arrayOf(PropTypes.any),\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    options: PropTypes.object,\n    optionText: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.func,\n        PropTypes.element,\n    ]),\n    optionValue: PropTypes.string,\n    resource: PropTypes.string,\n    source: PropTypes.string,\n    translateChoice: PropTypes.bool,\n};\n\nRadioButtonGroupInput.defaultProps = {\n    options: {},\n    optionText: 'name',\n    optionValue: 'id',\n    row: true,\n    translateChoice: true,\n};\n\nconst sanitizeRestProps = ({\n    afterSubmit,\n    allowNull,\n    beforeSubmit,\n    choices,\n    className,\n    crudGetMatching,\n    crudGetOne,\n    data,\n    filter,\n    filterToQuery,\n    formatOnBlur,\n    isEqual,\n    limitChoicesToValue,\n    multiple,\n    name,\n    pagination,\n    perPage,\n    ref,\n    reference,\n    refetch,\n    render,\n    setFilter,\n    setPagination,\n    setSort,\n    sort,\n    subscription,\n    type,\n    validateFields,\n    validation,\n    value,\n    ...rest\n}: any) => sanitizeInputRestProps(rest);\n\nexport type RadioButtonGroupInputProps = CommonInputProps &\n    ChoicesProps &\n    FormControlProps &\n    RadioGroupProps;\n\nconst PREFIX = 'RaRadioButtonGroupInput';\n\nexport const RadioButtonGroupInputClasses = {\n    label: `${PREFIX}-label`,\n};\n\nconst StyledFormControl = styled(FormControl, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    [`& .${RadioButtonGroupInputClasses.label}`]: {\n        transform: 'translate(0, 5px) scale(0.75)',\n        transformOrigin: `top ${theme.direction === 'ltr' ? 'left' : 'right'}`,\n    },\n}));\n","import * as React from 'react';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Radio from '@mui/material/Radio';\nimport { useChoices } from 'ra-core';\n\nexport const RadioButtonGroupInputItem = ({\n    choice,\n    optionText,\n    optionValue,\n    source,\n    translateChoice,\n}) => {\n    const { getChoiceText, getChoiceValue } = useChoices({\n        optionText,\n        optionValue,\n        translateChoice,\n    });\n    const label = getChoiceText(choice);\n    const value = getChoiceValue(choice);\n\n    const nodeId = `${source}_${value}`;\n\n    return (\n        <FormControlLabel\n            label={label}\n            htmlFor={nodeId}\n            value={value}\n            control={<Radio id={nodeId} color=\"primary\" />}\n        />\n    );\n};\n\nexport default RadioButtonGroupInputItem;\n","import * as React from 'react';\nimport { ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    InputProps,\n    useReferenceArrayInputController,\n    ResourceContextProvider,\n    ChoicesContextProvider,\n} from 'ra-core';\nimport { ReferenceError } from './ReferenceError';\n\n/**\n * An Input component for fields containing a list of references to another resource.\n * Useful for 'hasMany' relationship.\n *\n * @example\n * The post object has many tags, so the post resource looks like:\n * {\n *    id: 1234,\n *    tag_ids: [ \"1\", \"23\", \"4\" ]\n * }\n *\n * ReferenceArrayInput component fetches the current resources (using\n * `dataProvider.getMany()`) as well as possible resources (using\n * `dataProvider.getList()`) in the reference endpoint. It then\n * delegates rendering to its child component, to which it makes the possible\n * choices available through the ChoicesContext.\n *\n * Use it with a selector component as child, like `<SelectArrayInput>`\n * or <CheckboxGroupInput>.\n *\n * @example\n * export const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <ReferenceArrayInput source=\"tag_ids\" reference=\"tags\">\n *                 <SelectArrayInput optionText=\"name\" />\n *             </ReferenceArrayInput>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * By default, restricts the possible values to 25. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      perPage={100}>\n *     <SelectArrayInput optionText=\"name\" />\n * </ReferenceArrayInput>\n *\n * By default, orders the possible values by id desc. You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      sort={{ field: 'name', order: 'ASC' }}>\n *     <SelectArrayInput optionText=\"name\" />\n * </ReferenceArrayInput>\n *\n * Also, you can filter the query used to populate the possible values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      filter={{ is_public: true }}>\n *     <SelectArrayInput optionText=\"name\" />\n * </ReferenceArrayInput>\n *\n * The enclosed component may filter results. ReferenceArrayInput create a ChoicesContext which provides\n * a `setFilters` function. You can call this function to filter the results.\n */\nexport const ReferenceArrayInput = (props: ReferenceArrayInputProps) => {\n    const { children, label, reference } = props;\n    if (React.Children.count(children) !== 1) {\n        throw new Error(\n            '<ReferenceArrayInput> only accepts a single child (like <Datagrid>)'\n        );\n    }\n\n    const controllerProps = useReferenceArrayInputController(props);\n\n    // This is not a form error but an unrecoverable error from the\n    // useReferenceInputController hook\n    if (controllerProps.error) {\n        return <ReferenceError label={label} error={controllerProps.error} />;\n    }\n\n    return (\n        <ResourceContextProvider value={reference}>\n            <ChoicesContextProvider value={controllerProps}>\n                {children}\n            </ChoicesContextProvider>\n        </ResourceContextProvider>\n    );\n};\n\nReferenceArrayInput.propTypes = {\n    children: PropTypes.element.isRequired,\n    filter: PropTypes.object,\n    label: PropTypes.string,\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n    reference: PropTypes.string.isRequired,\n    resource: PropTypes.string,\n    sort: PropTypes.shape({\n        field: PropTypes.string,\n        order: PropTypes.oneOf(['ASC', 'DESC']),\n    }),\n    source: PropTypes.string,\n};\n\nReferenceArrayInput.defaultProps = {\n    filter: {},\n    page: 1,\n    perPage: 25,\n    sort: { field: 'id', order: 'DESC' },\n};\n\nexport interface ReferenceArrayInputProps extends InputProps {\n    children: ReactElement;\n    label?: string;\n    page?: number;\n    perPage?: number;\n    reference: string;\n    resource?: string;\n    enableGetChoices?: (filters: any) => boolean;\n    [key: string]: any;\n}\n","import * as React from 'react';\nimport { ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport TextField from '@mui/material/TextField';\n\nexport const ReferenceError = ({\n    label,\n    error,\n}: {\n    label?: string | ReactElement | false;\n    error: Error;\n}) => (\n    <TextField\n        error\n        disabled\n        label={label}\n        value={error?.message}\n        margin=\"normal\"\n    />\n);\n\nReferenceError.propTypes = {\n    error: PropTypes.object.isRequired,\n    label: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.element,\n        PropTypes.bool,\n    ]),\n};\n","import React, { Children, ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    ChoicesContextProvider,\n    useReferenceInputController,\n    InputProps,\n    ResourceContextProvider,\n} from 'ra-core';\n\nimport { ReferenceError } from './ReferenceError';\n\n/**\n * An Input component for choosing a reference record. Useful for foreign keys.\n *\n * This component fetches the possible values in the reference resource\n * (using `dataProvider.getList()`), then delegates rendering\n * to a subcomponent, to which it passes the possible choices\n * as the `choices` attribute.\n *\n * Use it with a selector component as child, like `<AutocompleteInput>`,\n * `<SelectInput>`, or `<RadioButtonGroupInput>`.\n *\n * @example\n * export const CommentEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <ReferenceInput label=\"Post\" source=\"post_id\" reference=\"posts\">\n *                 <AutocompleteInput optionText=\"title\" />\n *             </ReferenceInput>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * @example\n * export const CommentEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <ReferenceInput label=\"Post\" source=\"post_id\" reference=\"posts\">\n *                 <SelectInput optionText=\"title\" />\n *             </ReferenceInput>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * By default, restricts the possible values to 25. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceInput\n *      source=\"post_id\"\n *      reference=\"posts\"\n *      perPage={100}>\n *     <SelectInput optionText=\"title\" />\n * </ReferenceInput>\n *\n * By default, orders the possible values by id desc. You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceInput\n *      source=\"post_id\"\n *      reference=\"posts\"\n *      sort={{ field: 'title', order: 'ASC' }}>\n *     <SelectInput optionText=\"title\" />\n * </ReferenceInput>\n *\n * Also, you can filter the query used to populate the possible values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceInput\n *      source=\"post_id\"\n *      reference=\"posts\"\n *      filter={{ is_published: true }}>\n *     <SelectInput optionText=\"title\" />\n * </ReferenceInput>\n *\n * The enclosed component may filter results. ReferenceInput create a ChoicesContext which provides\n * a `setFilters` function. You can call this function to filter the results.\n */\nexport const ReferenceInput = (props: ReferenceInputProps) => {\n    const { children, label, reference } = props;\n\n    const controllerProps = useReferenceInputController(props);\n\n    if (Children.count(children) !== 1) {\n        throw new Error('<ReferenceInput> only accepts a single child');\n    }\n\n    // This is not a form error but an unrecoverable error from the\n    // useReferenceInputController hook\n    if (controllerProps.error) {\n        return <ReferenceError label={label} error={controllerProps.error} />;\n    }\n\n    return (\n        <ResourceContextProvider value={reference}>\n            <ChoicesContextProvider value={controllerProps}>\n                {children}\n            </ChoicesContextProvider>\n        </ResourceContextProvider>\n    );\n};\n\nReferenceInput.propTypes = {\n    children: PropTypes.element.isRequired,\n    filter: PropTypes.object,\n    label: PropTypes.string,\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n    record: PropTypes.object,\n    reference: PropTypes.string.isRequired,\n    resource: PropTypes.string,\n    sort: PropTypes.shape({\n        field: PropTypes.string,\n        order: PropTypes.oneOf(['ASC', 'DESC']),\n    }),\n    source: PropTypes.string,\n};\n\nReferenceInput.defaultProps = {\n    filter: {},\n    page: 1,\n    perPage: 25,\n    sort: { field: 'id', order: 'DESC' },\n};\n\nexport interface ReferenceInputProps extends InputProps {\n    children: ReactElement;\n    label?: string;\n    page?: number;\n    perPage?: number;\n    reference: string;\n    // @deprecated\n    referenceSource?: (resource: string, source: string) => string;\n    resource?: string;\n    enableGetChoices?: (filters: any) => boolean;\n    [key: string]: any;\n}\n","import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport SearchIcon from '@mui/icons-material/Search';\nimport { InputAdornment } from '@mui/material';\nimport { useTranslate } from 'ra-core';\n\nimport { CommonInputProps } from './CommonInputProps';\nimport { TextInput, TextInputProps } from './TextInput';\n\nexport const SearchInput = (props: SearchInputProps) => {\n    const translate = useTranslate();\n\n    if (props.label) {\n        throw new Error(\n            \"<SearchInput> isn't designed to be used with a label prop. Use <TextInput> if you need a label.\"\n        );\n    }\n\n    return (\n        <StyledTextInput\n            hiddenLabel\n            label=\"\"\n            resettable\n            placeholder={translate('ra.action.search')}\n            InputProps={{\n                endAdornment: (\n                    <InputAdornment position=\"end\">\n                        <SearchIcon color=\"disabled\" />\n                    </InputAdornment>\n                ),\n            }}\n            size=\"small\"\n            {...props}\n        />\n    );\n};\n\nexport type SearchInputProps = CommonInputProps & TextInputProps;\n\nconst PREFIX = 'RaSearchInput';\n\nconst StyledTextInput = styled(TextInput, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})({\n    marginTop: 0,\n});\n","import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { useCallback, useRef, ChangeEvent } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport {\n    Select,\n    MenuItem,\n    InputLabel,\n    FormHelperText,\n    FormControl,\n    Chip,\n} from '@mui/material';\nimport {\n    ChoicesProps,\n    FieldTitle,\n    useInput,\n    useChoicesContext,\n    useChoices,\n    RaRecord,\n} from 'ra-core';\nimport { InputHelperText } from './InputHelperText';\nimport { FormControlProps } from '@mui/material/FormControl';\n\nimport { LinearProgress } from '../layout';\nimport { CommonInputProps } from './CommonInputProps';\nimport { Labeled } from '../Labeled';\nimport {\n    SupportCreateSuggestionOptions,\n    useSupportCreateSuggestion,\n} from './useSupportCreateSuggestion';\n\n/**\n * An Input component for a select box allowing multiple selections, using an array of objects for the options\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * By default, the options are built from:\n *  - the 'id' property as the option value,\n *  - the 'name' property as the option text\n * @example\n * const choices = [\n *    { id: 'programming', name: 'Programming' },\n *    { id: 'lifestyle', name: 'Lifestyle' },\n *    { id: 'photography', name: 'Photography' },\n * ];\n * <SelectArrayInput source=\"tags\" choices={choices} />\n *\n * You can also customize the properties to use for the option name and value,\n * thanks to the 'optionText' and 'optionValue' attributes.\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },\n *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },\n * ];\n * <SelectArrayInput source=\"authors\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <SelectArrayInput source=\"authors\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that can access\n * the related choice through the `useRecordContext` hook. You can use Field components there.\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const FullNameField = ({ record }) => <span>{record.first_name} {record.last_name}</span>;\n * <SelectArrayInput source=\"authors\" choices={choices} optionText={<FullNameField />}/>\n *\n * The choices are translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'programming', name: 'myroot.tags.programming' },\n *    { id: 'lifestyle', name: 'myroot.tags.lifestyle' },\n *    { id: 'photography', name: 'myroot.tags.photography' },\n * ];\n */\nexport const SelectArrayInput = (props: SelectArrayInputProps) => {\n    const {\n        choices: choicesProp,\n        className,\n        create,\n        createLabel,\n        createValue,\n        disableValue,\n        format,\n        helperText,\n        label,\n        isFetching: isFetchingProp,\n        isLoading: isLoadingProp,\n        margin,\n        onBlur,\n        onChange,\n        onCreate,\n        optionText,\n        optionValue,\n        parse,\n        resource: resourceProp,\n        source: sourceProp,\n        translateChoice,\n        validate,\n        variant,\n        ...rest\n    } = props;\n\n    const inputLabel = useRef(null);\n\n    const { allChoices, isLoading, source, resource } = useChoicesContext({\n        choices: choicesProp,\n        isLoading: isLoadingProp,\n        isFetching: isFetchingProp,\n        resource: resourceProp,\n        source: sourceProp,\n    });\n\n    const { getChoiceText, getChoiceValue, getDisableValue } = useChoices({\n        optionText,\n        optionValue,\n        disableValue,\n        translateChoice,\n    });\n\n    const {\n        field,\n        isRequired,\n        fieldState: { error, invalid, isTouched },\n        formState: { isSubmitted },\n    } = useInput({\n        format,\n        onBlur,\n        onChange,\n        parse,\n        resource,\n        source,\n        validate,\n        ...rest,\n    });\n\n    const handleChange = useCallback(\n        (eventOrChoice: ChangeEvent<HTMLInputElement> | RaRecord) => {\n            // We might receive an event from the mui component\n            // In this case, it will be the choice id\n            if (eventOrChoice?.target) {\n                field.onChange(eventOrChoice);\n            } else {\n                // Or we might receive a choice directly, for instance a newly created one\n                field.onChange([\n                    ...(field.value || []),\n                    getChoiceValue(eventOrChoice),\n                ]);\n            }\n        },\n        [field, getChoiceValue]\n    );\n\n    const {\n        getCreateItem,\n        handleChange: handleChangeWithCreateSupport,\n        createElement,\n    } = useSupportCreateSuggestion({\n        create,\n        createLabel,\n        createValue,\n        handleChange,\n        onCreate,\n        optionText,\n    });\n\n    const createItem = create || onCreate ? getCreateItem() : null;\n    const finalChoices =\n        create || onCreate\n            ? [...(allChoices || []), createItem]\n            : allChoices || [];\n\n    const renderMenuItemOption = useCallback(\n        choice =>\n            !!createItem &&\n            choice?.id === createItem.id &&\n            typeof optionText === 'function'\n                ? createItem.name\n                : getChoiceText(choice),\n        [createItem, getChoiceText, optionText]\n    );\n\n    const renderMenuItem = useCallback(\n        choice => {\n            return choice ? (\n                <MenuItem\n                    key={getChoiceValue(choice)}\n                    value={getChoiceValue(choice)}\n                    disabled={getDisableValue(choice)}\n                >\n                    {renderMenuItemOption(\n                        !!createItem && choice?.id === createItem.id\n                            ? createItem\n                            : choice\n                    )}\n                </MenuItem>\n            ) : null;\n        },\n        [getChoiceValue, getDisableValue, renderMenuItemOption, createItem]\n    );\n\n    if (isLoading) {\n        return (\n            <Labeled\n                label={label}\n                source={source}\n                resource={resource}\n                className={clsx('ra-input', `ra-input-${source}`, className)}\n                isRequired={isRequired}\n            >\n                <LinearProgress />\n            </Labeled>\n        );\n    }\n\n    return (\n        <>\n            <StyledFormControl\n                margin={margin}\n                className={clsx('ra-input', `ra-input-${source}`, className)}\n                error={(isTouched || isSubmitted) && invalid}\n                variant={variant}\n                {...sanitizeRestProps(rest)}\n            >\n                <InputLabel\n                    ref={inputLabel}\n                    id={`${label}-outlined-label`}\n                    error={(isTouched || isSubmitted) && invalid}\n                >\n                    <FieldTitle\n                        label={label}\n                        source={source}\n                        resource={resource}\n                        isRequired={isRequired}\n                    />\n                </InputLabel>\n                <Select\n                    autoWidth\n                    labelId={`${label}-outlined-label`}\n                    multiple\n                    error={(isTouched || isSubmitted) && invalid}\n                    renderValue={(selected: any[]) => (\n                        <div className={SelectArrayInputClasses.chips}>\n                            {selected\n                                .map(item =>\n                                    (allChoices || []).find(\n                                        choice =>\n                                            getChoiceValue(choice) === item\n                                    )\n                                )\n                                .filter(item => !!item)\n                                .map(item => (\n                                    <Chip\n                                        key={getChoiceValue(item)}\n                                        label={renderMenuItemOption(item)}\n                                        className={SelectArrayInputClasses.chip}\n                                        size=\"small\"\n                                    />\n                                ))}\n                        </div>\n                    )}\n                    data-testid=\"selectArray\"\n                    size=\"small\"\n                    {...field}\n                    onChange={handleChangeWithCreateSupport}\n                    value={field.value || []}\n                >\n                    {finalChoices.map(renderMenuItem)}\n                </Select>\n                <FormHelperText error={isTouched && !!error}>\n                    <InputHelperText\n                        touched={isTouched || isSubmitted}\n                        error={error?.message}\n                        helperText={helperText}\n                    />\n                </FormHelperText>\n            </StyledFormControl>\n            {createElement}\n        </>\n    );\n};\n\nexport type SelectArrayInputProps = ChoicesProps &\n    Omit<SupportCreateSuggestionOptions, 'handleChange'> &\n    Omit<CommonInputProps, 'source'> &\n    Omit<FormControlProps, 'defaultValue' | 'onBlur' | 'onChange'> & {\n        disableValue?: string;\n        source?: string;\n        onChange?: (event: ChangeEvent<HTMLInputElement> | RaRecord) => void;\n    };\n\nSelectArrayInput.propTypes = {\n    choices: PropTypes.arrayOf(PropTypes.object),\n    className: PropTypes.string,\n    children: PropTypes.node,\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    options: PropTypes.object,\n    optionText: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.func,\n        PropTypes.element,\n    ]).isRequired,\n    optionValue: PropTypes.string.isRequired,\n    disableValue: PropTypes.string,\n    resource: PropTypes.string,\n    source: PropTypes.string,\n    translateChoice: PropTypes.bool,\n};\n\nSelectArrayInput.defaultProps = {\n    options: {},\n    optionText: 'name',\n    optionValue: 'id',\n    disableValue: 'disabled',\n    translateChoice: true,\n};\n\nconst sanitizeRestProps = ({\n    alwaysOn,\n    choices,\n    classNamInputWithOptionsPropse,\n    componenInputWithOptionsPropst,\n    crudGetMInputWithOptionsPropsatching,\n    crudGetOInputWithOptionsPropsne,\n    defaultValue,\n    disableValue,\n    emptyText,\n    enableGetChoices,\n    filter,\n    filterToQuery,\n    formClassName,\n    initializeForm,\n    initialValue,\n    input,\n    isRequired,\n    label,\n    limitChoicesToValue,\n    loaded,\n    locale,\n    meta,\n    onChange,\n    options,\n    optionValue,\n    optionText,\n    perPage,\n    record,\n    reference,\n    resource,\n    setFilter,\n    setPagination,\n    setSort,\n    sort,\n    source,\n    textAlign,\n    translate,\n    translateChoice,\n    validation,\n    ...rest\n}: any) => rest;\n\nconst PREFIX = 'RaSelectArrayInput';\n\nexport const SelectArrayInputClasses = {\n    chips: `${PREFIX}-chips`,\n    chip: `${PREFIX}-chip`,\n};\n\nconst StyledFormControl = styled(FormControl, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    minWidth: theme.spacing(20),\n    [`& .${SelectArrayInputClasses.chips}`]: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n\n    [`& .${SelectArrayInputClasses.chip}`]: {\n        marginTop: theme.spacing(0.5),\n        marginRight: theme.spacing(0.5),\n    },\n}));\n","import * as React from 'react';\nimport { ReactElement, useCallback, ChangeEvent } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport MenuItem from '@mui/material/MenuItem';\nimport { TextFieldProps } from '@mui/material/TextField';\nimport { styled } from '@mui/material/styles';\nimport {\n    useChoicesContext,\n    useInput,\n    FieldTitle,\n    useTranslate,\n    ChoicesProps,\n    useChoices,\n    RaRecord,\n} from 'ra-core';\n\nimport { CommonInputProps } from './CommonInputProps';\nimport {\n    ResettableTextField,\n    ResettableTextFieldStyles,\n} from './ResettableTextField';\nimport { InputHelperText } from './InputHelperText';\nimport { sanitizeInputRestProps } from './sanitizeInputRestProps';\nimport { Labeled } from '../Labeled';\nimport { LinearProgress } from '../layout';\nimport {\n    useSupportCreateSuggestion,\n    SupportCreateSuggestionOptions,\n} from './useSupportCreateSuggestion';\n\n/**\n * An Input component for a select box, using an array of objects for the options\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * By default, the options are built from:\n *  - the 'id' property as the option value,\n *  - the 'name' property as the option text\n * @example\n * const choices = [\n *    { id: 'M', name: 'Male' },\n *    { id: 'F', name: 'Female' },\n * ];\n * <SelectInput source=\"gender\" choices={choices} />\n *\n * You can also customize the properties to use for the option name and value,\n * thanks to the 'optionText' and 'optionValue' attributes.\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },\n *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },\n * ];\n * <SelectInput source=\"author_id\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <SelectInput source=\"author_id\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that can access\n * the related choice through the `useRecordContext` hook. You can use Field components there.\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const FullNameField = () => {\n *     const record = useRecordContext();\n *     return <span>{record.first_name} {record.last_name}</span>;\n * }\n * <SelectInput source=\"author\" choices={choices} optionText={<FullNameField />}/>\n *\n * The choices are translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'M', name: 'myroot.gender.male' },\n *    { id: 'F', name: 'myroot.gender.female' },\n * ];\n *\n * However, in some cases (e.g. inside a `<ReferenceInput>`), you may not want\n * the choice to be translated. In that case, set the `translateChoice` prop to false.\n * @example\n * <SelectInput source=\"gender\" choices={choices} translateChoice={false}/>\n *\n * The object passed as `options` props is passed to the MUI <Select> component\n *\n * You can disable some choices by providing a `disableValue` field which name is `disabled` by default\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n *    { id: 976, first_name: 'William', last_name: 'Rinkerd', disabled: true },\n * ];\n *\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n *    { id: 976, first_name: 'William', last_name: 'Rinkerd', not_available: true },\n * ];\n * <SelectInput source=\"gender\" choices={choices} disableValue=\"not_available\" />\n *\n */\nexport const SelectInput = (props: SelectInputProps) => {\n    const {\n        choices: choicesProp,\n        className,\n        create,\n        createLabel,\n        createValue,\n        defaultValue = '',\n        disableValue,\n        emptyText,\n        emptyValue,\n        format,\n        filter,\n        helperText,\n        isFetching: isFetchingProp,\n        isLoading: isLoadingProp,\n        label,\n        margin = 'dense',\n        onBlur,\n        onChange,\n        onCreate,\n        optionText,\n        optionValue,\n        parse,\n        resource: resourceProp,\n        source: sourceProp,\n        translateChoice,\n        validate,\n        ...rest\n    } = props;\n    const translate = useTranslate();\n    const { allChoices, isLoading, source, resource } = useChoicesContext({\n        choices: choicesProp,\n        isLoading: isLoadingProp,\n        isFetching: isFetchingProp,\n        resource: resourceProp,\n        source: sourceProp,\n    });\n\n    const { getChoiceText, getChoiceValue, getDisableValue } = useChoices({\n        optionText,\n        optionValue,\n        disableValue,\n        translateChoice,\n    });\n    const {\n        field,\n        fieldState,\n        id,\n        isRequired,\n        formState: { isSubmitted },\n    } = useInput({\n        defaultValue,\n        format,\n        parse,\n        onBlur,\n        onChange,\n        resource,\n        source,\n        validate,\n        ...rest,\n    });\n\n    const { error, invalid, isTouched } = fieldState;\n\n    const renderEmptyItemOption = useCallback(() => {\n        return React.isValidElement(emptyText)\n            ? emptyText\n            : emptyText === ''\n            ? ' ' // em space, forces the display of an empty line of normal height\n            : translate(emptyText, { _: emptyText });\n    }, [emptyText, translate]);\n\n    const renderMenuItemOption = useCallback(choice => getChoiceText(choice), [\n        getChoiceText,\n    ]);\n\n    const handleChange = useCallback(\n        async (eventOrChoice: ChangeEvent<HTMLInputElement> | RaRecord) => {\n            // We might receive an event from the mui component\n            // In this case, it will be the choice id\n            if (eventOrChoice?.target) {\n                field.onChange(eventOrChoice);\n            } else {\n                // Or we might receive a choice directly, for instance a newly created one\n                field.onChange(getChoiceValue(eventOrChoice));\n            }\n        },\n        [field, getChoiceValue]\n    );\n\n    const {\n        getCreateItem,\n        handleChange: handleChangeWithCreateSupport,\n        createElement,\n    } = useSupportCreateSuggestion({\n        create,\n        createLabel,\n        createValue,\n        handleChange,\n        onCreate,\n        optionText,\n    });\n\n    const createItem = create || onCreate ? getCreateItem() : null;\n    const finalChoices =\n        create || onCreate ? [...allChoices, createItem] : allChoices;\n\n    const renderMenuItem = useCallback(\n        choice => {\n            return choice ? (\n                <MenuItem\n                    key={getChoiceValue(choice)}\n                    value={getChoiceValue(choice)}\n                    disabled={getDisableValue(choice)}\n                >\n                    {renderMenuItemOption(\n                        !!createItem && choice?.id === createItem.id\n                            ? createItem\n                            : choice\n                    )}\n                </MenuItem>\n            ) : null;\n        },\n        [getChoiceValue, getDisableValue, renderMenuItemOption, createItem]\n    );\n\n    if (isLoading) {\n        return (\n            <Labeled\n                label={label}\n                source={source}\n                resource={resourceProp}\n                className={clsx('ra-input', `ra-input-${source}`, className)}\n                isRequired={isRequired}\n            >\n                <LinearProgress />\n            </Labeled>\n        );\n    }\n\n    return (\n        <>\n            <StyledResettableTextField\n                id={id}\n                {...field}\n                className={clsx('ra-input', `ra-input-${source}`, className)}\n                onChange={handleChangeWithCreateSupport}\n                select\n                label={\n                    label !== '' &&\n                    label !== false && (\n                        <FieldTitle\n                            label={label}\n                            source={source}\n                            resource={resourceProp}\n                            isRequired={isRequired}\n                        />\n                    )\n                }\n                clearAlwaysVisible\n                error={(isTouched || isSubmitted) && invalid}\n                helperText={\n                    <InputHelperText\n                        touched={isTouched || isSubmitted}\n                        error={error?.message}\n                        helperText={helperText}\n                    />\n                }\n                margin={margin}\n                {...sanitizeRestProps(rest)}\n            >\n                <MenuItem\n                    value={emptyValue}\n                    key=\"null\"\n                    aria-label={translate('ra.action.clear_input_value')}\n                    title={translate('ra.action.clear_input_value')}\n                >\n                    {renderEmptyItemOption()}\n                </MenuItem>\n                {finalChoices.map(renderMenuItem)}\n            </StyledResettableTextField>\n            {createElement}\n        </>\n    );\n};\n\nSelectInput.propTypes = {\n    emptyText: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n    emptyValue: PropTypes.any,\n    choices: PropTypes.arrayOf(PropTypes.object),\n    className: PropTypes.string,\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    options: PropTypes.object,\n    optionText: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.func,\n        PropTypes.element,\n    ]).isRequired,\n    optionValue: PropTypes.string.isRequired,\n    disableValue: PropTypes.string,\n    resettable: PropTypes.bool,\n    resource: PropTypes.string,\n    source: PropTypes.string,\n    translateChoice: PropTypes.bool,\n};\n\nSelectInput.defaultProps = {\n    emptyText: '',\n    emptyValue: '',\n    options: {},\n    optionText: 'name',\n    optionValue: 'id',\n    translateChoice: true,\n    disableValue: 'disabled',\n};\n\nconst sanitizeRestProps = ({\n    afterSubmit,\n    allowNull,\n    beforeSubmit,\n    choices,\n    className,\n    crudGetMatching,\n    crudGetOne,\n    data,\n    field,\n    fieldState,\n    formState,\n    filter,\n    filterToQuery,\n    formatOnBlur,\n    isEqual,\n    limitChoicesToValue,\n    multiple,\n    name,\n    pagination,\n    perPage,\n    ref,\n    reference,\n    refetch,\n    render,\n    setFilter,\n    setPagination,\n    setSort,\n    sort,\n    subscription,\n    type,\n    validateFields,\n    validation,\n    value,\n    ...rest\n}: any) => sanitizeInputRestProps(rest);\n\nconst PREFIX = 'RaSelectInput';\n\nconst StyledResettableTextField = styled(ResettableTextField, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    ...ResettableTextFieldStyles,\n    minWidth: theme.spacing(20),\n}));\n\nexport type SelectInputProps = Omit<CommonInputProps, 'source'> &\n    ChoicesProps &\n    Omit<SupportCreateSuggestionOptions, 'handleChange'> &\n    Omit<TextFieldProps, 'label' | 'helperText' | 'classes' | 'onChange'> & {\n        disableValue?: string;\n        emptyText?: string | ReactElement;\n        emptyValue?: any;\n        // Source is optional as AutocompleteInput can be used inside a ReferenceInput that already defines the source\n        source?: string;\n        onChange?: (event: ChangeEvent<HTMLInputElement> | RaRecord) => void;\n    };\n","import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { ReactElement, ReactNode } from 'react';\nimport {\n    TranslatableContextProvider,\n    useTranslatable,\n    UseTranslatableOptions,\n} from 'ra-core';\nimport { TranslatableInputsTabs } from './TranslatableInputsTabs';\nimport { TranslatableInputsTabContent } from './TranslatableInputsTabContent';\n\n/**\n * Provides a way to edit multiple languages for any input passed as children.\n * It expects the translatable values to have the following structure:\n * {\n *     name: {\n *         en: 'The english value',\n *         fr: 'The french value',\n *         tlh: 'The klingon value',\n *     },\n *     description: {\n *         en: 'The english value',\n *         fr: 'The french value',\n *         tlh: 'The klingon value',\n *     }\n * }\n *\n * @example <caption>Basic usage</caption>\n * <TranslatableInputs locales={['en', 'fr']}>\n *     <TextInput source=\"title\" />\n *     <RichTextInput source=\"description\" />\n * </Translatable>\n *\n * @example <caption>With a custom language selector</caption>\n * <TranslatableInputs\n *     selector={<MyLanguageSelector />}\n *     locales={['en', 'fr']}\n * >\n *     <TextInput source=\"title\" />\n * </Translatable>\n *\n * const MyLanguageSelector = () => {\n *     const {\n *         locales,\n *         selectedLocale,\n *         selectLocale,\n *     } = useTranslatableContext();\n *\n *     return (\n *         <select onChange={event => selectLocale(event.target.value)}>\n *             {locales.map((locale) => (\n *                 <option selected={locale === selectedLocale}>\n *                     {locale}\n *                 </option>\n *             ))}\n *        </select>\n *     );\n * }\n *\n * @param props The component props\n * @param {string} props.defaultLocale The locale selected by default. Default to 'en'.\n * @param {string[]} props.locales An array of the possible locales. For example: `['en', 'fr'].\n * @param {ReactElement} props.selector The element responsible for selecting a locale. Defaults to MUI tabs.\n */\nexport const TranslatableInputs = (\n    props: TranslatableInputsProps\n): ReactElement => {\n    const {\n        className,\n        defaultLocale,\n        locales,\n        groupKey = '',\n        selector = <TranslatableInputsTabs groupKey={groupKey} />,\n        children,\n        variant,\n        margin,\n    } = props;\n    const context = useTranslatable({ defaultLocale, locales });\n\n    return (\n        <Root className={className}>\n            <TranslatableContextProvider value={context}>\n                {selector}\n                {locales.map(locale => (\n                    <TranslatableInputsTabContent\n                        key={locale}\n                        locale={locale}\n                        groupKey={groupKey}\n                        variant={variant}\n                        margin={margin}\n                    >\n                        {children}\n                    </TranslatableInputsTabContent>\n                ))}\n            </TranslatableContextProvider>\n        </Root>\n    );\n};\n\nexport interface TranslatableInputsProps extends UseTranslatableOptions {\n    className?: string;\n    selector?: ReactElement;\n    children: ReactNode;\n    groupKey?: string;\n    margin?: 'none' | 'normal' | 'dense';\n    variant?: 'standard' | 'outlined' | 'filled';\n}\n\nconst PREFIX = 'RaTranslatableInputs';\n\nconst Root = styled('div', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    flexGrow: 1,\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(0.5),\n}));\n","import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { ReactElement } from 'react';\nimport { AppBar, Tabs, TabsProps } from '@mui/material';\nimport { useTranslatableContext } from 'ra-core';\nimport { TranslatableInputsTab } from './TranslatableInputsTab';\nimport { AppBarProps } from '../layout';\n\n/**\n * Default locale selector for the TranslatableInputs component. Generates a tab for each specified locale.\n * @see TranslatableInputs\n */\nexport const TranslatableInputsTabs = (\n    props: TranslatableInputsTabsProps & AppBarProps\n): ReactElement => {\n    const { groupKey, TabsProps: tabsProps } = props;\n    const { locales, selectLocale, selectedLocale } = useTranslatableContext();\n\n    const handleChange = (event, newLocale): void => {\n        selectLocale(newLocale);\n    };\n\n    return (\n        <StyledAppBar\n            color=\"default\"\n            position=\"static\"\n            className={TranslatableInputsTabsClasses.root}\n        >\n            <Tabs\n                value={selectedLocale}\n                onChange={handleChange}\n                indicatorColor=\"primary\"\n                textColor=\"primary\"\n                className={TranslatableInputsTabsClasses.tabs}\n                {...tabsProps}\n            >\n                {locales.map(locale => (\n                    <TranslatableInputsTab\n                        key={locale}\n                        value={locale}\n                        locale={locale}\n                        groupKey={groupKey}\n                    />\n                ))}\n            </Tabs>\n        </StyledAppBar>\n    );\n};\n\nexport interface TranslatableInputsTabsProps {\n    groupKey?: string;\n    TabsProps?: TabsProps;\n}\n\nconst PREFIX = 'RaTranslatableInputsTabs';\n\nexport const TranslatableInputsTabsClasses = {\n    root: `${PREFIX}-root`,\n    tabs: `${PREFIX}-tabs`,\n};\n\nconst StyledAppBar = styled(AppBar, { name: PREFIX })(({ theme }) => ({\n    [`&.${TranslatableInputsTabsClasses.root}`]: {\n        boxShadow: 'none',\n        borderRadius: 0,\n        borderTopLeftRadius: theme.shape.borderRadius,\n        borderTopRightRadius: theme.shape.borderRadius,\n        border: `1px solid ${theme.palette.divider}`,\n    },\n\n    [`& .${TranslatableInputsTabsClasses.tabs}`]: {\n        minHeight: theme.spacing(3),\n    },\n}));\n","import React from 'react';\nimport { styled } from '@mui/material/styles';\nimport Tab, { TabProps } from '@mui/material/Tab';\nimport { useFormGroup, useTranslate } from 'ra-core';\nimport { capitalize } from 'inflection';\nimport clsx from 'clsx';\n\n/**\n * Single tab that selects a locale in a TranslatableInputs component.\n * @see TranslatableInputs\n */\nexport const TranslatableInputsTab = (\n    props: TranslatableInputsTabProps & TabProps\n) => {\n    const { groupKey = '', locale, ...rest } = props;\n    const { isValid, isTouched } = useFormGroup(`${groupKey}${locale}`);\n    const translate = useTranslate();\n\n    return (\n        <StyledTab\n            id={`translatable-header-${groupKey}${locale}`}\n            label={translate(`ra.locales.${locale}`, {\n                _: capitalize(locale),\n            })}\n            className={clsx(TranslatableInputsTabClasses.root, {\n                [TranslatableInputsTabClasses.error]: !isValid && isTouched,\n            })}\n            {...rest}\n        />\n    );\n};\n\nexport interface TranslatableInputsTabProps {\n    groupKey?: string;\n    locale: string;\n}\n\nconst PREFIX = 'RaTranslatableInputsTab';\n\nexport const TranslatableInputsTabClasses = {\n    root: `${PREFIX}-root`,\n    error: `${PREFIX}-error`,\n};\n\nconst StyledTab = styled(Tab, { name: PREFIX })(({ theme }) => ({\n    [`&.${TranslatableInputsTabClasses.root}`]: {\n        fontSize: '0.8em',\n        minHeight: theme.spacing(3),\n        minWidth: theme.spacing(6),\n    },\n\n    [`&.${TranslatableInputsTabClasses.error}`]: {\n        color: theme.palette.error.main,\n    },\n}));\n","import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport {\n    Children,\n    cloneElement,\n    isValidElement,\n    ReactElement,\n    ReactNode,\n} from 'react';\nimport {\n    FormGroupContextProvider,\n    RaRecord,\n    useTranslatableContext,\n} from 'ra-core';\n\n/**\n * Default container for a group of translatable inputs inside a TranslatableInputs component.\n * @see TranslatableInputs\n */\nexport const TranslatableInputsTabContent = (\n    props: TranslatableInputsTabContentProps\n): ReactElement => {\n    const {\n        children,\n        groupKey = '',\n        locale,\n        margin,\n        variant,\n        ...other\n    } = props;\n    const { selectedLocale, getLabel, getSource } = useTranslatableContext();\n\n    return (\n        <FormGroupContextProvider name={`${groupKey}${locale}`}>\n            <Root\n                role=\"tabpanel\"\n                hidden={selectedLocale !== locale}\n                id={`translatable-content-${groupKey}${locale}`}\n                aria-labelledby={`translatable-header-${groupKey}${locale}`}\n                className={TranslatableInputsTabContentClasses.root}\n                {...other}\n            >\n                {Children.map(children, child =>\n                    isValidElement(child)\n                        ? cloneElement(child, {\n                              ...child.props,\n                              label: getLabel(\n                                  child.props.source,\n                                  child.props.label\n                              ),\n                              source: getSource(child.props.source, locale),\n                          })\n                        : null\n                )}\n            </Root>\n        </FormGroupContextProvider>\n    );\n};\n\nexport type TranslatableInputsTabContentProps<\n    RecordType extends RaRecord | Omit<RaRecord, 'id'> = any\n> = {\n    children: ReactNode;\n    groupKey?: string;\n    locale: string;\n    record?: RecordType;\n    resource?: string;\n    margin?: 'none' | 'normal' | 'dense';\n    variant?: 'standard' | 'outlined' | 'filled';\n};\n\nconst PREFIX = 'RaTranslatableInputsTabContent';\n\nexport const TranslatableInputsTabContentClasses = {\n    root: `${PREFIX}-root`,\n};\n\nconst Root = styled('div', { name: PREFIX })(({ theme }) => ({\n    [`&.${TranslatableInputsTabContentClasses.root}`]: {\n        flexGrow: 1,\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(2),\n        paddingTop: theme.spacing(1),\n        paddingBottom: theme.spacing(1),\n        borderRadius: 0,\n        borderBottomLeftRadius: theme.shape.borderRadius,\n        borderBottomRightRadius: theme.shape.borderRadius,\n        border: `1px solid ${theme.palette.divider}`,\n        borderTop: 0,\n    },\n}));\n","import { ThemeOptions } from '@mui/material';\n\nexport const defaultTheme = {\n    palette: {\n        background: {\n            default: '#fafafb',\n        },\n        secondary: {\n            light: '#6ec6ff',\n            main: '#2196f3',\n            dark: '#0069c0',\n            contrastText: '#fff',\n        },\n    },\n    typography: {\n        h6: {\n            fontWeight: 400,\n        },\n    },\n    sidebar: {\n        width: 240,\n        closedWidth: 50,\n    },\n    components: {\n        MuiButtonBase: {\n            defaultProps: {\n                // disable ripple for perf reasons\n                disableRipple: true,\n            },\n            styleOverrides: {\n                root: {\n                    '&:hover:active::after': {\n                        // recreate a static ripple color\n                        // use the currentColor to make it work both for outlined and contained buttons\n                        // but to dim the background without dimming the text,\n                        // put another element on top with a limited opacity\n                        content: '\"\"',\n                        display: 'block',\n                        width: '100%',\n                        height: '100%',\n                        position: 'absolute',\n                        top: 0,\n                        right: 0,\n                        backgroundColor: 'currentColor',\n                        opacity: 0.3,\n                        borderRadius: 'inherit',\n                    },\n                    '&:focus::after': {\n                        // This ensures we provide visual cues to users using the keyboard\n                        // recreate a static ripple color\n                        // use the currentColor to make it work both for outlined and contained buttons\n                        // but to dim the background without dimming the text,\n                        // put another element on top with a limited opacity\n                        content: '\"\"',\n                        display: 'block',\n                        width: '100%',\n                        height: '100%',\n                        position: 'absolute',\n                        top: 0,\n                        right: 0,\n                        backgroundColor: 'currentColor',\n                        opacity: 0.3,\n                        borderRadius: 'inherit',\n                    },\n                },\n            },\n        },\n        MuiFilledInput: {\n            styleOverrides: {\n                root: {\n                    backgroundColor: 'rgba(0, 0, 0, 0.04)',\n                    '&$disabled': {\n                        backgroundColor: 'rgba(0, 0, 0, 0.04)',\n                    },\n                },\n            },\n        },\n        MuiTextField: {\n            defaultProps: {\n                variant: 'filled' as const,\n                margin: 'dense' as const,\n                size: 'small' as const,\n            },\n        },\n        MuiFormControl: {\n            defaultProps: {\n                variant: 'filled' as const,\n                margin: 'dense' as const,\n                size: 'small' as const,\n            },\n        },\n    },\n};\n\nexport interface RaThemeOptions extends ThemeOptions {\n    sidebar?: {\n        width?: number;\n        closedWidth?: number;\n    };\n}\n","import * as React from 'react';\nimport { ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport { RaRecord, useCheckMinimumRequiredProps } from 'ra-core';\n\nimport { CreateProps } from '../types';\nimport { CreateView } from './CreateView';\nimport { CreateBase } from 'ra-core';\n\n/**\n * Page component for the Create view\n *\n * The `<Create>` component renders the page title and actions.\n * It is not responsible for rendering the actual form -\n * that's the job of its child component (usually `<SimpleForm>`),\n * to which it passes the `record` as prop.\n *\n * The <Create> component accepts the following props:\n *\n * - actions\n * - aside\n * - component\n * - mutationOptions\n * - title\n *\n * @example\n *\n * // in src/posts.js\n * import * as React from \"react\";\n * import { Create, SimpleForm, TextInput } from 'react-admin';\n *\n * export const PostCreate = (props) => (\n *     <Create {...props}>\n *         <SimpleForm>\n *             <TextInput source=\"title\" />\n *         </SimpleForm>\n *     </Create>\n * );\n *\n * // in src/App.js\n * import * as React from \"react\";\n * import { Admin, Resource } from 'react-admin';\n *\n * import { PostCreate } from './posts';\n *\n * const App = () => (\n *     <Admin dataProvider={...}>\n *         <Resource name=\"posts\" create={PostCreate} />\n *     </Admin>\n * );\n * export default App;\n */\nexport const Create = <RecordType extends RaRecord = any>(\n    props: CreateProps<RecordType> & { children: ReactElement }\n): ReactElement => {\n    useCheckMinimumRequiredProps('Create', ['children'], props);\n    const {\n        resource,\n        record,\n        redirect,\n        transform,\n        mutationOptions,\n        disableAuthentication,\n        hasEdit,\n        hasShow,\n        ...rest\n    } = props;\n    return (\n        <CreateBase\n            resource={resource}\n            record={record}\n            redirect={redirect}\n            transform={transform}\n            mutationOptions={mutationOptions}\n            disableAuthentication={disableAuthentication}\n            hasEdit={hasEdit}\n            hasShow={hasShow}\n        >\n            <CreateView {...rest} />\n        </CreateBase>\n    );\n};\n\nCreate.propTypes = {\n    actions: PropTypes.oneOfType([PropTypes.element, PropTypes.bool]),\n    aside: PropTypes.element,\n    children: PropTypes.element,\n    className: PropTypes.string,\n    disableAuthentication: PropTypes.bool,\n    hasEdit: PropTypes.bool,\n    hasShow: PropTypes.bool,\n    redirect: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.bool,\n        PropTypes.func,\n    ]),\n    resource: PropTypes.string,\n    title: PropTypes.node,\n    record: PropTypes.object,\n    mutationOptions: PropTypes.object,\n    transform: PropTypes.func,\n    sx: PropTypes.any,\n};\n","import * as React from 'react';\nimport { ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport { RaRecord, CreateControllerProps, useCreateContext } from 'ra-core';\nimport clsx from 'clsx';\n\nimport { CreateProps } from '../types';\nimport { Title } from '../layout';\n\nexport const CreateView = (props: CreateViewProps) => {\n    const {\n        actions,\n        aside,\n        children,\n        className,\n        component: Content = Card,\n        title,\n        ...rest\n    } = props;\n\n    const { defaultTitle } = useCreateContext(props);\n\n    return (\n        <Root\n            className={clsx('create-page', className)}\n            {...sanitizeRestProps(rest)}\n        >\n            <Title title={title} defaultTitle={defaultTitle} />\n            {actions}\n            <div\n                className={clsx(CreateClasses.main, {\n                    [CreateClasses.noActions]: !actions,\n                })}\n            >\n                <Content className={CreateClasses.card}>{children}</Content>\n                {aside}\n            </div>\n        </Root>\n    );\n};\n\ninterface CreateViewProps<RecordType extends RaRecord = any>\n    extends CreateProps<RecordType>,\n        Omit<CreateControllerProps<RecordType>, 'resource'> {\n    children: ReactElement;\n}\n\nCreateView.propTypes = {\n    actions: PropTypes.oneOfType([PropTypes.element, PropTypes.bool]),\n    aside: PropTypes.element,\n    children: PropTypes.element,\n    className: PropTypes.string,\n    defaultTitle: PropTypes.any,\n    hasList: PropTypes.bool,\n    hasShow: PropTypes.bool,\n    mutationOptions: PropTypes.object,\n    record: PropTypes.object,\n    redirect: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.bool,\n        PropTypes.func,\n    ]),\n    resource: PropTypes.string,\n    save: PropTypes.func,\n    title: PropTypes.node,\n};\n\nconst sanitizeRestProps = ({\n    addMiddleware = null,\n    defaultTitle = null,\n    hasCreate = null,\n    hasEdit = null,\n    hasList = null,\n    hasShow = null,\n    history = null,\n    isFetching = null,\n    isLoading = null,\n    location = null,\n    match = null,\n    mutationOptions = null,\n    options = null,\n    permissions = null,\n    save = null,\n    saving = null,\n    transform = null,\n    removeMiddleware = null,\n    ...rest\n}) => rest;\n\nconst PREFIX = 'RaCreate';\n\nexport const CreateClasses = {\n    main: `${PREFIX}-main`,\n    noActions: `${PREFIX}-noActions`,\n    card: `${PREFIX}-card`,\n};\n\nconst Root = styled('div', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    [`& .${CreateClasses.main}`]: {\n        display: 'flex',\n    },\n\n    [`& .${CreateClasses.noActions}`]: {\n        [theme.breakpoints.up('sm')]: {\n            marginTop: '1em',\n        },\n    },\n\n    [`& .${CreateClasses.card}`]: {\n        flex: '1 1 auto',\n    },\n}));\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\n\nimport TopToolbar from '../layout/TopToolbar';\nimport { ListButton } from '../button';\nimport { useResourceDefinition } from 'ra-core';\n\n/**\n * Action Toolbar for the Create view\n *\n * Internal component. If you want to add or remove actions for a Create view,\n * write your own CreateActions Component. Then, in the <Create> component,\n * use it in the `actions` prop to pass a custom component.\n *\n * @example\n *     import Button from '@mui/material/Button';\n *     import { TopToolbar, Create, ListButton } from 'react-admin';\n *\n *     const PostCreateActions = () => (\n *         <TopToolbar>\n *             <ListButton />\n *             // Add your custom actions here //\n *             <Button color=\"primary\" onClick={customAction}>Custom Action</Button>\n *         </TopToolbar>\n *     );\n *\n *     export const PostCreate = (props) => (\n *         <Create actions={<PostCreateActions />} {...props}>\n *             ...\n *         </Create>\n *     );\n */\nexport const CreateActions = ({ className, ...rest }: CreateActionsProps) => {\n    const { hasList } = useResourceDefinition(rest);\n    return (\n        <TopToolbar className={className} {...sanitizeRestProps(rest)}>\n            {hasList && <ListButton />}\n        </TopToolbar>\n    );\n};\n\nconst sanitizeRestProps = ({\n    className = null,\n    hasList = null,\n    resource = null,\n    ...rest\n}) => rest;\n\nexport interface CreateActionsProps {\n    className?: string;\n    hasCreate?: boolean;\n    hasEdit?: boolean;\n    hasList?: boolean;\n    hasShow?: boolean;\n    resource?: string;\n}\n\nCreateActions.propTypes = {\n    className: PropTypes.string,\n    hasCreate: PropTypes.bool,\n    hasEdit: PropTypes.bool,\n    hasShow: PropTypes.bool,\n    hasList: PropTypes.bool,\n    resource: PropTypes.string,\n};\n","import * as React from 'react';\nimport { ReactNode } from 'react';\nimport PropTypes from 'prop-types';\nimport { useCheckMinimumRequiredProps, RaRecord } from 'ra-core';\nimport { EditProps } from '../types';\nimport { EditView } from './EditView';\nimport { EditBase } from 'ra-core';\n\n/**\n * Page component for the Edit view\n *\n * The `<Edit>` component renders the page title and actions,\n * fetches the record from the data provider.\n * It is not responsible for rendering the actual form -\n * that's the job of its child component (usually `<SimpleForm>`),\n * to which it passes the `record` as prop.\n *\n * The <Edit> component accepts the following props:\n *\n * - actions\n * - aside\n * - component\n * - title\n * - mutationMode\n * - mutationOptions\n *\n * @example\n *\n * // in src/posts.js\n * import * as React from \"react\";\n * import { Edit, SimpleForm, TextInput } from 'react-admin';\n *\n * export const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <TextInput source=\"title\" />\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * // in src/App.js\n * import * as React from \"react\";\n * import { Admin, Resource } from 'react-admin';\n *\n * import { PostEdit } from './posts';\n *\n * const App = () => (\n *     <Admin dataProvider={...}>\n *         <Resource name=\"posts\" edit={PostEdit} />\n *     </Admin>\n * );\n * export default App;\n */\nexport const Edit = <RecordType extends RaRecord = any>(\n    props: EditProps<RecordType> & { children: ReactNode }\n) => {\n    useCheckMinimumRequiredProps('Edit', ['children'], props);\n    const {\n        resource,\n        id,\n        mutationMode,\n        mutationOptions,\n        queryOptions,\n        redirect,\n        transform,\n        disableAuthentication,\n        ...rest\n    } = props;\n    return (\n        <EditBase\n            resource={resource}\n            id={id}\n            mutationMode={mutationMode}\n            mutationOptions={mutationOptions}\n            queryOptions={queryOptions}\n            redirect={redirect}\n            transform={transform}\n            disableAuthentication={disableAuthentication}\n        >\n            <EditView {...rest} />\n        </EditBase>\n    );\n};\n\nEdit.propTypes = {\n    actions: PropTypes.oneOfType([PropTypes.element, PropTypes.bool]),\n    aside: PropTypes.element,\n    children: PropTypes.node,\n    className: PropTypes.string,\n    disableAuthentication: PropTypes.bool,\n    hasCreate: PropTypes.bool,\n    hasEdit: PropTypes.bool,\n    hasShow: PropTypes.bool,\n    hasList: PropTypes.bool,\n    id: PropTypes.any,\n    mutationMode: PropTypes.oneOf(['pessimistic', 'optimistic', 'undoable']),\n    mutationOptions: PropTypes.object,\n    queryOptions: PropTypes.object,\n    redirect: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.bool,\n        PropTypes.func,\n    ]),\n    resource: PropTypes.string,\n    title: PropTypes.node,\n    transform: PropTypes.func,\n    sx: PropTypes.any,\n};\n","import * as React from 'react';\nimport { ReactNode } from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport { Card, CardContent } from '@mui/material';\nimport clsx from 'clsx';\nimport {\n    EditControllerProps,\n    ComponentPropType,\n    useEditContext,\n    useResourceDefinition,\n} from 'ra-core';\n\nimport { EditActions as DefaultActions } from './EditActions';\nimport { Title } from '../layout';\nimport { EditProps } from '../types';\n\nexport const EditView = (props: EditViewProps) => {\n    const {\n        actions,\n        aside,\n        children,\n        className,\n        component: Content = Card,\n        title,\n        mutationMode,\n        ...rest\n    } = props;\n\n    const { hasShow } = useResourceDefinition();\n    const { defaultTitle, record } = useEditContext(props);\n\n    const finalActions =\n        typeof actions === 'undefined' && hasShow ? (\n            <DefaultActions />\n        ) : (\n            actions\n        );\n    if (!children) {\n        return null;\n    }\n    return (\n        <Root\n            className={clsx('edit-page', className)}\n            {...sanitizeRestProps(rest)}\n        >\n            <Title title={title} defaultTitle={defaultTitle} />\n            {finalActions}\n            <div\n                className={clsx(EditClasses.main, {\n                    [EditClasses.noActions]: !finalActions,\n                })}\n            >\n                <Content className={EditClasses.card}>\n                    {record ? children : <CardContent>&nbsp;</CardContent>}\n                </Content>\n                {aside}\n            </div>\n        </Root>\n    );\n};\n\ninterface EditViewProps\n    extends EditProps,\n        Omit<EditControllerProps, 'resource'> {\n    children: ReactNode;\n}\n\nEditView.propTypes = {\n    actions: PropTypes.oneOfType([PropTypes.element, PropTypes.bool]),\n    aside: PropTypes.element,\n    children: PropTypes.element,\n    className: PropTypes.string,\n    component: ComponentPropType,\n    defaultTitle: PropTypes.any,\n    hasList: PropTypes.bool,\n    hasShow: PropTypes.bool,\n    mutationMode: PropTypes.oneOf(['pessimistic', 'optimistic', 'undoable']),\n    mutationOptions: PropTypes.object,\n    record: PropTypes.object,\n    redirect: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.bool,\n        PropTypes.func,\n    ]),\n    resource: PropTypes.string,\n    save: PropTypes.func,\n    title: PropTypes.node,\n};\n\nconst sanitizeRestProps = ({\n    addMiddleware = null,\n    defaultTitle = null,\n    hasCreate = null,\n    hasEdit = null,\n    hasList = null,\n    hasShow = null,\n    history = null,\n    id = null,\n    isFetching = null,\n    isLoading = null,\n    location = null,\n    match = null,\n    options = null,\n    queryOptions = null,\n    mutationOptions = null,\n    permissions = null,\n    refetch = null,\n    removeMiddleware = null,\n    resource = null,\n    save = null,\n    saving = null,\n    transform = null,\n    ...rest\n}) => rest;\n\nconst PREFIX = 'RaEdit';\n\nexport const EditClasses = {\n    main: `${PREFIX}-main`,\n    noActions: `${PREFIX}-noActions`,\n    card: `${PREFIX}-card`,\n};\n\nconst Root = styled('div', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})({\n    [`& .${EditClasses.main}`]: {\n        display: 'flex',\n        alignItems: 'flex-start',\n    },\n    [`& .${EditClasses.noActions}`]: {\n        marginTop: '1em',\n    },\n    [`& .${EditClasses.card}`]: {\n        flex: '1 1 auto',\n    },\n});\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { RaRecord, useEditContext, useResourceDefinition } from 'ra-core';\nimport { ShowButton } from '../button';\nimport TopToolbar from '../layout/TopToolbar';\n\n/**\n * Action Toolbar for the Edit view\n *\n * Internal component. If you want to add or remove actions for an Edit view,\n * write your own EditActions Component. Then, in the <Edit> component,\n * use it in the `actions` prop to pass a custom component.\n *\n * @example\n *     import Button from '@mui/material/Button';\n *     import { TopToolbar, ShowButton, Edit } from 'react-admin';\n *\n *     const PostEditActions = ({ record, resource }) => (\n *         <TopToolbar>\n *             <ShowButton record={record} />\n *             // Add your custom actions here\n *             <Button color=\"primary\" onClick={customAction}>Custom Action</Button>\n *         </TopToolbar>\n *     );\n *\n *     export const PostEdit = (props) => (\n *         <Edit actions={<PostEditActions />} {...props}>\n *             ...\n *         </Edit>\n *     );\n */\nexport const EditActions = ({ className, ...rest }: EditActionsProps) => {\n    const { record } = useEditContext(rest);\n    const { hasShow } = useResourceDefinition(rest);\n\n    return (\n        <TopToolbar className={className} {...sanitizeRestProps(rest)}>\n            {hasShow && <ShowButton record={record} />}\n        </TopToolbar>\n    );\n};\n\nconst sanitizeRestProps = ({\n    hasCreate = null,\n    hasEdit = null,\n    hasShow = null,\n    hasList = null,\n    ...rest\n}) => rest;\n\nexport interface EditActionsProps {\n    className?: string;\n    data?: RaRecord;\n    hasCreate?: boolean;\n    hasEdit?: boolean;\n    hasList?: boolean;\n    hasShow?: boolean;\n    resource?: string;\n}\n\nEditActions.propTypes = {\n    className: PropTypes.string,\n    data: PropTypes.object,\n    hasCreate: PropTypes.bool,\n    hasEdit: PropTypes.bool,\n    hasShow: PropTypes.bool,\n    hasList: PropTypes.bool,\n    resource: PropTypes.string,\n};\n","import * as React from 'react';\nimport { ReactNode, ReactElement } from 'react';\nimport { SimpleForm } from '../form';\nimport {\n    ArrayInput,\n    BooleanInput,\n    DateInput,\n    NumberInput,\n    ReferenceInput,\n    ReferenceInputProps,\n    ReferenceArrayInput,\n    ReferenceArrayInputProps,\n    SelectInput,\n    SimpleFormIterator,\n    TextInput,\n} from '../input';\nimport { InferredElement, InferredTypeMap, InputProps } from 'ra-core';\n\nexport const editFieldTypes: InferredTypeMap = {\n    form: {\n        component: SimpleForm,\n        representation: (\n            _,\n            children: InferredElement[]\n        ) => `        <SimpleForm>\n${children.map(child => `            ${child.getRepresentation()}`).join('\\n')}\n        </SimpleForm>`,\n    },\n    array: {\n        // eslint-disable-next-line react/display-name\n        component: ({\n            children,\n            ...props\n        }: { children: ReactNode } & InputProps) => (\n            <ArrayInput {...props}>\n                <SimpleFormIterator>{children}</SimpleFormIterator>\n            </ArrayInput>\n        ),\n        representation: (props: InputProps, children: InferredElement[]) =>\n            `<ArrayInput source=\"${\n                props.source\n            }\"><SimpleFormIterator>${children\n                .map(child => child.getRepresentation())\n                .join('\\n')}</SimpleFormIterator></ArrayInput>`,\n    },\n    boolean: {\n        component: BooleanInput,\n        representation: (props: InputProps) =>\n            `<BooleanInput source=\"${props.source}\" />`,\n    },\n    date: {\n        component: DateInput,\n        representation: (props: InputProps) =>\n            `<DateInput source=\"${props.source}\" />`,\n    },\n    email: {\n        component: TextInput,\n        representation: (props: InputProps) =>\n            `<TextInput source=\"${props.source}\" />`,\n    },\n    id: {\n        component: TextInput,\n        representation: (props: InputProps) =>\n            `<TextInput source=\"${props.source}\" />`,\n    },\n    number: {\n        component: NumberInput,\n        representation: (props: InputProps) =>\n            `<NumberInput source=\"${props.source}\" />`,\n    },\n    reference: {\n        component: ReferenceInput,\n        representation: (\n            props: ReferenceInputProps,\n            children: InferredElement\n        ) =>\n            `<ReferenceInput source=\"${props.source}\" reference=\"${\n                props.reference\n            }\">${children.getRepresentation()}</ReferenceInput>`,\n    },\n    referenceChild: {\n        component: (props: { children: ReactNode } & InputProps) => (\n            <SelectInput optionText=\"id\" {...props} />\n        ), // eslint-disable-line react/display-name\n        representation: () => `<SelectInput optionText=\"id\" />`,\n    },\n    referenceArray: {\n        component: ReferenceArrayInput,\n        representation: (props: ReferenceArrayInputProps) =>\n            `<ReferenceArrayInput source=\"${props.source}\" reference=\"${props.reference}\"><TextInput source=\"id\" /></ReferenceArrayInput>`,\n    },\n    referenceArrayChild: {\n        component: (\n            props: { children: ReactNode } & InputProps\n        ): ReactElement => <SelectInput optionText=\"id\" {...props} />, // eslint-disable-line react/display-name\n        representation: () => `<SelectInput optionText=\"id\" />`,\n    },\n    richText: {\n        component: TextInput,\n        representation: (props: InputProps) =>\n            `<TextInput source=\"${props.source}\" />`,\n    },\n    string: {\n        component: TextInput,\n        representation: (props: InputProps) =>\n            `<TextInput source=\"${props.source}\" />`,\n    },\n    url: {\n        component: TextInput,\n        representation: (props: InputProps) =>\n            `<TextInput source=\"${props.source}\" />`,\n    },\n};\n","import * as React from 'react';\nimport {\n    Children,\n    isValidElement,\n    ReactElement,\n    ReactNode,\n    HtmlHTMLAttributes,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Form,\n    FormProps,\n    MutationMode,\n    RaRecord,\n    RedirectionSideEffect,\n} from 'ra-core';\nimport get from 'lodash/get';\n\nimport { TabbedFormView } from './TabbedFormView';\nimport { useFormRootPath } from './useFormRootPath';\n\n/**\n * Form layout where inputs are divided by tab, one input per line.\n *\n * Pass FormTab components as children.\n *\n * @example\n *\n * import * as React from \"react\";\n * import {\n *     Edit,\n *     TabbedForm,\n *     FormTab,\n *     Datagrid,\n *     TextField,\n *     DateField,\n *     TextInput,\n *     ReferenceManyField,\n *     NumberInput,\n *     DateInput,\n *     BooleanInput,\n *     EditButton\n * } from 'react-admin';\n *\n * export const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <TabbedForm>\n *             <FormTab label=\"summary\">\n *                 <TextInput disabled label=\"Id\" source=\"id\" />\n *                 <TextInput source=\"title\" validate={required()} />\n *                 <TextInput multiline source=\"teaser\" validate={required()} />\n *             </FormTab>\n *             <FormTab label=\"body\">\n *                 <RichTextInput source=\"body\" validate={required()} label={false} />\n *             </FormTab>\n *             <FormTab label=\"Miscellaneous\">\n *                 <TextInput label=\"Password (if protected post)\" source=\"password\" type=\"password\" />\n *                 <DateInput label=\"Publication date\" source=\"published_at\" />\n *                 <NumberInput source=\"average_note\" validate={[ number(), minValue(0) ]} />\n *                 <BooleanInput label=\"Allow comments?\" source=\"commentable\" defaultValue />\n *                 <TextInput disabled label=\"Nb views\" source=\"views\" />\n *             </FormTab>\n *             <FormTab label=\"comments\">\n *                 <ReferenceManyField reference=\"comments\" target=\"post_id\" label={false}>\n *                     <Datagrid>\n *                         <TextField source=\"body\" />\n *                         <DateField source=\"created_at\" />\n *                         <EditButton />\n *                     </Datagrid>\n *                 </ReferenceManyField>\n *             </FormTab>\n *         </TabbedForm>\n *     </Edit>\n * );\n *\n * @typedef {Object} Props the props you can use (other props are injected by Create or Edit)\n * @prop {ReactElement[]} FormTab elements\n * @prop {Object} defaultValues\n * @prop {Function} validate\n * @prop {string} redirect\n * @prop {ReactElement} toolbar The element displayed at the bottom of the form, containing the SaveButton\n *\n * @param {Props} props\n */\nexport const TabbedForm = (props: TabbedFormProps) => {\n    const formRootPathname = useFormRootPath();\n\n    return (\n        <Form formRootPathname={formRootPathname} {...props}>\n            <TabbedFormView formRootPathname={formRootPathname} {...props} />\n        </Form>\n    );\n};\n\nTabbedForm.propTypes = {\n    children: PropTypes.node,\n    defaultValues: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n    formRootPathname: PropTypes.string,\n    mutationMode: PropTypes.oneOf(['pessimistic', 'optimistic', 'undoable']),\n    // @ts-ignore\n    record: PropTypes.object,\n    redirect: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.bool,\n        PropTypes.func,\n    ]),\n    saving: PropTypes.bool,\n    validate: PropTypes.func,\n};\n\nexport interface TabbedFormProps\n    extends Omit<FormProps, 'render'>,\n        Omit<\n            HtmlHTMLAttributes<HTMLFormElement>,\n            'defaultValue' | 'onSubmit' | 'children'\n        > {\n    children: ReactNode;\n    className?: string;\n    defaultValues?: any;\n    formRootPathname?: string;\n    mutationMode?: MutationMode;\n    record?: RaRecord;\n    redirect?: RedirectionSideEffect;\n    resource?: string;\n    syncWithLocation?: boolean;\n    tabs?: ReactElement;\n    toolbar?: ReactElement;\n    warnWhenUnsavedChanges?: boolean;\n}\n\nexport const findTabsWithErrors = (children, errors) => {\n    console.warn(\n        'Deprecated. FormTab now wrap their content inside a FormGroupContextProvider. If you implemented custom forms with tabs, please use the FormGroupContextProvider. See https://marmelab.com/react-admin/EditTutorial.html#grouping-inputs'\n    );\n\n    return Children.toArray(children).reduce((acc: any[], child) => {\n        if (!isValidElement(child)) {\n            return acc;\n        }\n\n        const inputs = Children.toArray(child.props.children);\n\n        if (\n            inputs.some(\n                input =>\n                    isValidElement(input) && get(errors, input.props.source)\n            )\n        ) {\n            return [...acc, child.props.label];\n        }\n\n        return acc;\n    }, []);\n};\n","import * as React from 'react';\nimport {\n    ChangeEvent,\n    Children,\n    ComponentType,\n    cloneElement,\n    isValidElement,\n    ReactElement,\n    ReactNode,\n    useState,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport {\n    Routes,\n    Route,\n    matchPath,\n    useResolvedPath,\n    useLocation,\n} from 'react-router-dom';\nimport { CardContent, Divider, SxProps } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport { useResourceContext } from 'ra-core';\nimport { Toolbar } from './Toolbar';\nimport { TabbedFormTabs, getTabbedFormTabFullPath } from './TabbedFormTabs';\n\nexport const TabbedFormView = (props: TabbedFormViewProps): ReactElement => {\n    const {\n        children,\n        className,\n        component: Component = DefaultComponent,\n        formRootPathname,\n        syncWithLocation = true,\n        tabs = DefaultTabs,\n        toolbar = DefaultToolbar,\n    } = props;\n    const location = useLocation();\n    const resolvedPath = useResolvedPath('');\n    const resource = useResourceContext(props);\n    const [tabValue, setTabValue] = useState(0);\n\n    const handleTabChange = (event: ChangeEvent<{}>, value: any): void => {\n        if (!syncWithLocation) {\n            setTabValue(value);\n        }\n    };\n\n    const renderTabHeaders = () =>\n        cloneElement(\n            tabs,\n            {\n                onChange: handleTabChange,\n                syncWithLocation,\n                url: formRootPathname,\n                value: tabValue,\n            },\n            children\n        );\n\n    return (\n        <Root className={clsx('tabbed-form', className)}>\n            {syncWithLocation ? (\n                <Routes>\n                    <Route path=\"/*\" element={renderTabHeaders()} />\n                </Routes>\n            ) : (\n                renderTabHeaders()\n            )}\n            <Divider />\n            <Component>\n                {/* All tabs are rendered (not only the one in focus), to allow validation\n                on tabs not in focus. The tabs receive a `hidden` property, which they'll\n                use to hide the tab using CSS if it's not the one in focus.\n                See https://github.com/marmelab/react-admin/issues/1866 */}\n                {Children.map(children, (tab: ReactElement, index) => {\n                    if (!tab) {\n                        return null;\n                    }\n                    const tabPath = getTabbedFormTabFullPath(tab, index);\n                    const hidden = syncWithLocation\n                        ? !matchPath(\n                              `${resolvedPath.pathname}/${tabPath}`,\n                              location.pathname\n                          )\n                        : tabValue !== index;\n\n                    return isValidElement<any>(tab)\n                        ? React.cloneElement(tab, {\n                              intent: 'content',\n                              resource,\n                              hidden,\n                              value: syncWithLocation ? tabPath : index,\n                          })\n                        : null;\n                })}\n            </Component>\n            {toolbar}\n        </Root>\n    );\n};\n\nTabbedFormView.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    location: PropTypes.object,\n    match: PropTypes.object,\n    // @ts-ignore\n    resource: PropTypes.string,\n    tabs: PropTypes.element,\n    toolbar: PropTypes.element,\n    validate: PropTypes.func,\n    value: PropTypes.number,\n};\n\nconst DefaultTabs = <TabbedFormTabs />;\nconst DefaultComponent = ({ children }) => (\n    <CardContent>{children}</CardContent>\n);\nconst DefaultToolbar = <Toolbar />;\n\nexport interface TabbedFormViewProps {\n    children?: ReactNode;\n    className?: string;\n    component?: ComponentType<any>;\n    resource?: string;\n    formRootPathname?: string;\n    syncWithLocation?: boolean;\n    tabs?: ReactElement;\n    toolbar?: ReactElement;\n    sx?: SxProps;\n}\n\nconst PREFIX = 'RaTabbedForm';\n\nexport const TabbedFormClasses = {\n    errorTabButton: `${PREFIX}-errorTabButton`,\n};\n\nconst Root = styled('div', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    [`& .MuiTab-root.${TabbedFormClasses.errorTabButton}`]: {\n        color: theme.palette.error.main,\n    },\n}));\n","import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { Children, ReactNode } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Toolbar as MuiToolbar,\n    ToolbarProps as MuiToolbarProps,\n    useMediaQuery,\n    Theme,\n} from '@mui/material';\nimport clsx from 'clsx';\nimport { RaRecord } from 'ra-core';\n\nimport { SaveButton, DeleteButton } from '../button';\n\n/**\n * The Toolbar displayed at the bottom of forms.\n *\n * @example Always enable the <SaveButton />\n *\n * import * as React from 'react';\n * import {\n *     Create,\n *     DateInput,\n *     TextInput,\n *     SimpleForm,\n *     Toolbar,\n *     SaveButton,\n *     required,\n * } from 'react-admin';\n *\n * const now = new Date();\n * const defaultSort = { field: 'title', order: 'ASC' };\n *\n * const MyToolbar = props => (\n *     <Toolbar {...props} >\n *         <SaveButton alwaysEnable />\n *     </Toolbar>\n * );\n *\n * const CommentCreate = () => (\n *     <Create>\n *         <SimpleForm redirect={false} toolbar={<MyToolbar />}>\n *             <TextInput\n *                 source=\"author.name\"\n *                 fullWidth\n *             />\n *             <DateInput source=\"created_at\" defaultValue={now} />\n *             <TextInput source=\"body\" fullWidth={true} multiline={true} />\n *         </SimpleForm>\n *     </Create>\n * );\n *\n * @typedef {Object} Props the props you can use (other props are injected by the <SimpleForm>)\n * @prop {ReactElement[]} children Customize the buttons you want to display in the <Toolbar>.\n *\n */\nexport const Toolbar = <\n    RecordType extends Partial<RaRecord> = Partial<RaRecord>\n>(\n    props: ToolbarProps<RecordType>\n) => {\n    const { children, className, resource, ...rest } = props;\n\n    const isXs = useMediaQuery<Theme>(theme => theme.breakpoints.down('sm'));\n\n    return (\n        <StyledToolbar\n            className={clsx(\n                {\n                    [ToolbarClasses.mobileToolbar]: isXs,\n                    [ToolbarClasses.desktopToolbar]: !isXs,\n                },\n                className\n            )}\n            role=\"toolbar\"\n            {...rest}\n        >\n            {Children.count(children) === 0 ? (\n                <div className={ToolbarClasses.defaultToolbar}>\n                    <SaveButton />\n                    <DeleteButton resource={resource} />\n                </div>\n            ) : (\n                children\n            )}\n        </StyledToolbar>\n    );\n};\n\nexport interface ToolbarProps<RecordType extends Partial<RaRecord> = any>\n    extends Omit<MuiToolbarProps, 'classes'> {\n    children?: ReactNode;\n    className?: string;\n    record?: RecordType;\n    resource?: string;\n}\n\nToolbar.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    record: PropTypes.any,\n    resource: PropTypes.string,\n};\n\nconst PREFIX = 'RaToolbar';\n\nexport const ToolbarClasses = {\n    desktopToolbar: `${PREFIX}-desktopToolbar`,\n    mobileToolbar: `${PREFIX}-mobileToolbar`,\n    defaultToolbar: `${PREFIX}-defaultToolbar`,\n};\n\nconst StyledToolbar = styled(MuiToolbar, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    backgroundColor:\n        theme.palette.mode === 'light'\n            ? theme.palette.grey[100]\n            : theme.palette.grey[900],\n\n    [`&.${ToolbarClasses.desktopToolbar}`]: {},\n\n    [`&.${ToolbarClasses.mobileToolbar}`]: {\n        position: 'fixed',\n        bottom: 0,\n        left: 0,\n        right: 0,\n        padding: '16px',\n        width: '100%',\n        boxSizing: 'border-box',\n        flexShrink: 0,\n        zIndex: 2,\n    },\n\n    [`& .${ToolbarClasses.defaultToolbar}`]: {\n        flex: 1,\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n}));\n","import * as React from 'react';\nimport { Children, cloneElement, isValidElement, ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport Tabs, { TabsProps } from '@mui/material/Tabs';\nimport { useParams } from 'react-router-dom';\n\nexport const TabbedFormTabs = (props: TabbedFormTabsProps) => {\n    const { children, url, syncWithLocation, value, ...rest } = props;\n\n    const params = useParams();\n\n    // params will include eventual parameters from the root pathname and * for the remaining part\n    // which should match the tabs paths\n    const tabValue = params['*'];\n\n    return (\n        <Tabs\n            value={syncWithLocation ? tabValue : value}\n            indicatorColor=\"primary\"\n            {...rest}\n        >\n            {Children.map(children, (tab: ReactElement, index) => {\n                if (!isValidElement<any>(tab)) return null;\n\n                // Builds the full tab which is the concatenation of the last matched route in the\n                // TabbedShowLayout hierarchy (ex: '/posts/create', '/posts/12', , '/posts/12/show')\n                // and the tab path.\n                // This will be used as the Tab's value\n                const tabPath = getTabbedFormTabFullPath(tab, index);\n\n                return cloneElement(tab, {\n                    intent: 'header',\n                    value: syncWithLocation ? tabPath : index,\n                    syncWithLocation,\n                });\n            })}\n        </Tabs>\n    );\n};\n\nTabbedFormTabs.propTypes = {\n    children: PropTypes.node,\n    url: PropTypes.string,\n    tabsWithErrors: PropTypes.arrayOf(PropTypes.string),\n};\n\nexport const getTabbedFormTabFullPath = (\n    tab: ReactElement,\n    index: number\n): string =>\n    tab.props.path != null ? tab.props.path : index > 0 ? index.toString() : '';\n\nexport interface TabbedFormTabsProps extends TabsProps {\n    url?: string;\n    tabsWithErrors?: string[];\n    syncWithLocation?: boolean;\n}\n","import { matchPath, useLocation } from 'react-router-dom';\n\n/**\n * This hook infers the tabbed form root path from the current location.\n */\nexport const useFormRootPath = () => {\n    const location = useLocation();\n    const createMatch = matchPath(':resource/create/*', location.pathname);\n    const editMatch = matchPath(':resource/:id/*', location.pathname);\n\n    if (createMatch) {\n        return createMatch.pathnameBase;\n    }\n\n    if (editMatch) {\n        return editMatch.pathnameBase;\n    }\n\n    return '';\n};\n","import * as React from 'react';\nimport { ReactElement, ReactNode } from 'react';\nimport PropTypes from 'prop-types';\nimport { FormGroupContextProvider } from 'ra-core';\nimport { Stack, StackProps, TabProps as MuiTabProps } from '@mui/material';\n\nimport { FormTabHeader } from './FormTabHeader';\n\nexport const FormTab = (props: FormTabProps) => {\n    const {\n        className,\n        contentClassName,\n        children,\n        hidden,\n        icon,\n        intent,\n        label,\n        onChange,\n        path,\n        resource,\n        syncWithLocation,\n        value,\n        ...rest\n    } = props;\n\n    const renderHeader = () => (\n        <FormTabHeader\n            label={label}\n            value={value}\n            icon={icon}\n            className={className}\n            syncWithLocation={syncWithLocation}\n            onChange={onChange}\n            {...sanitizeRestProps(rest)}\n        />\n    );\n\n    const renderContent = () => (\n        <FormGroupContextProvider name={value.toString()}>\n            <Stack\n                alignItems=\"flex-start\"\n                style={hidden ? hiddenStyle : null}\n                className={contentClassName}\n                id={`tabpanel-${value}`}\n                aria-labelledby={`tabheader-${value}`}\n                // Set undefined instead of false because WAI-ARIA Authoring Practices 1.1\n                // notes that aria-hidden=\"false\" currently behaves inconsistently across browsers.\n                aria-hidden={hidden || undefined}\n                {...rest}\n            >\n                {children}\n            </Stack>\n        </FormGroupContextProvider>\n    );\n\n    return intent === 'header' ? renderHeader() : renderContent();\n};\n\nFormTab.propTypes = {\n    className: PropTypes.string,\n    contentClassName: PropTypes.string,\n    children: PropTypes.node,\n    intent: PropTypes.oneOf(['header', 'content']),\n    hidden: PropTypes.bool,\n    icon: PropTypes.element,\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.element])\n        .isRequired,\n    path: PropTypes.string,\n    // @ts-ignore\n    resource: PropTypes.string,\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n};\n\nexport interface FormTabProps\n    extends Omit<StackProps, 'color'>,\n        Omit<MuiTabProps, 'children' | 'classes' | 'ref'> {\n    className?: string;\n    children?: ReactNode;\n    contentClassName?: string;\n    hidden?: boolean;\n    icon?: ReactElement;\n    intent?: 'header' | 'content';\n    label: string | ReactElement;\n    path?: string;\n    resource?: string;\n    syncWithLocation?: boolean;\n    value?: string | number;\n}\n\nFormTab.displayName = 'FormTab';\n\nconst hiddenStyle = { display: 'none' };\n\nconst sanitizeRestProps = ({\n    classes,\n    ref,\n    margin,\n    ...rest\n}: Omit<\n    FormTabProps,\n    | 'className'\n    | 'contentClassName'\n    | 'children'\n    | 'hidden'\n    | 'icon'\n    | 'intent'\n    | 'label'\n    | 'onChange'\n    | 'path'\n    | 'resource'\n    | 'syncWithLocation'\n    | 'value'\n>) => rest;\n","import * as React from 'react';\nimport { isValidElement, ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\nimport { Tab as MuiTab, TabProps as MuiTabProps } from '@mui/material';\nimport clsx from 'clsx';\nimport { useTranslate, useFormGroup } from 'ra-core';\nimport { useFormState } from 'react-hook-form';\n\nimport { TabbedFormClasses } from './TabbedFormView';\n\nexport const FormTabHeader = ({\n    label,\n    value,\n    icon,\n    className,\n    onChange,\n    syncWithLocation,\n    ...rest\n}: FormTabHeaderProps): ReactElement => {\n    const translate = useTranslate();\n    const location = useLocation();\n    const { isSubmitted } = useFormState();\n    const formGroup = useFormGroup(value.toString());\n\n    const propsForLink = {\n        component: Link,\n        to: { ...location, pathname: value },\n    };\n\n    return (\n        <MuiTab\n            label={\n                isValidElement(label) ? label : translate(label, { _: label })\n            }\n            value={value}\n            icon={icon}\n            className={clsx('form-tab', className, {\n                [TabbedFormClasses.errorTabButton]:\n                    !formGroup.isValid && (formGroup.isTouched || isSubmitted),\n                error:\n                    !formGroup.isValid && (formGroup.isTouched || isSubmitted),\n            })}\n            {...(syncWithLocation ? propsForLink : {})} // to avoid TypeScript screams, see https://github.com/mui-org/material-ui/issues/9106#issuecomment-451270521\n            id={`tabheader-${value}`}\n            aria-controls={`tabpanel-${value}`}\n            onChange={onChange}\n            {...rest}\n        />\n    );\n};\n\ninterface FormTabHeaderProps extends Omit<MuiTabProps, 'children'> {\n    className?: string;\n    hidden?: boolean;\n    icon?: ReactElement;\n    intent?: 'header' | 'content';\n    label: string | ReactElement;\n    margin?: 'none' | 'normal' | 'dense';\n    onChange?: (event: any) => void;\n    path?: string;\n    resource?: string;\n    syncWithLocation?: boolean;\n    value?: string | number;\n    variant?: 'standard' | 'outlined' | 'filled';\n}\n\nFormTabHeader.propTypes = {\n    className: PropTypes.string,\n    contentClassName: PropTypes.string,\n    children: PropTypes.node,\n    intent: PropTypes.oneOf(['header', 'content']),\n    hidden: PropTypes.bool,\n    icon: PropTypes.element,\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.element])\n        .isRequired,\n    margin: PropTypes.oneOf(['none', 'dense', 'normal']),\n    path: PropTypes.string,\n    // @ts-ignore\n    record: PropTypes.object,\n    resource: PropTypes.string,\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    variant: PropTypes.oneOf(['standard', 'outlined', 'filled']),\n};\n","import * as React from 'react';\nimport { ReactElement, ReactNode } from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, FormProps } from 'ra-core';\nimport { Stack, CardContent, SxProps, StackProps } from '@mui/material';\nimport { Toolbar } from './Toolbar';\n\n/**\n * Form with a one column layout, one input per line.\n *\n * Pass input components as children.\n *\n * @example\n *\n * import * as React from \"react\";\n * import { Create, Edit, SimpleForm, TextInput, DateInput, ReferenceManyField, Datagrid, TextField, DateField, EditButton } from 'react-admin';\n * import RichTextInput from 'ra-input-rich-text';\n *\n * export const PostCreate = (props) => (\n *     <Create {...props}>\n *         <SimpleForm>\n *             <TextInput source=\"title\" />\n *             <TextInput source=\"teaser\" options={{ multiline: true }} />\n *             <RichTextInput source=\"body\" />\n *             <DateInput label=\"Publication date\" source=\"published_at\" defaultValue={new Date()} />\n *         </SimpleForm>\n *     </Create>\n * );\n *\n * @typedef {Object} Props the props you can use (other props are injected by Create or Edit)\n * @prop {ReactElement[]} children Input elements\n * @prop {Object} defaultValues\n * @prop {Function} validate\n * @prop {string} redirect\n * @prop {ReactElement} toolbar The element displayed at the bottom of the form, containing the SaveButton\n *\n * @param {Props} props\n */\nexport const SimpleForm = (props: SimpleFormProps) => {\n    const {\n        children,\n        className,\n        component: Component = DefaultComponent,\n        sx,\n        toolbar = DefaultToolbar,\n        ...rest\n    } = props;\n    return (\n        <Form {...rest}>\n            <Component className={className} sx={sx}>\n                <Stack alignItems=\"flex-start\" {...sanitizeRestProps(props)}>\n                    {children}\n                </Stack>\n            </Component>\n            {toolbar}\n        </Form>\n    );\n};\n\nSimpleForm.propTypes = {\n    children: PropTypes.node,\n    defaultValues: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n    // @ts-ignore\n    record: PropTypes.object,\n    redirect: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.bool,\n        PropTypes.func,\n    ]),\n    toolbar: PropTypes.oneOfType([PropTypes.element, PropTypes.oneOf([false])]),\n    validate: PropTypes.func,\n};\n\nexport interface SimpleFormProps\n    extends Omit<FormProps, 'render'>,\n        Omit<StackProps, 'onSubmit'> {\n    children: ReactNode;\n    className?: string;\n    component?: React.ComponentType<any>;\n    defaultValues?: any;\n    toolbar?: ReactElement | false;\n    sx?: SxProps;\n}\n\nconst DefaultComponent = ({ children, sx, className }) => (\n    <CardContent sx={sx} className={className}>\n        {children}\n    </CardContent>\n);\nconst DefaultToolbar = <Toolbar />;\n\nconst sanitizeRestProps = ({\n    children,\n    className,\n    component,\n    defaultValues,\n    onSubmit,\n    record,\n    resource,\n    reValidateMode,\n    sx,\n    toolbar,\n    validate,\n    resolver,\n    warnWhenUnsavedChanges,\n    ...props\n}: SimpleFormProps) => props;\n","import * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport inflection from 'inflection';\nimport {\n    EditBase,\n    InferredElement,\n    useResourceContext,\n    useEditContext,\n    getElementsFromRecords,\n} from 'ra-core';\n\nimport { EditProps } from '../types';\nimport { EditView } from './EditView';\nimport { editFieldTypes } from './editFieldTypes';\n\nexport const EditGuesser = (props: EditProps) => {\n    const {\n        resource,\n        id,\n        mutationMode,\n        mutationOptions,\n        queryOptions,\n        redirect,\n        transform,\n        disableAuthentication,\n        ...rest\n    } = props;\n    return (\n        <EditBase\n            resource={resource}\n            id={id}\n            mutationMode={mutationMode}\n            mutationOptions={mutationOptions}\n            queryOptions={queryOptions}\n            redirect={redirect}\n            transform={transform}\n            disableAuthentication={disableAuthentication}\n        >\n            <EditViewGuesser {...rest} />\n        </EditBase>\n    );\n};\n\nconst EditViewGuesser = props => {\n    const resource = useResourceContext(props);\n    const { record } = useEditContext();\n    const [child, setChild] = useState(null);\n\n    useEffect(() => {\n        setChild(null);\n    }, [resource]);\n\n    useEffect(() => {\n        if (record && !child) {\n            const inferredElements = getElementsFromRecords(\n                [record],\n                editFieldTypes\n            );\n            const inferredChild = new InferredElement(\n                editFieldTypes.form,\n                null,\n                inferredElements\n            );\n            setChild(inferredChild.getElement());\n\n            if (process.env.NODE_ENV === 'production') return;\n\n            const representation = inferredChild.getRepresentation();\n\n            const components = ['Edit']\n                .concat(\n                    Array.from(\n                        new Set(\n                            Array.from(representation.matchAll(/<([^/\\s>]+)/g))\n                                .map(match => match[1])\n                                .filter(component => component !== 'span')\n                        )\n                    )\n                )\n                .sort();\n\n            // eslint-disable-next-line no-console\n            console.log(\n                `Guessed Edit:\n\nimport { ${components.join(', ')} } from 'react-admin';\n\nexport const ${inflection.capitalize(\n                    inflection.singularize(resource)\n                )}Edit = () => (\n    <Edit>\n${representation}\n    </Edit>\n);`\n            );\n        }\n    }, [record, child, resource]);\n\n    return <EditView {...props}>{child}</EditView>;\n};\n\nEditViewGuesser.propTypes = EditView.propTypes;\n","import * as React from 'react';\nimport { ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport { ShowBase, RaRecord } from 'ra-core';\n\nimport { ShowProps } from '../types';\nimport { ShowView } from './ShowView';\n\n/**\n * Page component for the Show view\n *\n * The `<Show>` component handles the headless logic of the Show page:\n * - it calls useShowController to fetch the record from the data provider,\n * - it creates a ShowContext and a RecordContext,\n * - it computes the default page title\n * - it renders the page layout with the correct title and actions\n *\n * `<Show>` is not responsible for rendering the actual page -\n * that's the job of its child component (usually `<SimpleShowLayout>`).\n *\n * @example\n *\n * // in src/posts.js\n * import * as React from \"react\";\n * import { Show, SimpleShowLayout, TextField } from 'react-admin';\n *\n * export const PostShow = () => (\n *     <Show>\n *         <SimpleShowLayout>\n *             <TextField source=\"title\" />\n *         </SimpleShowLayout>\n *     </Show>\n * );\n *\n * // in src/App.js\n * import * as React from \"react\";\n * import { Admin, Resource } from 'react-admin';\n *\n * import { PostShow } from './posts';\n *\n * const App = () => (\n *     <Admin dataProvider={...}>\n *         <Resource name=\"posts\" show={PostShow} />\n *     </Admin>\n * );\n * export default App;\n *\n * @param {ShowProps} props\n * @param {ReactElement|false} props.actions An element to display above the page content, or false to disable actions.\n * @param {string} props.className A className to apply to the page content.\n * @param {ElementType} props.component The component to use as root component (div by default).\n * @param {boolean} props.emptyWhileLoading Do not display the page content while loading the initial data.\n * @param {string} props.id The id of the resource to display (grabbed from the route params if not defined).\n * @param {Object} props.queryClient Options to pass to the react-query useQuery hook.\n * @param {string} props.resource The resource to fetch from the data provider (grabbed from the ResourceContext if not defined).\n * @param {Object} props.sx Custom style object.\n * @param {ElementType|string} props.title The title of the page. Defaults to `#{resource} #${id}`.\n *\n * @see ShowView for the actual rendering\n */\nexport const Show = <RecordType extends RaRecord = any>({\n    id,\n    resource,\n    queryOptions,\n    ...rest\n}: ShowProps<RecordType>): ReactElement => (\n    <ShowBase<RecordType>\n        id={id}\n        queryOptions={queryOptions}\n        resource={resource}\n    >\n        <ShowView {...rest} />\n    </ShowBase>\n);\n\nShow.propTypes = {\n    actions: PropTypes.oneOfType([PropTypes.element, PropTypes.bool]),\n    children: PropTypes.node.isRequired,\n    className: PropTypes.string,\n    disableAuthentication: PropTypes.bool,\n    emptyWhileLoading: PropTypes.bool,\n    component: PropTypes.elementType,\n    resource: PropTypes.string,\n    title: PropTypes.node,\n    sx: PropTypes.any,\n};\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport clsx from 'clsx';\nimport { useShowContext, useResourceDefinition } from 'ra-core';\n\nimport { ShowProps } from '../types';\nimport { ShowActions } from './ShowActions';\nimport { Title } from '../layout';\n\nconst defaultActions = <ShowActions />;\n\nexport const ShowView = (props: ShowViewProps) => {\n    const {\n        actions,\n        aside,\n        children,\n        className,\n        component: Content = Card,\n        emptyWhileLoading = false,\n        title,\n        ...rest\n    } = props;\n\n    const { defaultTitle, record } = useShowContext(props);\n    const { hasEdit } = useResourceDefinition(props);\n\n    const finalActions =\n        typeof actions === 'undefined' && hasEdit ? defaultActions : actions;\n\n    if (!children || (!record && emptyWhileLoading)) {\n        return null;\n    }\n    return (\n        <Root\n            className={clsx('show-page', className)}\n            {...sanitizeRestProps(rest)}\n        >\n            <Title title={title} defaultTitle={defaultTitle} />\n            {finalActions !== false && finalActions}\n            <div\n                className={clsx(ShowClasses.main, {\n                    [ShowClasses.noActions]: !finalActions,\n                })}\n            >\n                <Content className={ShowClasses.card}>{children}</Content>\n                {aside}\n            </div>\n        </Root>\n    );\n};\n\nexport type ShowViewProps = ShowProps;\n\nShowView.propTypes = {\n    actions: PropTypes.oneOfType([PropTypes.element, PropTypes.bool]),\n    children: PropTypes.node,\n    className: PropTypes.string,\n    emptyWhileLoading: PropTypes.bool,\n    title: PropTypes.any,\n};\n\nconst sanitizeRestProps = ({\n    defaultTitle = null,\n    hasCreate = null,\n    hasEdit = null,\n    hasList = null,\n    hasShow = null,\n    history = null,\n    id = null,\n    isLoading = null,\n    isFetching = null,\n    location = null,\n    match = null,\n    options = null,\n    refetch = null,\n    permissions = null,\n    ...rest\n}) => rest;\n\nconst PREFIX = 'RaShow';\n\nexport const ShowClasses = {\n    main: `${PREFIX}-main`,\n    noActions: `${PREFIX}-noActions`,\n    card: `${PREFIX}-card`,\n};\n\nconst Root = styled('div', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    [`& .${ShowClasses.main}`]: {\n        display: 'flex',\n    },\n    [`& .${ShowClasses.noActions}`]: {\n        marginTop: '1em',\n    },\n    [`& .${ShowClasses.card}`]: {\n        flex: '1 1 auto',\n    },\n}));\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { RaRecord, useResourceDefinition, useRecordContext } from 'ra-core';\n\nimport { EditButton } from '../button';\nimport TopToolbar from '../layout/TopToolbar';\n\n/**\n * Action Toolbar for the Show view\n *\n * Internal component. If you want to add or remove actions for a Show view,\n * write your own ShowActions Component. Then, in the <Show> component,\n * use it in the `actions` prop to pass a custom component.\n *\n * @example\n *     import Button from '@mui/material/Button';\n *     import { TopToolbar, EditButton, Show } from 'react-admin';\n *\n *     const PostShowActions = ({ record, resource }) => (\n *         <TopToolbar>\n *             <EditButton record={record} />\n *             // Add your custom actions here //\n *             <Button color=\"primary\" onClick={customAction}>Custom Action</Button>\n *         </TopToolbar>\n *     );\n *\n *     export const PostShow = (props) => (\n *         <Show actions={<PostShowActions />} {...props}>\n *             ...\n *         </Show>\n *     );\n */\nexport const ShowActions = (props: ShowActionsProps) => {\n    const record = useRecordContext(props);\n    const { hasEdit } = useResourceDefinition();\n    if (!hasEdit) {\n        return null;\n    }\n    return (\n        <TopToolbar className={props.className}>\n            <EditButton record={record} />\n        </TopToolbar>\n    );\n};\n\nexport interface ShowActionsProps {\n    className?: string;\n    record?: RaRecord;\n}\n\nShowActions.propTypes = {\n    className: PropTypes.string,\n    record: PropTypes.any,\n};\n","import * as React from 'react';\nimport { ReactNode } from 'react';\nimport { Datagrid } from '../list/datagrid/Datagrid';\nimport {\n    ArrayField,\n    BooleanField,\n    DateField,\n    EmailField,\n    NumberField,\n    ReferenceField,\n    ReferenceFieldProps,\n    ReferenceArrayField,\n    ReferenceArrayFieldProps,\n    RichTextField,\n    TextField,\n    UrlField,\n} from '../field';\nimport { SimpleShowLayout, SimpleShowLayoutProps } from './SimpleShowLayout';\nimport { InferredElement, InferredTypeMap, InputProps } from 'ra-core';\n\nexport const showFieldTypes: InferredTypeMap = {\n    show: {\n        component: (props: SimpleShowLayoutProps) => (\n            <SimpleShowLayout {...props} />\n        ), // eslint-disable-line react/display-name\n        representation: (_, children) => `        <SimpleShowLayout>\n${children.map(child => `            ${child.getRepresentation()}`).join('\\n')}\n        </SimpleShowLayout>`,\n    },\n    array: {\n        // eslint-disable-next-line react/display-name\n        component: ({\n            children,\n            ...props\n        }: { children: ReactNode } & InputProps) => (\n            <ArrayField {...props}>\n                <Datagrid>{children}</Datagrid>\n            </ArrayField>\n        ),\n        representation: (props: InputProps, children: InferredElement[]) =>\n            `<ArrayField source=\"${\n                props.source\n            }\"><Datagrid>${children\n                .map(child => child.getRepresentation())\n                .join('\\n')}</Datagrid></ArrayField>`,\n    },\n    boolean: {\n        component: BooleanField,\n        representation: (props: InputProps) =>\n            `<BooleanField source=\"${props.source}\" />`,\n    },\n    date: {\n        component: DateField,\n        representation: (props: InputProps) =>\n            `<DateField source=\"${props.source}\" />`,\n    },\n    email: {\n        component: EmailField,\n        representation: (props: InputProps) =>\n            `<EmailField source=\"${props.source}\" />`,\n    },\n    id: {\n        component: TextField,\n        representation: (props: InputProps) =>\n            `<TextField source=\"${props.source}\" />`,\n    },\n    number: {\n        component: NumberField,\n        representation: (props: InputProps) =>\n            `<NumberField source=\"${props.source}\" />`,\n    },\n    reference: {\n        component: ReferenceField,\n        representation: (props: ReferenceFieldProps) =>\n            `<ReferenceField source=\"${props.source}\" reference=\"${props.reference}\"><TextField source=\"id\" /></ReferenceField>`,\n    },\n    referenceChild: {\n        component: (props: { children: ReactNode } & InputProps) => (\n            <TextField source=\"id\" {...props} />\n        ), // eslint-disable-line react/display-name\n        representation: () => `<TextField source=\"id\" />`,\n    },\n    referenceArray: {\n        component: ReferenceArrayField,\n        representation: (props: ReferenceArrayFieldProps) =>\n            `<ReferenceArrayField source=\"${props.source}\" reference=\"${props.reference}\"><TextField source=\"id\" /></ReferenceArrayField>`,\n    },\n    referenceArrayChild: {\n        component: (props: { children: ReactNode } & InputProps) => (\n            <TextField source=\"id\" {...props} />\n        ), // eslint-disable-line react/display-name\n        representation: () => `<TextField source=\"id\" />`,\n    },\n    richText: {\n        component: RichTextField,\n        representation: (props: InputProps) =>\n            `<RichTextField source=\"${props.source}\" />`,\n    },\n    string: {\n        component: TextField,\n        representation: (props: InputProps) =>\n            `<TextField source=\"${props.source}\" />`,\n    },\n    url: {\n        component: UrlField,\n        representation: (props: InputProps) =>\n            `<UrlField source=\"${props.source}\" />`,\n    },\n};\n","import * as React from 'react';\nimport { useEffect, useState, memo, FC, ReactElement } from 'react';\nimport get from 'lodash/get';\nimport { ListContextProvider, useRecordContext } from 'ra-core';\n\nimport { PublicFieldProps, InjectedFieldProps, fieldPropTypes } from './types';\n\n/**\n * Display a collection\n *\n * Ideal for embedded arrays of objects, e.g.\n * {\n *   id: 123\n *   tags: [\n *     { name: 'foo' },\n *     { name: 'bar' }\n *   ]\n * }\n *\n * The child must be an iterator component\n * (like <Datagrid> or <SingleFieldList>).\n *\n * @example Display all the backlinks of the current post as a <Datagrid>\n * // post = {\n * //   id: 123\n * //   backlinks: [\n * //       {\n * //           uuid: '34fdf393-f449-4b04-a423-38ad02ae159e',\n * //           date: '2012-08-10T00:00:00.000Z',\n * //           url: 'http://example.com/foo/bar.html',\n * //       },\n * //       {\n * //           uuid: 'd907743a-253d-4ec1-8329-404d4c5e6cf1',\n * //           date: '2012-08-14T00:00:00.000Z',\n * //           url: 'https://blog.johndoe.com/2012/08/12/foobar.html',\n * //       }\n * //    ]\n * // }\n *     <ArrayField source=\"backlinks\">\n *         <Datagrid>\n *             <DateField source=\"date\" />\n *             <UrlField source=\"url\" />\n *         </Datagrid>\n *     </ArrayField>\n *\n * @example Display all the tags of the current post as <Chip> components\n * // post = {\n * //   id: 123\n * //   tags: [\n * //     { name: 'foo' },\n * //     { name: 'bar' }\n * //   ]\n * // }\n *     <ArrayField source=\"tags\">\n *         <SingleFieldList>\n *             <ChipField source=\"name\" />\n *         </SingleFieldList>\n *     </ArrayField>\n *\n * If you need to render a collection in a custom way, it's often simpler\n * to write your own component:\n *\n * @example\n *     const TagsField = ({ record }) => (\n *          <ul>\n *              {record.tags.map(item => (\n *                  <li key={item.name}>{item.name}</li>\n *              ))}\n *          </ul>\n *     );\n */\nexport const ArrayField: FC<ArrayFieldProps> = memo(props => {\n    const { children, resource, source } = props;\n    const record = useRecordContext(props);\n    const [data, setData] = useState(initialState);\n\n    useEffect(() => {\n        const data = get(record, source) || initialState;\n        setData(data);\n    }, [record, source]);\n\n    return (\n        <ListContextProvider\n            value={{\n                data,\n                selectedIds: [],\n                sort: { field: null, order: null },\n                displayedFilters: null,\n                filterValues: null,\n                hasCreate: null,\n                hideFilter: null,\n                isFetching: false,\n                isLoading: false,\n                onSelect: null,\n                onToggleItem: null,\n                onUnselectItems: null,\n                page: null,\n                perPage: null,\n                resource,\n                setFilters: null,\n                setPage: null,\n                setPerPage: null,\n                setSort: null,\n                showFilter: null,\n                total: data.length,\n            }}\n        >\n            {children}\n        </ListContextProvider>\n    );\n});\n\nArrayField.propTypes = {\n    ...fieldPropTypes,\n};\n\nexport interface ArrayFieldProps extends PublicFieldProps, InjectedFieldProps {\n    children: ReactElement;\n}\n\nArrayField.displayName = 'ArrayField';\n\nconst initialState = [];\n","import { ReactElement } from 'react';\nimport { RaRecord } from 'ra-core';\nimport PropTypes from 'prop-types';\nimport { TableCellProps } from '@mui/material/TableCell';\n\ntype TextAlign = TableCellProps['align'];\ntype SortOrder = 'ASC' | 'DESC';\n\nexport interface FieldProps<RecordType extends RaRecord = any>\n    extends PublicFieldProps,\n        InjectedFieldProps<RecordType> {}\n\nexport interface PublicFieldProps {\n    sortBy?: string;\n    sortByOrder?: SortOrder;\n    source?: string;\n    label?: string | ReactElement | boolean;\n    sortable?: boolean;\n    className?: string;\n    cellClassName?: string;\n    headerClassName?: string;\n    formClassName?: string;\n    textAlign?: TextAlign;\n    emptyText?: string;\n    fullWidth?: boolean;\n}\n\n// Props injected by react-admin\nexport interface InjectedFieldProps<RecordType extends RaRecord = any> {\n    record?: RecordType;\n    resource?: string;\n}\n\nexport const fieldPropTypes = {\n    sortBy: PropTypes.string,\n    sortByOrder: PropTypes.oneOf<SortOrder>(['ASC', 'DESC']),\n    source: PropTypes.string,\n    label: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.element,\n        PropTypes.bool,\n    ]),\n    sortable: PropTypes.bool,\n    className: PropTypes.string,\n    cellClassName: PropTypes.string,\n    headerClassName: PropTypes.string,\n    textAlign: PropTypes.oneOf<TextAlign>([\n        'inherit',\n        'left',\n        'center',\n        'right',\n        'justify',\n    ]),\n    emptyText: PropTypes.string,\n};\n","import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { memo, FunctionComponent } from 'react';\nimport { SvgIconComponent } from '@mui/icons-material';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport DoneIcon from '@mui/icons-material/Done';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport { Tooltip, Typography, TypographyProps } from '@mui/material';\nimport { useTranslate, useRecordContext } from 'ra-core';\n\nimport { PublicFieldProps, InjectedFieldProps, fieldPropTypes } from './types';\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\n\nexport const BooleanField: FunctionComponent<BooleanFieldProps> = memo(\n    props => {\n        const {\n            className,\n            emptyText,\n            source,\n            valueLabelTrue,\n            valueLabelFalse,\n            TrueIcon = DoneIcon,\n            FalseIcon = ClearIcon,\n            looseValue = false,\n            ...rest\n        } = props;\n        const record = useRecordContext(props);\n        const translate = useTranslate();\n\n        const value = get(record, source);\n        const isTruthyValue = value === true || (looseValue && value);\n        let ariaLabel = value ? valueLabelTrue : valueLabelFalse;\n\n        if (!ariaLabel) {\n            ariaLabel = isTruthyValue ? 'ra.boolean.true' : 'ra.boolean.false';\n        }\n\n        if (looseValue || value === false || value === true) {\n            return (\n                <StyledTypography\n                    component=\"span\"\n                    variant=\"body2\"\n                    className={className}\n                    {...sanitizeFieldRestProps(rest)}\n                >\n                    <Tooltip title={translate(ariaLabel, { _: ariaLabel })}>\n                        {isTruthyValue ? (\n                            <TrueIcon data-testid=\"true\" fontSize=\"small\" />\n                        ) : (\n                            <FalseIcon data-testid=\"false\" fontSize=\"small\" />\n                        )}\n                    </Tooltip>\n                </StyledTypography>\n            );\n        }\n\n        return (\n            <Typography\n                component=\"span\"\n                variant=\"body2\"\n                className={className}\n                {...sanitizeFieldRestProps(rest)}\n            >\n                {emptyText}\n            </Typography>\n        );\n    }\n);\n\nBooleanField.propTypes = {\n    // @ts-ignore\n    ...Typography.propTypes,\n    ...fieldPropTypes,\n    valueLabelFalse: PropTypes.string,\n    valueLabelTrue: PropTypes.string,\n    TrueIcon: PropTypes.elementType,\n    FalseIcon: PropTypes.elementType,\n    looseValue: PropTypes.bool,\n};\n\nBooleanField.displayName = 'BooleanField';\n\nexport interface BooleanFieldProps\n    extends PublicFieldProps,\n        InjectedFieldProps,\n        Omit<TypographyProps, 'textAlign'> {\n    valueLabelTrue?: string;\n    valueLabelFalse?: string;\n    TrueIcon?: SvgIconComponent;\n    FalseIcon?: SvgIconComponent;\n    looseValue?: boolean;\n}\n\nconst PREFIX = 'RaBooleanField';\n\nconst StyledTypography = styled(Typography, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})({\n    display: 'inline-flex',\n    verticalAlign: 'middle',\n    lineHeight: 0,\n});\n","export const sanitizeFieldRestProps: (props: any) => any = ({\n    cellClassName,\n    className,\n    emptyText,\n    formClassName,\n    fullWidth,\n    headerClassName,\n    label,\n    linkType,\n    link,\n    locale,\n    record,\n    refetch,\n    resource,\n    sortable,\n    sortBy,\n    sortByOrder,\n    source,\n    textAlign,\n    translateChoice,\n    ...props\n}) => props;\n","import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { memo, FC } from 'react';\nimport get from 'lodash/get';\nimport Chip, { ChipProps } from '@mui/material/Chip';\nimport Typography from '@mui/material/Typography';\nimport clsx from 'clsx';\nimport { useRecordContext } from 'ra-core';\n\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { PublicFieldProps, InjectedFieldProps, fieldPropTypes } from './types';\n\nexport const ChipField: FC<ChipFieldProps> = memo(props => {\n    const { className, source, emptyText, ...rest } = props;\n    const record = useRecordContext(props);\n\n    const value = get(record, source);\n\n    if (value == null && emptyText) {\n        return (\n            <Typography\n                component=\"span\"\n                variant=\"body2\"\n                className={className}\n                {...sanitizeFieldRestProps(rest)}\n            >\n                {emptyText}\n            </Typography>\n        );\n    }\n\n    return (\n        <StyledChip\n            className={clsx(ChipFieldClasses.chip, className)}\n            label={value}\n            {...sanitizeFieldRestProps(rest)}\n        />\n    );\n});\n\nChipField.propTypes = {\n    // @ts-ignore\n    ...ChipField.propTypes,\n    ...fieldPropTypes,\n};\n\nChipField.displayName = 'ChipField';\n\nexport interface ChipFieldProps\n    extends PublicFieldProps,\n        InjectedFieldProps,\n        Omit<ChipProps, 'label'> {}\n\nconst PREFIX = 'RaChipField';\n\nconst ChipFieldClasses = {\n    chip: `${PREFIX}-chip`,\n};\n\nconst StyledChip = styled(Chip, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})({\n    [`&.${ChipFieldClasses.chip}`]: { margin: 4, cursor: 'inherit' },\n});\n","import * as React from 'react';\nimport { memo, FC } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport { Typography, TypographyProps } from '@mui/material';\nimport { useRecordContext } from 'ra-core';\n\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { PublicFieldProps, InjectedFieldProps, fieldPropTypes } from './types';\n\n/**\n * Display a date value as a locale string.\n *\n * Uses Intl.DateTimeFormat() if available, passing the locales and options props as arguments.\n * If Intl is not available, it outputs date as is (and ignores the locales and options props).\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString\n * @example\n * <DateField source=\"published_at\" />\n * // renders the record { id: 1234, published_at: new Date('2012-11-07') } as\n * <span>07/11/2012</span>\n *\n * <DateField source=\"published_at\" className=\"red\" />\n * // renders the record { id: 1234, new Date('2012-11-07') } as\n * <span class=\"red\">07/11/2012</span>\n *\n * <DateField source=\"share\" options={{ weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }} />\n * // renders the record { id: 1234, new Date('2012-11-07') } as\n * <span>Wednesday, November 7, 2012</span>\n *\n * <DateField source=\"price\" locales=\"fr-FR\" options={{ weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }} />\n * // renders the record { id: 1234, new Date('2012-11-07') } as\n * <span>mercredi 7 novembre 2012</span>\n */\nexport const DateField: FC<DateFieldProps> = memo(props => {\n    const {\n        className,\n        emptyText,\n        locales,\n        options,\n        showTime = false,\n        source,\n        ...rest\n    } = props;\n    const record = useRecordContext(props);\n    if (!record) {\n        return null;\n    }\n    const value = get(record, source);\n    if (value == null || value === '') {\n        return emptyText ? (\n            <Typography\n                component=\"span\"\n                variant=\"body2\"\n                className={className}\n                {...sanitizeFieldRestProps(rest)}\n            >\n                {emptyText}\n            </Typography>\n        ) : null;\n    }\n\n    const date = value instanceof Date ? value : new Date(value);\n    let dateOptions = options;\n    if (\n        typeof value === 'string' &&\n        value.length <= 10 &&\n        !showTime &&\n        !options\n    ) {\n        // Input is a date string (e.g. '2022-02-15') without time and time zone.\n        // Force timezone to UTC to fix issue with people in negative time zones\n        // who may see a different date when calling toLocaleDateString().\n        dateOptions = { timeZone: 'UTC' };\n    }\n    const dateString = showTime\n        ? toLocaleStringSupportsLocales\n            ? date.toLocaleString(locales, options)\n            : date.toLocaleString()\n        : toLocaleStringSupportsLocales\n        ? date.toLocaleDateString(locales, dateOptions)\n        : date.toLocaleDateString();\n\n    return (\n        <Typography\n            component=\"span\"\n            variant=\"body2\"\n            className={className}\n            {...sanitizeFieldRestProps(rest)}\n        >\n            {dateString}\n        </Typography>\n    );\n});\n\nDateField.propTypes = {\n    // @ts-ignore\n    ...Typography.propTypes,\n    ...fieldPropTypes,\n    locales: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.arrayOf(PropTypes.string),\n    ]),\n    options: PropTypes.object,\n    showTime: PropTypes.bool,\n};\n\nDateField.displayName = 'DateField';\n\nexport interface DateFieldProps\n    extends PublicFieldProps,\n        InjectedFieldProps,\n        Omit<TypographyProps, 'textAlign'> {\n    locales?: string | string[];\n    options?: object;\n    showTime?: boolean;\n}\n\nconst toLocaleStringSupportsLocales = (() => {\n    // from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString\n    try {\n        new Date().toLocaleString('i');\n    } catch (error) {\n        return error instanceof RangeError;\n    }\n    return false;\n})();\n","import * as React from 'react';\nimport { memo, FC } from 'react';\nimport get from 'lodash/get';\nimport Typography from '@mui/material/Typography';\nimport { Link, LinkProps } from '@mui/material';\nimport { useRecordContext } from 'ra-core';\n\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { PublicFieldProps, InjectedFieldProps, fieldPropTypes } from './types';\n\nexport const EmailField: FC<EmailFieldProps> = memo(props => {\n    const { className, source, emptyText, ...rest } = props;\n    const record = useRecordContext(props);\n    const value = get(record, source);\n\n    if (value == null) {\n        return emptyText ? (\n            <Typography\n                component=\"span\"\n                variant=\"body2\"\n                className={className}\n                {...sanitizeFieldRestProps(rest)}\n            >\n                {emptyText}\n            </Typography>\n        ) : null;\n    }\n\n    return (\n        <Link\n            className={className}\n            href={`mailto:${value}`}\n            onClick={stopPropagation}\n            variant=\"body2\"\n            {...sanitizeFieldRestProps(rest)}\n        >\n            {value}\n        </Link>\n    );\n});\n\nEmailField.propTypes = fieldPropTypes;\nEmailField.displayName = 'EmailField';\n\nexport interface EmailFieldProps\n    extends PublicFieldProps,\n        InjectedFieldProps,\n        Omit<LinkProps, 'textAlign'> {}\n\n// useful to prevent click bubbling in a Datagrid with rowClick\nconst stopPropagation = e => e.stopPropagation();\n","import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport Typography from '@mui/material/Typography';\nimport { useRecordContext } from 'ra-core';\n\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { PublicFieldProps, InjectedFieldProps, fieldPropTypes } from './types';\nimport { SxProps } from '@mui/system';\n\n/**\n * Render a link to a file based on a path contained in a record field\n *\n * @example\n * import { FileField } from 'react-admin';\n *\n * <FileField source=\"url\" title=\"title\" />\n *\n * // renders the record { id: 123, url: 'doc.pdf', title: 'Presentation' } as\n * <div>\n *     <a href=\"doc.pdf\" title=\"Presentation\">Presentation</a>\n * </div>\n */\nexport const FileField = (props: FileFieldProps) => {\n    const {\n        className,\n        emptyText,\n        source,\n        title,\n        src,\n        target,\n        download,\n        ping,\n        rel,\n        ...rest\n    } = props;\n    const record = useRecordContext(props);\n    const sourceValue = get(record, source);\n\n    if (!sourceValue) {\n        return emptyText ? (\n            <Typography\n                component=\"span\"\n                variant=\"body2\"\n                className={className}\n                {...sanitizeFieldRestProps(rest)}\n            >\n                {emptyText}\n            </Typography>\n        ) : (\n            <Root className={className} {...sanitizeFieldRestProps(rest)} />\n        );\n    }\n\n    if (Array.isArray(sourceValue)) {\n        return (\n            <StyledList className={className} {...sanitizeFieldRestProps(rest)}>\n                {sourceValue.map((file, index) => {\n                    const fileTitleValue = get(file, title) || title;\n                    const srcValue = get(file, src) || title;\n\n                    return (\n                        <li key={index}>\n                            <a\n                                href={srcValue}\n                                title={fileTitleValue}\n                                target={target}\n                                download={download}\n                                ping={ping}\n                                rel={rel}\n                            >\n                                {fileTitleValue}\n                            </a>\n                        </li>\n                    );\n                })}\n            </StyledList>\n        );\n    }\n\n    const titleValue = get(record, title) || title;\n\n    return (\n        <Root className={className} {...sanitizeFieldRestProps(rest)}>\n            <a\n                href={sourceValue}\n                title={titleValue}\n                target={target}\n                download={download}\n                ping={ping}\n                rel={rel}\n            >\n                {titleValue}\n            </a>\n        </Root>\n    );\n};\n\nexport interface FileFieldProps extends PublicFieldProps, InjectedFieldProps {\n    src?: string;\n    title?: string;\n    target?: string;\n    download?: boolean | string;\n    ping?: string;\n    rel?: string;\n    sx?: SxProps;\n}\n\nFileField.propTypes = {\n    ...fieldPropTypes,\n    src: PropTypes.string,\n    title: PropTypes.string,\n    target: PropTypes.string,\n    download: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n    ping: PropTypes.string,\n    rel: PropTypes.string,\n};\n\nconst PREFIX = 'RaFileField';\n\nconst Root = styled('div', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})({\n    display: 'inline-block',\n});\n\nconst StyledList = styled('ul')({\n    display: 'inline-block',\n});\n","import * as React from 'react';\nimport { useMemo } from 'react';\nimport { RaRecord, useRecordContext } from 'ra-core';\nimport PropTypes from 'prop-types';\nimport Typography, { TypographyProps } from '@mui/material/Typography';\n\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { PublicFieldProps, InjectedFieldProps, fieldPropTypes } from './types';\n\n/**\n * Field using a render function\n *\n * @example\n * <FunctionField\n *     source=\"last_name\" // used for sorting\n *     label=\"Name\"\n *     render={record => record && `${record.first_name} ${record.last_name}`}\n * />\n */\nexport const FunctionField = <RecordType extends RaRecord = any>(\n    props: FunctionFieldProps<RecordType>\n) => {\n    const { className, source = '', render, ...rest } = props;\n    const record = useRecordContext(props);\n    return useMemo(\n        () =>\n            record ? (\n                <Typography\n                    component=\"span\"\n                    variant=\"body2\"\n                    className={className}\n                    {...sanitizeFieldRestProps(rest)}\n                >\n                    {render(record, source)}\n                </Typography>\n            ) : null,\n        [className, record, source, render, rest]\n    );\n};\n\nFunctionField.propTypes = {\n    // @ts-ignore\n    ...Typography.propTypes,\n    ...fieldPropTypes,\n    render: PropTypes.func.isRequired,\n};\n\nexport interface FunctionFieldProps<RecordType extends RaRecord = any>\n    extends PublicFieldProps,\n        InjectedFieldProps<RecordType>,\n        Omit<TypographyProps, 'textAlign'> {\n    render: (record?: RecordType, source?: string) => any;\n}\n","import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { Box, Typography } from '@mui/material';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport clsx from 'clsx';\nimport { useRecordContext } from 'ra-core';\n\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { PublicFieldProps, InjectedFieldProps, fieldPropTypes } from './types';\nimport { SxProps } from '@mui/system';\n\nexport const ImageField = (props: ImageFieldProps) => {\n    const { className, emptyText, source, src, title, ...rest } = props;\n    const record = useRecordContext(props);\n    const sourceValue = get(record, source);\n\n    if (!sourceValue) {\n        return emptyText ? (\n            <Typography\n                component=\"span\"\n                variant=\"body2\"\n                className={className}\n                {...sanitizeFieldRestProps(rest)}\n            >\n                {emptyText}\n            </Typography>\n        ) : (\n            <div className={className} {...sanitizeFieldRestProps(rest)} />\n        );\n    }\n\n    if (Array.isArray(sourceValue)) {\n        return (\n            <List\n                className={clsx(ImageFieldClasses.list, className)}\n                {...sanitizeFieldRestProps(rest)}\n            >\n                {sourceValue.map((file, index) => {\n                    const fileTitleValue = get(file, title) || title;\n                    const srcValue = get(file, src) || title;\n\n                    return (\n                        <li key={index}>\n                            <img\n                                alt={fileTitleValue}\n                                title={fileTitleValue}\n                                src={srcValue}\n                                className={ImageFieldClasses.image}\n                            />\n                        </li>\n                    );\n                })}\n            </List>\n        );\n    }\n\n    const titleValue = get(record, title) || title;\n\n    return (\n        <Box className={className} {...sanitizeFieldRestProps(rest)}>\n            <img\n                title={titleValue}\n                alt={titleValue}\n                src={sourceValue}\n                className={ImageFieldClasses.image}\n            />\n        </Box>\n    );\n};\n\n// What? TypeScript loses the displayName if we don't set it explicitly\nImageField.displayName = 'ImageField';\n\nImageField.propTypes = {\n    ...fieldPropTypes,\n    src: PropTypes.string,\n    title: PropTypes.string,\n};\n\nconst PREFIX = 'RaImageField';\n\nexport const ImageFieldClasses = {\n    list: `${PREFIX}-list`,\n    image: `${PREFIX}-image`,\n};\n\nconst List = styled('ul', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})({\n    [`&.${ImageFieldClasses.list}`]: {\n        display: 'flex',\n        listStyleType: 'none',\n    },\n    [`& .${ImageFieldClasses.image}`]: {\n        margin: '0.5rem',\n        maxHeight: '10rem',\n    },\n});\n\nexport interface ImageFieldProps extends PublicFieldProps, InjectedFieldProps {\n    src?: string;\n    title?: string;\n    sx?: SxProps;\n}\n","import * as React from 'react';\nimport { memo, FC } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport Typography, { TypographyProps } from '@mui/material/Typography';\nimport { useRecordContext } from 'ra-core';\n\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { PublicFieldProps, InjectedFieldProps, fieldPropTypes } from './types';\n\n/**\n * Display a numeric value as a locale string.\n *\n * Uses Intl.NumberFormat() if available, passing the locales and options props as arguments.\n * If Intl is not available, it outputs number as is (and ignores the locales and options props).\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString\n * @example\n * <NumberField source=\"score\" />\n * // renders the record { id: 1234, score: 567 } as\n * <span>567</span>\n *\n * <NumberField source=\"score\" className=\"red\" />\n * // renders the record { id: 1234, score: 567 } as\n * <span class=\"red\">567</span>\n *\n * <NumberField source=\"share\" options={{ style: 'percent' }} />\n * // renders the record { id: 1234, share: 0.2545 } as\n * <span>25%</span>\n *\n * <NumberField source=\"price\" options={{ style: 'currency', currency: 'USD' }} />\n * // renders the record { id: 1234, price: 25.99 } as\n * <span>$25.99</span>\n *\n * <NumberField source=\"price\" locales=\"fr-FR\" options={{ style: 'currency', currency: 'USD' }} />\n * // renders the record { id: 1234, price: 25.99 } as\n * <span>25,99 $US</span>\n */\nexport const NumberField: FC<NumberFieldProps> = memo(props => {\n    const {\n        className,\n        emptyText,\n        source,\n        locales,\n        options,\n        textAlign,\n        ...rest\n    } = props;\n    const record = useRecordContext(props);\n    if (!record) {\n        return null;\n    }\n    const value = get(record, source);\n    if (value == null) {\n        return emptyText ? (\n            <Typography\n                component=\"span\"\n                variant=\"body2\"\n                className={className}\n                {...sanitizeFieldRestProps(rest)}\n            >\n                {emptyText}\n            </Typography>\n        ) : null;\n    }\n\n    return (\n        <Typography\n            variant=\"body2\"\n            component=\"span\"\n            className={className}\n            {...sanitizeFieldRestProps(rest)}\n        >\n            {hasNumberFormat ? value.toLocaleString(locales, options) : value}\n        </Typography>\n    );\n});\n\n// what? TypeScript loses the displayName if we don't set it explicitly\nNumberField.displayName = 'NumberField';\n\nNumberField.defaultProps = {\n    textAlign: 'right',\n};\n\nNumberField.propTypes = {\n    // @ts-ignore\n    ...Typography.propTypes,\n    ...fieldPropTypes,\n    locales: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.arrayOf(PropTypes.string),\n    ]),\n    options: PropTypes.object,\n};\n\nexport interface NumberFieldProps\n    extends PublicFieldProps,\n        InjectedFieldProps,\n        Omit<TypographyProps, 'textAlign'> {\n    locales?: string | string[];\n    options?: object;\n}\n\nconst hasNumberFormat = !!(\n    typeof Intl === 'object' &&\n    Intl &&\n    typeof Intl.NumberFormat === 'function'\n);\n","import * as React from 'react';\nimport { FC, memo, ReactElement, ReactNode } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    ListContextProvider,\n    useListContext,\n    ListControllerProps,\n    useReferenceArrayFieldController,\n    SortPayload,\n    FilterPayload,\n    ResourceContextProvider,\n    useRecordContext,\n} from 'ra-core';\n\nimport { fieldPropTypes, PublicFieldProps, InjectedFieldProps } from './types';\nimport { LinearProgress } from '../layout';\nimport { styled } from '@mui/material/styles';\nimport { SxProps } from '@mui/system';\n\n/**\n * A container component that fetches records from another resource specified\n * by an array of *ids* in current record.\n *\n * You must define the fields to be passed to the iterator component as children.\n *\n * @example Display all the products of the current order as datagrid\n * // order = {\n * //   id: 123,\n * //   product_ids: [456, 457, 458],\n * // }\n * <ReferenceArrayField label=\"Products\" reference=\"products\" source=\"product_ids\">\n *     <Datagrid>\n *         <TextField source=\"id\" />\n *         <TextField source=\"description\" />\n *         <NumberField source=\"price\" options={{ style: 'currency', currency: 'USD' }} />\n *         <EditButton />\n *     </Datagrid>\n * </ReferenceArrayField>\n *\n * @example Display all the categories of the current product as a list of chips\n * // product = {\n * //   id: 456,\n * //   category_ids: [11, 22, 33],\n * // }\n * <ReferenceArrayField label=\"Categories\" reference=\"categories\" source=\"category_ids\">\n *     <SingleFieldList>\n *         <ChipField source=\"name\" />\n *     </SingleFieldList>\n * </ReferenceArrayField>\n *\n * By default, restricts the displayed values to 1000. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceArrayField perPage={10} reference=\"categories\" source=\"category_ids\">\n *    ...\n * </ReferenceArrayField>\n *\n * By default, the field displays the results in the order in which they are referenced\n * (i.e. in the order of the list of ids). You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceArrayField sort={{ field: 'name', order: 'ASC' }} reference=\"categories\" source=\"category_ids\">\n *    ...\n * </ReferenceArrayField>\n *\n * Also, you can filter the results to display only a subset of values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceArrayField filter={{ is_published: true }} reference=\"categories\" source=\"category_ids\">\n *    ...\n * </ReferenceArrayField>\n */\nexport const ReferenceArrayField: FC<ReferenceArrayFieldProps> = props => {\n    const {\n        filter,\n        page = 1,\n        perPage,\n        reference,\n        resource,\n        sort,\n        source,\n    } = props;\n    const record = useRecordContext(props);\n    const controllerProps = useReferenceArrayFieldController({\n        filter,\n        page,\n        perPage,\n        record,\n        reference,\n        resource,\n        sort,\n        source,\n    });\n    return (\n        <ResourceContextProvider value={reference}>\n            <ListContextProvider value={controllerProps}>\n                <PureReferenceArrayFieldView {...props} />\n            </ListContextProvider>\n        </ResourceContextProvider>\n    );\n};\n\nReferenceArrayField.propTypes = {\n    ...fieldPropTypes,\n    className: PropTypes.string,\n    children: PropTypes.node.isRequired,\n    label: fieldPropTypes.label,\n    record: PropTypes.any,\n    reference: PropTypes.string.isRequired,\n    resource: PropTypes.string,\n    sortBy: PropTypes.string,\n    sortByOrder: fieldPropTypes.sortByOrder,\n    source: PropTypes.string.isRequired,\n};\n\nexport interface ReferenceArrayFieldProps\n    extends PublicFieldProps,\n        InjectedFieldProps {\n    children: ReactNode;\n    filter?: FilterPayload;\n    page?: number;\n    pagination?: ReactElement;\n    perPage?: number;\n    reference: string;\n    resource?: string;\n    sort?: SortPayload;\n    sx?: SxProps;\n}\n\nexport interface ReferenceArrayFieldViewProps\n    extends Omit<ReferenceArrayFieldProps, 'resource' | 'page' | 'perPage'>,\n        ListControllerProps {}\n\nexport const ReferenceArrayFieldView: FC<ReferenceArrayFieldViewProps> = props => {\n    const { children, pagination, className, sx } = props;\n    const { isLoading, total } = useListContext(props);\n\n    return (\n        <Root className={className} sx={sx}>\n            {isLoading ? (\n                <LinearProgress\n                    className={ReferenceArrayFieldClasses.progress}\n                />\n            ) : (\n                <span>\n                    {children}\n                    {pagination && total !== undefined ? pagination : null}\n                </span>\n            )}\n        </Root>\n    );\n};\n\nReferenceArrayFieldView.propTypes = {\n    className: PropTypes.string,\n    children: PropTypes.node.isRequired,\n    reference: PropTypes.string.isRequired,\n};\n\nconst PREFIX = 'RaReferenceArrayField';\n\nexport const ReferenceArrayFieldClasses = {\n    progress: `${PREFIX}-progress`,\n};\n\nconst Root = styled('div', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    [`& .${ReferenceArrayFieldClasses.progress}`]: {\n        marginTop: theme.spacing(2),\n    },\n}));\n\nconst PureReferenceArrayFieldView = memo(ReferenceArrayFieldView);\n","import * as React from 'react';\nimport { FC, memo, ReactNode } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport { Typography, SxProps } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport ErrorIcon from '@mui/icons-material/Error';\nimport {\n    useReference,\n    UseReferenceResult,\n    LinkToType,\n    ResourceContextProvider,\n    RecordContextProvider,\n    RaRecord,\n    useRecordContext,\n    useCreatePath,\n    Identifier,\n} from 'ra-core';\n\nimport { LinearProgress } from '../layout';\nimport { Link } from '../Link';\nimport { PublicFieldProps, fieldPropTypes, InjectedFieldProps } from './types';\n\n/**\n * Fetch reference record, and delegate rendering to child component.\n *\n * The reference prop should be the name of one of the <Resource> components\n * added as <Admin> child.\n *\n * @example\n * <ReferenceField label=\"User\" source=\"userId\" reference=\"users\">\n *     <TextField source=\"name\" />\n * </ReferenceField>\n *\n * @default\n * By default, includes a link to the <Edit> page of the related record\n * (`/users/:userId` in the previous example).\n *\n * Set the `link` prop to \"show\" to link to the <Show> page instead.\n *\n * @example\n * <ReferenceField label=\"User\" source=\"userId\" reference=\"users\" link=\"show\">\n *     <TextField source=\"name\" />\n * </ReferenceField>\n *\n * @default\n * You can also prevent `<ReferenceField>` from adding link to children by setting\n * `link` to false.\n *\n * @example\n * <ReferenceField label=\"User\" source=\"userId\" reference=\"users\" link={false}>\n *     <TextField source=\"name\" />\n * </ReferenceField>\n *\n * @default\n * Alternatively, you can also pass a custom function to `link`. It must take reference and record\n * as arguments and return a string\n *\n * @example\n * <ReferenceField label=\"User\" source=\"userId\" reference=\"users\" link={(record, reference) => \"/path/to/${reference}/${record}\"}>\n *     <TextField source=\"name\" />\n * </ReferenceField>\n *\n * @default\n * In previous versions of React-Admin, the prop `linkType` was used. It is now deprecated and replaced with `link`. However\n * backward-compatibility is still kept\n */\nexport const ReferenceField: FC<ReferenceFieldProps> = props => {\n    const { source, emptyText, ...rest } = props;\n    const record = useRecordContext(props);\n    const id = get(record, source);\n\n    return id == null ? (\n        emptyText ? (\n            <Typography component=\"span\" variant=\"body2\">\n                {emptyText}\n            </Typography>\n        ) : null\n    ) : (\n        <NonEmptyReferenceField {...rest} record={record} id={id} />\n    );\n};\n\nReferenceField.propTypes = {\n    children: PropTypes.node.isRequired,\n    className: PropTypes.string,\n    cellClassName: PropTypes.string,\n    headerClassName: PropTypes.string,\n    label: fieldPropTypes.label,\n    record: PropTypes.any,\n    reference: PropTypes.string.isRequired,\n    resource: PropTypes.string,\n    sortBy: PropTypes.string,\n    sortByOrder: fieldPropTypes.sortByOrder,\n    source: PropTypes.string.isRequired,\n    translateChoice: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n    // @ts-ignore\n    link: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.bool,\n        PropTypes.func,\n    ]).isRequired,\n};\n\nReferenceField.defaultProps = {\n    link: 'edit',\n};\n\nexport interface ReferenceFieldProps<RecordType extends RaRecord = any>\n    extends PublicFieldProps,\n        InjectedFieldProps<RecordType> {\n    children: ReactNode;\n    reference: string;\n    resource?: string;\n    source: string;\n    translateChoice?: Function | boolean;\n    link?: LinkToType;\n    sx?: SxProps;\n}\n\n/**\n * This intermediate component is made necessary by the useReference hook,\n * which cannot be called conditionally when get(record, source) is empty.\n */\nexport const NonEmptyReferenceField: FC<\n    Omit<ReferenceFieldProps, 'emptyText' | 'source'> & { id: Identifier }\n> = ({ children, id, record, reference, link, ...props }) => {\n    const createPath = useCreatePath();\n    const resourceLinkPath =\n        link === false\n            ? false\n            : createPath({\n                  resource: reference,\n                  id,\n                  type:\n                      typeof link === 'function'\n                          ? link(record, reference)\n                          : link,\n              });\n\n    return (\n        <ResourceContextProvider value={reference}>\n            <PureReferenceFieldView\n                reference={reference}\n                {...props}\n                {...useReference({\n                    reference,\n                    id,\n                })}\n                resourceLinkPath={resourceLinkPath}\n            >\n                {children}\n            </PureReferenceFieldView>\n        </ResourceContextProvider>\n    );\n};\n\n// useful to prevent click bubbling in a datagrid with rowClick\nconst stopPropagation = e => e.stopPropagation();\n\nexport const ReferenceFieldView: FC<ReferenceFieldViewProps> = props => {\n    const {\n        children,\n        className,\n        error,\n        isLoading,\n        referenceRecord,\n        resourceLinkPath,\n        sx,\n    } = props;\n\n    if (error) {\n        return (\n            /* eslint-disable jsx-a11y/role-supports-aria-props */\n            <ErrorIcon\n                aria-errormessage={error.message ? error.message : error}\n                role=\"presentation\"\n                color=\"error\"\n                fontSize=\"small\"\n            />\n            /* eslint-enable */\n        );\n    }\n    if (isLoading) {\n        return <LinearProgress />;\n    }\n    if (!referenceRecord) {\n        return null;\n    }\n\n    if (resourceLinkPath) {\n        return (\n            <Root className={className} sx={sx}>\n                <RecordContextProvider value={referenceRecord}>\n                    <Link\n                        to={resourceLinkPath as string}\n                        className={ReferenceFieldClasses.link}\n                        onClick={stopPropagation}\n                    >\n                        {children}\n                    </Link>\n                </RecordContextProvider>\n            </Root>\n        );\n    }\n\n    return (\n        <RecordContextProvider value={referenceRecord}>\n            {children}\n        </RecordContextProvider>\n    );\n};\n\nReferenceFieldView.propTypes = {\n    children: PropTypes.element,\n    className: PropTypes.string,\n    isLoading: PropTypes.bool,\n    record: PropTypes.any,\n    reference: PropTypes.string,\n    referenceRecord: PropTypes.any,\n    resource: PropTypes.string,\n    resourceLinkPath: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.oneOf([false]),\n    ]) as React.Validator<string | false>,\n    source: PropTypes.string,\n    translateChoice: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n};\n\nexport interface ReferenceFieldViewProps\n    extends PublicFieldProps,\n        InjectedFieldProps,\n        UseReferenceResult {\n    reference: string;\n    resource?: string;\n    translateChoice?: Function | boolean;\n    resourceLinkPath?: string | false;\n    children?: ReactNode;\n    sx?: SxProps;\n}\n\nconst PureReferenceFieldView = memo(ReferenceFieldView);\n\nconst PREFIX = 'RaReferenceField';\n\nexport const ReferenceFieldClasses = {\n    link: `${PREFIX}-link`,\n};\n\nconst Root = styled('span', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    [`& .${ReferenceFieldClasses.link}`]: {\n        '& > *': {\n            color: theme.palette.primary.main,\n        },\n    },\n}));\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { Link as RRLink, LinkProps as RRLinkProps } from 'react-router-dom';\nimport { styled, Link as MuiLink } from '@mui/material';\n\nexport const Link = (props: LinkProps) => {\n    const { to, children, className, ...rest } = props;\n\n    return (\n        <StyledLink\n            to={to}\n            className={clsx(LinkClasses.link, className)}\n            {...rest}\n        >\n            {children}\n        </StyledLink>\n    );\n};\n\nconst PREFIX = 'RaLink';\n\nexport const LinkClasses = {\n    link: `${PREFIX}-link`,\n};\n\nconst MuiRouterLink = (props: RRLinkProps) => (\n    <MuiLink component={RRLink} {...props} />\n);\n\nconst StyledLink = styled(MuiRouterLink)(({ theme }) => ({\n    [`&.${LinkClasses.link}`]: {\n        textDecoration: 'none',\n    },\n}));\n\nexport interface LinkProps extends RRLinkProps {\n    className?: string;\n}\n\nLink.propTypes = {\n    className: PropTypes.string,\n    children: PropTypes.node,\n    to: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n};\n","import React, { FC, ReactElement, ReactNode } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    FilterPayload,\n    SortPayload,\n    useReferenceManyFieldController,\n    ListContextProvider,\n    ResourceContextProvider,\n    useRecordContext,\n} from 'ra-core';\n\nimport { PublicFieldProps, fieldPropTypes, InjectedFieldProps } from './types';\n\n/**\n * Render related records to the current one.\n *\n * You must define the fields to be passed to the iterator component as children.\n *\n * @example Display all the comments of the current post as a datagrid\n * <ReferenceManyField reference=\"comments\" target=\"post_id\">\n *     <Datagrid>\n *         <TextField source=\"id\" />\n *         <TextField source=\"body\" />\n *         <DateField source=\"created_at\" />\n *         <EditButton />\n *     </Datagrid>\n * </ReferenceManyField>\n *\n * @example Display all the books by the current author, only the title\n * <ReferenceManyField reference=\"books\" target=\"author_id\">\n *     <SingleFieldList>\n *         <ChipField source=\"title\" />\n *     </SingleFieldList>\n * </ReferenceManyField>\n *\n * By default, restricts the displayed values to 25. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceManyField perPage={10} reference=\"comments\" target=\"post_id\">\n *    ...\n * </ReferenceManyField>\n *\n * By default, orders the possible values by id desc. You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceManyField sort={{ field: 'created_at', order: 'DESC' }} reference=\"comments\" target=\"post_id\">\n *    ...\n * </ReferenceManyField>\n *\n * Also, you can filter the query used to populate the possible values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceManyField filter={{ is_published: true }} reference=\"comments\" target=\"post_id\">\n *    ...\n * </ReferenceManyField>\n */\nexport const ReferenceManyField: FC<ReferenceManyFieldProps> = props => {\n    const {\n        children,\n        filter,\n        page = 1,\n        pagination,\n        perPage,\n        reference,\n        resource,\n        sort,\n        source,\n        target,\n    } = props;\n    const record = useRecordContext(props);\n\n    const controllerProps = useReferenceManyFieldController({\n        filter,\n        page,\n        perPage,\n        record,\n        reference,\n        resource,\n        sort,\n        source,\n        target,\n    });\n\n    return (\n        <ResourceContextProvider value={reference}>\n            <ListContextProvider value={controllerProps}>\n                {children}\n                {pagination && controllerProps.total !== undefined\n                    ? pagination\n                    : null}\n            </ListContextProvider>\n        </ResourceContextProvider>\n    );\n};\n\nexport interface ReferenceManyFieldProps\n    extends PublicFieldProps,\n        InjectedFieldProps {\n    children: ReactNode;\n    filter?: FilterPayload;\n    page?: number;\n    pagination?: ReactElement;\n    perPage?: number;\n    reference: string;\n    sort?: SortPayload;\n    target: string;\n}\n\nReferenceManyField.propTypes = {\n    children: PropTypes.node.isRequired,\n    className: PropTypes.string,\n    filter: PropTypes.object,\n    label: fieldPropTypes.label,\n    perPage: PropTypes.number,\n    record: PropTypes.any,\n    reference: PropTypes.string.isRequired,\n    resource: PropTypes.string,\n    sortBy: PropTypes.string,\n    sortByOrder: fieldPropTypes.sortByOrder,\n    source: PropTypes.string.isRequired,\n    sort: PropTypes.exact({\n        field: PropTypes.string,\n        order: PropTypes.string,\n    }),\n    target: PropTypes.string.isRequired,\n};\n\nReferenceManyField.defaultProps = {\n    filter: {},\n    perPage: 25,\n    sort: { field: 'id', order: 'DESC' },\n    source: 'id',\n};\n","import React, { ReactElement, ReactNode } from 'react';\nimport PropTypes from 'prop-types';\nimport { Typography } from '@mui/material';\nimport {\n    useReferenceOneFieldController,\n    useRecordContext,\n    ResourceContextProvider,\n    LinkToType,\n    useCreatePath,\n} from 'ra-core';\n\nimport { PublicFieldProps, fieldPropTypes, InjectedFieldProps } from './types';\nimport { ReferenceFieldView } from './ReferenceField';\n\n/**\n * Render the related record in a one-to-one relationship\n *\n * Expects a single field as child\n *\n * @example // display the bio of the current author\n * <ReferenceOneField reference=\"bios\" target=\"author_id\">\n *     <TextField source=\"body\" />\n * </ReferenceOneField>\n */\nexport const ReferenceOneField = (props: ReferenceOneFieldProps) => {\n    const {\n        children,\n        reference,\n        source,\n        target,\n        emptyText,\n        link = false,\n    } = props;\n    const record = useRecordContext(props);\n    const createPath = useCreatePath();\n\n    const {\n        isLoading,\n        isFetching,\n        referenceRecord,\n        error,\n        refetch,\n    } = useReferenceOneFieldController({\n        record,\n        reference,\n        source,\n        target,\n    });\n\n    const resourceLinkPath =\n        link === false\n            ? false\n            : createPath({\n                  resource: reference,\n                  id: referenceRecord?.id,\n                  type:\n                      typeof link === 'function'\n                          ? link(record, reference)\n                          : link,\n              });\n\n    return !record || (!isLoading && referenceRecord == null) ? (\n        emptyText ? (\n            <Typography component=\"span\" variant=\"body2\">\n                {emptyText}\n            </Typography>\n        ) : null\n    ) : (\n        <ResourceContextProvider value={reference}>\n            <ReferenceFieldView\n                isLoading={isLoading}\n                isFetching={isFetching}\n                referenceRecord={referenceRecord}\n                resourceLinkPath={resourceLinkPath}\n                reference={reference}\n                refetch={refetch}\n                error={error}\n            >\n                {children}\n            </ReferenceFieldView>\n        </ResourceContextProvider>\n    );\n};\n\nexport interface ReferenceOneFieldProps\n    extends PublicFieldProps,\n        InjectedFieldProps {\n    children: ReactNode;\n    reference: string;\n    target: string;\n    link?: LinkToType;\n}\n\nReferenceOneField.propTypes = {\n    children: PropTypes.node.isRequired,\n    className: PropTypes.string,\n    label: fieldPropTypes.label,\n    record: PropTypes.any,\n    reference: PropTypes.string.isRequired,\n    source: PropTypes.string.isRequired,\n    target: PropTypes.string.isRequired,\n};\n\nReferenceOneField.defaultProps = {\n    source: 'id',\n};\n","import * as React from 'react';\nimport { FC, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport Typography, { TypographyProps } from '@mui/material/Typography';\nimport { useRecordContext } from 'ra-core';\n\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { InjectedFieldProps, PublicFieldProps, fieldPropTypes } from './types';\n\nexport const RichTextField: FC<RichTextFieldProps> = memo<RichTextFieldProps>(\n    props => {\n        const {\n            className,\n            emptyText,\n            source,\n            stripTags = false,\n            ...rest\n        } = props;\n        const record = useRecordContext(props);\n        const value = get(record, source);\n\n        return (\n            <Typography\n                className={className}\n                variant=\"body2\"\n                component=\"span\"\n                {...sanitizeFieldRestProps(rest)}\n            >\n                {value == null && emptyText ? (\n                    emptyText\n                ) : stripTags ? (\n                    removeTags(value)\n                ) : (\n                    <span dangerouslySetInnerHTML={{ __html: value }} />\n                )}\n            </Typography>\n        );\n    }\n);\n\nRichTextField.propTypes = {\n    // @ts-ignore\n    ...Typography.propTypes,\n    ...fieldPropTypes,\n    stripTags: PropTypes.bool,\n};\n\nexport interface RichTextFieldProps\n    extends PublicFieldProps,\n        InjectedFieldProps,\n        Omit<TypographyProps, 'textAlign'> {\n    stripTags?: boolean;\n}\n\nRichTextField.displayName = 'RichTextField';\n\nexport const removeTags = (input: string) =>\n    input ? input.replace(/<[^>]+>/gm, '') : '';\n","import * as React from 'react';\nimport { memo, FC } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport { ChoicesProps, useChoices, useRecordContext } from 'ra-core';\nimport { Typography, TypographyProps } from '@mui/material';\n\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { PublicFieldProps, InjectedFieldProps, fieldPropTypes } from './types';\n\n/**\n * Display a value in an enumeration\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * @example\n * const choices = [\n *    { id: 'M', name: 'Male' },\n *    { id: 'F', name: 'Female' },\n * ];\n * <SelectField source=\"gender\" choices={choices} />\n *\n * By default, the text is built by\n * - finding a choice where the 'id' property equals the field value\n * - using the 'name' property as the option text\n *\n * You can also customize the properties to use for the value and text,\n * thanks to the 'optionValue' and 'optionText' attributes.\n *\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },\n *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },\n * ];\n * <SelectField source=\"author_id\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <SelectField source=\"author_id\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that can access\n * the related choice through the `useRecordContext` hook. You can use Field components there.\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const FullNameField = ({ record }) => <Chip>{record.first_name} {record.last_name}</Chip>;\n * <SelectField source=\"gender\" choices={choices} optionText={<FullNameField />}/>\n *\n * The current choice is translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'M', name: 'myroot.gender.male' },\n *    { id: 'F', name: 'myroot.gender.female' },\n * ];\n *\n * However, in some cases (e.g. inside a `<ReferenceField>`), you may not want\n * the choice to be translated. In that case, set the `translateChoice` prop to false.\n * @example\n * <SelectField source=\"gender\" choices={choices} translateChoice={false}/>\n *\n * **Tip**: <ReferenceField> sets `translateChoice` to false by default.\n */\nexport const SelectField: FC<SelectFieldProps> = memo(props => {\n    const {\n        className,\n        emptyText,\n        source,\n        choices,\n        optionValue,\n        optionText,\n        translateChoice,\n        ...rest\n    } = props;\n    const record = useRecordContext(props);\n    const value = get(record, source);\n    const { getChoiceText, getChoiceValue } = useChoices({\n        optionText,\n        optionValue,\n        translateChoice,\n    });\n\n    const choice = choices.find(choice => getChoiceValue(choice) === value);\n\n    if (!choice) {\n        return emptyText ? (\n            <Typography\n                component=\"span\"\n                variant=\"body2\"\n                className={className}\n                {...sanitizeFieldRestProps(rest)}\n            >\n                {emptyText}\n            </Typography>\n        ) : null;\n    }\n\n    let choiceText = getChoiceText(choice);\n\n    return (\n        <Typography\n            component=\"span\"\n            variant=\"body2\"\n            className={className}\n            {...sanitizeFieldRestProps(rest)}\n        >\n            {choiceText}\n        </Typography>\n    );\n});\n\nSelectField.defaultProps = {\n    optionText: 'name',\n    optionValue: 'id',\n    translateChoice: true,\n};\n\nSelectField.propTypes = {\n    // @ts-ignore\n    ...Typography.propTypes,\n    ...fieldPropTypes,\n    choices: PropTypes.arrayOf(PropTypes.object).isRequired,\n    optionText: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.func,\n        PropTypes.element,\n    ]),\n    optionValue: PropTypes.string,\n    translateChoice: PropTypes.bool,\n};\n\nexport interface SelectFieldProps\n    extends ChoicesProps,\n        PublicFieldProps,\n        InjectedFieldProps,\n        Omit<TypographyProps, 'textAlign'> {}\n\nSelectField.displayName = 'SelectField';\n","import * as React from 'react';\nimport { memo, FC, ElementType } from 'react';\nimport get from 'lodash/get';\nimport Typography, { TypographyProps } from '@mui/material/Typography';\nimport { useRecordContext } from 'ra-core';\n\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { PublicFieldProps, InjectedFieldProps, fieldPropTypes } from './types';\n\nexport const TextField: FC<TextFieldProps> = memo(props => {\n    const { className, source, emptyText, ...rest } = props;\n    const record = useRecordContext(props);\n    const value = get(record, source);\n\n    return (\n        <Typography\n            component=\"span\"\n            variant=\"body2\"\n            className={className}\n            {...sanitizeFieldRestProps(rest)}\n        >\n            {value != null && typeof value !== 'string'\n                ? JSON.stringify(value)\n                : value || emptyText}\n        </Typography>\n    );\n});\n\n// what? TypeScript loses the displayName if we don't set it explicitly\nTextField.displayName = 'TextField';\n\nTextField.propTypes = {\n    // @ts-ignore\n    ...Typography.propTypes,\n    ...fieldPropTypes,\n};\n\nexport interface TextFieldProps\n    extends PublicFieldProps,\n        InjectedFieldProps,\n        Omit<TypographyProps, 'textAlign'> {\n    // TypographyProps do not expose the component props, see https://github.com/mui-org/material-ui/issues/19512\n    component?: ElementType<any>;\n}\n","import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { ReactElement, ReactNode } from 'react';\nimport {\n    TranslatableContextProvider,\n    useTranslatable,\n    UseTranslatableOptions,\n    RaRecord,\n    useRecordContext,\n} from 'ra-core';\nimport { TranslatableFieldsTabs } from './TranslatableFieldsTabs';\nimport { TranslatableFieldsTabContent } from './TranslatableFieldsTabContent';\n\n/**\n * Provides a way to show multiple languages for any field passed as children.\n * It expects the translatable values to have the following structure:\n * {\n *     name: {\n *         en: 'The english value',\n *         fr: 'The french value',\n *         tlh: 'The klingon value',\n *     },\n *     description: {\n *         en: 'The english value',\n *         fr: 'The french value',\n *         tlh: 'The klingon value',\n *     }\n * }\n *\n * @example <caption>Basic usage</caption>\n * <TranslatableFields locales={['en', 'fr']}>\n *     <TextField source={getSource('title')} />\n *     <TextField source={getSource('description')} />\n * </TranslatableFields>\n *\n * @example <caption>With a custom language selector</caption>\n * <TranslatableFields\n *     selector={<MyLanguageSelector />}\n *     locales={['en', 'fr']}\n * >\n *     <TextField source={getSource('title')} />\n * <TranslatableFields>\n>\n *\n * const MyLanguageSelector = () => {\n *     const {\n *         locales,\n *         selectedLocale,\n *         selectLocale,\n *     } = useTranslatableContext();\n *\n *     return (\n *         <select onChange={selectLocale}>\n *             {locales.map((locale) => (\n *                 <option selected={locale.locale === selectedLocale}>\n *                     {locale.name}\n *                 </option>\n *             ))}\n *        </select>\n *     );\n * }\n *\n * @param props The component props\n * @param {string} props.defaultLocale The locale selected by default. Default to 'en'.\n * @param {string[]} props.locales An array of the possible locales in the form. For example [{ 'en', 'fr' }].\n * @param {ReactElement} props.selector The element responsible for selecting a locale. Defaults to MUI tabs.\n */\nexport const TranslatableFields = (\n    props: TranslatableFieldsProps\n): ReactElement => {\n    const {\n        defaultLocale,\n        locales,\n        groupKey = '',\n        selector = <TranslatableFieldsTabs groupKey={groupKey} />,\n        children,\n        resource,\n        className,\n    } = props;\n    const record = useRecordContext(props);\n    const context = useTranslatable({ defaultLocale, locales });\n\n    return (\n        <Root className={className}>\n            <TranslatableContextProvider value={context}>\n                {selector}\n                {locales.map(locale => (\n                    <TranslatableFieldsTabContent\n                        key={locale}\n                        locale={locale}\n                        record={record}\n                        resource={resource}\n                        groupKey={groupKey}\n                    >\n                        {children}\n                    </TranslatableFieldsTabContent>\n                ))}\n            </TranslatableContextProvider>\n        </Root>\n    );\n};\n\nexport interface TranslatableFieldsProps extends UseTranslatableOptions {\n    children: ReactNode;\n    className?: string;\n    record?: RaRecord;\n    resource?: string;\n    selector?: ReactElement;\n    groupKey?: string;\n}\n\nconst PREFIX = 'RaTranslatableFields';\n\nconst Root = styled('div', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    flexGrow: 1,\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(0.5),\n}));\n","import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { ReactElement } from 'react';\nimport AppBar from '@mui/material/AppBar';\nimport Tabs, { TabsProps } from '@mui/material/Tabs';\nimport { useTranslatableContext } from 'ra-core';\nimport { TranslatableFieldsTab } from './TranslatableFieldsTab';\nimport { AppBarProps } from '../layout';\n\n/**\n * Default locale selector for the TranslatableFields component. Generates a tab for each specified locale.\n * @see TranslatableFields\n */\nexport const TranslatableFieldsTabs = (\n    props: TranslatableFieldsTabsProps & AppBarProps\n): ReactElement => {\n    const { groupKey, TabsProps: tabsProps, className } = props;\n    const { locales, selectLocale, selectedLocale } = useTranslatableContext();\n\n    const handleChange = (event, newLocale): void => {\n        selectLocale(newLocale);\n    };\n\n    return (\n        <StyledAppBar color=\"default\" position=\"static\" className={className}>\n            <Tabs\n                value={selectedLocale}\n                onChange={handleChange}\n                indicatorColor=\"primary\"\n                textColor=\"primary\"\n                {...tabsProps}\n            >\n                {locales.map(locale => (\n                    <TranslatableFieldsTab\n                        key={locale}\n                        value={locale}\n                        locale={locale}\n                        groupKey={groupKey}\n                    />\n                ))}\n            </Tabs>\n        </StyledAppBar>\n    );\n};\n\nexport interface TranslatableFieldsTabsProps {\n    TabsProps?: TabsProps;\n    groupKey?: string;\n}\n\nconst PREFIX = 'RaTranslatableFieldsTabs';\n\nconst StyledAppBar = styled(AppBar, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    boxShadow: 'none',\n    borderRadius: 0,\n    borderTopLeftRadius: theme.shape.borderRadius,\n    borderTopRightRadius: theme.shape.borderRadius,\n    border: `1px solid ${theme.palette.divider}`,\n}));\n","import React from 'react';\nimport Tab, { TabProps } from '@mui/material/Tab';\nimport { useTranslate } from 'ra-core';\nimport { capitalize } from 'inflection';\n\n/**\n * Single tab that selects a locale in a TranslatableFields component.\n * @see TranslatableFields\n */\nexport const TranslatableFieldsTab = (\n    props: TranslatableFieldsTabProps & TabProps\n) => {\n    const { locale, groupKey = '', ...rest } = props;\n    const translate = useTranslate();\n\n    return (\n        <Tab\n            id={`translatable-header-${groupKey}${locale}`}\n            label={translate(`ra.locales.${groupKey}${locale}`, {\n                _: capitalize(locale),\n            })}\n            {...rest}\n        />\n    );\n};\n\nexport interface TranslatableFieldsTabProps {\n    locale: string;\n    groupKey?: string;\n}\n","import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport {\n    Children,\n    cloneElement,\n    isValidElement,\n    ReactElement,\n    ReactNode,\n} from 'react';\nimport { useTranslatableContext, RaRecord } from 'ra-core';\nimport { Labeled } from '../Labeled';\n\n/**\n * Default container for a group of translatable fields inside a TranslatableFields components.\n * @see TranslatableFields\n */\nexport const TranslatableFieldsTabContent = (\n    props: TranslatableFieldsTabContentProps\n): ReactElement => {\n    const {\n        children,\n        groupKey = '',\n        locale,\n        record,\n        resource,\n        className,\n        ...other\n    } = props;\n    const { selectedLocale, getLabel, getSource } = useTranslatableContext();\n\n    return (\n        <Root\n            role=\"tabpanel\"\n            hidden={selectedLocale !== locale}\n            id={`translatable-content-${groupKey}${locale}`}\n            aria-labelledby={`translatable-header-${groupKey}${locale}`}\n            className={className}\n            {...other}\n        >\n            {Children.map(children, field =>\n                field && isValidElement<any>(field) ? (\n                    <div key={field.props.source}>\n                        {field.props.addLabel ? (\n                            <Labeled\n                                resource={resource}\n                                label={field.props.label}\n                                source={field.props.source}\n                            >\n                                {cloneElement(field, {\n                                    ...field.props,\n                                    label: getLabel(field.props.source),\n                                    record,\n                                    source: getSource(\n                                        field.props.source,\n                                        locale\n                                    ),\n                                })}\n                            </Labeled>\n                        ) : typeof field === 'string' ? (\n                            field\n                        ) : (\n                            cloneElement(field, {\n                                ...field.props,\n                                label: getLabel(field.props.source),\n                                record,\n                                source: getSource(field.props.source, locale),\n                            })\n                        )}\n                    </div>\n                ) : null\n            )}\n        </Root>\n    );\n};\n\nexport type TranslatableFieldsTabContentProps = {\n    children: ReactNode;\n    className?: string;\n    formGroupKeyPrefix?: string;\n    groupKey: string;\n    locale: string;\n    record: RaRecord;\n    resource: string;\n};\n\nconst PREFIX = 'RaTranslatableFieldsTabContent';\n\nconst Root = styled('div', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    flexGrow: 1,\n    padding: theme.spacing(2),\n    borderRadius: 0,\n    borderBottomLeftRadius: theme.shape.borderRadius,\n    borderBottomRightRadius: theme.shape.borderRadius,\n    border: `1px solid ${theme.palette.divider}`,\n    borderTop: 0,\n}));\n","import * as React from 'react';\nimport { AnchorHTMLAttributes, memo, FC } from 'react';\nimport get from 'lodash/get';\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { Typography, Link } from '@mui/material';\nimport { useRecordContext } from 'ra-core';\nimport { PublicFieldProps, InjectedFieldProps, fieldPropTypes } from './types';\n\nexport const UrlField: FC<UrlFieldProps> = memo(props => {\n    const { className, emptyText, source, ...rest } = props;\n    const record = useRecordContext(props);\n    const value = get(record, source);\n\n    if (value == null) {\n        return (\n            <Typography\n                component=\"span\"\n                variant=\"body2\"\n                className={className}\n                {...sanitizeFieldRestProps(rest)}\n            >\n                {emptyText}\n            </Typography>\n        );\n    }\n\n    return (\n        <Link\n            className={className}\n            href={value}\n            variant=\"body2\"\n            {...sanitizeFieldRestProps(rest)}\n        >\n            {value}\n        </Link>\n    );\n});\n\nUrlField.propTypes = fieldPropTypes;\nUrlField.displayName = 'UrlField';\n\nexport interface UrlFieldProps\n    extends PublicFieldProps,\n        InjectedFieldProps,\n        AnchorHTMLAttributes<HTMLAnchorElement> {}\n","import * as React from 'react';\nimport { ReactNode } from 'react';\n\nimport { PublicFieldProps, InjectedFieldProps, fieldPropTypes } from './types';\n\n/**\n * A field rendering its children.\n *\n * Designed as a wrapper for several fields, to support props read by\n * the parent element (e.g. `<SimpleShowLayout>`, `<Datagrid`).\n *\n * @example\n * import { WrapperField, TextField } from 'react-admin';\n *\n * const PostShow = () => (\n *    <Show>\n *        <SimpleShowLayout>\n *            <WrapperField label=\"author\" sortBy=\"last_name\">\n *               <TextField source=\"first_name\" />\n *               <TextField source=\"last_name\" />\n *            </WrapperField>\n *       </SimpleShowLayout>\n *   </Show>\n * );\n */\nexport const WrapperField = ({ children }: WrapperFieldProps) => (\n    <>{children}</>\n);\n\nWrapperField.displayName = 'WrapperField';\n\nWrapperField.propTypes = fieldPropTypes;\n\nexport interface WrapperFieldProps\n    extends PublicFieldProps,\n        InjectedFieldProps {\n    children: ReactNode;\n}\n","import * as React from 'react';\nimport { Children, isValidElement, ReactNode } from 'react';\nimport { styled } from '@mui/material/styles';\nimport { Stack } from '@mui/material';\nimport { ResponsiveStyleValue, SxProps } from '@mui/system';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport {\n    RaRecord,\n    useRecordContext,\n    OptionalRecordContextProvider,\n} from 'ra-core';\nimport { Labeled } from '../Labeled';\n\n/**\n * Layout for a Show view showing fields in one column.\n *\n * It pulls the record from the RecordContext. It renders the record fields in\n * a single-column layout (via MUI's `<Stack>` component).\n * `<SimpleShowLayout>` delegates the actual rendering of fields to its children.\n * It wraps each field inside a `<Labeled>` component to add a label.\n *\n * @example\n * // in src/posts.js\n * import * as React from \"react\";\n * import { Show, SimpleShowLayout, TextField } from 'react-admin';\n *\n * export const PostShow = () => (\n *     <Show>\n *         <SimpleShowLayout>\n *             <TextField source=\"title\" />\n *         </SimpleShowLayout>\n *     </Show>\n * );\n *\n * // in src/App.js\n * import * as React from \"react\";\n * import { Admin, Resource } from 'react-admin';\n *\n * import { PostShow } from './posts';\n *\n * const App = () => (\n *     <Admin dataProvider={...}>\n *         <Resource name=\"posts\" show={PostShow} />\n *     </Admin>\n * );\n *\n * @param {SimpleShowLayoutProps} props\n * @param {string} props.className A className to apply to the page content.\n * @param {ElementType} props.component The component to use as root component (div by default).\n * @param {ReactNode} props.divider An optional divider between each field, passed to `<Stack>`.\n * @param {number} props.spacing The spacing to use between each field, passed to `<Stack>`. Defaults to 1.\n * @param {Object} props.sx Custom style object.\n */\nexport const SimpleShowLayout = (props: SimpleShowLayoutProps) => {\n    const { className, children, divider, spacing = 1, ...rest } = props;\n    const record = useRecordContext(props);\n    if (!record) {\n        return null;\n    }\n    return (\n        <OptionalRecordContextProvider value={props.record}>\n            <Root className={className} {...sanitizeRestProps(rest)}>\n                <Stack\n                    spacing={spacing}\n                    divider={divider}\n                    className={SimpleShowLayoutClasses.stack}\n                >\n                    {Children.map(children, field =>\n                        field && isValidElement<any>(field) ? (\n                            <Labeled\n                                key={field.props.source}\n                                className={clsx(\n                                    'ra-field',\n                                    field.props.source &&\n                                        `ra-field-${field.props.source}`,\n                                    SimpleShowLayoutClasses.row,\n                                    field.props.className\n                                )}\n                            >\n                                {field}\n                            </Labeled>\n                        ) : null\n                    )}\n                </Stack>\n            </Root>\n        </OptionalRecordContextProvider>\n    );\n};\n\nexport interface SimpleShowLayoutProps {\n    children: ReactNode;\n    className?: string;\n    divider?: ReactNode;\n    record?: RaRecord;\n    spacing?: ResponsiveStyleValue<number | string>;\n    sx?: SxProps;\n}\n\nSimpleShowLayout.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    record: PropTypes.object,\n    spacing: PropTypes.any,\n    sx: PropTypes.any,\n};\n\nconst PREFIX = 'RaSimpleShowLayout';\n\nexport const SimpleShowLayoutClasses = {\n    stack: `${PREFIX}-stack`,\n    row: `${PREFIX}-row`,\n};\n\nconst Root = styled('div', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    flex: 1,\n    padding: `${theme.spacing(1)} ${theme.spacing(2)}`,\n    [`& .${SimpleShowLayoutClasses.stack}`]: {},\n    [`& .${SimpleShowLayoutClasses.row}`]: {\n        display: 'inline',\n    },\n}));\n\nconst sanitizeRestProps = ({\n    record,\n    resource,\n    initialValues,\n    translate,\n    ...rest\n}: any) => rest;\n","import * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport inflection from 'inflection';\nimport {\n    ShowBase,\n    InferredElement,\n    getElementsFromRecords,\n    useResourceContext,\n    useShowContext,\n} from 'ra-core';\n\nimport { ShowProps } from '../types';\nimport { ShowView } from './ShowView';\nimport { showFieldTypes } from './showFieldTypes';\n\nexport const ShowGuesser = ({\n    id,\n    queryOptions,\n    resource,\n    ...rest\n}: Omit<ShowProps, 'children'>) => (\n    <ShowBase id={id} resource={resource} queryOptions={queryOptions}>\n        <ShowViewGuesser {...rest} />\n    </ShowBase>\n);\n\nconst ShowViewGuesser = props => {\n    const resource = useResourceContext(props);\n    const { record } = useShowContext();\n    const [child, setChild] = useState(null);\n\n    useEffect(() => {\n        setChild(null);\n    }, [resource]);\n\n    useEffect(() => {\n        if (record && !child) {\n            const inferredElements = getElementsFromRecords(\n                [record],\n                showFieldTypes\n            );\n            const inferredChild = new InferredElement(\n                showFieldTypes.show,\n                null,\n                inferredElements\n            );\n            setChild(inferredChild.getElement());\n\n            if (process.env.NODE_ENV === 'production') return;\n\n            const representation = inferredChild.getRepresentation();\n            const components = ['Show']\n                .concat(\n                    Array.from(\n                        new Set(\n                            Array.from(representation.matchAll(/<([^/\\s>]+)/g))\n                                .map(match => match[1])\n                                .filter(component => component !== 'span')\n                        )\n                    )\n                )\n                .sort();\n\n            // eslint-disable-next-line no-console\n            console.log(\n                `Guessed Show:\n\nimport { ${components.join(', ')} } from 'react-admin';\n\nexport const ${inflection.capitalize(\n                    inflection.singularize(resource)\n                )}Show = () => (\n    <Show>\n${inferredChild.getRepresentation()}\n    </Show>\n);`\n            );\n        }\n    }, [record, child, resource]);\n\n    return <ShowView {...props}>{child}</ShowView>;\n};\n\nShowViewGuesser.propTypes = ShowView.propTypes;\n","import * as React from 'react';\nimport {\n    ChangeEvent,\n    Children,\n    cloneElement,\n    isValidElement,\n    ReactElement,\n    ReactNode,\n    useState,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport { ResponsiveStyleValue, SxProps } from '@mui/system';\nimport { styled } from '@mui/material/styles';\nimport { Divider } from '@mui/material';\nimport { Outlet, Routes, Route } from 'react-router-dom';\nimport {\n    RaRecord,\n    useRecordContext,\n    OptionalRecordContextProvider,\n} from 'ra-core';\n\nimport {\n    TabbedShowLayoutTabs,\n    getShowLayoutTabFullPath,\n} from './TabbedShowLayoutTabs';\n\n/**\n * Layout for a Show view showing fields grouped in tabs and laid out in a single column.\n *\n * It pulls the record from the RecordContext. It renders a set of `<Tabs>`,\n * each of which contains a list of record fields in a single-column layout\n * (via MUI's `<Stack>` component).\n * `<TabbedShowLayout>` delegates the actual rendering of fields to its children,\n * which should be `<Tab>` components.\n * `<Tab>` wraps each field inside a <Labeled> component to add a label.\n *\n * @example\n * // in src/posts.js\n * import * as React from \"react\";\n * import { Show, TabbedShowLayout, Tab, TextField } from 'react-admin';\n *\n * export const PostShow = () => (\n *     <Show>\n *         <TabbedShowLayout>\n *             <Tab label=\"Content\">\n *                 <TextField source=\"title\" />\n *                 <TextField source=\"subtitle\" />\n *            </Tab>\n *             <Tab label=\"Metadata\">\n *                 <TextField source=\"category\" />\n *            </Tab>\n *         </TabbedShowLayout>\n *     </Show>\n * );\n *\n * // in src/App.js\n * import * as React from \"react\";\n * import { Admin, Resource } from 'react-admin';\n *\n * import { PostShow } from './posts';\n *\n * const App = () => (\n *     <Admin dataProvider={...}>\n *         <Resource name=\"posts\" show={PostShow} />\n *     </Admin>\n * );\n *\n * @param {TabbedShowLayoutProps} props\n * @param {string} props.className A className to apply to the page content.\n * @param {ElementType} props.component The component to use as root component (div by default).\n * @param {ReactNode} props.divider An optional divider between each field, passed to `<Stack>`.\n * @param {number} props.spacing The spacing to use between each field, passed to `<Stack>`. Defaults to 1.\n * @param {Object} props.sx Custom style object.\n * @param {boolean} props.syncWithLocation Whether to update the URL when the tab changes. Defaults to true.\n * @param {ElementType} props.tabs A custom component for rendering tabs.\n */\nexport const TabbedShowLayout = (props: TabbedShowLayoutProps) => {\n    const {\n        children,\n        className,\n        spacing,\n        divider,\n        syncWithLocation = true,\n        tabs = DefaultTabs,\n        value,\n        ...rest\n    } = props;\n    const record = useRecordContext(props);\n    const nonNullChildren = Children.toArray(children).filter(\n        child => child !== null\n    );\n    const [tabValue, setTabValue] = useState(0);\n\n    const handleTabChange = (event: ChangeEvent<{}>, value: any): void => {\n        if (!syncWithLocation) {\n            setTabValue(value);\n        }\n    };\n\n    if (!record) {\n        return null;\n    }\n\n    const renderTabHeaders = () =>\n        cloneElement(\n            tabs,\n            {\n                onChange: handleTabChange,\n                syncWithLocation,\n                value: tabValue,\n            },\n            nonNullChildren\n        );\n\n    return (\n        <OptionalRecordContextProvider value={props.record}>\n            <Root className={className} {...sanitizeRestProps(rest)}>\n                {syncWithLocation ? (\n                    <Routes>\n                        <Route\n                            path=\"/*\"\n                            element={\n                                <>\n                                    {renderTabHeaders()}\n                                    <Divider />\n                                    <div\n                                        className={\n                                            TabbedShowLayoutClasses.content\n                                        }\n                                    >\n                                        <Outlet />\n                                    </div>\n                                </>\n                            }\n                        >\n                            {Children.map(nonNullChildren, (tab, index) =>\n                                isValidElement(tab) ? (\n                                    <Route\n                                        path={getShowLayoutTabFullPath(\n                                            tab,\n                                            index\n                                        )}\n                                        element={cloneElement(tab, {\n                                            context: 'content',\n                                            spacing,\n                                            divider,\n                                        })}\n                                    />\n                                ) : null\n                            )}\n                        </Route>\n                    </Routes>\n                ) : (\n                    <>\n                        {renderTabHeaders()}\n                        <Divider />\n                        <div className={TabbedShowLayoutClasses.content}>\n                            {Children.map(nonNullChildren, (tab, index) => {\n                                if (\n                                    !isValidElement(tab) ||\n                                    tabValue !== index\n                                ) {\n                                    return null;\n                                }\n                                return cloneElement(tab, {\n                                    context: 'content',\n                                    spacing,\n                                    divider,\n                                });\n                            })}\n                        </div>\n                    </>\n                )}\n            </Root>\n        </OptionalRecordContextProvider>\n    );\n};\n\nexport interface TabbedShowLayoutProps {\n    children: ReactNode;\n    className?: string;\n    divider?: ReactNode;\n    record?: RaRecord;\n    rootPath?: string;\n    spacing?: ResponsiveStyleValue<number | string>;\n    sx?: SxProps;\n    syncWithLocation?: boolean;\n    tabs?: ReactElement;\n    value?: any;\n}\n\nTabbedShowLayout.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    record: PropTypes.object,\n    spacing: PropTypes.any,\n    sx: PropTypes.any,\n    syncWithLocation: PropTypes.bool,\n    tabs: PropTypes.element,\n    value: PropTypes.number,\n};\n\nconst DefaultTabs = <TabbedShowLayoutTabs />;\n\nconst PREFIX = 'RaTabbedShowLayout';\n\nexport const TabbedShowLayoutClasses = {\n    content: `${PREFIX}-content`,\n};\n\nconst Root = styled('div', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    flex: 1,\n    [`& .${TabbedShowLayoutClasses.content}`]: {\n        padding: `${theme.spacing(1)} ${theme.spacing(2)}`,\n    },\n}));\n\nconst sanitizeRestProps = ({\n    record,\n    resource,\n    initialValues,\n    staticContext,\n    translate,\n    tabs,\n    ...rest\n}: any) => rest;\n","import * as React from 'react';\nimport { Children, cloneElement, ReactElement, isValidElement } from 'react';\nimport PropTypes from 'prop-types';\nimport Tabs, { TabsProps } from '@mui/material/Tabs';\nimport { useParams } from 'react-router-dom';\nimport { TabProps } from './Tab';\n\nexport const TabbedShowLayoutTabs = ({\n    children,\n    syncWithLocation,\n    value,\n    ...rest\n}: TabbedShowLayoutTabsProps) => {\n    const params = useParams();\n\n    // params will include eventual parameters from the root pathname and * for the remaining part\n    // which should match the tabs paths\n    const tabValue = params['*'];\n\n    return (\n        <Tabs\n            indicatorColor=\"primary\"\n            value={syncWithLocation ? tabValue : value}\n            {...rest}\n        >\n            {Children.map(children, (tab, index) => {\n                if (!tab || !isValidElement(tab)) return null;\n                // Builds the full tab which is the concatenation of the last matched route in the\n                // TabbedShowLayout hierarchy (ex: '/posts/create', '/posts/12', , '/posts/12/show')\n                // and the tab path.\n                // This will be used as the Tab's value\n                const tabPath = getShowLayoutTabFullPath(tab, index);\n\n                return cloneElement(tab, {\n                    context: 'header',\n                    value: syncWithLocation ? tabPath : index,\n                    syncWithLocation,\n                });\n            })}\n        </Tabs>\n    );\n};\n\nexport const getShowLayoutTabFullPath = (tab, index) =>\n    `${tab.props.path ? `${tab.props.path}` : index > 0 ? index : ''}`;\n\nexport interface TabbedShowLayoutTabsProps extends TabsProps {\n    children?: ReactElement<TabProps>;\n    syncWithLocation?: boolean;\n}\n\nTabbedShowLayoutTabs.propTypes = {\n    children: PropTypes.node,\n};\n","import * as React from 'react';\nimport { isValidElement, ReactElement, ReactNode } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\nimport { Tab as MuiTab, TabProps as MuiTabProps, Stack } from '@mui/material';\nimport { ResponsiveStyleValue } from '@mui/system';\nimport { useTranslate, RaRecord } from 'ra-core';\nimport clsx from 'clsx';\n\nimport { Labeled } from '../Labeled';\n\n/**\n * Tab element for the TabbedShowLayout.\n *\n * The `<Tab>` component accepts the following props:\n *\n * - label: The string displayed for each tab\n * - icon: The icon to show before the label (optional). Must be a component.\n * - path: The string used for custom urls\n *\n * @example\n *     // in src/posts.js\n *     import * as React from \"react\";\n *     import FavoriteIcon from '@mui/icons-material/Favorite';\n *     import PersonPinIcon from '@mui/icons-material/PersonPin';\n *     import { Show, TabbedShowLayout, Tab, TextField } from 'react-admin';\n *\n *     export const PostShow = (props) => (\n *         <Show {...props}>\n *             <TabbedShowLayout>\n *                 <Tab label=\"Content\" icon={<FavoriteIcon />}>\n *                     <TextField source=\"title\" />\n *                     <TextField source=\"subtitle\" />\n *                </Tab>\n *                 <Tab label=\"Metadata\" icon={<PersonIcon />} path=\"metadata\">\n *                     <TextField source=\"category\" />\n *                </Tab>\n *             </TabbedShowLayout>\n *         </Show>\n *     );\n *\n *     // in src/App.js\n *     import * as React from \"react\";\n *     import { Admin, Resource } from 'react-admin';\n *\n *     import { PostShow } from './posts';\n *\n *     const App = () => (\n *         <Admin dataProvider={...}>\n *             <Resource name=\"posts\" show={PostShow} />\n *         </Admin>\n *     );\n *     export default App;\n */\nexport const Tab = ({\n    children,\n    contentClassName,\n    context,\n    className,\n    divider,\n    icon,\n    label,\n    record,\n    spacing = 1,\n    syncWithLocation = true,\n    value,\n    ...rest\n}: TabProps) => {\n    const translate = useTranslate();\n    const location = useLocation();\n    const propsForLink = {\n        component: Link,\n        to: { ...location, pathname: value },\n    };\n\n    const renderHeader = () => (\n        <MuiTab\n            key={`tab-header-${value}`}\n            label={\n                typeof label === 'string'\n                    ? translate(label, { _: label })\n                    : label\n            }\n            value={value}\n            icon={icon}\n            className={clsx('show-tab', className)}\n            {...(syncWithLocation ? propsForLink : {})} // to avoid TypeScript screams, see https://github.com/mui-org/material-ui/issues/9106#issuecomment-451270521\n            {...rest}\n        />\n    );\n\n    const renderContent = () => (\n        <Stack className={contentClassName} spacing={spacing} divider={divider}>\n            {React.Children.map(children, field =>\n                field && isValidElement<any>(field) ? (\n                    <Labeled\n                        key={field.props.source}\n                        className={clsx(\n                            'ra-field',\n                            field.props.source &&\n                                `ra-field-${field.props.source}`,\n                            field.props.className\n                        )}\n                    >\n                        {field}\n                    </Labeled>\n                ) : null\n            )}\n        </Stack>\n    );\n\n    return context === 'header' ? renderHeader() : renderContent();\n};\n\nTab.propTypes = {\n    className: PropTypes.string,\n    contentClassName: PropTypes.string,\n    children: PropTypes.node,\n    context: PropTypes.oneOf(['header', 'content']),\n    icon: PropTypes.element,\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.element])\n        .isRequired,\n    path: PropTypes.string,\n    spacing: PropTypes.any,\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n};\n\nexport interface TabProps extends Omit<MuiTabProps, 'children'> {\n    children: ReactNode;\n    contentClassName?: string;\n    context?: 'header' | 'content';\n    className?: string;\n    divider?: ReactNode;\n    icon?: ReactElement;\n    label: string | ReactElement;\n    path?: string;\n    record?: RaRecord;\n    spacing?: ResponsiveStyleValue<number | string>;\n    syncWithLocation?: boolean;\n    value?: string | number;\n}\n","import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { Typography } from '@mui/material';\nimport Inbox from '@mui/icons-material/Inbox';\nimport {\n    useTranslate,\n    useResourceDefinition,\n    useResourceContext,\n    useGetResourceLabel,\n} from 'ra-core';\n\nimport { CreateButton } from '../button';\n\nexport const Empty = (props: EmptyProps) => {\n    const { className } = props;\n    const { hasCreate } = useResourceDefinition(props);\n    const resource = useResourceContext(props);\n\n    const translate = useTranslate();\n\n    const getResourceLabel = useGetResourceLabel();\n    const resourceName = translate(`resources.${resource}.forcedCaseName`, {\n        smart_count: 0,\n        _: getResourceLabel(resource, 0),\n    });\n\n    const emptyMessage = translate('ra.page.empty', { name: resourceName });\n    const inviteMessage = translate('ra.page.invite');\n\n    return (\n        <Root className={className}>\n            <div className={EmptyClasses.message}>\n                <Inbox className={EmptyClasses.icon} />\n                <Typography variant=\"h4\" paragraph>\n                    {translate(`resources.${resource}.empty`, {\n                        _: emptyMessage,\n                    })}\n                </Typography>\n                {hasCreate && (\n                    <Typography variant=\"body1\">\n                        {translate(`resources.${resource}.invite`, {\n                            _: inviteMessage,\n                        })}\n                    </Typography>\n                )}\n            </div>\n            {hasCreate && (\n                <div className={EmptyClasses.toolbar}>\n                    <CreateButton variant=\"contained\" />\n                </div>\n            )}\n        </Root>\n    );\n};\n\nexport interface EmptyProps {\n    resource?: string;\n    hasCreate?: boolean;\n    className?: string;\n}\n\nconst PREFIX = 'RaEmpty';\n\nexport const EmptyClasses = {\n    message: `${PREFIX}-message`,\n    icon: `${PREFIX}-icon`,\n    toolbar: `${PREFIX}-toolbar`,\n};\n\nconst Root = styled('span', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    flex: 1,\n    [`& .${EmptyClasses.message}`]: {\n        textAlign: 'center',\n        opacity: theme.palette.mode === 'light' ? 0.5 : 0.8,\n        margin: '0 1em',\n        color:\n            theme.palette.mode === 'light'\n                ? 'inherit'\n                : theme.palette.text.primary,\n    },\n\n    [`& .${EmptyClasses.icon}`]: {\n        width: '9em',\n        height: '9em',\n    },\n\n    [`& .${EmptyClasses.toolbar}`]: {\n        textAlign: 'center',\n        marginTop: '2em',\n    },\n}));\n","import * as React from 'react';\nimport { ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport { ListBase, ListControllerProps, RaRecord } from 'ra-core';\n\nimport { TitlePropType } from '../layout/Title';\n\nimport { ListView, ListViewProps } from './ListView';\n\n/**\n * List page component\n *\n * The <List> component renders the list layout (title, buttons, filters, pagination),\n * and fetches the list of records from the REST API.\n *\n * It then delegates the rendering of the list of records to its child component.\n * Usually, it's a <Datagrid>, responsible for displaying a table with one row for each post.\n *\n * The <List> component accepts the following props:\n *\n * - actions\n * - aside: Side Component\n * - children: List Layout\n * - component\n * - disableAuthentication\n * - disableSyncWithLocation\n * - empty: Empty Page Component\n * - emptyWhileLoading\n * - exporter\n * - filters: Filter Inputs\n * - filter: Permanent Filter\n * - filterDefaultValues\n * - pagination: Pagination Component\n * - perPage: Pagination Size\n * - queryOptions\n * - sort: Default Sort Field & Order\n * - title\n * - sx: CSS API\n *\n * @example\n * const postFilters = [\n *     <TextInput label=\"Search\" source=\"q\" alwaysOn />,\n *     <TextInput label=\"Title\" source=\"title\" />\n * ];\n * export const PostList = (props) => (\n *     <List {...props}\n *         title=\"List of posts\"\n *         sort={{ field: 'published_at' }}\n *         filter={{ is_published: true }}\n *         filters={postFilters}\n *     >\n *         <Datagrid>\n *             <TextField source=\"id\" />\n *             <TextField source=\"title\" />\n *             <EditButton />\n *         </Datagrid>\n *     </List>\n * );\n */\nexport const List = <RecordType extends RaRecord = any>({\n    debounce,\n    disableAuthentication,\n    disableSyncWithLocation,\n    exporter,\n    filter,\n    filterDefaultValues,\n    perPage,\n    queryOptions,\n    resource,\n    sort,\n    ...rest\n}: ListProps<RecordType>): ReactElement => (\n    <ListBase<RecordType>\n        debounce={debounce}\n        disableAuthentication={disableAuthentication}\n        disableSyncWithLocation={disableSyncWithLocation}\n        exporter={exporter}\n        filter={filter}\n        filterDefaultValues={filterDefaultValues}\n        perPage={perPage}\n        queryOptions={queryOptions}\n        resource={resource}\n        sort={sort}\n    >\n        <ListView<RecordType> {...rest} />\n    </ListBase>\n);\n\nexport interface ListProps<RecordType extends RaRecord = any>\n    extends ListControllerProps<RecordType>,\n        ListViewProps {}\n\nList.propTypes = {\n    // the props you can change\n    // @ts-ignore-line\n    actions: PropTypes.oneOfType([PropTypes.bool, PropTypes.element]),\n    aside: PropTypes.element,\n    children: PropTypes.element.isRequired,\n    className: PropTypes.string,\n    emptyWhileLoading: PropTypes.bool,\n    filter: PropTypes.object,\n    filterDefaultValues: PropTypes.object,\n    filters: PropTypes.oneOfType([\n        PropTypes.element,\n        PropTypes.arrayOf(PropTypes.element),\n    ]),\n    // @ts-ignore-line\n    pagination: PropTypes.oneOfType([PropTypes.element, PropTypes.bool]),\n    perPage: PropTypes.number.isRequired,\n    //@ts-ignore-line\n    sort: PropTypes.shape({\n        field: PropTypes.string,\n        order: PropTypes.string,\n    }),\n    sx: PropTypes.any,\n    title: TitlePropType,\n    // the props managed by react-admin\n    disableSyncWithLocation: PropTypes.bool,\n    hasCreate: PropTypes.bool,\n    hasEdit: PropTypes.bool,\n    hasList: PropTypes.bool,\n    hasShow: PropTypes.bool,\n    resource: PropTypes.string,\n};\n\nList.defaultProps = {\n    filter: {},\n    perPage: 10,\n};\n","import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { Children, cloneElement, ReactElement, ElementType } from 'react';\nimport PropTypes from 'prop-types';\nimport { SxProps } from '@mui/system';\nimport Card from '@mui/material/Card';\nimport clsx from 'clsx';\nimport { ComponentPropType, useListContext, RaRecord } from 'ra-core';\n\nimport { Title, TitlePropType } from '../layout/Title';\nimport { ListToolbar } from './ListToolbar';\nimport { Pagination as DefaultPagination } from './pagination';\nimport { ListActions as DefaultActions } from './ListActions';\nimport { Empty } from './Empty';\n\nconst defaultActions = <DefaultActions />;\nconst defaultPagination = <DefaultPagination />;\nconst defaultEmpty = <Empty />;\nconst DefaultComponent = Card;\n\nexport const ListView = <RecordType extends RaRecord = any>(\n    props: ListViewProps\n) => {\n    const {\n        actions = defaultActions,\n        aside,\n        filters,\n        bulkActionButtons,\n        emptyWhileLoading,\n        hasCreate,\n        pagination = defaultPagination,\n        children,\n        className,\n        component: Content = DefaultComponent,\n        title,\n        empty = defaultEmpty,\n        ...rest\n    } = props;\n    const {\n        defaultTitle,\n        data,\n        error,\n        total,\n        isLoading,\n        filterValues,\n    } = useListContext<RecordType>(props);\n\n    if (!children || (!data && isLoading && emptyWhileLoading)) {\n        return null;\n    }\n\n    if (error) {\n        return null;\n    }\n\n    const renderList = () => (\n        <div className={ListClasses.main}>\n            {(filters || actions) && (\n                <ListToolbar\n                    filters={filters}\n                    actions={actions}\n                    hasCreate={hasCreate}\n                />\n            )}\n            <Content className={ListClasses.content}>\n                {bulkActionButtons && children\n                    ? cloneElement(Children.only(children), {\n                          bulkActionButtons,\n                      })\n                    : children}\n            </Content>\n            {pagination !== false && pagination}\n        </div>\n    );\n\n    const renderEmpty = () =>\n        empty !== false && cloneElement(empty, { hasCreate });\n\n    const shouldRenderEmptyPage =\n        !isLoading &&\n        total === 0 &&\n        !Object.keys(filterValues).length &&\n        empty !== false;\n\n    return (\n        <Root className={clsx('list-page', className)} {...rest}>\n            <Title title={title} defaultTitle={defaultTitle} />\n            {shouldRenderEmptyPage ? renderEmpty() : renderList()}\n            {aside}\n        </Root>\n    );\n};\n\nListView.propTypes = {\n    // @ts-ignore-line\n    actions: PropTypes.oneOfType([PropTypes.bool, PropTypes.element]),\n    aside: PropTypes.element,\n    children: PropTypes.element,\n    className: PropTypes.string,\n    component: ComponentPropType,\n    // @ts-ignore-line\n    sort: PropTypes.shape({\n        field: PropTypes.string.isRequired,\n        order: PropTypes.string.isRequired,\n    }),\n    data: PropTypes.any,\n    defaultTitle: PropTypes.string,\n    displayedFilters: PropTypes.object,\n    emptyWhileLoading: PropTypes.bool,\n    // @ts-ignore-line\n    exporter: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n    filterDefaultValues: PropTypes.object,\n    filters: PropTypes.oneOfType([\n        PropTypes.element,\n        PropTypes.arrayOf(PropTypes.element),\n    ]),\n    filterValues: PropTypes.object,\n    hasCreate: PropTypes.bool,\n    hideFilter: PropTypes.func,\n    ids: PropTypes.array,\n    loading: PropTypes.bool,\n    onSelect: PropTypes.func,\n    onToggleItem: PropTypes.func,\n    onUnselectItems: PropTypes.func,\n    page: PropTypes.number,\n    // @ts-ignore-line\n    pagination: PropTypes.oneOfType([PropTypes.element, PropTypes.bool]),\n    perPage: PropTypes.number,\n    refresh: PropTypes.func,\n    resource: PropTypes.string,\n    selectedIds: PropTypes.array,\n    setFilters: PropTypes.func,\n    setPage: PropTypes.func,\n    setPerPage: PropTypes.func,\n    setSort: PropTypes.func,\n    showFilter: PropTypes.func,\n    title: TitlePropType,\n    total: PropTypes.number,\n};\n\nexport interface ListViewProps {\n    actions?: ReactElement | false;\n    aside?: ReactElement;\n    /**\n     * @deprecated pass the bulkActionButtons prop to the List child (Datagrid or SimpleList) instead\n     */\n    bulkActionButtons?: ReactElement | false;\n    className?: string;\n    children: ReactElement;\n    component?: ElementType;\n    empty?: ReactElement | false;\n    emptyWhileLoading?: boolean;\n    filters?: ReactElement | ReactElement[];\n    hasCreate?: boolean;\n    pagination?: ReactElement | false;\n    title?: string | ReactElement;\n    sx?: SxProps;\n}\n\nconst PREFIX = 'RaList';\n\nexport const ListClasses = {\n    main: `${PREFIX}-main`,\n    content: `${PREFIX}-content`,\n    actions: `${PREFIX}-actions`,\n    noResults: `${PREFIX}-noResults`,\n};\n\nconst Root = styled('div', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    display: 'flex',\n\n    [`& .${ListClasses.main}`]: {\n        flex: '1 1 auto',\n        display: 'flex',\n        flexDirection: 'column',\n    },\n\n    [`& .${ListClasses.content}`]: {\n        position: 'relative',\n        [theme.breakpoints.down('sm')]: {\n            boxShadow: 'none',\n        },\n        overflow: 'inherit',\n    },\n\n    [`& .${ListClasses.actions}`]: {\n        zIndex: 2,\n        display: 'flex',\n        justifyContent: 'flex-end',\n        flexWrap: 'wrap',\n    },\n\n    [`& .${ListClasses.noResults}`]: { padding: 20 },\n}));\n","import * as React from 'react';\nimport { FC, memo } from 'react';\nimport { styled } from '@mui/material/styles';\nimport { ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport { Toolbar, ToolbarProps } from '@mui/material';\nimport { Exporter } from 'ra-core';\n\nimport { FilterForm } from './filter';\nimport { FilterContext } from './FilterContext';\n\nexport const ListToolbar: FC<ListToolbarProps> = memo(props => {\n    const { filters, actions, className, ...rest } = props;\n\n    return Array.isArray(filters) ? (\n        <FilterContext.Provider value={filters}>\n            <Root className={className}>\n                <FilterForm />\n                <span />\n                {actions &&\n                    React.cloneElement(actions, {\n                        ...rest,\n                        ...actions.props,\n                    })}\n            </Root>\n        </FilterContext.Provider>\n    ) : (\n        <Root className={className}>\n            {filters &&\n                React.cloneElement(filters, {\n                    ...rest,\n                    context: 'form',\n                })}\n            <span />\n            {actions &&\n                React.cloneElement(actions, {\n                    ...rest,\n                    filters,\n                    ...actions.props,\n                })}\n        </Root>\n    );\n});\n\nListToolbar.propTypes = {\n    filters: PropTypes.oneOfType([\n        PropTypes.element,\n        PropTypes.arrayOf(PropTypes.element),\n    ]),\n    // @ts-ignore\n    actions: PropTypes.oneOfType([PropTypes.bool, PropTypes.element]),\n    // @ts-ignore\n    exporter: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n};\n\nexport interface ListToolbarProps\n    extends Omit<ToolbarProps, 'classes' | 'onSelect'> {\n    actions?: ReactElement | false;\n    exporter?: Exporter | false;\n    filters?: ReactElement | ReactElement[];\n    hasCreate?: boolean;\n}\n\nconst PREFIX = 'RaListToolbar';\n\nconst Root = styled(Toolbar, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    justifyContent: 'space-between',\n    alignItems: 'flex-end',\n    minHeight: 'auto',\n    [theme.breakpoints.up('sm')]: {\n        paddingRight: 0,\n    },\n    [theme.breakpoints.up('xs')]: {\n        paddingLeft: 0,\n    },\n    [theme.breakpoints.down('sm')]: {\n        paddingLeft: theme.spacing(2),\n        backgroundColor: theme.palette.background.paper,\n    },\n}));\n","import * as React from 'react';\nimport { cloneElement, useMemo, useContext, ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    sanitizeListRestProps,\n    Identifier,\n    SortPayload,\n    Exporter,\n    useListContext,\n    useResourceContext,\n    useResourceDefinition,\n} from 'ra-core';\nimport { ToolbarProps } from '@mui/material';\n\nimport TopToolbar from '../layout/TopToolbar';\nimport { CreateButton, ExportButton } from '../button';\nimport { FilterContext } from './FilterContext';\nimport { FilterButton } from './filter';\n\n/**\n * Action Toolbar for the List view\n *\n * Internal component. If you want to add or remove actions for a List view,\n * write your own ListActions Component. Then, in the <List> component,\n * use it in the `actions` prop to pass a custom component.\n *\n * @example\n *     import { cloneElement } from 'react';\n *     import Button from '@mui/material/Button';\n *     import { TopToolbar, List, CreateButton, ExportButton } from 'react-admin';\n *\n *     const PostListActions = ({ filters }) => (\n *         <TopToolbar>\n *             { cloneElement(filters, { context: 'button' }) }\n *             <CreateButton/>\n *             <ExportButton/>\n *             // Add your custom actions here //\n *             <Button onClick={customAction}>Custom Action</Button>\n *         </TopToolbar>\n *     );\n *\n *     export const PostList = (props) => (\n *         <List actions={<PostListActions />} {...props}>\n *             ...\n *         </List>\n *     );\n */\nexport const ListActions = (props: ListActionsProps) => {\n    const { className, filters: filtersProp, hasCreate: _, ...rest } = props;\n    const {\n        sort,\n        displayedFilters,\n        filterValues,\n        exporter,\n        showFilter,\n        total,\n    } = useListContext(props);\n    const resource = useResourceContext(props);\n    const { hasCreate } = useResourceDefinition(props);\n    const filters = useContext(FilterContext) || filtersProp;\n    return useMemo(\n        () => (\n            <TopToolbar className={className} {...sanitizeListRestProps(rest)}>\n                {filtersProp\n                    ? cloneElement(filtersProp, {\n                          resource,\n                          showFilter,\n                          displayedFilters,\n                          filterValues,\n                          context: 'button',\n                      })\n                    : filters && <FilterButton />}\n                {hasCreate && <CreateButton />}\n                {exporter !== false && (\n                    <ExportButton\n                        disabled={total === 0}\n                        resource={resource}\n                        sort={sort}\n                        filterValues={filterValues}\n                    />\n                )}\n            </TopToolbar>\n        ),\n        /* eslint-disable react-hooks/exhaustive-deps */\n        [\n            resource,\n            displayedFilters,\n            filterValues,\n            filtersProp,\n            showFilter,\n            filters,\n            total,\n            className,\n            sort,\n            exporter,\n            hasCreate,\n        ]\n    );\n};\n\nListActions.propTypes = {\n    className: PropTypes.string,\n    sort: PropTypes.any,\n    displayedFilters: PropTypes.object,\n    exporter: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n    filters: PropTypes.element,\n    filterValues: PropTypes.object,\n    hasCreate: PropTypes.bool,\n    resource: PropTypes.string,\n    onUnselectItems: PropTypes.func.isRequired,\n    selectedIds: PropTypes.arrayOf(PropTypes.any),\n    showFilter: PropTypes.func,\n    total: PropTypes.number,\n};\n\nListActions.defaultProps = {\n    selectedIds: [],\n    onUnselectItems: () => null,\n};\n\nexport interface ListActionsProps extends ToolbarProps {\n    sort?: SortPayload;\n    className?: string;\n    resource?: string;\n    filters?: ReactElement<any>;\n    displayedFilters?: any;\n    exporter?: Exporter | boolean;\n    filterValues?: any;\n    permanentFilter?: any;\n    hasCreate?: boolean;\n    selectedIds?: Identifier[];\n    onUnselectItems?: () => void;\n    showFilter?: (filterName: string, defaultValue: any) => void;\n    total?: number;\n}\n","import * as React from 'react';\nimport { useState, useEffect } from 'react';\nimport inflection from 'inflection';\nimport {\n    ListBase,\n    getElementsFromRecords,\n    InferredElement,\n    useListContext,\n    useResourceContext,\n    RaRecord,\n} from 'ra-core';\n\nimport { ListProps } from './List';\nimport { ListView, ListViewProps } from './ListView';\nimport { listFieldTypes } from './listFieldTypes';\n\n/**\n * List component rendering a <Datagrid> based on the result of the\n * dataProvider.getList() call.\n *\n * The result (choice and type of columns) isn't configurable, but the\n * <ListGuesser> outputs the <Datagrid> it has guessed to the console so that\n * developers can start from there.\n *\n * To be used as the list prop of a <Resource>.\n *\n * @example\n *\n * import { Admin, Resource, ListGuesser } from 'react-admin';\n *\n * const App = () => (\n *     <Admin dataProvider={myDataProvider}>\n *         <Resource name=\"posts\" list={ListGuesser} />\n *     </Admin>\n * );\n */\nexport const ListGuesser = <RecordType extends RaRecord = any>(\n    props: Omit<ListProps, 'children'>\n) => {\n    const {\n        debounce,\n        disableAuthentication,\n        disableSyncWithLocation,\n        exporter,\n        filter,\n        filterDefaultValues,\n        perPage,\n        queryOptions,\n        resource,\n        sort,\n        ...rest\n    } = props;\n    return (\n        <ListBase<RecordType>\n            debounce={debounce}\n            disableAuthentication={disableAuthentication}\n            disableSyncWithLocation={disableSyncWithLocation}\n            exporter={exporter}\n            filter={filter}\n            filterDefaultValues={filterDefaultValues}\n            perPage={perPage}\n            queryOptions={{ keepPreviousData: false }}\n            resource={resource}\n            sort={sort}\n        >\n            <ListViewGuesser {...rest} />\n        </ListBase>\n    );\n};\n\nconst ListViewGuesser = (props: Omit<ListViewProps, 'children'>) => {\n    const { data } = useListContext(props);\n    const resource = useResourceContext();\n    const [child, setChild] = useState(null);\n\n    useEffect(() => {\n        setChild(null);\n    }, [resource]);\n\n    useEffect(() => {\n        if (data && data.length > 0 && !child) {\n            const inferredElements = getElementsFromRecords(\n                data,\n                listFieldTypes\n            );\n            const inferredChild = new InferredElement(\n                listFieldTypes.table,\n                null,\n                inferredElements\n            );\n            setChild(inferredChild.getElement());\n\n            if (process.env.NODE_ENV === 'production') return;\n\n            const representation = inferredChild.getRepresentation();\n            const components = ['List']\n                .concat(\n                    Array.from(\n                        new Set(\n                            Array.from(representation.matchAll(/<([^/\\s>]+)/g))\n                                .map(match => match[1])\n                                .filter(component => component !== 'span')\n                        )\n                    )\n                )\n                .sort();\n\n            // eslint-disable-next-line no-console\n            console.log(\n                `Guessed List:\n\nimport { ${components.join(', ')} } from 'react-admin';\n\nexport const ${inflection.capitalize(\n                    inflection.singularize(resource)\n                )}List = () => (\n    <List>\n${inferredChild.getRepresentation()}\n    </List>\n);`\n            );\n        }\n    }, [data, child, resource]);\n\n    return <ListView {...props}>{child}</ListView>;\n};\n\nListViewGuesser.propTypes = ListView.propTypes;\n","import * as React from 'react';\nimport { Datagrid } from './datagrid';\nimport { SingleFieldList } from './SingleFieldList';\nimport {\n    ArrayField,\n    BooleanField,\n    ChipField,\n    DateField,\n    EmailField,\n    NumberField,\n    ReferenceField,\n    ReferenceArrayField,\n    TextField,\n    UrlField,\n} from '../field';\n\nexport const listFieldTypes = {\n    table: {\n        component: props => <Datagrid rowClick=\"edit\" {...props} />, // eslint-disable-line react/display-name\n        representation: (_, children) => `        <Datagrid rowClick=\"edit\">\n${children.map(child => `            ${child.getRepresentation()}`).join('\\n')}\n        </Datagrid>`,\n    },\n    array: {\n        // eslint-disable-next-line react/display-name\n        component: ({ children, ...props }) => (\n            <ArrayField {...props}>\n                <SingleFieldList>\n                    <ChipField\n                        source={children.length > 0 && children[0].props.source}\n                    />\n                </SingleFieldList>\n            </ArrayField>\n        ),\n        representation: (props, children) =>\n            `<ArrayField source=\"${\n                props.source\n            }\"><SingleFieldList><ChipField source=\"${\n                children.length > 0 && children[0].getProps().source\n            }\" /></SingleFieldList></ArrayField>`,\n    },\n    boolean: {\n        component: BooleanField,\n        representation: props => `<BooleanField source=\"${props.source}\" />`,\n    },\n    date: {\n        component: DateField,\n        representation: props => `<DateField source=\"${props.source}\" />`,\n    },\n    email: {\n        component: EmailField,\n        representation: props => `<EmailField source=\"${props.source}\" />`,\n    },\n    id: {\n        component: TextField,\n        representation: props => `<TextField source=\"${props.source}\" />`,\n    },\n    number: {\n        component: NumberField,\n        representation: props => `<NumberField source=\"${props.source}\" />`,\n    },\n    reference: {\n        component: ReferenceField,\n        representation: props =>\n            `<ReferenceField source=\"${props.source}\" reference=\"${props.reference}\"><TextField source=\"id\" /></ReferenceField>`,\n    },\n    referenceChild: {\n        component: props => <TextField source=\"id\" {...props} />, // eslint-disable-line react/display-name\n        representation: () => `<TextField source=\"id\" />`,\n    },\n    referenceArray: {\n        component: ReferenceArrayField,\n        representation: props =>\n            `<ReferenceArrayField source=\"${props.source}\" reference=\"${props.reference}\"><TextField source=\"id\" /></ReferenceArrayField>`,\n    },\n    referenceArrayChild: {\n        component: props => <TextField source=\"id\" {...props} />, // eslint-disable-line react/display-name\n        representation: () => `<TextField source=\"id\" />`,\n    },\n    richText: undefined, // never display a rich text field in a datagrid\n    string: {\n        component: TextField,\n        representation: props => `<TextField source=\"${props.source}\" />`,\n    },\n    url: {\n        component: UrlField,\n        representation: props => `<UrlField source=\"${props.source}\" />`,\n    },\n};\n","import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport {\n    cloneElement,\n    Children,\n    HtmlHTMLAttributes,\n    ComponentType,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport {\n    sanitizeListRestProps,\n    useListContext,\n    useResourceContext,\n    RaRecord,\n    RecordContextProvider,\n    ComponentPropType,\n    useCreatePath,\n} from 'ra-core';\n\nimport { Link } from '../Link';\n\n/**\n * Iterator component to be used to display a list of entities, using a single field\n *\n * @example Display all the books by the current author\n * <ReferenceManyField reference=\"books\" target=\"author_id\">\n *     <SingleFieldList>\n *         <ChipField source=\"title\" />\n *     </SingleFieldList>\n * </ReferenceManyField>\n *\n * By default, it includes a link to the <Edit> page of the related record\n * (`/books/:id` in the previous example).\n *\n * Set the linkType prop to \"show\" to link to the <Show> page instead.\n *\n * @example\n * <ReferenceManyField reference=\"books\" target=\"author_id\" linkType=\"show\">\n *     <SingleFieldList>\n *         <ChipField source=\"title\" />\n *     </SingleFieldList>\n * </ReferenceManyField>\n *\n * You can also prevent `<SingleFieldList>` from adding link to children by setting\n * `linkType` to false.\n *\n * @example\n * <ReferenceManyField reference=\"books\" target=\"author_id\" linkType={false}>\n *     <SingleFieldList>\n *         <ChipField source=\"title\" />\n *     </SingleFieldList>\n * </ReferenceManyField>\n */\nexport const SingleFieldList = (props: SingleFieldListProps) => {\n    const {\n        className,\n        children,\n        linkType = 'edit',\n        component: Component = Root,\n        ...rest\n    } = props;\n    const { data, isLoading } = useListContext(props);\n    const resource = useResourceContext(props);\n    const createPath = useCreatePath();\n\n    if (isLoading === true) {\n        return <LinearProgress />;\n    }\n\n    return (\n        <Component className={className} {...sanitizeListRestProps(rest)}>\n            {data.map((record, rowIndex) => {\n                const resourceLinkPath = !linkType\n                    ? false\n                    : createPath({\n                          resource,\n                          type: linkType,\n                          id: record.id,\n                      });\n\n                if (resourceLinkPath) {\n                    return (\n                        <RecordContextProvider\n                            value={record}\n                            key={record.id ?? `row${rowIndex}`}\n                        >\n                            <Link\n                                className={SingleFieldListClasses.link}\n                                to={resourceLinkPath}\n                                onClick={stopPropagation}\n                            >\n                                {cloneElement(Children.only(children), {\n                                    record,\n                                    resource,\n                                    // Workaround to force ChipField to be clickable\n                                    onClick: handleClick,\n                                })}\n                            </Link>\n                        </RecordContextProvider>\n                    );\n                }\n\n                return (\n                    <RecordContextProvider\n                        value={record}\n                        key={record.id ?? `row${rowIndex}`}\n                    >\n                        {children}\n                    </RecordContextProvider>\n                );\n            })}\n        </Component>\n    );\n};\n\nSingleFieldList.propTypes = {\n    children: PropTypes.element.isRequired,\n    classes: PropTypes.object,\n    className: PropTypes.string,\n    component: ComponentPropType,\n    data: PropTypes.any,\n    ids: PropTypes.array,\n    // @ts-ignore\n    linkType: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    resource: PropTypes.string,\n};\n\nexport interface SingleFieldListProps<RecordType extends RaRecord = any>\n    extends HtmlHTMLAttributes<HTMLDivElement> {\n    className?: string;\n\n    component?: string | ComponentType<any>;\n    linkType?: string | false;\n    children: React.ReactElement;\n    // can be injected when using the component without context\n    data?: RecordType[];\n    total?: number;\n    loaded?: boolean;\n}\n\nconst PREFIX = 'RaSingleFieldList';\n\nexport const SingleFieldListClasses = {\n    link: `${PREFIX}-link`,\n};\n\nconst Root = styled('div', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    display: 'flex',\n    flexWrap: 'wrap',\n    marginTop: theme.spacing(-1),\n    marginBottom: theme.spacing(-1),\n\n    [`& .${SingleFieldListClasses.link}`]: {\n        textDecoration: 'none',\n    },\n}));\n\n// useful to prevent click bubbling in a datagrid with rowClick\nconst stopPropagation = e => e.stopPropagation();\n\n// Our handleClick does nothing as we wrap the children inside a Link but it is\n// required by ChipField, which uses a Chip from MUI.\n// The MUI Chip requires an onClick handler to behave like a clickable element.\nconst handleClick = () => {};\n","import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { isValidElement, ReactNode, ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Avatar,\n    List,\n    ListProps,\n    ListItem,\n    ListItemAvatar,\n    ListItemButton,\n    ListItemIcon,\n    ListItemProps,\n    ListItemSecondaryAction,\n    ListItemText,\n} from '@mui/material';\nimport { Link } from 'react-router-dom';\nimport {\n    Identifier,\n    RaRecord,\n    RecordContextProvider,\n    sanitizeListRestProps,\n    useListContext,\n    useResourceContext,\n    useCreatePath,\n} from 'ra-core';\n\nimport { SimpleListLoading } from './SimpleListLoading';\n\n/**\n * The <SimpleList> component renders a list of records as a MUI <List>.\n * It is usually used as a child of react-admin's <List> and <ReferenceManyField> components.\n *\n * Also widely used on Mobile.\n *\n * Props:\n * - primaryText: function returning a React element (or some text) based on the record\n * - secondaryText: same\n * - tertiaryText: same\n * - leftAvatar: function returning a React element based on the record\n * - leftIcon: same\n * - rightAvatar: same\n * - rightIcon: same\n * - linkType: 'edit' or 'show', or a function returning 'edit' or 'show' based on the record\n * - rowStyle: function returning a style object based on (record, index)\n *\n * @example // Display all posts as a List\n * const postRowStyle = (record, index) => ({\n *     backgroundColor: record.views >= 500 ? '#efe' : 'white',\n * });\n * export const PostList = (props) => (\n *     <List {...props}>\n *         <SimpleList\n *             primaryText={record => record.title}\n *             secondaryText={record => `${record.views} views`}\n *             tertiaryText={record =>\n *                 new Date(record.published_at).toLocaleDateString()\n *             }\n *             rowStyle={postRowStyle}\n *          />\n *     </List>\n * );\n */\nexport const SimpleList = <RecordType extends RaRecord = any>(\n    props: SimpleListProps<RecordType>\n) => {\n    const {\n        className,\n        hasBulkActions,\n        leftAvatar,\n        leftIcon,\n        linkType = 'edit',\n        primaryText,\n        rightAvatar,\n        rightIcon,\n        secondaryText,\n        tertiaryText,\n        rowStyle,\n        ...rest\n    } = props;\n    const { data, isLoading, total } = useListContext<RecordType>(props);\n    const resource = useResourceContext(props);\n\n    if (isLoading === true) {\n        return (\n            <SimpleListLoading\n                className={className}\n                hasLeftAvatarOrIcon={!!leftIcon || !!leftAvatar}\n                hasRightAvatarOrIcon={!!rightIcon || !!rightAvatar}\n                hasSecondaryText={!!secondaryText}\n                hasTertiaryText={!!tertiaryText}\n            />\n        );\n    }\n\n    const renderAvatar = (\n        record: RecordType,\n        avatarCallback: FunctionToElement<RecordType>\n    ) => {\n        const avatarValue = avatarCallback(record, record.id);\n        if (\n            typeof avatarValue === 'string' &&\n            (avatarValue.startsWith('http') || avatarValue.startsWith('data:'))\n        ) {\n            return <Avatar src={avatarValue} />;\n        } else {\n            return <Avatar>{avatarValue}</Avatar>;\n        }\n    };\n\n    return (total == null && data?.length > 0) || total > 0 ? (\n        <Root className={className} {...sanitizeListRestProps(rest)}>\n            {data.map((record, rowIndex) => (\n                <RecordContextProvider key={record.id} value={record}>\n                    <ListItem disablePadding>\n                        <LinkOrNot\n                            linkType={linkType}\n                            resource={resource}\n                            id={record.id}\n                            record={record}\n                            style={\n                                rowStyle\n                                    ? rowStyle(record, rowIndex)\n                                    : undefined\n                            }\n                        >\n                            {leftIcon && (\n                                <ListItemIcon>\n                                    {leftIcon(record, record.id)}\n                                </ListItemIcon>\n                            )}\n                            {leftAvatar && (\n                                <ListItemAvatar>\n                                    {renderAvatar(record, leftAvatar)}\n                                </ListItemAvatar>\n                            )}\n                            <ListItemText\n                                primary={\n                                    <div>\n                                        {isValidElement(primaryText)\n                                            ? primaryText\n                                            : primaryText(record, record.id)}\n\n                                        {!!tertiaryText &&\n                                            (isValidElement(tertiaryText) ? (\n                                                tertiaryText\n                                            ) : (\n                                                <span\n                                                    className={\n                                                        SimpleListClasses.tertiary\n                                                    }\n                                                >\n                                                    {tertiaryText(\n                                                        record,\n                                                        record.id\n                                                    )}\n                                                </span>\n                                            ))}\n                                    </div>\n                                }\n                                secondary={\n                                    !!secondaryText &&\n                                    (isValidElement(secondaryText)\n                                        ? secondaryText\n                                        : secondaryText(record, record.id))\n                                }\n                            />\n                            {(rightAvatar || rightIcon) && (\n                                <ListItemSecondaryAction>\n                                    {rightAvatar && (\n                                        <Avatar>\n                                            {renderAvatar(record, rightAvatar)}\n                                        </Avatar>\n                                    )}\n                                    {rightIcon && (\n                                        <ListItemIcon>\n                                            {rightIcon(record, record.id)}\n                                        </ListItemIcon>\n                                    )}\n                                </ListItemSecondaryAction>\n                            )}\n                        </LinkOrNot>\n                    </ListItem>\n                </RecordContextProvider>\n            ))}\n        </Root>\n    ) : null;\n};\n\nSimpleList.propTypes = {\n    className: PropTypes.string,\n    leftAvatar: PropTypes.func,\n    leftIcon: PropTypes.func,\n    linkType: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.bool,\n        PropTypes.func,\n    ]),\n    primaryText: PropTypes.oneOfType([PropTypes.func, PropTypes.element]),\n    rightAvatar: PropTypes.func,\n    rightIcon: PropTypes.func,\n    secondaryText: PropTypes.oneOfType([PropTypes.func, PropTypes.element]),\n    tertiaryText: PropTypes.oneOfType([PropTypes.func, PropTypes.element]),\n    rowStyle: PropTypes.func,\n};\n\nexport type FunctionToElement<RecordType extends RaRecord = any> = (\n    record: RecordType,\n    id: Identifier\n) => ReactNode;\n\nexport interface SimpleListProps<RecordType extends RaRecord = any>\n    extends Omit<ListProps, 'classes'> {\n    className?: string;\n    hasBulkActions?: boolean;\n    leftAvatar?: FunctionToElement<RecordType>;\n    leftIcon?: FunctionToElement<RecordType>;\n    primaryText?: FunctionToElement<RecordType> | ReactElement;\n    linkType?: string | FunctionLinkType | false;\n    rightAvatar?: FunctionToElement<RecordType>;\n    rightIcon?: FunctionToElement<RecordType>;\n    secondaryText?: FunctionToElement<RecordType> | ReactElement;\n    tertiaryText?: FunctionToElement<RecordType> | ReactElement;\n    rowStyle?: (record: RecordType, index: number) => any;\n    // can be injected when using the component without context\n    resource?: string;\n    data?: RecordType[];\n    isLoading?: boolean;\n    isLoaded?: boolean;\n    total?: number;\n}\n\nconst LinkOrNot = (\n    props: LinkOrNotProps & Omit<ListItemProps, 'button' | 'component' | 'id'>\n) => {\n    const {\n        classes: classesOverride,\n        linkType,\n        resource,\n        id,\n        children,\n        record,\n        ...rest\n    } = props;\n    const createPath = useCreatePath();\n    const type =\n        typeof linkType === 'function' ? linkType(record, id) : linkType;\n\n    return type === false ? (\n        <ListItemText\n            // @ts-ignore\n            component=\"div\"\n            {...rest}\n        >\n            {children}\n        </ListItemText>\n    ) : (\n        // @ts-ignore\n        <ListItemButton\n            component={Link}\n            to={createPath({ resource, id, type })}\n            {...rest}\n        >\n            {children}\n        </ListItemButton>\n    );\n};\n\nexport type FunctionLinkType = (record: RaRecord, id: Identifier) => string;\n\nexport interface LinkOrNotProps {\n    linkType?: string | FunctionLinkType | false;\n    resource: string;\n    id: Identifier;\n    record: RaRecord;\n    children: ReactNode;\n}\n\nconst PREFIX = 'RaSimpleList';\n\nexport const SimpleListClasses = {\n    tertiary: `${PREFIX}-tertiary`,\n};\n\nconst Root = styled(List, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})({\n    [`& .${SimpleListClasses.tertiary}`]: { float: 'right', opacity: 0.541176 },\n});\n","import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport Avatar from '@mui/material/Avatar';\nimport List, { ListProps } from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport ListItemSecondaryAction from '@mui/material/ListItemSecondaryAction';\nimport ListItemText from '@mui/material/ListItemText';\n\nimport { Placeholder } from './Placeholder';\nimport { useTimeout } from 'ra-core';\n\nexport const SimpleListLoading = (props: Props & ListProps) => {\n    const {\n        className,\n        hasLeftAvatarOrIcon,\n        hasRightAvatarOrIcon,\n        hasSecondaryText,\n        hasTertiaryText,\n        nbFakeLines = 5,\n        ...rest\n    } = props;\n\n    const oneSecondHasPassed = useTimeout(1000);\n\n    return oneSecondHasPassed ? (\n        <StyledList className={className} {...rest}>\n            {times(nbFakeLines, key => (\n                <ListItem key={key}>\n                    {hasLeftAvatarOrIcon && (\n                        <ListItemAvatar>\n                            <Avatar>&nbsp;</Avatar>\n                        </ListItemAvatar>\n                    )}\n                    <ListItemText\n                        primary={\n                            <div>\n                                <Placeholder\n                                    className={SimpleListLoadingClasses.primary}\n                                />\n                                {hasTertiaryText && (\n                                    <span\n                                        className={\n                                            SimpleListLoadingClasses.tertiary\n                                        }\n                                    >\n                                        <Placeholder />\n                                    </span>\n                                )}\n                            </div>\n                        }\n                        secondary={\n                            hasSecondaryText ? <Placeholder /> : undefined\n                        }\n                    />\n                    {hasRightAvatarOrIcon && (\n                        <ListItemSecondaryAction>\n                            <Avatar>&nbsp;</Avatar>\n                        </ListItemSecondaryAction>\n                    )}\n                </ListItem>\n            ))}\n        </StyledList>\n    ) : null;\n};\n\nSimpleListLoading.propTypes = {\n    className: PropTypes.string,\n    hasLeftAvatarOrIcon: PropTypes.bool,\n    hasRightAvatarOrIcon: PropTypes.bool,\n    hasSecondaryText: PropTypes.bool,\n    hasTertiaryText: PropTypes.bool,\n    nbFakeLines: PropTypes.number,\n};\n\nconst PREFIX = 'RaSimpleListLoading';\n\nexport const SimpleListLoadingClasses = {\n    primary: `${PREFIX}-primary`,\n    tertiary: `${PREFIX}-tertiary`,\n};\n\nconst StyledList = styled(List, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    [`& .${SimpleListLoadingClasses.primary}`]: {\n        width: '30vw',\n        display: 'inline-block',\n        marginBottom: theme.spacing(),\n    },\n\n    [`& .${SimpleListLoadingClasses.tertiary}`]: {\n        float: 'right',\n        opacity: 0.541176,\n        minWidth: '10vw',\n    },\n}));\n\nconst times = (nbChildren, fn) =>\n    Array.from({ length: nbChildren }, (_, key) => fn(key));\n\ninterface Props {\n    className?: string;\n    hasLeftAvatarOrIcon?: boolean;\n    hasRightAvatarOrIcon?: boolean;\n    hasSecondaryText?: boolean;\n    hasTertiaryText?: boolean;\n    nbFakeLines?: number;\n}\n","import * as React from 'react';\nimport { createElement, ComponentType } from 'react';\nimport { CoreAdminUI, CoreAdminUIProps } from 'ra-core';\nimport {\n    Layout as DefaultLayout,\n    LoadingPage,\n    NotFound,\n    Notification,\n} from './layout';\nimport { Login } from './auth';\n\nexport const AdminUI = ({ notification, ...props }: AdminUIProps) => (\n    <>\n        <CoreAdminUI {...props} />\n        {createElement(notification)}\n    </>\n);\n\nexport interface AdminUIProps extends CoreAdminUIProps {\n    notification?: ComponentType;\n}\n\nAdminUI.defaultProps = {\n    layout: DefaultLayout,\n    catchAll: NotFound,\n    loading: LoadingPage,\n    loginPage: Login,\n    notification: Notification,\n};\n","import * as React from 'react';\nimport { CoreAdminContext, CoreAdminContextProps } from 'ra-core';\n\nimport { defaultTheme } from './defaultTheme';\nimport { ThemeProvider } from './layout/Theme';\n\nexport const AdminContext = (props: CoreAdminContextProps) => {\n    const { theme = defaultTheme, children, ...rest } = props;\n    return (\n        <CoreAdminContext {...rest}>\n            <ThemeProvider theme={theme}>{children}</ThemeProvider>\n        </CoreAdminContext>\n    );\n};\n\nAdminContext.displayName = 'AdminContext';\n"],"mappings":"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","names":[]}