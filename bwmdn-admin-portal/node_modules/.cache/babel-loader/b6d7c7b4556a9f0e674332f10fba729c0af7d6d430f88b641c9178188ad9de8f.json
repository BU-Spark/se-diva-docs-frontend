{"ast":null,"code":"var __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport merge from 'lodash/merge';\nimport { DEFAULT_LOCALE } from './index';\n/**\n * Resolve the browser locale according to the value of the global window.navigator\n *\n * Use it to determine the <Admin> locale at runtime.\n *\n * @example\n *    import * as React from \"react\";\n *    import { Admin, Resource, resolveBrowserLocale } from 'react-admin';\n *    import polyglotI18nProvider from 'ra-i18n-polyglot';\n *    import englishMessages from 'ra-language-english';\n *    import frenchMessages from 'ra-language-french';\n *\n *    const messages = {\n *        fr: frenchMessages,\n *        en: englishMessages,\n *    };\n *    const i18nProvider = polyglotI18nProvider(\n *        locale => messages[locale] ? messages[locale] : messages.en,\n *        resolveBrowserLocale()\n *    );\n *\n *    const App = () => (\n *        <Admin i18nProvider={i18nProvider}>\n *            ...\n *        </Admin>\n *    );\n *\n * @param {string} defaultLocale Defaults to 'en'\n * @param options\n * @param {boolean} options.fullLocale Defaults to false\n */\nexport var resolveBrowserLocale = function (defaultLocale, options) {\n  // from http://blog.ksol.fr/user-locale-detection-browser-javascript/\n  // Rely on the window.navigator object to determine user locale\n  var _a = window.navigator,\n    language = _a.language,\n    browserLanguage = _a.browserLanguage,\n    userLanguage = _a.userLanguage;\n  var locale = language || browserLanguage || userLanguage || defaultLocale || DEFAULT_LOCALE;\n  return (options === null || options === void 0 ? void 0 : options.fullLocale) ? locale : locale.split('-')[0];\n};\n/**\n * Compose translations from multiple packages for a single language (eg: 'english').\n *\n * Use it to merge translations from addons with the main react-admin translations.\n *\n * @example\n *     import * as React from \"react\";\n *     import { Admin, Resource, mergeTranslations } from 'react-admin';\n *     import polyglotI18nProvider from 'ra-i18n-polyglot';\n *     import englishMessages from 'ra-language-english';\n *     import englishTreeMessages from 'ra-tree-language-english';\n *\n *     const messages = {\n *        en: mergeTranslations(englishMessages, englishTreeMessages),\n *     };\n *     const i18nProvider = polyglotI18nProvider(\n *        locale => messages[locale] ? messages[locale] : messages.en\n *    );\n *\n *    const App = () => (\n *        <Admin i18nProvider={i18nProvider}>\n *            ...\n *        </Admin>\n *    );\n */\nexport var mergeTranslations = function () {\n  var translationsModules = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    translationsModules[_i] = arguments[_i];\n  }\n  return merge.apply(void 0, __spreadArray([{}], translationsModules, false));\n};","map":{"version":3,"mappings":";;;;;;;;;AAAA,OAAOA,KAAK,MAAM,cAAc;AAChC,SAASC,cAAc,QAAQ,SAAS;AAOxC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,OAAO,IAAMC,oBAAoB,GAAG,UAChCC,aAAsB,EACtBC,OAAkC;EAElC;EACA;EACM,SAIFC,MAAM,CAACC,SAAiC;IAHxCC,QAAQ;IACRC,eAAe;IACfC,YAAY,kBAC4B;EAE5C,IAAMC,MAAM,GACRH,QAAQ,IACRC,eAAe,IACfC,YAAY,IACZN,aAAa,IACbF,cAAc;EAElB,OAAO,QAAO,aAAPG,OAAO,uBAAPA,OAAO,CAAEO,UAAU,IAAGD,MAAM,GAAGA,MAAM,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAC9D,CAAC;AAED;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,OAAO,IAAMC,iBAAiB,GAAG;EAAC;OAAA,UAAgC,EAAhCC,qBAAgC,EAAhCA,IAAgC;IAAhCC;;EAC9B,YAAK,8BAAC,EAAE,GAAKA,mBAAmB;AAAhC,CAAiC","names":["merge","DEFAULT_LOCALE","resolveBrowserLocale","defaultLocale","options","window","navigator","language","browserLanguage","userLanguage","locale","fullLocale","split","mergeTranslations","_i","translationsModules"],"sources":["/Users/paigedeveau/Desktop/se-diva-docs-frontend/bwmdn-admin-portal/node_modules/ra-core/src/i18n/TranslationUtils.ts"],"sourcesContent":["import merge from 'lodash/merge';\nimport { DEFAULT_LOCALE } from './index';\n\ninterface AllNavigatorLanguage extends NavigatorLanguage {\n    browserLanguage?: string;\n    userLanguage?: string;\n}\n\n/**\n * Resolve the browser locale according to the value of the global window.navigator\n *\n * Use it to determine the <Admin> locale at runtime.\n *\n * @example\n *    import * as React from \"react\";\n *    import { Admin, Resource, resolveBrowserLocale } from 'react-admin';\n *    import polyglotI18nProvider from 'ra-i18n-polyglot';\n *    import englishMessages from 'ra-language-english';\n *    import frenchMessages from 'ra-language-french';\n *\n *    const messages = {\n *        fr: frenchMessages,\n *        en: englishMessages,\n *    };\n *    const i18nProvider = polyglotI18nProvider(\n *        locale => messages[locale] ? messages[locale] : messages.en,\n *        resolveBrowserLocale()\n *    );\n *\n *    const App = () => (\n *        <Admin i18nProvider={i18nProvider}>\n *            ...\n *        </Admin>\n *    );\n *\n * @param {string} defaultLocale Defaults to 'en'\n * @param options\n * @param {boolean} options.fullLocale Defaults to false\n */\nexport const resolveBrowserLocale = (\n    defaultLocale?: string,\n    options?: { fullLocale?: boolean }\n): string => {\n    // from http://blog.ksol.fr/user-locale-detection-browser-javascript/\n    // Rely on the window.navigator object to determine user locale\n    const {\n        language,\n        browserLanguage,\n        userLanguage,\n    } = window.navigator as AllNavigatorLanguage;\n\n    const locale =\n        language ||\n        browserLanguage ||\n        userLanguage ||\n        defaultLocale ||\n        DEFAULT_LOCALE;\n\n    return options?.fullLocale ? locale : locale.split('-')[0];\n};\n\n/**\n * Compose translations from multiple packages for a single language (eg: 'english').\n *\n * Use it to merge translations from addons with the main react-admin translations.\n *\n * @example\n *     import * as React from \"react\";\n *     import { Admin, Resource, mergeTranslations } from 'react-admin';\n *     import polyglotI18nProvider from 'ra-i18n-polyglot';\n *     import englishMessages from 'ra-language-english';\n *     import englishTreeMessages from 'ra-tree-language-english';\n *\n *     const messages = {\n *        en: mergeTranslations(englishMessages, englishTreeMessages),\n *     };\n *     const i18nProvider = polyglotI18nProvider(\n *        locale => messages[locale] ? messages[locale] : messages.en\n *    );\n *\n *    const App = () => (\n *        <Admin i18nProvider={i18nProvider}>\n *            ...\n *        </Admin>\n *    );\n */\nexport const mergeTranslations = (...translationsModules: object[]) =>\n    merge({}, ...translationsModules);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}