{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport inflection from 'inflection';\nimport { EditBase, InferredElement, useResourceContext, useEditContext, getElementsFromRecords } from 'ra-core';\nimport { EditView } from './EditView';\nimport { editFieldTypes } from './editFieldTypes';\nexport var EditGuesser = function (props) {\n  var resource = props.resource,\n    id = props.id,\n    mutationMode = props.mutationMode,\n    mutationOptions = props.mutationOptions,\n    queryOptions = props.queryOptions,\n    redirect = props.redirect,\n    transform = props.transform,\n    disableAuthentication = props.disableAuthentication,\n    rest = __rest(props, [\"resource\", \"id\", \"mutationMode\", \"mutationOptions\", \"queryOptions\", \"redirect\", \"transform\", \"disableAuthentication\"]);\n  return React.createElement(EditBase, {\n    resource: resource,\n    id: id,\n    mutationMode: mutationMode,\n    mutationOptions: mutationOptions,\n    queryOptions: queryOptions,\n    redirect: redirect,\n    transform: transform,\n    disableAuthentication: disableAuthentication\n  }, React.createElement(EditViewGuesser, __assign({}, rest)));\n};\nvar EditViewGuesser = function (props) {\n  var resource = useResourceContext(props);\n  var record = useEditContext().record;\n  var _a = useState(null),\n    child = _a[0],\n    setChild = _a[1];\n  useEffect(function () {\n    setChild(null);\n  }, [resource]);\n  useEffect(function () {\n    if (record && !child) {\n      var inferredElements = getElementsFromRecords([record], editFieldTypes);\n      var inferredChild = new InferredElement(editFieldTypes.form, null, inferredElements);\n      setChild(inferredChild.getElement());\n      if (process.env.NODE_ENV === 'production') return;\n      var representation = inferredChild.getRepresentation();\n      var components = ['Edit'].concat(Array.from(new Set(Array.from(representation.matchAll(/<([^/\\s>]+)/g)).map(function (match) {\n        return match[1];\n      }).filter(function (component) {\n        return component !== 'span';\n      })))).sort();\n      // eslint-disable-next-line no-console\n      console.log(\"Guessed Edit:\\n\\nimport { \".concat(components.join(', '), \" } from 'react-admin';\\n\\nexport const \").concat(inflection.capitalize(inflection.singularize(resource)), \"Edit = () => (\\n    <Edit>\\n\").concat(representation, \"\\n    </Edit>\\n);\"));\n    }\n  }, [record, child, resource]);\n  return React.createElement(EditView, __assign({}, props), child);\n};\nEditViewGuesser.propTypes = EditView.propTypes;","map":{"version":3,"mappings":"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","names":["React","useEffect","useState","inflection","EditBase","InferredElement","useResourceContext","useEditContext","getElementsFromRecords","EditView","editFieldTypes","EditGuesser","props","id","mutationMode","mutationOptions","queryOptions","redirect","transform","disableAuthentication","rest","resource","EditViewGuesser","child","setChild","record","inferredElements","inferredChild","form","getElement","process","env","NODE_ENV","representation","getRepresentation","components","concat","Array","from","Set","matchAll","map","filter","sort","console","log","join","capitalize","singularize","propTypes"],"sources":["/Users/paigedeveau/Desktop/se-diva-docs-frontend/bwmdn-admin-portal/node_modules/ra-ui-materialui/src/detail/EditGuesser.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport inflection from 'inflection';\nimport {\n    EditBase,\n    InferredElement,\n    useResourceContext,\n    useEditContext,\n    getElementsFromRecords,\n} from 'ra-core';\n\nimport { EditProps } from '../types';\nimport { EditView } from './EditView';\nimport { editFieldTypes } from './editFieldTypes';\n\nexport const EditGuesser = (props: EditProps) => {\n    const {\n        resource,\n        id,\n        mutationMode,\n        mutationOptions,\n        queryOptions,\n        redirect,\n        transform,\n        disableAuthentication,\n        ...rest\n    } = props;\n    return (\n        <EditBase\n            resource={resource}\n            id={id}\n            mutationMode={mutationMode}\n            mutationOptions={mutationOptions}\n            queryOptions={queryOptions}\n            redirect={redirect}\n            transform={transform}\n            disableAuthentication={disableAuthentication}\n        >\n            <EditViewGuesser {...rest} />\n        </EditBase>\n    );\n};\n\nconst EditViewGuesser = props => {\n    const resource = useResourceContext(props);\n    const { record } = useEditContext();\n    const [child, setChild] = useState(null);\n\n    useEffect(() => {\n        setChild(null);\n    }, [resource]);\n\n    useEffect(() => {\n        if (record && !child) {\n            const inferredElements = getElementsFromRecords(\n                [record],\n                editFieldTypes\n            );\n            const inferredChild = new InferredElement(\n                editFieldTypes.form,\n                null,\n                inferredElements\n            );\n            setChild(inferredChild.getElement());\n\n            if (process.env.NODE_ENV === 'production') return;\n\n            const representation = inferredChild.getRepresentation();\n\n            const components = ['Edit']\n                .concat(\n                    Array.from(\n                        new Set(\n                            Array.from(representation.matchAll(/<([^/\\s>]+)/g))\n                                .map(match => match[1])\n                                .filter(component => component !== 'span')\n                        )\n                    )\n                )\n                .sort();\n\n            // eslint-disable-next-line no-console\n            console.log(\n                `Guessed Edit:\n\nimport { ${components.join(', ')} } from 'react-admin';\n\nexport const ${inflection.capitalize(\n                    inflection.singularize(resource)\n                )}Edit = () => (\n    <Edit>\n${representation}\n    </Edit>\n);`\n            );\n        }\n    }, [record, child, resource]);\n\n    return <EditView {...props}>{child}</EditView>;\n};\n\nEditViewGuesser.propTypes = EditView.propTypes;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}