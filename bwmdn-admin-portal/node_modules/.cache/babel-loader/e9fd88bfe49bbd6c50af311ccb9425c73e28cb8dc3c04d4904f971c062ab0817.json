{"ast":null,"code":"/**\n * Replace tokens by their value in the given string\n *\n * @param {string} template The template with interpolation tokens, e.g. 'Hello, %{name}'\n * @param {object} data The data to interpolate, e.g. { name: 'John' }\n * @returns {string} The interpolated string, e.g. 'Hello, John'\n */\nexport var substituteTokens = function (template, data) {\n  return template && data ? String.prototype.replace.call(template, defaultTokenRegex, function (expression, argument) {\n    if (!data.hasOwnProperty(argument) || data[argument] == null) {\n      return expression;\n    }\n    return data[argument];\n  }) : template;\n};\n// tokens are like 'Hello, %{name}'\nvar defaultTokenRegex = /%\\{(.*?)\\}/g;","map":{"version":3,"mappings":"AAAA;;;;;;;AAOA,OAAO,IAAMA,gBAAgB,GAAG,UAACC,QAAQ,EAAEC,IAAI;EAC3C,eAAQ,IAAIA,IAAI,GACVC,MAAM,CAACC,SAAS,CAACC,OAAO,CAACC,IAAI,CAACL,QAAQ,EAAEM,iBAAiB,EAAE,UACvDC,UAAU,EACVC,QAAQ;IAER,IAAI,CAACP,IAAI,CAACQ,cAAc,CAACD,QAAQ,CAAC,IAAIP,IAAI,CAACO,QAAQ,CAAC,IAAI,IAAI,EAAE;MAC1D,OAAOD,UAAU;;IAErB,OAAON,IAAI,CAACO,QAAQ,CAAC;EACzB,CAAC,CAAC,GACFR,QAAQ;AAVd,CAUc;AAElB;AACA,IAAMM,iBAAiB,GAAG,aAAa","names":["substituteTokens","template","data","String","prototype","replace","call","defaultTokenRegex","expression","argument","hasOwnProperty"],"sources":["/Users/paigedeveau/node_modules/ra-core/src/i18n/substituteTokens.ts"],"sourcesContent":["/**\n * Replace tokens by their value in the given string\n *\n * @param {string} template The template with interpolation tokens, e.g. 'Hello, %{name}'\n * @param {object} data The data to interpolate, e.g. { name: 'John' }\n * @returns {string} The interpolated string, e.g. 'Hello, John'\n */\nexport const substituteTokens = (template, data) =>\n    template && data\n        ? String.prototype.replace.call(template, defaultTokenRegex, function (\n              expression,\n              argument\n          ) {\n              if (!data.hasOwnProperty(argument) || data[argument] == null) {\n                  return expression;\n              }\n              return data[argument];\n          })\n        : template;\n\n// tokens are like 'Hello, %{name}'\nconst defaultTokenRegex = /%\\{(.*?)\\}/g;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}