{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport { useChoices, useRecordContext, useTranslate } from 'ra-core';\nimport { Typography } from '@mui/material';\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { fieldPropTypes } from './types';\n/**\n * Display a value in an enumeration\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * @example\n * const choices = [\n *    { id: 'M', name: 'Male' },\n *    { id: 'F', name: 'Female' },\n * ];\n * <SelectField source=\"gender\" choices={choices} />\n *\n * By default, the text is built by\n * - finding a choice where the 'id' property equals the field value\n * - using the 'name' property as the option text\n *\n * You can also customize the properties to use for the value and text,\n * thanks to the 'optionValue' and 'optionText' attributes.\n *\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },\n *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },\n * ];\n * <SelectField source=\"author_id\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <SelectField source=\"author_id\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that can access\n * the related choice through the `useRecordContext` hook. You can use Field components there.\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const FullNameField = () => {\n *     const record = useRecordContext();\n *     return (<Chip>{record.first_name} {record.last_name}</Chip>)\n * };\n * <SelectField source=\"gender\" choices={choices} optionText={<FullNameField />}/>\n *\n * The current choice is translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'M', name: 'myroot.gender.male' },\n *    { id: 'F', name: 'myroot.gender.female' },\n * ];\n *\n * However, in some cases (e.g. inside a `<ReferenceField>`), you may not want\n * the choice to be translated. In that case, set the `translateChoice` prop to false.\n * @example\n * <SelectField source=\"gender\" choices={choices} translateChoice={false}/>\n *\n * **Tip**: <ReferenceField> sets `translateChoice` to false by default.\n */\nexport var SelectField = memo(function (props) {\n  var className = props.className,\n    emptyText = props.emptyText,\n    source = props.source,\n    choices = props.choices,\n    optionValue = props.optionValue,\n    optionText = props.optionText,\n    translateChoice = props.translateChoice,\n    rest = __rest(props, [\"className\", \"emptyText\", \"source\", \"choices\", \"optionValue\", \"optionText\", \"translateChoice\"]);\n  var record = useRecordContext(props);\n  var value = get(record, source);\n  var _a = useChoices({\n      optionText: optionText,\n      optionValue: optionValue,\n      translateChoice: translateChoice\n    }),\n    getChoiceText = _a.getChoiceText,\n    getChoiceValue = _a.getChoiceValue;\n  var translate = useTranslate();\n  var choice = choices.find(function (choice) {\n    return getChoiceValue(choice) === value;\n  });\n  if (!choice) {\n    return emptyText ? React.createElement(Typography, __assign({\n      component: \"span\",\n      variant: \"body2\",\n      className: className\n    }, sanitizeFieldRestProps(rest)), emptyText && translate(emptyText, {\n      _: emptyText\n    })) : null;\n  }\n  var choiceText = getChoiceText(choice);\n  return React.createElement(Typography, __assign({\n    component: \"span\",\n    variant: \"body2\",\n    className: className\n  }, sanitizeFieldRestProps(rest)), choiceText);\n});\nSelectField.defaultProps = {\n  optionText: 'name',\n  optionValue: 'id',\n  translateChoice: true\n};\nSelectField.propTypes = __assign(__assign(__assign({}, Typography.propTypes), fieldPropTypes), {\n  choices: PropTypes.arrayOf(PropTypes.object).isRequired,\n  optionText: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.element]),\n  optionValue: PropTypes.string,\n  translateChoice: PropTypes.bool\n});\nSelectField.displayName = 'SelectField';","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,IAAI,QAAY,OAAO;AAChC,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,GAAG,MAAM,YAAY;AAC5B,SAEIC,UAAU,EACVC,gBAAgB,EAChBC,YAAY,QACT,SAAS;AAChB,SAASC,UAAU,QAAyB,eAAe;AAE3D,SAASC,sBAAsB,QAAQ,0BAA0B;AACjE,SAA+CC,cAAc,QAAQ,SAAS;AAE9E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8DA,OAAO,IAAMC,WAAW,GAAyBT,IAAI,CAAC,eAAK;EAEnD,aAAS,GAQTU,KAAK,UARI;IACTC,SAAS,GAOTD,KAAK,UAPI;IACTE,MAAM,GAMNF,KAAK,OANC;IACNG,OAAO,GAKPH,KAAK,QALE;IACPI,WAAW,GAIXJ,KAAK,YAJM;IACXK,UAAU,GAGVL,KAAK,WAHK;IACVM,eAAe,GAEfN,KAAK,gBAFU;IACZO,IAAI,UACPP,KAAK,EATH,+FASL,CADU;EAEX,IAAMQ,MAAM,GAAGd,gBAAgB,CAACM,KAAK,CAAC;EACtC,IAAMS,KAAK,GAAGjB,GAAG,CAACgB,MAAM,EAAEN,MAAM,CAAC;EAC3B,SAAoCT,UAAU,CAAC;MACjDY,UAAU;MACVD,WAAW;MACXE,eAAe;KAClB,CAAC;IAJMI,aAAa;IAAEC,cAAc,oBAInC;EACF,IAAMC,SAAS,GAAGjB,YAAY,EAAE;EAEhC,IAAMkB,MAAM,GAAGV,OAAO,CAACW,IAAI,CAAC,gBAAM;IAAI,qBAAc,CAACD,MAAM,CAAC,KAAKJ,KAAK;EAAhC,CAAgC,CAAC;EAEvE,IAAI,CAACI,MAAM,EAAE;IACT,OAAOZ,SAAS,GACZZ,oBAACO,UAAU;MACPmB,SAAS,EAAC,MAAM;MAChBC,OAAO,EAAC,OAAO;MACfC,SAAS,EAAEA;IAAS,GAChBpB,sBAAsB,CAACU,IAAI,CAAC,GAE/BN,SAAS,IAAIW,SAAS,CAACX,SAAS,EAAE;MAAEiB,CAAC,EAAEjB;IAAS,CAAE,CAAC,CAC3C,GACb,IAAI;;EAGZ,IAAIkB,UAAU,GAAGT,aAAa,CAACG,MAAM,CAAC;EAEtC,OACIxB,oBAACO,UAAU;IACPmB,SAAS,EAAC,MAAM;IAChBC,OAAO,EAAC,OAAO;IACfC,SAAS,EAAEA;EAAS,GAChBpB,sBAAsB,CAACU,IAAI,CAAC,GAE/BY,UAAU,CACF;AAErB,CAAC,CAAC;AAEFpB,WAAW,CAACqB,YAAY,GAAG;EACvBf,UAAU,EAAE,MAAM;EAClBD,WAAW,EAAE,IAAI;EACjBE,eAAe,EAAE;CACpB;AAEDP,WAAW,CAACsB,SAAS,kCAEdzB,UAAU,CAACyB,SAAS,GACpBvB,cAAc;EACjBK,OAAO,EAAEZ,SAAS,CAAC+B,OAAO,CAAC/B,SAAS,CAACgC,MAAM,CAAC,CAACC,UAAU;EACvDnB,UAAU,EAAEd,SAAS,CAACkC,SAAS,CAAC,CAC5BlC,SAAS,CAACmC,MAAM,EAChBnC,SAAS,CAACoC,IAAI,EACdpC,SAAS,CAACqC,OAAO,CACpB,CAAC;EACFxB,WAAW,EAAEb,SAAS,CAACmC,MAAM;EAC7BpB,eAAe,EAAEf,SAAS,CAACsC;AAAI,EAClC;AAQD9B,WAAW,CAAC+B,WAAW,GAAG,aAAa","names":["React","memo","PropTypes","get","useChoices","useRecordContext","useTranslate","Typography","sanitizeFieldRestProps","fieldPropTypes","SelectField","props","emptyText","source","choices","optionValue","optionText","translateChoice","rest","record","value","getChoiceText","getChoiceValue","translate","choice","find","component","variant","className","_","choiceText","defaultProps","propTypes","arrayOf","object","isRequired","oneOfType","string","func","element","bool","displayName"],"sourceRoot":"","sources":["../../../src/field/SelectField.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}