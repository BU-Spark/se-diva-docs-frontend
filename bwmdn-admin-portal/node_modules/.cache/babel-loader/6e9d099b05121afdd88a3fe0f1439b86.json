{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { useGetManyAggregate } from '../dataProvider';\n/**\n * @typedef UseReferenceResult\n * @type {Object}\n * @property {boolean} isFetching: boolean indicating if the reference is loading\n * @property {boolean} isLoading: boolean indicating if the reference has loaded at least once\n * @property {Object} referenceRecord: the referenced record.\n */\n/**\n * Fetch reference record, and return it when available\n *\n * The reference prop should be the name of one of the <Resource> components\n * added as <Admin> child.\n *\n * @example\n *\n * const { isLoading, referenceRecord } = useReference({\n *     id: 7,\n *     reference: 'users',\n * });\n *\n * @param {Object} option\n * @param {string} option.reference The linked resource name\n * @param {string} option.id The id of the reference\n *\n * @returns {UseReferenceResult} The reference record\n */\nexport var useReference = function (_a) {\n  var reference = _a.reference,\n    id = _a.id,\n    _b = _a.options,\n    options = _b === void 0 ? {} : _b;\n  var meta = options.meta,\n    otherQueryOptions = __rest(options, [\"meta\"]);\n  var _c = useGetManyAggregate(reference, {\n      ids: [id],\n      meta: meta\n    }, otherQueryOptions),\n    data = _c.data,\n    error = _c.error,\n    isLoading = _c.isLoading,\n    isFetching = _c.isFetching,\n    refetch = _c.refetch;\n  return {\n    referenceRecord: error ? undefined : data ? data[0] : undefined,\n    refetch: refetch,\n    error: error,\n    isLoading: isLoading,\n    isFetching: isFetching\n  };\n};","map":{"version":3,"mappings":";;;;;;;;AACA,SAA8BA,mBAAmB,QAAQ,iBAAiB;AAiB1E;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;AAmBA,OAAO,IAAMC,YAAY,GAAG,UAAoCC,EAIhC;MAH5BC,SAAS;IACTC,EAAE;IACFC,eAAY;IAAZC,OAAO,mBAAG,EAAE;EAEJ,QAAI,GAA2BA,OAAO,KAAlC;IAAKC,iBAAiB,UAAKD,OAAO,EAAxC,QAA8B,CAAF;EAC5B,SAAkDN,mBAAmB,CAEzEG,SAAS,EAAE;MAAEK,GAAG,EAAE,CAACJ,EAAE,CAAC;MAAEK,IAAI;IAAA,CAAE,EAAEF,iBAAiB,CAAC;IAF5CG,IAAI;IAAEC,KAAK;IAAEC,SAAS;IAAEC,UAAU;IAAEC,OAAO,aAEC;EACpD,OAAO;IACHC,eAAe,EAAEJ,KAAK,GAAGK,SAAS,GAAGN,IAAI,GAAGA,IAAI,CAAC,CAAC,CAAC,GAAGM,SAAS;IAC/DF,OAAO;IACPH,KAAK;IACLC,SAAS;IACTC,UAAU;GACb;AACL,CAAC","names":["useGetManyAggregate","useReference","_a","reference","id","_b","options","otherQueryOptions","ids","meta","data","error","isLoading","isFetching","refetch","referenceRecord","undefined"],"sourceRoot":"","sources":["../../../src/controller/useReference.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}