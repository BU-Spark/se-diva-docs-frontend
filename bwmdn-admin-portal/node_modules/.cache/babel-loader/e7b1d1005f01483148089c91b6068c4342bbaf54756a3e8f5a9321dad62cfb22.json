{"ast":null,"code":"import * as React from 'react';\nimport inflection from 'inflection';\nimport getValuesFromRecords from './getValuesFromRecords';\nimport InferredElement from './InferredElement';\nimport { isObject, valuesAreArray, valuesAreBoolean, valuesAreDate, valuesAreDateString, valuesAreHtml, valuesAreInteger, valuesAreNumeric, valuesAreObject, valuesAreString } from './assertions';\nvar DefaultComponent = function () {\n  return React.createElement(\"span\", null, \";\");\n};\nvar defaultType = {\n  type: DefaultComponent,\n  representation: function () {\n    return '<DefaultComponent />';\n  }\n};\nvar defaultTypes = {\n  array: defaultType,\n  boolean: defaultType,\n  date: defaultType,\n  email: defaultType,\n  id: defaultType,\n  number: defaultType,\n  reference: defaultType,\n  referenceArray: defaultType,\n  richText: defaultType,\n  string: defaultType,\n  url: defaultType\n};\nvar hasType = function (type, types) {\n  return typeof types[type] !== 'undefined';\n};\n/**\n * Guesses an element based on an array of values\n *\n * @example\n *     inferElementFromValues(\n *         'address',\n *         ['2 Baker Street', '1 Downing street'],\n *         { number: NumberField, string: StringField }\n *     );\n *     // new InferredElement(<StringField source=\"address\" />)\n *\n * Types are optional: if a type isn't provided, the function falls back\n * to the nearest type.\n *\n * @example\n *     inferElementFromValues(\n *         'content',\n *         ['<h1>Hello</h1>'],\n *         { string: StringField } // no richText type\n *     );\n *     // new InferredElement(<StringField source=\"content\" />)\n *\n * Types can be disabled by passing a falsy value.\n *\n * @example\n *     inferElementFromValues(\n *         'content',\n *         ['<h1>Hello</h1>'],\n *         { string: StringField, richText: false }\n *     );\n *     // null\n *\n * @param {string} name Property name, e.g. 'date_of_birth'\n * @param {any[]} values an array of values from which to determine the type, e.g. [12, 34.4, 43]\n * @param {Object} types A set of components indexed by type. The string type is the only required one\n *\n * @return InferredElement\n */\nvar inferElementFromValues = function (name, values, types) {\n  if (values === void 0) {\n    values = [];\n  }\n  if (types === void 0) {\n    types = defaultTypes;\n  }\n  if (name === 'id' && hasType('id', types)) {\n    return new InferredElement(types.id, {\n      source: name\n    });\n  }\n  if (name.substr(name.length - 3) === '_id' && hasType('reference', types)) {\n    var reference = inflection.pluralize(name.substr(0, name.length - 3));\n    return types.reference && new InferredElement(types.reference, {\n      source: name,\n      reference: reference\n    });\n  }\n  if (name.substr(name.length - 2) === 'Id' && hasType('reference', types)) {\n    var reference = inflection.pluralize(name.substr(0, name.length - 2));\n    return types.reference && new InferredElement(types.reference, {\n      source: name,\n      reference: reference\n    });\n  }\n  if (name.substr(name.length - 4) === '_ids' && hasType('referenceArray', types)) {\n    var reference = inflection.pluralize(name.substr(0, name.length - 4));\n    return types.referenceArray && new InferredElement(types.referenceArray, {\n      source: name,\n      reference: reference\n    });\n  }\n  if (name.substr(name.length - 3) === 'Ids' && hasType('referenceArray', types)) {\n    var reference = inflection.pluralize(name.substr(0, name.length - 3));\n    return types.referenceArray && new InferredElement(types.referenceArray, {\n      source: name,\n      reference: reference\n    });\n  }\n  if (values.length === 0) {\n    // FIXME introspect further using name\n    return new InferredElement(types.string, {\n      source: name\n    });\n  }\n  if (valuesAreArray(values)) {\n    if (isObject(values[0][0]) && hasType('array', types)) {\n      var leafValues_1 = getValuesFromRecords(values.reduce(function (acc, vals) {\n        return acc.concat(vals);\n      }, []));\n      // FIXME bad visual representation\n      return types.array && new InferredElement(types.array, {\n        source: name\n      }, Object.keys(leafValues_1).map(function (leafName) {\n        return inferElementFromValues(leafName, leafValues_1[leafName], types);\n      }));\n    }\n    // FIXME introspect further\n    return new InferredElement(types.string, {\n      source: name\n    });\n  }\n  if (valuesAreBoolean(values) && hasType('boolean', types)) {\n    return new InferredElement(types.boolean, {\n      source: name\n    });\n  }\n  if (valuesAreDate(values) && hasType('date', types)) {\n    return new InferredElement(types.date, {\n      source: name\n    });\n  }\n  if (valuesAreString(values)) {\n    if (name === 'email' && hasType('email', types)) {\n      return new InferredElement(types.email, {\n        source: name\n      });\n    }\n    if (name === 'url' && hasType('url', types)) {\n      return new InferredElement(types.url, {\n        source: name\n      });\n    }\n    if (valuesAreDateString(values) && hasType('date', types)) {\n      return new InferredElement(types.date, {\n        source: name\n      });\n    }\n    if (valuesAreHtml(values) && hasType('richText', types)) {\n      return new InferredElement(types.richText, {\n        source: name\n      });\n    }\n    return new InferredElement(types.string, {\n      source: name\n    });\n  }\n  if ((valuesAreInteger(values) || valuesAreNumeric(values)) && hasType('number', types)) {\n    return new InferredElement(types.number, {\n      source: name\n    });\n  }\n  if (valuesAreObject(values)) {\n    // we need to go deeper\n    // Arbitrarily, choose the first prop of the first object\n    var propName_1 = Object.keys(values[0]).shift();\n    if (!propName_1) {\n      return new InferredElement(types.string, {\n        source: name\n      });\n    }\n    var leafValues = values.map(function (v) {\n      return v[propName_1];\n    });\n    return inferElementFromValues(\"\".concat(name, \".\").concat(propName_1), leafValues, types);\n  }\n  return new InferredElement(types.string, {\n    source: name\n  });\n};\nexport default inferElementFromValues;","map":{"version":3,"mappings":"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","names":["React","inflection","getValuesFromRecords","InferredElement","isObject","valuesAreArray","valuesAreBoolean","valuesAreDate","valuesAreDateString","valuesAreHtml","valuesAreInteger","valuesAreNumeric","valuesAreObject","valuesAreString","DefaultComponent","defaultType","type","representation","defaultTypes","array","boolean","date","email","id","number","reference","referenceArray","richText","string","url","hasType","types","inferElementFromValues","name","values","source","substr","length","pluralize","leafValues_1","reduce","acc","vals","concat","Object","keys","map","leafName","propName_1","shift","leafValues"],"sources":["/Users/paigedeveau/node_modules/ra-core/src/inference/inferElementFromValues.tsx"],"sourcesContent":["import * as React from 'react';\nimport inflection from 'inflection';\n\nimport getValuesFromRecords from './getValuesFromRecords';\nimport InferredElement from './InferredElement';\n\nimport {\n    isObject,\n    valuesAreArray,\n    valuesAreBoolean,\n    valuesAreDate,\n    valuesAreDateString,\n    valuesAreHtml,\n    valuesAreInteger,\n    valuesAreNumeric,\n    valuesAreObject,\n    valuesAreString,\n} from './assertions';\nimport { InferredTypeMap } from './types';\n\nconst DefaultComponent = () => <span>;</span>;\nconst defaultType = {\n    type: DefaultComponent,\n    representation: () => '<DefaultComponent />',\n};\nconst defaultTypes = {\n    array: defaultType,\n    boolean: defaultType,\n    date: defaultType,\n    email: defaultType,\n    id: defaultType,\n    number: defaultType,\n    reference: defaultType,\n    referenceArray: defaultType,\n    richText: defaultType,\n    string: defaultType,\n    url: defaultType,\n};\n\nconst hasType = (type, types) => typeof types[type] !== 'undefined';\n\n/**\n * Guesses an element based on an array of values\n *\n * @example\n *     inferElementFromValues(\n *         'address',\n *         ['2 Baker Street', '1 Downing street'],\n *         { number: NumberField, string: StringField }\n *     );\n *     // new InferredElement(<StringField source=\"address\" />)\n *\n * Types are optional: if a type isn't provided, the function falls back\n * to the nearest type.\n *\n * @example\n *     inferElementFromValues(\n *         'content',\n *         ['<h1>Hello</h1>'],\n *         { string: StringField } // no richText type\n *     );\n *     // new InferredElement(<StringField source=\"content\" />)\n *\n * Types can be disabled by passing a falsy value.\n *\n * @example\n *     inferElementFromValues(\n *         'content',\n *         ['<h1>Hello</h1>'],\n *         { string: StringField, richText: false }\n *     );\n *     // null\n *\n * @param {string} name Property name, e.g. 'date_of_birth'\n * @param {any[]} values an array of values from which to determine the type, e.g. [12, 34.4, 43]\n * @param {Object} types A set of components indexed by type. The string type is the only required one\n *\n * @return InferredElement\n */\nconst inferElementFromValues = (\n    name,\n    values = [],\n    types: InferredTypeMap = defaultTypes\n) => {\n    if (name === 'id' && hasType('id', types)) {\n        return new InferredElement(types.id, { source: name });\n    }\n    if (name.substr(name.length - 3) === '_id' && hasType('reference', types)) {\n        const reference = inflection.pluralize(name.substr(0, name.length - 3));\n        return (\n            types.reference &&\n            new InferredElement(types.reference, {\n                source: name,\n                reference,\n            })\n        );\n    }\n    if (name.substr(name.length - 2) === 'Id' && hasType('reference', types)) {\n        const reference = inflection.pluralize(name.substr(0, name.length - 2));\n        return (\n            types.reference &&\n            new InferredElement(types.reference, {\n                source: name,\n                reference,\n            })\n        );\n    }\n    if (\n        name.substr(name.length - 4) === '_ids' &&\n        hasType('referenceArray', types)\n    ) {\n        const reference = inflection.pluralize(name.substr(0, name.length - 4));\n        return (\n            types.referenceArray &&\n            new InferredElement(types.referenceArray, {\n                source: name,\n                reference,\n            })\n        );\n    }\n    if (\n        name.substr(name.length - 3) === 'Ids' &&\n        hasType('referenceArray', types)\n    ) {\n        const reference = inflection.pluralize(name.substr(0, name.length - 3));\n        return (\n            types.referenceArray &&\n            new InferredElement(types.referenceArray, {\n                source: name,\n                reference,\n            })\n        );\n    }\n    if (values.length === 0) {\n        // FIXME introspect further using name\n        return new InferredElement(types.string, { source: name });\n    }\n    if (valuesAreArray(values)) {\n        if (isObject(values[0][0]) && hasType('array', types)) {\n            const leafValues = getValuesFromRecords(\n                values.reduce((acc, vals) => acc.concat(vals), [])\n            );\n            // FIXME bad visual representation\n            return (\n                types.array &&\n                new InferredElement(\n                    types.array,\n                    {\n                        source: name,\n                    },\n                    Object.keys(leafValues).map(leafName =>\n                        inferElementFromValues(\n                            leafName,\n                            leafValues[leafName],\n                            types\n                        )\n                    )\n                )\n            );\n        }\n        // FIXME introspect further\n        return new InferredElement(types.string, { source: name });\n    }\n    if (valuesAreBoolean(values) && hasType('boolean', types)) {\n        return new InferredElement(types.boolean, { source: name });\n    }\n    if (valuesAreDate(values) && hasType('date', types)) {\n        return new InferredElement(types.date, { source: name });\n    }\n    if (valuesAreString(values)) {\n        if (name === 'email' && hasType('email', types)) {\n            return new InferredElement(types.email, { source: name });\n        }\n        if (name === 'url' && hasType('url', types)) {\n            return new InferredElement(types.url, { source: name });\n        }\n        if (valuesAreDateString(values) && hasType('date', types)) {\n            return new InferredElement(types.date, { source: name });\n        }\n        if (valuesAreHtml(values) && hasType('richText', types)) {\n            return new InferredElement(types.richText, { source: name });\n        }\n        return new InferredElement(types.string, { source: name });\n    }\n    if (\n        (valuesAreInteger(values) || valuesAreNumeric(values)) &&\n        hasType('number', types)\n    ) {\n        return new InferredElement(types.number, { source: name });\n    }\n    if (valuesAreObject(values)) {\n        // we need to go deeper\n        // Arbitrarily, choose the first prop of the first object\n        const propName = Object.keys(values[0]).shift();\n        if (!propName) {\n            return new InferredElement(types.string, { source: name });\n        }\n        const leafValues = values.map(v => v[propName]);\n        return inferElementFromValues(`${name}.${propName}`, leafValues, types);\n    }\n    return new InferredElement(types.string, { source: name });\n};\n\nexport default inferElementFromValues;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}