{"ast":null,"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useReferenceManyFieldController, ListContextProvider, ResourceContextProvider, useRecordContext } from 'ra-core';\nimport { fieldPropTypes } from './types';\n/**\n * Render related records to the current one.\n *\n * You must define the fields to be passed to the iterator component as children.\n *\n * @example Display all the comments of the current post as a datagrid\n * <ReferenceManyField reference=\"comments\" target=\"post_id\">\n *     <Datagrid>\n *         <TextField source=\"id\" />\n *         <TextField source=\"body\" />\n *         <DateField source=\"created_at\" />\n *         <EditButton />\n *     </Datagrid>\n * </ReferenceManyField>\n *\n * @example Display all the books by the current author, only the title\n * <ReferenceManyField reference=\"books\" target=\"author_id\">\n *     <SingleFieldList>\n *         <ChipField source=\"title\" />\n *     </SingleFieldList>\n * </ReferenceManyField>\n *\n * By default, restricts the displayed values to 25. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceManyField perPage={10} reference=\"comments\" target=\"post_id\">\n *    ...\n * </ReferenceManyField>\n *\n * By default, orders the possible values by id desc. You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceManyField sort={{ field: 'created_at', order: 'DESC' }} reference=\"comments\" target=\"post_id\">\n *    ...\n * </ReferenceManyField>\n *\n * Also, you can filter the query used to populate the possible values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceManyField filter={{ is_published: true }} reference=\"comments\" target=\"post_id\">\n *    ...\n * </ReferenceManyField>\n */\nexport var ReferenceManyField = function (props) {\n  var children = props.children,\n    filter = props.filter,\n    _a = props.page,\n    page = _a === void 0 ? 1 : _a,\n    _b = props.pagination,\n    pagination = _b === void 0 ? null : _b,\n    perPage = props.perPage,\n    reference = props.reference,\n    resource = props.resource,\n    sort = props.sort,\n    source = props.source,\n    target = props.target;\n  var record = useRecordContext(props);\n  var controllerProps = useReferenceManyFieldController({\n    filter: filter,\n    page: page,\n    perPage: perPage,\n    record: record,\n    reference: reference,\n    resource: resource,\n    sort: sort,\n    source: source,\n    target: target\n  });\n  return React.createElement(ResourceContextProvider, {\n    value: reference\n  }, React.createElement(ListContextProvider, {\n    value: controllerProps\n  }, children, pagination));\n};\nReferenceManyField.propTypes = {\n  children: PropTypes.node.isRequired,\n  className: PropTypes.string,\n  filter: PropTypes.object,\n  label: fieldPropTypes.label,\n  perPage: PropTypes.number,\n  record: PropTypes.any,\n  reference: PropTypes.string.isRequired,\n  resource: PropTypes.string,\n  sortBy: PropTypes.string,\n  sortByOrder: fieldPropTypes.sortByOrder,\n  source: PropTypes.string.isRequired,\n  sort: PropTypes.exact({\n    field: PropTypes.string,\n    order: PropTypes.string\n  }),\n  target: PropTypes.string.isRequired\n};\nReferenceManyField.defaultProps = {\n  filter: {},\n  perPage: 25,\n  sort: {\n    field: 'id',\n    order: 'DESC'\n  },\n  source: 'id'\n};\n// FIXME kept for backwards compatibility, unused, to be removed in v5\nexport var ReferenceManyFieldView = function (props) {\n  var children = props.children,\n    pagination = props.pagination;\n  if (process.env.NODE_ENV !== 'production') {\n    console.error('<ReferenceManyFieldView> is deprecated, use <ReferenceManyField> directly');\n  }\n  return React.createElement(React.Fragment, null, children, pagination && props.total !== undefined ? pagination : null);\n};\nReferenceManyFieldView.propTypes = {\n  children: PropTypes.element,\n  className: PropTypes.string,\n  sort: PropTypes.exact({\n    field: PropTypes.string,\n    order: PropTypes.string\n  }),\n  data: PropTypes.any,\n  isLoading: PropTypes.bool,\n  pagination: PropTypes.element,\n  reference: PropTypes.string,\n  setSort: PropTypes.func\n};","map":{"version":3,"mappings":"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","names":["React","PropTypes","useReferenceManyFieldController","ListContextProvider","ResourceContextProvider","useRecordContext","fieldPropTypes","ReferenceManyField","props","filter","_a","page","_b","pagination","perPage","reference","resource","sort","source","target","record","controllerProps","value","children","propTypes","node","isRequired","className","string","object","label","number","any","sortBy","sortByOrder","exact","field","order","defaultProps","ReferenceManyFieldView","process","env","NODE_ENV","console","error","total","undefined","element","data","isLoading","bool","setSort","func"],"sources":["/Users/paigedeveau/Desktop/se-diva-docs-frontend/bwmdn-admin-portal/node_modules/ra-ui-materialui/src/field/ReferenceManyField.tsx"],"sourcesContent":["import React, { FC, ReactElement, ReactNode } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    FilterPayload,\n    SortPayload,\n    useReferenceManyFieldController,\n    ListContextProvider,\n    ListControllerResult,\n    ResourceContextProvider,\n    useRecordContext,\n} from 'ra-core';\n\nimport { PublicFieldProps, fieldPropTypes, InjectedFieldProps } from './types';\n\n/**\n * Render related records to the current one.\n *\n * You must define the fields to be passed to the iterator component as children.\n *\n * @example Display all the comments of the current post as a datagrid\n * <ReferenceManyField reference=\"comments\" target=\"post_id\">\n *     <Datagrid>\n *         <TextField source=\"id\" />\n *         <TextField source=\"body\" />\n *         <DateField source=\"created_at\" />\n *         <EditButton />\n *     </Datagrid>\n * </ReferenceManyField>\n *\n * @example Display all the books by the current author, only the title\n * <ReferenceManyField reference=\"books\" target=\"author_id\">\n *     <SingleFieldList>\n *         <ChipField source=\"title\" />\n *     </SingleFieldList>\n * </ReferenceManyField>\n *\n * By default, restricts the displayed values to 25. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceManyField perPage={10} reference=\"comments\" target=\"post_id\">\n *    ...\n * </ReferenceManyField>\n *\n * By default, orders the possible values by id desc. You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceManyField sort={{ field: 'created_at', order: 'DESC' }} reference=\"comments\" target=\"post_id\">\n *    ...\n * </ReferenceManyField>\n *\n * Also, you can filter the query used to populate the possible values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceManyField filter={{ is_published: true }} reference=\"comments\" target=\"post_id\">\n *    ...\n * </ReferenceManyField>\n */\nexport const ReferenceManyField = (props: ReferenceManyFieldProps) => {\n    const {\n        children,\n        filter,\n        page = 1,\n        pagination = null,\n        perPage,\n        reference,\n        resource,\n        sort,\n        source,\n        target,\n    } = props;\n    const record = useRecordContext(props);\n\n    const controllerProps = useReferenceManyFieldController({\n        filter,\n        page,\n        perPage,\n        record,\n        reference,\n        resource,\n        sort,\n        source,\n        target,\n    });\n\n    return (\n        <ResourceContextProvider value={reference}>\n            <ListContextProvider value={controllerProps}>\n                {children}\n                {pagination}\n            </ListContextProvider>\n        </ResourceContextProvider>\n    );\n};\n\nexport interface ReferenceManyFieldProps\n    extends PublicFieldProps,\n        InjectedFieldProps {\n    children: ReactNode;\n    filter?: FilterPayload;\n    page?: number;\n    pagination?: ReactElement;\n    perPage?: number;\n    reference: string;\n    sort?: SortPayload;\n    target: string;\n}\n\nReferenceManyField.propTypes = {\n    children: PropTypes.node.isRequired,\n    className: PropTypes.string,\n    filter: PropTypes.object,\n    label: fieldPropTypes.label,\n    perPage: PropTypes.number,\n    record: PropTypes.any,\n    reference: PropTypes.string.isRequired,\n    resource: PropTypes.string,\n    sortBy: PropTypes.string,\n    sortByOrder: fieldPropTypes.sortByOrder,\n    source: PropTypes.string.isRequired,\n    sort: PropTypes.exact({\n        field: PropTypes.string,\n        order: PropTypes.string,\n    }),\n    target: PropTypes.string.isRequired,\n};\n\nReferenceManyField.defaultProps = {\n    filter: {},\n    perPage: 25,\n    sort: { field: 'id', order: 'DESC' },\n    source: 'id',\n};\n\n// FIXME kept for backwards compatibility, unused, to be removed in v5\nexport const ReferenceManyFieldView: FC<ReferenceManyFieldViewProps> = props => {\n    const { children, pagination } = props;\n    if (process.env.NODE_ENV !== 'production') {\n        console.error(\n            '<ReferenceManyFieldView> is deprecated, use <ReferenceManyField> directly'\n        );\n    }\n    return (\n        <>\n            {children}\n            {pagination && props.total !== undefined ? pagination : null}\n        </>\n    );\n};\n\nexport interface ReferenceManyFieldViewProps\n    extends Omit<\n            ReferenceManyFieldProps,\n            'resource' | 'page' | 'perPage' | 'sort'\n        >,\n        ListControllerResult {\n    children: ReactElement;\n}\n\nReferenceManyFieldView.propTypes = {\n    children: PropTypes.element,\n    className: PropTypes.string,\n    sort: PropTypes.exact({\n        field: PropTypes.string,\n        order: PropTypes.string,\n    }),\n    data: PropTypes.any,\n    isLoading: PropTypes.bool,\n    pagination: PropTypes.element,\n    reference: PropTypes.string,\n    setSort: PropTypes.func,\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}