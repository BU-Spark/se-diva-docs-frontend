{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { useEditController } from './useEditController';\nimport { EditContextProvider } from './EditContextProvider';\nimport { ResourceContextProvider } from '../../core';\n/**\n * Call useEditController and put the value in a EditContext\n *\n * Base class for <Edit> components, without UI.\n *\n * Accepts any props accepted by useEditController:\n * - id: The record identifier\n * - resource: The resource\n *\n * @example // Custom edit layout\n *\n * const PostEdit = () => (\n *     <EditBase resource=\"posts\">\n *         <Grid container>\n *             <Grid item xs={8}>\n *                 <SimpleForm>\n *                     ...\n *                 </SimpleForm>\n *             </Grid>\n *             <Grid item xs={4}>\n *                 Edit instructions...\n *             </Grid>\n *         </Grid>\n *         <div>\n *             Post related links...\n *         </div>\n *     </EditBase>\n * );\n */\nexport var EditBase = function (_a) {\n  var children = _a.children,\n    props = __rest(_a, [\"children\"]);\n  var controllerProps = useEditController(props);\n  var body = React.createElement(EditContextProvider, {\n    value: controllerProps\n  }, children);\n  return props.resource ?\n  // support resource override via props\n  React.createElement(ResourceContextProvider, {\n    value: props.resource\n  }, body) : body;\n};","map":{"version":3,"mappings":";;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAI9B,SAASC,iBAAiB,QAA6B,qBAAqB;AAC5E,SAASC,mBAAmB,QAAQ,uBAAuB;AAC3D,SAASC,uBAAuB,QAAQ,YAAY;AAEpD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,OAAO,IAAMC,QAAQ,GAAG,UAAoCC,EAGA;EAFxD,YAAQ;IACLC,KAAK,cAFgD,YAG3D,CADW;EAER,IAAMC,eAAe,GAAGN,iBAAiB,CAAaK,KAAK,CAAC;EAC5D,IAAME,IAAI,GACNR,oBAACE,mBAAmB;IAACO,KAAK,EAAEF;EAAe,GACtCG,QAAQ,CAEhB;EACD,OAAOJ,KAAK,CAACK,QAAQ;EACjB;EACAX,oBAACG,uBAAuB;IAACM,KAAK,EAAEH,KAAK,CAACK;EAAQ,GACzCH,IAAI,CACiB,GAE1BA,IACH;AACL,CAAC","names":["React","useEditController","EditContextProvider","ResourceContextProvider","EditBase","_a","props","controllerProps","body","value","children","resource"],"sources":["/Users/paigedeveau/Desktop/se-diva-docs-frontend/bwmdn-admin-portal/node_modules/ra-core/src/controller/edit/EditBase.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactNode } from 'react';\n\nimport { RaRecord } from '../../types';\nimport { useEditController, EditControllerProps } from './useEditController';\nimport { EditContextProvider } from './EditContextProvider';\nimport { ResourceContextProvider } from '../../core';\n\n/**\n * Call useEditController and put the value in a EditContext\n *\n * Base class for <Edit> components, without UI.\n *\n * Accepts any props accepted by useEditController:\n * - id: The record identifier\n * - resource: The resource\n *\n * @example // Custom edit layout\n *\n * const PostEdit = () => (\n *     <EditBase resource=\"posts\">\n *         <Grid container>\n *             <Grid item xs={8}>\n *                 <SimpleForm>\n *                     ...\n *                 </SimpleForm>\n *             </Grid>\n *             <Grid item xs={4}>\n *                 Edit instructions...\n *             </Grid>\n *         </Grid>\n *         <div>\n *             Post related links...\n *         </div>\n *     </EditBase>\n * );\n */\nexport const EditBase = <RecordType extends RaRecord = any>({\n    children,\n    ...props\n}: { children: ReactNode } & EditControllerProps<RecordType>) => {\n    const controllerProps = useEditController<RecordType>(props);\n    const body = (\n        <EditContextProvider value={controllerProps}>\n            {children}\n        </EditContextProvider>\n    );\n    return props.resource ? (\n        // support resource override via props\n        <ResourceContextProvider value={props.resource}>\n            {body}\n        </ResourceContextProvider>\n    ) : (\n        body\n    );\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}