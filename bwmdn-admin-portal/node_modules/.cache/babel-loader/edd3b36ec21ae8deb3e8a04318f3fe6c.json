{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport TopToolbar from '../layout/TopToolbar';\nimport { ListButton } from '../button';\nimport { useResourceDefinition } from 'ra-core';\n/**\n * Action Toolbar for the Create view\n *\n * Internal component. If you want to add or remove actions for a Create view,\n * write your own CreateActions Component. Then, in the <Create> component,\n * use it in the `actions` prop to pass a custom component.\n *\n * @example\n *     import Button from '@mui/material/Button';\n *     import { TopToolbar, Create, ListButton } from 'react-admin';\n *\n *     const PostCreateActions = () => (\n *         <TopToolbar>\n *             <ListButton />\n *             // Add your custom actions here //\n *             <Button color=\"primary\" onClick={customAction}>Custom Action</Button>\n *         </TopToolbar>\n *     );\n *\n *     export const PostCreate = (props) => (\n *         <Create actions={<PostCreateActions />} {...props}>\n *             ...\n *         </Create>\n *     );\n */\nexport var CreateActions = function (_a) {\n  var className = _a.className,\n    rest = __rest(_a, [\"className\"]);\n  var hasList = useResourceDefinition(rest).hasList;\n  return React.createElement(TopToolbar, __assign({\n    className: className\n  }, sanitizeRestProps(rest)), hasList && React.createElement(ListButton, null));\n};\nvar sanitizeRestProps = function (_a) {\n  var _b = _a.className,\n    className = _b === void 0 ? null : _b,\n    _c = _a.hasList,\n    hasList = _c === void 0 ? null : _c,\n    _d = _a.resource,\n    resource = _d === void 0 ? null : _d,\n    rest = __rest(_a, [\"className\", \"hasList\", \"resource\"]);\n  return rest;\n};\nCreateActions.propTypes = {\n  className: PropTypes.string,\n  hasCreate: PropTypes.bool,\n  hasEdit: PropTypes.bool,\n  hasShow: PropTypes.bool,\n  hasList: PropTypes.bool,\n  resource: PropTypes.string\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,SAAS,MAAM,YAAY;AAElC,OAAOC,UAAU,MAAM,sBAAsB;AAC7C,SAASC,UAAU,QAAQ,WAAW;AACtC,SAASC,qBAAqB,QAAQ,SAAS;AAE/C;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,OAAO,IAAMC,aAAa,GAAG,UAACC,EAA0C;EAAxC,aAAS;IAAKC,IAAI,cAApB,aAAsB,CAAF;EACtC,WAAO,GAAKH,qBAAqB,CAACG,IAAI,CAAC,QAAhC;EACf,OACIP,oBAACE,UAAU;IAACM,SAAS,EAAEA;EAAS,GAAMC,iBAAiB,CAACF,IAAI,CAAC,GACxDG,OAAO,IAAIV,oBAACG,UAAU,OAAG,CACjB;AAErB,CAAC;AAED,IAAMM,iBAAiB,GAAG,UAACH,EAK1B;EAJG,qBAAgB;IAAhBE,SAAS,mBAAG,IAAI;IAChBG,eAAc;IAAdD,OAAO,mBAAG,IAAI;IACdE,gBAAe;IAAfC,QAAQ,mBAAG,IAAI;IACZN,IAAI,cAJgB,oCAK1B,CADU;EACL,WAAI;CAAA;AAWVF,aAAa,CAACS,SAAS,GAAG;EACtBN,SAAS,EAAEP,SAAS,CAACc,MAAM;EAC3BC,SAAS,EAAEf,SAAS,CAACgB,IAAI;EACzBC,OAAO,EAAEjB,SAAS,CAACgB,IAAI;EACvBE,OAAO,EAAElB,SAAS,CAACgB,IAAI;EACvBP,OAAO,EAAET,SAAS,CAACgB,IAAI;EACvBJ,QAAQ,EAAEZ,SAAS,CAACc;CACvB","names":["React","PropTypes","TopToolbar","ListButton","useResourceDefinition","CreateActions","_a","rest","className","sanitizeRestProps","hasList","_c","_d","resource","propTypes","string","hasCreate","bool","hasEdit","hasShow"],"sourceRoot":"","sources":["../../../src/detail/CreateActions.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}