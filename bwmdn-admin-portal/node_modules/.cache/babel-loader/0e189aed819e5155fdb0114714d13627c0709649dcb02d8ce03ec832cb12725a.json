{"ast":null,"code":"import { useReducer, useEffect, useRef, useCallback } from 'react';\nimport { SORT_ASC, SORT_DESC } from './list/queryReducer';\nvar sortReducer = function (state, action) {\n  switch (action.type) {\n    case 'SET_SORT':\n      return action.payload;\n    case 'SET_SORT_FIELD':\n      {\n        var field = action.payload;\n        var order = state.field === field ? state.order === SORT_ASC ? SORT_DESC : SORT_ASC : SORT_ASC;\n        return {\n          field: field,\n          order: order\n        };\n      }\n    case 'SET_SORT_ORDER':\n      {\n        var order = action.payload;\n        if (!state.field) {\n          throw new Error('cannot change the order on an undefined sort field');\n        }\n        return {\n          field: state.field,\n          order: order\n        };\n      }\n    default:\n      return state;\n  }\n};\nexport var defaultSort = {\n  field: '',\n  order: 'ASC'\n};\n/**\n * Set the sort { field, order }\n * @name setSort\n * @function\n * @param {SortPayload} sort the sort object\n */\n/**\n * Set the sort field, swap the order if the field is the same\n * @name setSortField\n * @function\n * @param {string} field the sort field\n */\n/**\n * Set the sort order\n * @name setSortOrder\n * @function\n * @param {string} order The sort order, either ASC or DESC\n */\n/**\n * @typedef SortProps\n * @type {Object}\n * @property {Object} sort: the sort object.\n * @property {string} sort.field: the sort object.\n * @property {'ASC' | 'DESC'} sort.order: the sort object.\n * @property {setSort} setSort\n * @property {setSortField} setSortField\n * @property {setSortOrder} setSortOrder\n */\n/**\n * Hooks to provide sort state\n *\n * @example\n *\n * const { sort, setSort, setSortField, setSortOrder } = useSort({\n *      field: 'name',\n *      order: 'ASC',\n * });\n *\n * setSort({ field: 'name', order: 'ASC' });\n * // is the same as\n * setSortField('name');\n * setSortOrder('ASC');\n *\n * @param {Object} initialSort\n * @param {string} initialSort.field The initial sort field\n * @param {string} initialSort.order The initial sort order\n * @returns {SortProps} The sort props\n */\nvar useSortState = function (initialSort) {\n  if (initialSort === void 0) {\n    initialSort = defaultSort;\n  }\n  var _a = useReducer(sortReducer, initialSort),\n    sort = _a[0],\n    dispatch = _a[1];\n  var isFirstRender = useRef(true);\n  useEffect(function () {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n    dispatch({\n      type: 'SET_SORT',\n      payload: initialSort\n    });\n  }, [initialSort.field, initialSort.order]); // eslint-disable-line react-hooks/exhaustive-deps\n  return {\n    setSort: useCallback(function (sort) {\n      return dispatch({\n        type: 'SET_SORT',\n        payload: sort\n      });\n    }, [dispatch]),\n    setSortField: useCallback(function (field) {\n      return dispatch({\n        type: 'SET_SORT_FIELD',\n        payload: field\n      });\n    }, [dispatch]),\n    setSortOrder: useCallback(function (order) {\n      return dispatch({\n        type: 'SET_SORT_ORDER',\n        payload: order\n      });\n    }, [dispatch]),\n    sort: sort\n  };\n};\nexport default useSortState;","map":{"version":3,"mappings":"AAAA,SAASA,UAAU,EAAEC,SAAS,EAAEC,MAAM,EAAEC,WAAW,QAAQ,OAAO;AAElE,SAASC,QAAQ,EAAEC,SAAS,QAAQ,qBAAqB;AAezD,IAAMC,WAAW,GAAG,UAACC,KAAkB,EAAEC,MAAc;EACnD,QAAQA,MAAM,CAACC,IAAI;IACf,KAAK,UAAU;MACX,OAAOD,MAAM,CAACE,OAAO;IACzB,KAAK,gBAAgB;MAAE;QACnB,IAAMC,KAAK,GAAGH,MAAM,CAACE,OAAO;QAC5B,IAAME,KAAK,GACPL,KAAK,CAACI,KAAK,KAAKA,KAAK,GACfJ,KAAK,CAACK,KAAK,KAAKR,QAAQ,GACpBC,SAAS,GACTD,QAAQ,GACZA,QAAQ;QAClB,OAAO;UAAEO,KAAK;UAAEC,KAAK;QAAA,CAAE;;IAE3B,KAAK,gBAAgB;MAAE;QACnB,IAAMA,KAAK,GAAGJ,MAAM,CAACE,OAAO;QAC5B,IAAI,CAACH,KAAK,CAACI,KAAK,EAAE;UACd,MAAM,IAAIE,KAAK,CACX,oDAAoD,CACvD;;QAEL,OAAO;UACHF,KAAK,EAAEJ,KAAK,CAACI,KAAK;UAClBC,KAAK;SACR;;IAEL;MACI,OAAOL,KAAK;EAAC;AAEzB,CAAC;AAED,OAAO,IAAMO,WAAW,GAAG;EAAEH,KAAK,EAAE,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAE;AAEtD;;;;;;AAOA;;;;;;AAOA;;;;;;AAOA;;;;;;;;;;AAWA;;;;;;;;;;;;;;;;;;;;AAoBA,IAAMG,YAAY,GAAG,UAACC,WAAsC;EAAtC;IAAAA,yBAAsC;EAAA;EAClD,SAAmBhB,UAAU,CAACM,WAAW,EAAEU,WAAW,CAAC;IAAtDC,IAAI;IAAEC,QAAQ,QAAwC;EAC7D,IAAMC,aAAa,GAAGjB,MAAM,CAAC,IAAI,CAAC;EAClCD,SAAS,CAAC;IACN,IAAIkB,aAAa,CAACC,OAAO,EAAE;MACvBD,aAAa,CAACC,OAAO,GAAG,KAAK;MAC7B;;IAEJF,QAAQ,CAAC;MAAET,IAAI,EAAE,UAAU;MAAEC,OAAO,EAAEM;IAAW,CAAE,CAAC;EACxD,CAAC,EAAE,CAACA,WAAW,CAACL,KAAK,EAAEK,WAAW,CAACJ,KAAK,CAAC,CAAC,CAAC,CAAC;EAE5C,OAAO;IACHS,OAAO,EAAElB,WAAW,CAChB,UAACc,IAAiB;MACd,eAAQ,CAAC;QAAER,IAAI,EAAE,UAAU;QAAEC,OAAO,EAAEO;MAAI,CAAE,CAAC;IAA7C,CAA6C,EACjD,CAACC,QAAQ,CAAC,CACb;IACDI,YAAY,EAAEnB,WAAW,CACrB,UAACQ,KAAa;MACV,eAAQ,CAAC;QAAEF,IAAI,EAAE,gBAAgB;QAAEC,OAAO,EAAEC;MAAK,CAAE,CAAC;IAApD,CAAoD,EACxD,CAACO,QAAQ,CAAC,CACb;IACDK,YAAY,EAAEpB,WAAW,CACrB,UAACS,KAAa;MACV,eAAQ,CAAC;QAAEH,IAAI,EAAE,gBAAgB;QAAEC,OAAO,EAAEE;MAAK,CAAE,CAAC;IAApD,CAAoD,EACxD,CAACM,QAAQ,CAAC,CACb;IACDD,IAAI;GACP;AACL,CAAC;AAED,eAAeF,YAAY","names":["useReducer","useEffect","useRef","useCallback","SORT_ASC","SORT_DESC","sortReducer","state","action","type","payload","field","order","Error","defaultSort","useSortState","initialSort","sort","dispatch","isFirstRender","current","setSort","setSortField","setSortOrder"],"sources":["/Users/paigedeveau/Desktop/se-diva-docs-frontend/bwmdn-admin-portal/node_modules/ra-core/src/controller/useSortState.ts"],"sourcesContent":["import { useReducer, useEffect, useRef, useCallback } from 'react';\n\nimport { SORT_ASC, SORT_DESC } from './list/queryReducer';\nimport { SortPayload } from '../types';\n\nexport interface SortProps {\n    setSortField: (field: SortPayload['field']) => void;\n    setSortOrder: (order: SortPayload['order']) => void;\n    setSort: (sort: SortPayload) => void;\n    sort: SortPayload;\n}\n\ntype Action =\n    | { type: 'SET_SORT'; payload: SortPayload }\n    | { type: 'SET_SORT_FIELD'; payload: SortPayload['field'] }\n    | { type: 'SET_SORT_ORDER'; payload: SortPayload['order'] };\n\nconst sortReducer = (state: SortPayload, action: Action): SortPayload => {\n    switch (action.type) {\n        case 'SET_SORT':\n            return action.payload;\n        case 'SET_SORT_FIELD': {\n            const field = action.payload;\n            const order =\n                state.field === field\n                    ? state.order === SORT_ASC\n                        ? SORT_DESC\n                        : SORT_ASC\n                    : SORT_ASC;\n            return { field, order };\n        }\n        case 'SET_SORT_ORDER': {\n            const order = action.payload;\n            if (!state.field) {\n                throw new Error(\n                    'cannot change the order on an undefined sort field'\n                );\n            }\n            return {\n                field: state.field,\n                order,\n            };\n        }\n        default:\n            return state;\n    }\n};\n\nexport const defaultSort = { field: '', order: 'ASC' };\n\n/**\n * Set the sort { field, order }\n * @name setSort\n * @function\n * @param {SortPayload} sort the sort object\n */\n\n/**\n * Set the sort field, swap the order if the field is the same\n * @name setSortField\n * @function\n * @param {string} field the sort field\n */\n\n/**\n * Set the sort order\n * @name setSortOrder\n * @function\n * @param {string} order The sort order, either ASC or DESC\n */\n\n/**\n * @typedef SortProps\n * @type {Object}\n * @property {Object} sort: the sort object.\n * @property {string} sort.field: the sort object.\n * @property {'ASC' | 'DESC'} sort.order: the sort object.\n * @property {setSort} setSort\n * @property {setSortField} setSortField\n * @property {setSortOrder} setSortOrder\n */\n\n/**\n * Hooks to provide sort state\n *\n * @example\n *\n * const { sort, setSort, setSortField, setSortOrder } = useSort({\n *      field: 'name',\n *      order: 'ASC',\n * });\n *\n * setSort({ field: 'name', order: 'ASC' });\n * // is the same as\n * setSortField('name');\n * setSortOrder('ASC');\n *\n * @param {Object} initialSort\n * @param {string} initialSort.field The initial sort field\n * @param {string} initialSort.order The initial sort order\n * @returns {SortProps} The sort props\n */\nconst useSortState = (initialSort: SortPayload = defaultSort): SortProps => {\n    const [sort, dispatch] = useReducer(sortReducer, initialSort);\n    const isFirstRender = useRef(true);\n    useEffect(() => {\n        if (isFirstRender.current) {\n            isFirstRender.current = false;\n            return;\n        }\n        dispatch({ type: 'SET_SORT', payload: initialSort });\n    }, [initialSort.field, initialSort.order]); // eslint-disable-line react-hooks/exhaustive-deps\n\n    return {\n        setSort: useCallback(\n            (sort: SortPayload) =>\n                dispatch({ type: 'SET_SORT', payload: sort }),\n            [dispatch]\n        ),\n        setSortField: useCallback(\n            (field: string) =>\n                dispatch({ type: 'SET_SORT_FIELD', payload: field }),\n            [dispatch]\n        ),\n        setSortOrder: useCallback(\n            (order: string) =>\n                dispatch({ type: 'SET_SORT_ORDER', payload: order }),\n            [dispatch]\n        ),\n        sort,\n    };\n};\n\nexport default useSortState;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}