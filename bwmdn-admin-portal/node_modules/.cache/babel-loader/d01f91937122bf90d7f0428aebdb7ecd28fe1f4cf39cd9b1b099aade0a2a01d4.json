{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { useContext, useMemo } from 'react';\nimport { useList } from '../../controller';\nimport { ChoicesContext } from './ChoicesContext';\nexport var useChoicesContext = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var context = useContext(ChoicesContext);\n  var _a = useList({\n      data: options.choices,\n      // When not in a ChoicesContext, paginating does not make sense (e.g. AutocompleteInput).\n      perPage: Infinity\n    }),\n    data = _a.data,\n    list = __rest(_a, [\"data\"]);\n  var result = useMemo(function () {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w;\n    // Props take precedence over context.\n    if (options.choices || !context) {\n      return {\n        allChoices: data,\n        availableChoices: (_a = options.availableChoices) !== null && _a !== void 0 ? _a : data,\n        selectedChoices: (_b = options.selectedChoices) !== null && _b !== void 0 ? _b : data,\n        displayedFilters: (_c = options.selectedChoices) !== null && _c !== void 0 ? _c : list.displayedFilters,\n        error: options.error,\n        filter: (_d = options.filter) !== null && _d !== void 0 ? _d : list.filter,\n        filterValues: (_e = options.filterValues) !== null && _e !== void 0 ? _e : list.filterValues,\n        hasNextPage: (_f = options.hasNextPage) !== null && _f !== void 0 ? _f : list.hasNextPage,\n        hasPreviousPage: (_g = options.hasPreviousPage) !== null && _g !== void 0 ? _g : list.hasPreviousPage,\n        hideFilter: (_h = options.hideFilter) !== null && _h !== void 0 ? _h : list.hideFilter,\n        isFetching: (_j = options.isFetching) !== null && _j !== void 0 ? _j : list.isFetching,\n        isLoading: (_k = options.isLoading) !== null && _k !== void 0 ? _k : list.isLoading,\n        page: (_l = options.page) !== null && _l !== void 0 ? _l : list.page,\n        perPage: (_m = options.perPage) !== null && _m !== void 0 ? _m : list.perPage,\n        refetch: (_o = options.refetch) !== null && _o !== void 0 ? _o : list.refetch,\n        resource: (_p = options.resource) !== null && _p !== void 0 ? _p : list.resource,\n        setFilters: (_q = options.setFilters) !== null && _q !== void 0 ? _q : list.setFilters,\n        setPage: (_r = options.setPage) !== null && _r !== void 0 ? _r : list.setPage,\n        setPerPage: (_s = options.setPerPage) !== null && _s !== void 0 ? _s : list.setPerPage,\n        setSort: (_t = options.setSort) !== null && _t !== void 0 ? _t : list.setSort,\n        showFilter: (_u = options.showFilter) !== null && _u !== void 0 ? _u : list.showFilter,\n        sort: (_v = options.sort) !== null && _v !== void 0 ? _v : list.sort,\n        source: options.source,\n        total: (_w = options.total) !== null && _w !== void 0 ? _w : list.total,\n        isFromReference: false\n      };\n    }\n    return context;\n  }, [context, data, list, options]);\n  return result;\n};","map":{"version":3,"mappings":";;;;;;;;AAAA,SAASA,UAAU,EAAEC,OAAO,QAAQ,OAAO;AAE3C,SAASC,OAAO,QAAQ,kBAAkB;AAC1C,SAASC,cAAc,QAA6B,kBAAkB;AAEtE,OAAO,IAAMC,iBAAiB,GAAG,UAC7BC,OAAwE;EAAxE;IAAAA,YAAwE;EAAA;EAExE,IAAMC,OAAO,GAAGN,UAAU,CAACG,cAAc,CAExC;EACD,IAAMI,KAAoBL,OAAO,CAAc;MAC3CM,IAAI,EAAEH,OAAO,CAACI,OAAO;MACrB;MACAC,OAAO,EAAEC;KACZ,CAAC;IAJMH,IAAI;IAAKI,IAAI,cAAf,QAAiB,CAIrB;EACF,IAAMC,MAAM,GAAGZ,OAAO,CAAC;;IACnB;IACA,IAAII,OAAO,CAACI,OAAO,IAAI,CAACH,OAAO,EAAE;MAC7B,OAAO;QACHQ,UAAU,EAAEN,IAAI;QAChBO,gBAAgB,EAAE,aAAO,CAACA,gBAAgB,mCAAIP,IAAI;QAClDQ,eAAe,EAAE,aAAO,CAACA,eAAe,mCAAIR,IAAI;QAChDS,gBAAgB,EACZ,aAAO,CAACD,eAAe,mCAAIJ,IAAI,CAACK,gBAAgB;QACpDC,KAAK,EAAEb,OAAO,CAACa,KAAK;QACpBC,MAAM,EAAE,aAAO,CAACA,MAAM,mCAAIP,IAAI,CAACO,MAAM;QACrCC,YAAY,EAAE,aAAO,CAACA,YAAY,mCAAIR,IAAI,CAACQ,YAAY;QACvDC,WAAW,EAAE,aAAO,CAACA,WAAW,mCAAIT,IAAI,CAACS,WAAW;QACpDC,eAAe,EACX,aAAO,CAACA,eAAe,mCAAIV,IAAI,CAACU,eAAe;QACnDC,UAAU,EAAE,aAAO,CAACA,UAAU,mCAAIX,IAAI,CAACW,UAAU;QACjDC,UAAU,EAAE,aAAO,CAACA,UAAU,mCAAIZ,IAAI,CAACY,UAAU;QACjDC,SAAS,EAAE,aAAO,CAACA,SAAS,mCAAIb,IAAI,CAACa,SAAS;QAC9CC,IAAI,EAAE,aAAO,CAACA,IAAI,mCAAId,IAAI,CAACc,IAAI;QAC/BhB,OAAO,EAAE,aAAO,CAACA,OAAO,mCAAIE,IAAI,CAACF,OAAO;QACxCiB,OAAO,EAAE,aAAO,CAACA,OAAO,mCAAIf,IAAI,CAACe,OAAO;QACxCC,QAAQ,EAAE,aAAO,CAACA,QAAQ,mCAAIhB,IAAI,CAACgB,QAAQ;QAC3CC,UAAU,EAAE,aAAO,CAACA,UAAU,mCAAIjB,IAAI,CAACiB,UAAU;QACjDC,OAAO,EAAE,aAAO,CAACA,OAAO,mCAAIlB,IAAI,CAACkB,OAAO;QACxCC,UAAU,EAAE,aAAO,CAACA,UAAU,mCAAInB,IAAI,CAACmB,UAAU;QACjDC,OAAO,EAAE,aAAO,CAACA,OAAO,mCAAIpB,IAAI,CAACoB,OAAO;QACxCC,UAAU,EAAE,aAAO,CAACA,UAAU,mCAAIrB,IAAI,CAACqB,UAAU;QACjDC,IAAI,EAAE,aAAO,CAACA,IAAI,mCAAItB,IAAI,CAACsB,IAAI;QAC/BC,MAAM,EAAE9B,OAAO,CAAC8B,MAAM;QACtBC,KAAK,EAAE,aAAO,CAACA,KAAK,mCAAIxB,IAAI,CAACwB,KAAK;QAClCC,eAAe,EAAE;OACpB;;IAEL,OAAO/B,OAAO;EAClB,CAAC,EAAE,CAACA,OAAO,EAAEE,IAAI,EAAEI,IAAI,EAAEP,OAAO,CAAC,CAAC;EAElC,OAAOQ,MAAM;AACjB,CAAC","names":["useContext","useMemo","useList","ChoicesContext","useChoicesContext","options","context","_a","data","choices","perPage","Infinity","list","result","allChoices","availableChoices","selectedChoices","displayedFilters","error","filter","filterValues","hasNextPage","hasPreviousPage","hideFilter","isFetching","isLoading","page","refetch","resource","setFilters","setPage","setPerPage","setSort","showFilter","sort","source","total","isFromReference"],"sources":["/Users/paigedeveau/node_modules/ra-core/src/form/choices/useChoicesContext.ts"],"sourcesContent":["import { useContext, useMemo } from 'react';\nimport { RaRecord } from '../../types';\nimport { useList } from '../../controller';\nimport { ChoicesContext, ChoicesContextValue } from './ChoicesContext';\n\nexport const useChoicesContext = <ChoicesType extends RaRecord = RaRecord>(\n    options: Partial<ChoicesContextValue> & { choices?: ChoicesType[] } = {}\n): ChoicesContextValue => {\n    const context = useContext(ChoicesContext) as ChoicesContextValue<\n        ChoicesType\n    >;\n    const { data, ...list } = useList<ChoicesType>({\n        data: options.choices,\n        // When not in a ChoicesContext, paginating does not make sense (e.g. AutocompleteInput).\n        perPage: Infinity,\n    });\n    const result = useMemo(() => {\n        // Props take precedence over context.\n        if (options.choices || !context) {\n            return {\n                allChoices: data,\n                availableChoices: options.availableChoices ?? data,\n                selectedChoices: options.selectedChoices ?? data,\n                displayedFilters:\n                    options.selectedChoices ?? list.displayedFilters,\n                error: options.error,\n                filter: options.filter ?? list.filter,\n                filterValues: options.filterValues ?? list.filterValues,\n                hasNextPage: options.hasNextPage ?? list.hasNextPage,\n                hasPreviousPage:\n                    options.hasPreviousPage ?? list.hasPreviousPage,\n                hideFilter: options.hideFilter ?? list.hideFilter,\n                isFetching: options.isFetching ?? list.isFetching,\n                isLoading: options.isLoading ?? list.isLoading,\n                page: options.page ?? list.page,\n                perPage: options.perPage ?? list.perPage,\n                refetch: options.refetch ?? list.refetch,\n                resource: options.resource ?? list.resource,\n                setFilters: options.setFilters ?? list.setFilters,\n                setPage: options.setPage ?? list.setPage,\n                setPerPage: options.setPerPage ?? list.setPerPage,\n                setSort: options.setSort ?? list.setSort,\n                showFilter: options.showFilter ?? list.showFilter,\n                sort: options.sort ?? list.sort,\n                source: options.source,\n                total: options.total ?? list.total,\n                isFromReference: false,\n            };\n        }\n        return context;\n    }, [context, data, list, options]);\n\n    return result;\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}