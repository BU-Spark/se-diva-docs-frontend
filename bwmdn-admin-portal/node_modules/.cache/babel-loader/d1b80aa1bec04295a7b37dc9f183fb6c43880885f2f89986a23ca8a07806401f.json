{"ast":null,"code":"var _jsxFileName = \"/Users/paigedeveau/Desktop/se-diva-docs-frontend/bwmdn-admin-portal/src/App.tsx\";\nimport { Admin, Resource, ShowGuesser } from \"react-admin\";\nimport { UserList, UserEdit } from \"./components/users\";\n//import simpleRestProvider from 'ra-data-simple-rest';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apiUrl = 'https://se-diva-docs.herokuapp.com';\n\n/*import { fetchUtils } from 'react-admin';\n\nconst dataProvider = {\n    getList: (resource: any, params: any) => {\n        const { page, perPage } = params.pagination;\n        const { field, order } = params.sort;\n        const query = {\n            sort: JSON.stringify([field, order]),\n            range: JSON.stringify([(page - 1) * perPage, page * perPage - 1]),\n            filter: JSON.stringify(params.filter),\n        };\n        const url = `${apiUrl}/${resource}?${JSON.stringify(query)}`;\n\n        return fetchUtils\n            .fetchJson(url)\n            .then(({ headers, json }) => ({\n                data: json,\n                total: parseInt(headers.get('content-range').split('/').pop(), 10),\n            }));\n    },\n};*/\n//const dataProvider = fetchUtils.fetchJson(apiUrl);\n\nconst fetchJson = function (apiUrl) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!options.headers) {\n    options.headers = new Headers({\n      Accept: 'application/json'\n    });\n  }\n  // add your own headers here\n  options.headers.set('X-Custom-Header', 'foobar');\n  return fetchUtils.fetchJson(url, options);\n};\nconst dataProvider = simpleRestProvider('http://path.to.my.api/', fetchJson);\n\n//const dataProvider = jsonServerProvider('http://localhost:3000');\n//const dataProvider = jsonServerProvider('https://se-diva-docs.herokuapp.com');\n//const dataProvider = simpleRestProvider('https://se-diva-docs.herokuapp.com');\n\nconst App = () => /*#__PURE__*/_jsxDEV(Admin, {\n  dataProvider: dataProvider,\n  children: /*#__PURE__*/_jsxDEV(Resource, {\n    name: \"applicants/view\",\n    list: UserList,\n    edit: UserEdit,\n    show: ShowGuesser\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 46,\n  columnNumber: 3\n}, this);\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Admin","Resource","ShowGuesser","UserList","UserEdit","apiUrl","fetchJson","options","headers","Headers","Accept","set","fetchUtils","url","dataProvider","simpleRestProvider","App"],"sources":["/Users/paigedeveau/Desktop/se-diva-docs-frontend/bwmdn-admin-portal/src/App.tsx"],"sourcesContent":["import { Admin, Resource, ShowGuesser } from \"react-admin\";\nimport jsonServerProvider from \"ra-data-json-server\";\nimport { UserList, UserEdit } from \"./components/users\";\n//import simpleRestProvider from 'ra-data-simple-rest';\n\nconst apiUrl = 'https://se-diva-docs.herokuapp.com';\n\n/*import { fetchUtils } from 'react-admin';\n\nconst dataProvider = {\n    getList: (resource: any, params: any) => {\n        const { page, perPage } = params.pagination;\n        const { field, order } = params.sort;\n        const query = {\n            sort: JSON.stringify([field, order]),\n            range: JSON.stringify([(page - 1) * perPage, page * perPage - 1]),\n            filter: JSON.stringify(params.filter),\n        };\n        const url = `${apiUrl}/${resource}?${JSON.stringify(query)}`;\n\n        return fetchUtils\n            .fetchJson(url)\n            .then(({ headers, json }) => ({\n                data: json,\n                total: parseInt(headers.get('content-range').split('/').pop(), 10),\n            }));\n    },\n};*/\n//const dataProvider = fetchUtils.fetchJson(apiUrl);\n\nconst fetchJson = (apiUrl, options = {}) => {\n  if (!options.headers) {\n      options.headers = new Headers({ Accept: 'application/json' });\n  }\n  // add your own headers here\n  options.headers.set('X-Custom-Header', 'foobar');\n  return fetchUtils.fetchJson(url, options);\n}\nconst dataProvider = simpleRestProvider('http://path.to.my.api/', fetchJson);\n\n//const dataProvider = jsonServerProvider('http://localhost:3000');\n//const dataProvider = jsonServerProvider('https://se-diva-docs.herokuapp.com');\n//const dataProvider = simpleRestProvider('https://se-diva-docs.herokuapp.com');\n\nconst App = () => (\n  <Admin dataProvider={dataProvider}>\n    <Resource name=\"applicants/view\" list={UserList} edit={UserEdit} show={ShowGuesser}/>\n  </Admin>\n);\n  \n\nexport default App;"],"mappings":";AAAA,SAASA,KAAK,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,aAAa;AAE1D,SAASC,QAAQ,EAAEC,QAAQ,QAAQ,oBAAoB;AACvD;AAAA;AAEA,MAAMC,MAAM,GAAG,oCAAoC;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,SAAS,GAAG,UAACD,MAAM,EAAmB;EAAA,IAAjBE,OAAO,uEAAG,CAAC,CAAC;EACrC,IAAI,CAACA,OAAO,CAACC,OAAO,EAAE;IAClBD,OAAO,CAACC,OAAO,GAAG,IAAIC,OAAO,CAAC;MAAEC,MAAM,EAAE;IAAmB,CAAC,CAAC;EACjE;EACA;EACAH,OAAO,CAACC,OAAO,CAACG,GAAG,CAAC,iBAAiB,EAAE,QAAQ,CAAC;EAChD,OAAOC,UAAU,CAACN,SAAS,CAACO,GAAG,EAAEN,OAAO,CAAC;AAC3C,CAAC;AACD,MAAMO,YAAY,GAAGC,kBAAkB,CAAC,wBAAwB,EAAET,SAAS,CAAC;;AAE5E;AACA;AACA;;AAEA,MAAMU,GAAG,GAAG,mBACV,QAAC,KAAK;EAAC,YAAY,EAAEF,YAAa;EAAA,uBAChC,QAAC,QAAQ;IAAC,IAAI,EAAC,iBAAiB;IAAC,IAAI,EAAEX,QAAS;IAAC,IAAI,EAAEC,QAAS;IAAC,IAAI,EAAEF;EAAY;IAAA;IAAA;IAAA;EAAA;AAAE;EAAA;EAAA;EAAA;AAAA,QAExF;AAAC,KAJIc,GAAG;AAOT,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}