{"ast":null,"code":"import { useContext, useMemo } from 'react';\nimport defaults from 'lodash/defaults';\nimport { ListContext } from './ListContext';\n/**\n * Hook to read the list controller props from the ListContext.\n *\n * Mostly used within a <ListContext.Provider> (e.g. as a descendent of <List>\n * or <ListBase>).\n *\n * But you can also use it without a <ListContext.Provider>. In this case, it is up to you\n * to pass all the necessary props (see the list below).\n *\n * The given props will take precedence over context values.\n *\n * @typedef {Object} ListControllerProps\n * @prop {Object}   data an array of the list records, e.g. [{ id: 123, title: 'hello world' }, { ... }]\n * @prop {integer}  total the total number of results for the current filters, excluding pagination. Useful to build the pagination controls. e.g. 23\n * @prop {boolean}  isFetching boolean that is true on mount, and false once the data was fetched\n * @prop {boolean}  isLoading boolean that is false until the data is available\n * @prop {integer}  page the current page. Starts at 1\n * @prop {Function} setPage a callback to change the page, e.g. setPage(3)\n * @prop {integer}  perPage the number of results per page. Defaults to 25\n * @prop {Function} setPerPage a callback to change the number of results per page, e.g. setPerPage(25)\n * @prop {Object}   sort a sort object { field, order }, e.g. { field: 'date', order: 'DESC' }\n * @prop {Function} setSort a callback to change the sort, e.g. setSort({ field : 'name', order: 'ASC' })\n * @prop {Object}   filterValues a dictionary of filter values, e.g. { title: 'lorem', nationality: 'fr' }\n * @prop {Function} setFilters a callback to update the filters, e.g. setFilters(filters, displayedFilters)\n * @prop {Object}   displayedFilters a dictionary of the displayed filters, e.g. { title: true, nationality: true }\n * @prop {Function} showFilter a callback to show one of the filters, e.g. showFilter('title', defaultValue)\n * @prop {Function} hideFilter a callback to hide one of the filters, e.g. hideFilter('title')\n * @prop {Array}    selectedIds an array listing the ids of the selected rows, e.g. [123, 456]\n * @prop {Function} onSelect callback to change the list of selected rows, e.g. onSelect([456, 789])\n * @prop {Function} onToggleItem callback to toggle the selection of a given record based on its id, e.g. onToggleItem(456)\n * @prop {Function} onUnselectItems callback to clear the selection, e.g. onUnselectItems();\n * @prop {string}   defaultTitle the translated title based on the resource, e.g. 'Posts'\n * @prop {string}   resource the resource name, deduced from the location. e.g. 'posts'\n *\n * @returns {ListControllerResult} list controller props\n *\n * @see useListController for how it is filled\n *\n * @example // custom list view\n *\n * import { useListContext } from 'react-admin';\n *\n * const MyList = () => {\n *     const { data, isLoading } = useListContext();\n *     if (isLoading) {\n *         return <>Loading...</>;\n *     }\n *     return (\n *         <ul>\n *             {data.map(record => (\n *                 <li key={record.id}>{record.name}</li>\n *             ))}\n *         </ul>\n *     );\n * }\n *\n * @example // custom pagination\n *\n * import { useListContext } from 'react-admin';\n * import { Button, Toolbar } from '@mui/material';\n * import ChevronLeft from '@mui/icons-material/ChevronLeft';\n * import ChevronRight from '@mui/icons-material/ChevronRight';\n *\n * const PrevNextPagination = () => {\n *     const { page, perPage, total, setPage } = useListContext();\n *     const nbPages = Math.ceil(total / perPage) || 1;\n *     return (\n *         nbPages > 1 &&\n *             <Toolbar>\n *                 {page > 1 &&\n *                     <Button color=\"primary\" key=\"prev\" onClick={() => setPage(page - 1)}>\n *                         <ChevronLeft />\n *                         Prev\n *                     </Button>\n *                 }\n *                 {page !== nbPages &&\n *                     <Button color=\"primary\" key=\"next\" onClick={() => setPage(page + 1)}>\n *                         Next\n *                         <ChevronRight />\n *                     </Button>\n *                 }\n *             </Toolbar>\n *     );\n * }\n */\nexport var useListContext = function (props) {\n  var context = useContext(ListContext);\n  // Props take precedence over the context\n  // @ts-ignore\n  return useMemo(function () {\n    return defaults({}, props != null ? extractListContextProps(props) : {}, context);\n  }, [context, props]);\n};\n/**\n * Extract only the list controller props\n *\n * @param {Object} props Props passed to the useListContext hook\n *\n * @returns {ListControllerResult} List controller props\n */\nvar extractListContextProps = function (_a) {\n  var sort = _a.sort,\n    data = _a.data,\n    defaultTitle = _a.defaultTitle,\n    displayedFilters = _a.displayedFilters,\n    exporter = _a.exporter,\n    filterValues = _a.filterValues,\n    hasCreate = _a.hasCreate,\n    hideFilter = _a.hideFilter,\n    isFetching = _a.isFetching,\n    isLoading = _a.isLoading,\n    onSelect = _a.onSelect,\n    onToggleItem = _a.onToggleItem,\n    onUnselectItems = _a.onUnselectItems,\n    page = _a.page,\n    perPage = _a.perPage,\n    refetch = _a.refetch,\n    resource = _a.resource,\n    selectedIds = _a.selectedIds,\n    setFilters = _a.setFilters,\n    setPage = _a.setPage,\n    setPerPage = _a.setPerPage,\n    setSort = _a.setSort,\n    showFilter = _a.showFilter,\n    total = _a.total;\n  return {\n    sort: sort,\n    data: data,\n    defaultTitle: defaultTitle,\n    displayedFilters: displayedFilters,\n    exporter: exporter,\n    filterValues: filterValues,\n    hasCreate: hasCreate,\n    hideFilter: hideFilter,\n    isFetching: isFetching,\n    isLoading: isLoading,\n    onSelect: onSelect,\n    onToggleItem: onToggleItem,\n    onUnselectItems: onUnselectItems,\n    page: page,\n    perPage: perPage,\n    refetch: refetch,\n    resource: resource,\n    selectedIds: selectedIds,\n    setFilters: setFilters,\n    setPage: setPage,\n    setPerPage: setPerPage,\n    setSort: setSort,\n    showFilter: showFilter,\n    total: total\n  };\n};","map":{"version":3,"mappings":"AAAA,SAASA,UAAU,EAAEC,OAAO,QAAQ,OAAO;AAC3C,OAAOC,QAAQ,MAAM,iBAAiB;AAEtC,SAASC,WAAW,QAAQ,eAAe;AAI3C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqFA,OAAO,IAAMC,cAAc,GAAG,UAC1BC,KAAW;EAEX,IAAMC,OAAO,GAAGN,UAAU,CAACG,WAAW,CAAC;EACvC;EACA;EACA,OAAOF,OAAO,CACV;IACI,eAAQ,CACJ,EAAE,EACFI,KAAK,IAAI,IAAI,GAAGE,uBAAuB,CAACF,KAAK,CAAC,GAAG,EAAE,EACnDC,OAAO,CACV;EAJD,CAIC,EACL,CAACA,OAAO,EAAED,KAAK,CAAC,CACnB;AACL,CAAC;AAED;;;;;;;AAOA,IAAME,uBAAuB,GAAG,UAACC,EAyBhC;MAxBGC,IAAI;IACJC,IAAI;IACJC,YAAY;IACZC,gBAAgB;IAChBC,QAAQ;IACRC,YAAY;IACZC,SAAS;IACTC,UAAU;IACVC,UAAU;IACVC,SAAS;IACTC,QAAQ;IACRC,YAAY;IACZC,eAAe;IACfC,IAAI;IACJC,OAAO;IACPC,OAAO;IACPC,QAAQ;IACRC,WAAW;IACXC,UAAU;IACVC,OAAO;IACPC,UAAU;IACVC,OAAO;IACPC,UAAU;IACVC,KAAK;EACH,OAAC;IACHvB,IAAI;IACJC,IAAI;IACJC,YAAY;IACZC,gBAAgB;IAChBC,QAAQ;IACRC,YAAY;IACZC,SAAS;IACTC,UAAU;IACVC,UAAU;IACVC,SAAS;IACTC,QAAQ;IACRC,YAAY;IACZC,eAAe;IACfC,IAAI;IACJC,OAAO;IACPC,OAAO;IACPC,QAAQ;IACRC,WAAW;IACXC,UAAU;IACVC,OAAO;IACPC,UAAU;IACVC,OAAO;IACPC,UAAU;IACVC,KAAK;GACR;AAzBK,CAyBJ","names":["useContext","useMemo","defaults","ListContext","useListContext","props","context","extractListContextProps","_a","sort","data","defaultTitle","displayedFilters","exporter","filterValues","hasCreate","hideFilter","isFetching","isLoading","onSelect","onToggleItem","onUnselectItems","page","perPage","refetch","resource","selectedIds","setFilters","setPage","setPerPage","setSort","showFilter","total"],"sourceRoot":"","sources":["../../../../src/controller/list/useListContext.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}