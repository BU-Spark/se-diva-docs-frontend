{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import FakeRest from 'fakerest';\nimport { DataProvider } from 'ra-core';\n\n/* eslint-disable no-console */\nfunction log(type, resource, params, response) {\n    if (console.group) {\n        // Better logging in Chrome\n        console.groupCollapsed(type, resource, JSON.stringify(params));\n        console.log(response);\n        console.groupEnd();\n    } else {\n        console.log('FakeRest request ', type, resource, params);\n        console.log('FakeRest response', response);\n    }\n}\n\n/**\n * Respond to react-admin data queries using a local JavaScript object\n *\n * Useful for debugging and testing - do not use in production.\n *\n * @example\n *\n * import fakeDataProvider from 'ra-data-fakerest';\n * const dataProvider = fakeDataProvider({\n *   posts: [\n *     { id: 0, title: 'Hello, world!' },\n *     { id: 1, title: 'FooBar' },\n *   ],\n *   comments: [\n *     { id: 0, post_id: 0, author: 'John Doe', body: 'Sensational!' },\n *     { id: 1, post_id: 0, author: 'Jane Doe', body: 'I agree' },\n *   ],\n * })\n */\nexport default (data, loggingEnabled = false): DataProvider => {\n    const restServer = new FakeRest.Server();\n    restServer.init(data);\n    if (typeof window !== 'undefined') {\n        // give way to update data in the console\n        (window as any).restServer = restServer;\n    }\n\n    function getResponse(type, resource, params) {\n        switch (type) {\n            case 'getList': {\n                const { page, perPage } = params.pagination;\n                const { field, order } = params.sort;\n                const query = {\n                    sort: [field, order],\n                    range: [(page - 1) * perPage, page * perPage - 1],\n                    filter: params.filter,\n                };\n                return {\n                    data: restServer.getAll(resource, query),\n                    total: restServer.getCount(resource, {\n                        filter: params.filter,\n                    }),\n                };\n            }\n            case 'getOne':\n                return {\n                    data: restServer.getOne(resource, params.id, { ...params }),\n                };\n            case 'getMany':\n                return {\n                    data: restServer.getAll(resource, {\n                        filter: { id: params.ids },\n                    }),\n                };\n            case 'getManyReference': {\n                const { page, perPage } = params.pagination;\n                const { field, order } = params.sort;\n                const query = {\n                    sort: [field, order],\n                    range: [(page - 1) * perPage, page * perPage - 1],\n                    filter: { ...params.filter, [params.target]: params.id },\n                };\n                return {\n                    data: restServer.getAll(resource, query),\n                    total: restServer.getCount(resource, {\n                        filter: query.filter,\n                    }),\n                };\n            }\n            case 'update':\n                return {\n                    data: restServer.updateOne(resource, params.id, {\n                        ...params.data,\n                    }),\n                };\n            case 'updateMany':\n                params.ids.forEach(id =>\n                    restServer.updateOne(resource, id, {\n                        ...params.data,\n                    })\n                );\n                return { data: params.ids };\n            case 'create':\n                return {\n                    data: restServer.addOne(resource, { ...params.data }),\n                };\n            case 'delete':\n                return { data: restServer.removeOne(resource, params.id) };\n            case 'deleteMany':\n                params.ids.forEach(id => restServer.removeOne(resource, id));\n                return { data: params.ids };\n            default:\n                return false;\n        }\n    }\n\n    /**\n     * @param {String} type One of the data Provider methods, e.g. 'getList'\n     * @param {String} resource Name of the resource to fetch, e.g. 'posts'\n     * @param {Object} params The data request params, depending on the type\n     * @returns {Promise} The response\n     */\n    const handle = (type, resource, params): Promise<any> => {\n        const collection = restServer.getCollection(resource);\n        if (!collection && type !== 'create') {\n            const error = new UndefinedResourceError(\n                `Undefined collection \"${resource}\"`\n            );\n            error.code = 1; // make that error detectable\n            return Promise.reject(error);\n        }\n        let response;\n        try {\n            response = getResponse(type, resource, params);\n        } catch (error) {\n            console.error(error);\n            return Promise.reject(error);\n        }\n        if (loggingEnabled) {\n            log(type, resource, params, response);\n        }\n        return Promise.resolve(response);\n    };\n\n    return {\n        getList: (resource, params) => handle('getList', resource, params),\n        getOne: (resource, params) => handle('getOne', resource, params),\n        getMany: (resource, params) => handle('getMany', resource, params),\n        getManyReference: (resource, params) =>\n            handle('getManyReference', resource, params),\n        update: (resource, params) => handle('update', resource, params),\n        updateMany: (resource, params) =>\n            handle('updateMany', resource, params),\n        create: (resource, params) => handle('create', resource, params),\n        delete: (resource, params) => handle('delete', resource, params),\n        deleteMany: (resource, params) =>\n            handle('deleteMany', resource, params),\n    };\n};\n\nclass UndefinedResourceError extends Error {\n    code: number;\n}\n"],"mappings":"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","names":[]}