{"ast":null,"code":"import { AUTH_LOGIN, AUTH_LOGOUT, AUTH_CHECK, AUTH_ERROR, AUTH_GET_PERMISSIONS } from './types';\n/**\n * Turn a function-based authProvider to an object-based one\n *\n * Allows using legacy authProviders transparently.\n *\n * @param {Function} legacyAuthProvider A legacy authProvider (type, params) => Promise<any>\n *\n * @returns {Object} An authProvider that react-admin can use\n */\nexport default (function (legacyAuthProvider) {\n  var authProvider = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    return legacyAuthProvider.apply(null, args);\n  };\n  authProvider.login = function (params) {\n    return legacyAuthProvider(AUTH_LOGIN, params);\n  };\n  authProvider.logout = function (params) {\n    return legacyAuthProvider(AUTH_LOGOUT, params);\n  };\n  authProvider.checkAuth = function (params) {\n    return legacyAuthProvider(AUTH_CHECK, params);\n  };\n  authProvider.checkError = function (error) {\n    return legacyAuthProvider(AUTH_ERROR, error);\n  };\n  authProvider.getPermissions = function (params) {\n    return legacyAuthProvider(AUTH_GET_PERMISSIONS, params);\n  };\n  return authProvider;\n});","map":{"version":3,"mappings":"AAAA,SACIA,UAAU,EACVC,WAAW,EACXC,UAAU,EACVC,UAAU,EACVC,oBAAoB,QACjB,SAAS;AAGhB;;;;;;;;;AASA,gBAAe,UAACC,kBAAsC;EAClD,IAAMC,YAAY,GAAG;IAAC;SAAA,UAAO,EAAPC,qBAAO,EAAPA,IAAO;MAAPC;;IAAY,yBAAkB,CAACC,KAAK,CAAC,IAAI,EAAED,IAAI,CAAC;EAApC,CAAoC;EACtEF,YAAY,CAACI,KAAK,GAAG,gBAAM;IAAI,yBAAkB,CAACV,UAAU,EAAEW,MAAM,CAAC;EAAtC,CAAsC;EACrEL,YAAY,CAACM,MAAM,GAAG,gBAAM;IAAI,yBAAkB,CAACX,WAAW,EAAEU,MAAM,CAAC;EAAvC,CAAuC;EACvEL,YAAY,CAACO,SAAS,GAAG,gBAAM;IAAI,yBAAkB,CAACX,UAAU,EAAES,MAAM,CAAC;EAAtC,CAAsC;EACzEL,YAAY,CAACQ,UAAU,GAAG,eAAK;IAAI,yBAAkB,CAACX,UAAU,EAAEY,KAAK,CAAC;EAArC,CAAqC;EACxET,YAAY,CAACU,cAAc,GAAG,gBAAM;IAChC,yBAAkB,CAACZ,oBAAoB,EAAEO,MAAM,CAAC;EAAhD,CAAgD;EACpD,OAAOL,YAAY;AACvB,CAAC","names":["AUTH_LOGIN","AUTH_LOGOUT","AUTH_CHECK","AUTH_ERROR","AUTH_GET_PERMISSIONS","legacyAuthProvider","authProvider","_i","args","apply","login","params","logout","checkAuth","checkError","error","getPermissions"],"sources":["/Users/paigedeveau/node_modules/ra-core/src/auth/convertLegacyAuthProvider.ts"],"sourcesContent":["import {\n    AUTH_LOGIN,\n    AUTH_LOGOUT,\n    AUTH_CHECK,\n    AUTH_ERROR,\n    AUTH_GET_PERMISSIONS,\n} from './types';\nimport { AuthProvider, LegacyAuthProvider } from '../types';\n\n/**\n * Turn a function-based authProvider to an object-based one\n *\n * Allows using legacy authProviders transparently.\n *\n * @param {Function} legacyAuthProvider A legacy authProvider (type, params) => Promise<any>\n *\n * @returns {Object} An authProvider that react-admin can use\n */\nexport default (legacyAuthProvider: LegacyAuthProvider): AuthProvider => {\n    const authProvider = (...args) => legacyAuthProvider.apply(null, args);\n    authProvider.login = params => legacyAuthProvider(AUTH_LOGIN, params);\n    authProvider.logout = params => legacyAuthProvider(AUTH_LOGOUT, params);\n    authProvider.checkAuth = params => legacyAuthProvider(AUTH_CHECK, params);\n    authProvider.checkError = error => legacyAuthProvider(AUTH_ERROR, error);\n    authProvider.getPermissions = params =>\n        legacyAuthProvider(AUTH_GET_PERMISSIONS, params);\n    return authProvider;\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}