{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { useCallback, useEffect, useRef } from 'react';\nimport get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport { removeEmpty, useSafeSetState } from '../../util';\nimport { useResourceContext } from '../../core';\nimport usePaginationState from '../usePaginationState';\nimport useSortState from '../useSortState';\nimport { useRecordSelection } from './useRecordSelection';\nimport { flattenObject } from '../../dataProvider/fetch';\nvar refetch = function () {\n  throw new Error('refetch is not available for a ListContext built from useList based on local data');\n};\n/**\n * Handle filtering, sorting and pagination on local data.\n *\n * Returns the data and callbacks expected by <ListContext>.\n *\n * @example\n * const data = [\n *     { id: 1, name: 'Arnold' },\n *     { id: 2, name: 'Sylvester' },\n *     { id: 3, name: 'Jean-Claude' },\n * ]\n *\n * const MyComponent = () => {\n *     const listContext = useList({ data });\n *     return (\n *         <ListContextProvider value={listContext}>\n *             <Datagrid>\n *                 <TextField source=\"id\" />\n *                 <TextField source=\"name\" />\n *             </Datagrid>\n *         </ListContextProvider>\n *     );\n * };\n *\n * @param {UseListOptions} props\n * @param {RaRecord[]} props.data An array of records\n * @param {Boolean} props.isFetching: Optional. A boolean indicating whether the data is being loaded\n * @param {Boolean} props.isLoading: Optional. A boolean indicating whether the data has been loaded at least once\n * @param {Error | String} props.error: Optional. The error if any occurred while loading the data\n * @param {Object} props.filter: Optional. An object containing the filters applied on the data\n * @param {Number} props.page: Optional. The initial page index\n * @param {Number} props.perPage: Optional. The initial page size\n * @param {SortPayload} props.sort: Optional. The initial sort (field and order)\n * @param {filterCallback} prop.filterCallback Optional. A function that allows you to make a custom filter\n */\nexport var useList = function (props) {\n  var data = props.data,\n    error = props.error,\n    _a = props.filter,\n    filter = _a === void 0 ? defaultFilter : _a,\n    _b = props.isFetching,\n    isFetching = _b === void 0 ? false : _b,\n    _c = props.isLoading,\n    isLoading = _c === void 0 ? false : _c,\n    _d = props.page,\n    initialPage = _d === void 0 ? 1 : _d,\n    _e = props.perPage,\n    initialPerPage = _e === void 0 ? 1000 : _e,\n    initialSort = props.sort,\n    _f = props.filterCallback,\n    filterCallback = _f === void 0 ? function (record) {\n      return Boolean(record);\n    } : _f;\n  var resource = useResourceContext(props);\n  var _g = useSafeSetState(isFetching),\n    fetchingState = _g[0],\n    setFetchingState = _g[1];\n  var _h = useSafeSetState(isLoading),\n    loadingState = _h[0],\n    setLoadingState = _h[1];\n  var _j = useSafeSetState(function () {\n      return {\n        data: data,\n        total: data ? data.length : undefined\n      };\n    }),\n    finalItems = _j[0],\n    setFinalItems = _j[1];\n  // pagination logic\n  var _k = usePaginationState({\n      page: initialPage,\n      perPage: initialPerPage\n    }),\n    page = _k.page,\n    setPage = _k.setPage,\n    perPage = _k.perPage,\n    setPerPage = _k.setPerPage;\n  // sort logic\n  var _l = useSortState(initialSort),\n    sort = _l.sort,\n    setSortState = _l.setSort;\n  var setSort = useCallback(function (sort) {\n    setSortState(sort);\n    setPage(1);\n  }, [setPage, setSortState]);\n  // selection logic\n  var _m = useRecordSelection(resource),\n    selectedIds = _m[0],\n    selectionModifiers = _m[1];\n  // filter logic\n  var filterRef = useRef(filter);\n  var _o = useSafeSetState({}),\n    displayedFilters = _o[0],\n    setDisplayedFilters = _o[1];\n  var _p = useSafeSetState(filter),\n    filterValues = _p[0],\n    setFilterValues = _p[1];\n  var hideFilter = useCallback(function (filterName) {\n    setDisplayedFilters(function (previousState) {\n      var _a = previousState,\n        _b = filterName,\n        _ = _a[_b],\n        newState = __rest(_a, [typeof _b === \"symbol\" ? _b : _b + \"\"]);\n      return newState;\n    });\n    setFilterValues(function (previousState) {\n      var _a = previousState,\n        _b = filterName,\n        _ = _a[_b],\n        newState = __rest(_a, [typeof _b === \"symbol\" ? _b : _b + \"\"]);\n      return newState;\n    });\n  }, [setDisplayedFilters, setFilterValues]);\n  var showFilter = useCallback(function (filterName, defaultValue) {\n    setDisplayedFilters(function (previousState) {\n      var _a;\n      return __assign(__assign({}, previousState), (_a = {}, _a[filterName] = true, _a));\n    });\n    setFilterValues(function (previousState) {\n      var _a;\n      return removeEmpty(__assign(__assign({}, previousState), (_a = {}, _a[filterName] = defaultValue, _a)));\n    });\n  }, [setDisplayedFilters, setFilterValues]);\n  var setFilters = useCallback(function (filters, displayedFilters) {\n    setFilterValues(removeEmpty(filters));\n    if (displayedFilters) {\n      setDisplayedFilters(displayedFilters);\n    }\n    setPage(1);\n  }, [setDisplayedFilters, setFilterValues, setPage]);\n  // handle filter prop change\n  useEffect(function () {\n    if (!isEqual(filter, filterRef.current)) {\n      filterRef.current = filter;\n      setFilterValues(filter);\n    }\n  });\n  // We do all the data processing (filtering, sorting, paginating) client-side\n  useEffect(function () {\n    if (isLoading || !data) return;\n    var tempData = data;\n    // 1. filter\n    if (filterValues) {\n      var flattenFilterValues_1 = flattenObject(filterValues);\n      tempData = data.filter(function (record) {\n        return Object.entries(flattenFilterValues_1).every(function (_a) {\n          var filterName = _a[0],\n            filterValue = _a[1];\n          var recordValue = get(record, filterName);\n          var result = Array.isArray(recordValue) ? Array.isArray(filterValue) ? recordValue.some(function (item) {\n            return filterValue.includes(item);\n          }) : recordValue.includes(filterValue) : Array.isArray(filterValue) ? filterValue.includes(recordValue) : filterValue == recordValue; // eslint-disable-line eqeqeq\n          return result;\n        });\n      }).filter(filterCallback);\n    }\n    var filteredLength = tempData.length;\n    // 2. sort\n    if (sort.field) {\n      tempData = tempData.sort(function (a, b) {\n        if (get(a, sort.field) > get(b, sort.field)) {\n          return sort.order === 'ASC' ? 1 : -1;\n        }\n        if (get(a, sort.field) < get(b, sort.field)) {\n          return sort.order === 'ASC' ? -1 : 1;\n        }\n        return 0;\n      });\n    }\n    // 3. paginate\n    tempData = tempData.slice((page - 1) * perPage, page * perPage);\n    setFinalItems({\n      data: tempData,\n      total: filteredLength\n    });\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  JSON.stringify(data), filterValues, isLoading, page, perPage, setFinalItems, sort.field, sort.order]);\n  useEffect(function () {\n    if (isFetching !== fetchingState) {\n      setFetchingState(isFetching);\n    }\n  }, [isFetching, fetchingState, setFetchingState]);\n  useEffect(function () {\n    if (isLoading !== loadingState) {\n      setLoadingState(isLoading);\n    }\n  }, [isLoading, loadingState, setLoadingState]);\n  return {\n    sort: sort,\n    data: finalItems === null || finalItems === void 0 ? void 0 : finalItems.data,\n    defaultTitle: '',\n    error: error,\n    displayedFilters: displayedFilters,\n    filterValues: filterValues,\n    hasNextPage: (finalItems === null || finalItems === void 0 ? void 0 : finalItems.total) == null ? false : page * perPage < finalItems.total,\n    hasPreviousPage: page > 1,\n    hideFilter: hideFilter,\n    isFetching: fetchingState,\n    isLoading: loadingState,\n    onSelect: selectionModifiers.select,\n    onToggleItem: selectionModifiers.toggle,\n    onUnselectItems: selectionModifiers.clearSelection,\n    page: page,\n    perPage: perPage,\n    resource: undefined,\n    refetch: refetch,\n    selectedIds: selectedIds,\n    setFilters: setFilters,\n    setPage: setPage,\n    setPerPage: setPerPage,\n    setSort: setSort,\n    showFilter: showFilter,\n    total: finalItems === null || finalItems === void 0 ? void 0 : finalItems.total\n  };\n};\nvar defaultFilter = {};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,SAASA,WAAW,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACtD,OAAOC,GAAG,MAAM,YAAY;AAC5B,OAAOC,OAAO,MAAM,gBAAgB;AACpC,SAASC,WAAW,EAAEC,eAAe,QAAQ,YAAY;AAEzD,SAASC,kBAAkB,QAAQ,YAAY;AAC/C,OAAOC,kBAAkB,MAAM,uBAAuB;AACtD,OAAOC,YAAY,MAAM,iBAAiB;AAC1C,SAASC,kBAAkB,QAAQ,sBAAsB;AAEzD,SAASC,aAAa,QAAQ,0BAA0B;AAExD,IAAMC,OAAO,GAAG;EACZ,MAAM,IAAIC,KAAK,CACX,mFAAmF,CACtF;AACL,CAAC;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA,OAAO,IAAMC,OAAO,GAAG,UACnBC,KAAiC;EAG7B,QAAI,GASJA,KAAK,KATD;IACJC,KAAK,GAQLD,KAAK,MARA;IACLE,KAOAF,KAAK,OAPiB;IAAtBG,MAAM,mBAAGC,aAAa;IACtBC,KAMAL,KAAK,WANa;IAAlBM,UAAU,mBAAG,KAAK;IAClBC,KAKAP,KAAK,UALY;IAAjBQ,SAAS,mBAAG,KAAK;IACjBC,KAIAT,KAAK,KAJgB;IAAfU,WAAW,mBAAG,CAAC;IACrBC,KAGAX,KAAK,QAHyB;IAArBY,cAAc,mBAAG,IAAI;IACxBC,WAAW,GAEjBb,KAAK,KAFY;IACjBc,KACAd,KAAK,eADmD;IAAxDe,cAAc,mBAAG,UAACC,MAAkB;MAAK,cAAO,CAACA,MAAM,CAAC;IAAf,CAAe;EAE5D,IAAMC,QAAQ,GAAGzB,kBAAkB,CAACQ,KAAK,CAAC;EAEpC,SAAoCT,eAAe,CACrDe,UAAU,CAC+B;IAFtCY,aAAa;IAAEC,gBAAgB,QAEO;EAEvC,SAAkC5B,eAAe,CACnDiB,SAAS,CACgC;IAFtCY,YAAY;IAAEC,eAAe,QAES;EAEvC,SAA8B9B,eAAe,CAGhD;MAAM,OAAC;QACN+B,IAAI;QACJC,KAAK,EAAED,IAAI,GAAGA,IAAI,CAACE,MAAM,GAAGC;OAC/B;IAHQ,CAGP,CAAC;IANIC,UAAU;IAAEC,aAAa,QAM7B;EAEH;EACM,SAAyClC,kBAAkB,CAAC;MAC9DmC,IAAI,EAAElB,WAAW;MACjBmB,OAAO,EAAEjB;KACZ,CAAC;IAHMgB,IAAI;IAAEE,OAAO;IAAED,OAAO;IAAEE,UAAU,gBAGxC;EAEF;EACM,SAAkCrC,YAAY,CAACmB,WAAW,CAAC;IAAzDmB,IAAI;IAAWC,YAAY,aAA8B;EACjE,IAAMC,OAAO,GAAGjD,WAAW,CACvB,UAAC+C,IAAiB;IACdC,YAAY,CAACD,IAAI,CAAC;IAClBF,OAAO,CAAC,CAAC,CAAC;EACd,CAAC,EACD,CAACA,OAAO,EAAEG,YAAY,CAAC,CAC1B;EAED;EACM,SAAoCtC,kBAAkB,CAACsB,QAAQ,CAAC;IAA/DkB,WAAW;IAAEC,kBAAkB,QAAgC;EAEtE;EACA,IAAMC,SAAS,GAAGlD,MAAM,CAACgB,MAAM,CAAC;EAC1B,SAA0CZ,eAAe,CAE5D,EAAE,CAAC;IAFC+C,gBAAgB;IAAEC,mBAAmB,QAEtC;EACA,SAAkChD,eAAe,CAEpDY,MAAM,CAAC;IAFHqC,YAAY;IAAEC,eAAe,QAE1B;EACV,IAAMC,UAAU,GAAGzD,WAAW,CAC1B,UAAC0D,UAAkB;IACfJ,mBAAmB,CAAC,uBAAa;MAC7B,IAAyCrC,kBAAa;QAA9CG,KAACsC,UAAW;QAAEC,CAAC;QAAKC,QAAQ,cAA9B,uCAAgC,CAAgB;MACtD,OAAOA,QAAQ;IACnB,CAAC,CAAC;IACFJ,eAAe,CAAC,uBAAa;MACzB,IAAyCvC,kBAAa;QAA9CG,KAACsC,UAAW;QAAEC,CAAC;QAAKC,QAAQ,cAA9B,uCAAgC,CAAgB;MACtD,OAAOA,QAAQ;IACnB,CAAC,CAAC;EACN,CAAC,EACD,CAACN,mBAAmB,EAAEE,eAAe,CAAC,CACzC;EACD,IAAMK,UAAU,GAAG7D,WAAW,CAC1B,UAAC0D,UAAkB,EAAEI,YAAiB;IAClCR,mBAAmB,CAAC,uBAAa;;MAAI,6BAC9BS,aAAa,gBACfL,UAAU,IAAG,IAAI;IAFe,CAGnC,CAAC;IACHF,eAAe,CAAC,uBAAa;;MACzB,kBAAW,uBACJO,aAAa,gBACfL,UAAU,IAAGI,YAAY,OAC5B;IAHF,CAGE,CACL;EACL,CAAC,EACD,CAACR,mBAAmB,EAAEE,eAAe,CAAC,CACzC;EACD,IAAMQ,UAAU,GAAGhE,WAAW,CAC1B,UAACiE,OAAO,EAAEZ,gBAAgB;IACtBG,eAAe,CAACnD,WAAW,CAAC4D,OAAO,CAAC,CAAC;IACrC,IAAIZ,gBAAgB,EAAE;MAClBC,mBAAmB,CAACD,gBAAgB,CAAC;;IAEzCR,OAAO,CAAC,CAAC,CAAC;EACd,CAAC,EACD,CAACS,mBAAmB,EAAEE,eAAe,EAAEX,OAAO,CAAC,CAClD;EACD;EACA5C,SAAS,CAAC;IACN,IAAI,CAACG,OAAO,CAACc,MAAM,EAAEkC,SAAS,CAACc,OAAO,CAAC,EAAE;MACrCd,SAAS,CAACc,OAAO,GAAGhD,MAAM;MAC1BsC,eAAe,CAACtC,MAAM,CAAC;;EAE/B,CAAC,CAAC;EAEF;EACAjB,SAAS,CACL;IACI,IAAIsB,SAAS,IAAI,CAACc,IAAI,EAAE;IACxB,IAAI8B,QAAQ,GAAG9B,IAAI;IAEnB;IACA,IAAIkB,YAAY,EAAE;MACd,IAAMa,qBAAmB,GAAGzD,aAAa,CAAC4C,YAAY,CAAC;MACvDY,QAAQ,GAAG9B,IAAI,CACVnB,MAAM,CAAC,gBAAM;QACV,aAAM,CAACmD,OAAO,CAACD,qBAAmB,CAAC,CAACE,KAAK,CACrC,UAACrD,EAAyB;cAAxByC,UAAU;YAAEa,WAAW;UACrB,IAAMC,WAAW,GAAGrE,GAAG,CAAC4B,MAAM,EAAE2B,UAAU,CAAC;UAC3C,IAAMe,MAAM,GAAGC,KAAK,CAACC,OAAO,CAACH,WAAW,CAAC,GACnCE,KAAK,CAACC,OAAO,CAACJ,WAAW,CAAC,GACtBC,WAAW,CAACI,IAAI,CAAC,cAAI;YACjB,kBAAW,CAACC,QAAQ,CAACC,IAAI,CAAC;UAA1B,CAA0B,CAC7B,GACDN,WAAW,CAACK,QAAQ,CAACN,WAAW,CAAC,GACrCG,KAAK,CAACC,OAAO,CAACJ,WAAW,CAAC,GAC1BA,WAAW,CAACM,QAAQ,CAACL,WAAW,CAAC,GACjCD,WAAW,IAAIC,WAAW,CAAC,CAAC;UAClC,OAAOC,MAAM;QACjB,CAAC,CACJ;MAdD,CAcC,CACJ,CACAvD,MAAM,CAACY,cAAc,CAAC;;IAE/B,IAAMiD,cAAc,GAAGZ,QAAQ,CAAC5B,MAAM;IAEtC;IACA,IAAIQ,IAAI,CAACiC,KAAK,EAAE;MACZb,QAAQ,GAAGA,QAAQ,CAACpB,IAAI,CAAC,UAACkC,CAAC,EAAEC,CAAC;QAC1B,IAAI/E,GAAG,CAAC8E,CAAC,EAAElC,IAAI,CAACiC,KAAK,CAAC,GAAG7E,GAAG,CAAC+E,CAAC,EAAEnC,IAAI,CAACiC,KAAK,CAAC,EAAE;UACzC,OAAOjC,IAAI,CAACoC,KAAK,KAAK,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC;;QAExC,IAAIhF,GAAG,CAAC8E,CAAC,EAAElC,IAAI,CAACiC,KAAK,CAAC,GAAG7E,GAAG,CAAC+E,CAAC,EAAEnC,IAAI,CAACiC,KAAK,CAAC,EAAE;UACzC,OAAOjC,IAAI,CAACoC,KAAK,KAAK,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC;;QAExC,OAAO,CAAC;MACZ,CAAC,CAAC;;IAGN;IACAhB,QAAQ,GAAGA,QAAQ,CAACiB,KAAK,CAAC,CAACzC,IAAI,GAAG,CAAC,IAAIC,OAAO,EAAED,IAAI,GAAGC,OAAO,CAAC;IAE/DF,aAAa,CAAC;MACVL,IAAI,EAAE8B,QAAQ;MACd7B,KAAK,EAAEyC;KACV,CAAC;EACN,CAAC;EAAE;EACH;EACI;EACAM,IAAI,CAACC,SAAS,CAACjD,IAAI,CAAC,EACpBkB,YAAY,EACZhC,SAAS,EACToB,IAAI,EACJC,OAAO,EACPF,aAAa,EACbK,IAAI,CAACiC,KAAK,EACVjC,IAAI,CAACoC,KAAK,CACb,CACJ;EAEDlF,SAAS,CAAC;IACN,IAAIoB,UAAU,KAAKY,aAAa,EAAE;MAC9BC,gBAAgB,CAACb,UAAU,CAAC;;EAEpC,CAAC,EAAE,CAACA,UAAU,EAAEY,aAAa,EAAEC,gBAAgB,CAAC,CAAC;EAEjDjC,SAAS,CAAC;IACN,IAAIsB,SAAS,KAAKY,YAAY,EAAE;MAC5BC,eAAe,CAACb,SAAS,CAAC;;EAElC,CAAC,EAAE,CAACA,SAAS,EAAEY,YAAY,EAAEC,eAAe,CAAC,CAAC;EAE9C,OAAO;IACHW,IAAI;IACJV,IAAI,EAAEI,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEJ,IAAI;IACtBkD,YAAY,EAAE,EAAE;IAChBvE,KAAK;IACLqC,gBAAgB;IAChBE,YAAY;IACZiC,WAAW,EACP,WAAU,aAAV/C,UAAU,uBAAVA,UAAU,CAAEH,KAAK,KAAI,IAAI,GACnB,KAAK,GACLK,IAAI,GAAGC,OAAO,GAAGH,UAAU,CAACH,KAAK;IAC3CmD,eAAe,EAAE9C,IAAI,GAAG,CAAC;IACzBc,UAAU;IACVpC,UAAU,EAAEY,aAAa;IACzBV,SAAS,EAAEY,YAAY;IACvBuD,QAAQ,EAAEvC,kBAAkB,CAACwC,MAAM;IACnCC,YAAY,EAAEzC,kBAAkB,CAAC0C,MAAM;IACvCC,eAAe,EAAE3C,kBAAkB,CAAC4C,cAAc;IAClDpD,IAAI;IACJC,OAAO;IACPZ,QAAQ,EAAEQ,SAAS;IACnB5B,OAAO;IACPsC,WAAW;IACXc,UAAU;IACVnB,OAAO;IACPC,UAAU;IACVG,OAAO;IACPY,UAAU;IACVvB,KAAK,EAAEG,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEH;GACtB;AACL,CAAC;AAmBD,IAAMnB,aAAa,GAAG,EAAE","names":["useCallback","useEffect","useRef","get","isEqual","removeEmpty","useSafeSetState","useResourceContext","usePaginationState","useSortState","useRecordSelection","flattenObject","refetch","Error","useList","props","error","_a","filter","defaultFilter","_b","isFetching","_c","isLoading","_d","initialPage","_e","initialPerPage","initialSort","_f","filterCallback","record","resource","fetchingState","setFetchingState","loadingState","setLoadingState","data","total","length","undefined","finalItems","setFinalItems","page","perPage","setPage","setPerPage","sort","setSortState","setSort","selectedIds","selectionModifiers","filterRef","displayedFilters","setDisplayedFilters","filterValues","setFilterValues","hideFilter","filterName","_","newState","showFilter","defaultValue","previousState","setFilters","filters","current","tempData","flattenFilterValues_1","entries","every","filterValue","recordValue","result","Array","isArray","some","includes","item","filteredLength","field","a","b","order","slice","JSON","stringify","defaultTitle","hasNextPage","hasPreviousPage","onSelect","select","onToggleItem","toggle","onUnselectItems","clearSelection"],"sources":["/Users/paigedeveau/Desktop/se-diva-docs-frontend/bwmdn-admin-portal/node_modules/ra-core/src/controller/list/useList.ts"],"sourcesContent":["import { useCallback, useEffect, useRef } from 'react';\nimport get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport { removeEmpty, useSafeSetState } from '../../util';\nimport { FilterPayload, RaRecord, SortPayload } from '../../types';\nimport { useResourceContext } from '../../core';\nimport usePaginationState from '../usePaginationState';\nimport useSortState from '../useSortState';\nimport { useRecordSelection } from './useRecordSelection';\nimport { ListControllerResult } from './useListController';\nimport { flattenObject } from '../../dataProvider/fetch';\n\nconst refetch = () => {\n    throw new Error(\n        'refetch is not available for a ListContext built from useList based on local data'\n    );\n};\n\n/**\n * Handle filtering, sorting and pagination on local data.\n *\n * Returns the data and callbacks expected by <ListContext>.\n *\n * @example\n * const data = [\n *     { id: 1, name: 'Arnold' },\n *     { id: 2, name: 'Sylvester' },\n *     { id: 3, name: 'Jean-Claude' },\n * ]\n *\n * const MyComponent = () => {\n *     const listContext = useList({ data });\n *     return (\n *         <ListContextProvider value={listContext}>\n *             <Datagrid>\n *                 <TextField source=\"id\" />\n *                 <TextField source=\"name\" />\n *             </Datagrid>\n *         </ListContextProvider>\n *     );\n * };\n *\n * @param {UseListOptions} props\n * @param {RaRecord[]} props.data An array of records\n * @param {Boolean} props.isFetching: Optional. A boolean indicating whether the data is being loaded\n * @param {Boolean} props.isLoading: Optional. A boolean indicating whether the data has been loaded at least once\n * @param {Error | String} props.error: Optional. The error if any occurred while loading the data\n * @param {Object} props.filter: Optional. An object containing the filters applied on the data\n * @param {Number} props.page: Optional. The initial page index\n * @param {Number} props.perPage: Optional. The initial page size\n * @param {SortPayload} props.sort: Optional. The initial sort (field and order)\n * @param {filterCallback} prop.filterCallback Optional. A function that allows you to make a custom filter\n */\nexport const useList = <RecordType extends RaRecord = any>(\n    props: UseListOptions<RecordType>\n): UseListValue<RecordType> => {\n    const {\n        data,\n        error,\n        filter = defaultFilter,\n        isFetching = false,\n        isLoading = false,\n        page: initialPage = 1,\n        perPage: initialPerPage = 1000,\n        sort: initialSort,\n        filterCallback = (record: RecordType) => Boolean(record),\n    } = props;\n    const resource = useResourceContext(props);\n\n    const [fetchingState, setFetchingState] = useSafeSetState<boolean>(\n        isFetching\n    ) as [boolean, (isFetching: boolean) => void];\n\n    const [loadingState, setLoadingState] = useSafeSetState<boolean>(\n        isLoading\n    ) as [boolean, (isFetching: boolean) => void];\n\n    const [finalItems, setFinalItems] = useSafeSetState<{\n        data?: RecordType[];\n        total?: number;\n    }>(() => ({\n        data,\n        total: data ? data.length : undefined,\n    }));\n\n    // pagination logic\n    const { page, setPage, perPage, setPerPage } = usePaginationState({\n        page: initialPage,\n        perPage: initialPerPage,\n    });\n\n    // sort logic\n    const { sort, setSort: setSortState } = useSortState(initialSort);\n    const setSort = useCallback(\n        (sort: SortPayload) => {\n            setSortState(sort);\n            setPage(1);\n        },\n        [setPage, setSortState]\n    );\n\n    // selection logic\n    const [selectedIds, selectionModifiers] = useRecordSelection(resource);\n\n    // filter logic\n    const filterRef = useRef(filter);\n    const [displayedFilters, setDisplayedFilters] = useSafeSetState<{\n        [key: string]: boolean;\n    }>({});\n    const [filterValues, setFilterValues] = useSafeSetState<{\n        [key: string]: any;\n    }>(filter);\n    const hideFilter = useCallback(\n        (filterName: string) => {\n            setDisplayedFilters(previousState => {\n                const { [filterName]: _, ...newState } = previousState;\n                return newState;\n            });\n            setFilterValues(previousState => {\n                const { [filterName]: _, ...newState } = previousState;\n                return newState;\n            });\n        },\n        [setDisplayedFilters, setFilterValues]\n    );\n    const showFilter = useCallback(\n        (filterName: string, defaultValue: any) => {\n            setDisplayedFilters(previousState => ({\n                ...previousState,\n                [filterName]: true,\n            }));\n            setFilterValues(previousState =>\n                removeEmpty({\n                    ...previousState,\n                    [filterName]: defaultValue,\n                })\n            );\n        },\n        [setDisplayedFilters, setFilterValues]\n    );\n    const setFilters = useCallback(\n        (filters, displayedFilters) => {\n            setFilterValues(removeEmpty(filters));\n            if (displayedFilters) {\n                setDisplayedFilters(displayedFilters);\n            }\n            setPage(1);\n        },\n        [setDisplayedFilters, setFilterValues, setPage]\n    );\n    // handle filter prop change\n    useEffect(() => {\n        if (!isEqual(filter, filterRef.current)) {\n            filterRef.current = filter;\n            setFilterValues(filter);\n        }\n    });\n\n    // We do all the data processing (filtering, sorting, paginating) client-side\n    useEffect(\n        () => {\n            if (isLoading || !data) return;\n            let tempData = data;\n\n            // 1. filter\n            if (filterValues) {\n                const flattenFilterValues = flattenObject(filterValues);\n                tempData = data\n                    .filter(record =>\n                        Object.entries(flattenFilterValues).every(\n                            ([filterName, filterValue]) => {\n                                const recordValue = get(record, filterName);\n                                const result = Array.isArray(recordValue)\n                                    ? Array.isArray(filterValue)\n                                        ? recordValue.some(item =>\n                                              filterValue.includes(item)\n                                          )\n                                        : recordValue.includes(filterValue)\n                                    : Array.isArray(filterValue)\n                                    ? filterValue.includes(recordValue)\n                                    : filterValue == recordValue; // eslint-disable-line eqeqeq\n                                return result;\n                            }\n                        )\n                    )\n                    .filter(filterCallback);\n            }\n            const filteredLength = tempData.length;\n\n            // 2. sort\n            if (sort.field) {\n                tempData = tempData.sort((a, b) => {\n                    if (get(a, sort.field) > get(b, sort.field)) {\n                        return sort.order === 'ASC' ? 1 : -1;\n                    }\n                    if (get(a, sort.field) < get(b, sort.field)) {\n                        return sort.order === 'ASC' ? -1 : 1;\n                    }\n                    return 0;\n                });\n            }\n\n            // 3. paginate\n            tempData = tempData.slice((page - 1) * perPage, page * perPage);\n\n            setFinalItems({\n                data: tempData,\n                total: filteredLength,\n            });\n        }, // eslint-disable-next-line react-hooks/exhaustive-deps\n        [\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            JSON.stringify(data),\n            filterValues,\n            isLoading,\n            page,\n            perPage,\n            setFinalItems,\n            sort.field,\n            sort.order,\n        ]\n    );\n\n    useEffect(() => {\n        if (isFetching !== fetchingState) {\n            setFetchingState(isFetching);\n        }\n    }, [isFetching, fetchingState, setFetchingState]);\n\n    useEffect(() => {\n        if (isLoading !== loadingState) {\n            setLoadingState(isLoading);\n        }\n    }, [isLoading, loadingState, setLoadingState]);\n\n    return {\n        sort,\n        data: finalItems?.data,\n        defaultTitle: '',\n        error,\n        displayedFilters,\n        filterValues,\n        hasNextPage:\n            finalItems?.total == null\n                ? false\n                : page * perPage < finalItems.total,\n        hasPreviousPage: page > 1,\n        hideFilter,\n        isFetching: fetchingState,\n        isLoading: loadingState,\n        onSelect: selectionModifiers.select,\n        onToggleItem: selectionModifiers.toggle,\n        onUnselectItems: selectionModifiers.clearSelection,\n        page,\n        perPage,\n        resource: undefined,\n        refetch,\n        selectedIds,\n        setFilters,\n        setPage,\n        setPerPage,\n        setSort,\n        showFilter,\n        total: finalItems?.total,\n    };\n};\n\nexport interface UseListOptions<RecordType extends RaRecord = any> {\n    data?: RecordType[];\n    error?: any;\n    filter?: FilterPayload;\n    isFetching?: boolean;\n    isLoading?: boolean;\n    page?: number;\n    perPage?: number;\n    sort?: SortPayload;\n    resource?: string;\n    filterCallback?: (record: RecordType) => boolean;\n}\n\nexport type UseListValue<\n    RecordType extends RaRecord = any\n> = ListControllerResult<RecordType>;\n\nconst defaultFilter = {};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}