{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport { Typography } from '@mui/material';\nimport { useRecordContext, useTranslate } from 'ra-core';\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { fieldPropTypes } from './types';\n/**\n * Display a date value as a locale string.\n *\n * Uses Intl.DateTimeFormat() if available, passing the locales and options props as arguments.\n * If Intl is not available, it outputs date as is (and ignores the locales and options props).\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString\n * @example\n * <DateField source=\"published_at\" />\n * // renders the record { id: 1234, published_at: new Date('2012-11-07') } as\n * <span>07/11/2012</span>\n *\n * <DateField source=\"published_at\" className=\"red\" />\n * // renders the record { id: 1234, new Date('2012-11-07') } as\n * <span class=\"red\">07/11/2012</span>\n *\n * <DateField source=\"share\" options={{ weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }} />\n * // renders the record { id: 1234, new Date('2012-11-07') } as\n * <span>Wednesday, November 7, 2012</span>\n *\n * <DateField source=\"price\" locales=\"fr-FR\" options={{ weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }} />\n * // renders the record { id: 1234, new Date('2012-11-07') } as\n * <span>mercredi 7 novembre 2012</span>\n */\nexport var DateField = memo(function (props) {\n  var className = props.className,\n    emptyText = props.emptyText,\n    locales = props.locales,\n    options = props.options,\n    _a = props.showTime,\n    showTime = _a === void 0 ? false : _a,\n    _b = props.showDate,\n    showDate = _b === void 0 ? true : _b,\n    source = props.source,\n    rest = __rest(props, [\"className\", \"emptyText\", \"locales\", \"options\", \"showTime\", \"showDate\", \"source\"]);\n  var translate = useTranslate();\n  if (!showTime && !showDate) {\n    throw new Error('<DateField> cannot have showTime and showDate false at the same time');\n  }\n  var record = useRecordContext(props);\n  if (!record) {\n    return null;\n  }\n  var value = get(record, source);\n  if (value == null || value === '') {\n    return emptyText ? React.createElement(Typography, __assign({\n      component: \"span\",\n      variant: \"body2\",\n      className: className\n    }, sanitizeFieldRestProps(rest)), emptyText && translate(emptyText, {\n      _: emptyText\n    })) : null;\n  }\n  var date = value instanceof Date ? value : new Date(value);\n  var dateOptions = options;\n  if (typeof value === 'string' && value.length <= 10 && !showTime && !options) {\n    // Input is a date string (e.g. '2022-02-15') without time and time zone.\n    // Force timezone to UTC to fix issue with people in negative time zones\n    // who may see a different date when calling toLocaleDateString().\n    dateOptions = {\n      timeZone: 'UTC'\n    };\n  }\n  var dateString = '';\n  if (showTime && showDate) {\n    dateString = toLocaleStringSupportsLocales ? date.toLocaleString(locales, options) : date.toLocaleString();\n  } else if (showDate) {\n    dateString = toLocaleStringSupportsLocales ? date.toLocaleDateString(locales, dateOptions) : date.toLocaleDateString();\n  } else if (showTime) {\n    dateString = toLocaleStringSupportsLocales ? date.toLocaleTimeString(locales, options) : date.toLocaleTimeString();\n  }\n  return React.createElement(Typography, __assign({\n    component: \"span\",\n    variant: \"body2\",\n    className: className\n  }, sanitizeFieldRestProps(rest)), dateString);\n});\nDateField.propTypes = __assign(__assign(__assign({}, Typography.propTypes), fieldPropTypes), {\n  locales: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n  options: PropTypes.object,\n  showTime: PropTypes.bool,\n  showDate: PropTypes.bool\n});\nDateField.displayName = 'DateField';\nvar toLocaleStringSupportsLocales = function () {\n  // from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString\n  try {\n    new Date().toLocaleString('i');\n  } catch (error) {\n    return error instanceof RangeError;\n  }\n  return false;\n}();","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,IAAI,QAAY,OAAO;AAChC,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,GAAG,MAAM,YAAY;AAC5B,SAASC,UAAU,QAAyB,eAAe;AAC3D,SAASC,gBAAgB,EAAEC,YAAY,QAAQ,SAAS;AAExD,SAASC,sBAAsB,QAAQ,0BAA0B;AACjE,SAA+CC,cAAc,QAAQ,SAAS;AAE9E;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,OAAO,IAAMC,SAAS,GAAuBR,IAAI,CAAC,eAAK;EAE/C,aAAS,GAQTS,KAAK,UARI;IACTC,SAAS,GAOTD,KAAK,UAPI;IACTE,OAAO,GAMPF,KAAK,QANE;IACPG,OAAO,GAKPH,KAAK,QALE;IACPI,KAIAJ,KAAK,SAJW;IAAhBK,QAAQ,mBAAG,KAAK;IAChBC,KAGAN,KAAK,SAHU;IAAfO,QAAQ,mBAAG,IAAI;IACfC,MAAM,GAENR,KAAK,OAFC;IACHS,IAAI,UACPT,KAAK,EATH,kFASL,CADU;EAEX,IAAMU,SAAS,GAAGd,YAAY,EAAE;EAEhC,IAAI,CAACS,QAAQ,IAAI,CAACE,QAAQ,EAAE;IACxB,MAAM,IAAII,KAAK,CACX,sEAAsE,CACzE;;EAGL,IAAMC,MAAM,GAAGjB,gBAAgB,CAACK,KAAK,CAAC;EACtC,IAAI,CAACY,MAAM,EAAE;IACT,OAAO,IAAI;;EAGf,IAAMC,KAAK,GAAGpB,GAAG,CAACmB,MAAM,EAAEJ,MAAM,CAAC;EACjC,IAAIK,KAAK,IAAI,IAAI,IAAIA,KAAK,KAAK,EAAE,EAAE;IAC/B,OAAOZ,SAAS,GACZX,oBAACI,UAAU;MACPoB,SAAS,EAAC,MAAM;MAChBC,OAAO,EAAC,OAAO;MACfC,SAAS,EAAEA;IAAS,GAChBnB,sBAAsB,CAACY,IAAI,CAAC,GAE/BR,SAAS,IAAIS,SAAS,CAACT,SAAS,EAAE;MAAEgB,CAAC,EAAEhB;IAAS,CAAE,CAAC,CAC3C,GACb,IAAI;;EAGZ,IAAMiB,IAAI,GAAGL,KAAK,YAAYM,IAAI,GAAGN,KAAK,GAAG,IAAIM,IAAI,CAACN,KAAK,CAAC;EAC5D,IAAIO,WAAW,GAAGjB,OAAO;EACzB,IACI,OAAOU,KAAK,KAAK,QAAQ,IACzBA,KAAK,CAACQ,MAAM,IAAI,EAAE,IAClB,CAAChB,QAAQ,IACT,CAACF,OAAO,EACV;IACE;IACA;IACA;IACAiB,WAAW,GAAG;MAAEE,QAAQ,EAAE;IAAK,CAAE;;EAErC,IAAIC,UAAU,GAAG,EAAE;EACnB,IAAIlB,QAAQ,IAAIE,QAAQ,EAAE;IACtBgB,UAAU,GAAGC,6BAA6B,GACpCN,IAAI,CAACO,cAAc,CAACvB,OAAO,EAAEC,OAAO,CAAC,GACrCe,IAAI,CAACO,cAAc,EAAE;GAC9B,MAAM,IAAIlB,QAAQ,EAAE;IACjBgB,UAAU,GAAGC,6BAA6B,GACpCN,IAAI,CAACQ,kBAAkB,CAACxB,OAAO,EAAEkB,WAAW,CAAC,GAC7CF,IAAI,CAACQ,kBAAkB,EAAE;GAClC,MAAM,IAAIrB,QAAQ,EAAE;IACjBkB,UAAU,GAAGC,6BAA6B,GACpCN,IAAI,CAACS,kBAAkB,CAACzB,OAAO,EAAEC,OAAO,CAAC,GACzCe,IAAI,CAACS,kBAAkB,EAAE;;EAGnC,OACIrC,oBAACI,UAAU;IACPoB,SAAS,EAAC,MAAM;IAChBC,OAAO,EAAC,OAAO;IACfC,SAAS,EAAEA;EAAS,GAChBnB,sBAAsB,CAACY,IAAI,CAAC,GAE/Bc,UAAU,CACF;AAErB,CAAC,CAAC;AAEFxB,SAAS,CAAC6B,SAAS,kCAEZlC,UAAU,CAACkC,SAAS,GACpB9B,cAAc;EACjBI,OAAO,EAAEV,SAAS,CAACqC,SAAS,CAAC,CACzBrC,SAAS,CAACsC,MAAM,EAChBtC,SAAS,CAACuC,OAAO,CAACvC,SAAS,CAACsC,MAAM,CAAC,CACtC,CAAC;EACF3B,OAAO,EAAEX,SAAS,CAACwC,MAAM;EACzB3B,QAAQ,EAAEb,SAAS,CAACyC,IAAI;EACxB1B,QAAQ,EAAEf,SAAS,CAACyC;AAAI,EAC3B;AAEDlC,SAAS,CAACmC,WAAW,GAAG,WAAW;AAYnC,IAAMV,6BAA6B,GAAI;EACnC;EACA,IAAI;IACA,IAAIL,IAAI,EAAE,CAACM,cAAc,CAAC,GAAG,CAAC;GACjC,CAAC,OAAOU,KAAK,EAAE;IACZ,OAAOA,KAAK,YAAYC,UAAU;;EAEtC,OAAO,KAAK;AAChB,CAAC,EAAG","names":["React","memo","PropTypes","get","Typography","useRecordContext","useTranslate","sanitizeFieldRestProps","fieldPropTypes","DateField","props","emptyText","locales","options","_a","showTime","_b","showDate","source","rest","translate","Error","record","value","component","variant","className","_","date","Date","dateOptions","length","timeZone","dateString","toLocaleStringSupportsLocales","toLocaleString","toLocaleDateString","toLocaleTimeString","propTypes","oneOfType","string","arrayOf","object","bool","displayName","error","RangeError"],"sources":["/Users/paigedeveau/Desktop/se-diva-docs-frontend/bwmdn-admin-portal/node_modules/ra-ui-materialui/src/field/DateField.tsx"],"sourcesContent":["import * as React from 'react';\nimport { memo, FC } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport { Typography, TypographyProps } from '@mui/material';\nimport { useRecordContext, useTranslate } from 'ra-core';\n\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { PublicFieldProps, InjectedFieldProps, fieldPropTypes } from './types';\n\n/**\n * Display a date value as a locale string.\n *\n * Uses Intl.DateTimeFormat() if available, passing the locales and options props as arguments.\n * If Intl is not available, it outputs date as is (and ignores the locales and options props).\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString\n * @example\n * <DateField source=\"published_at\" />\n * // renders the record { id: 1234, published_at: new Date('2012-11-07') } as\n * <span>07/11/2012</span>\n *\n * <DateField source=\"published_at\" className=\"red\" />\n * // renders the record { id: 1234, new Date('2012-11-07') } as\n * <span class=\"red\">07/11/2012</span>\n *\n * <DateField source=\"share\" options={{ weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }} />\n * // renders the record { id: 1234, new Date('2012-11-07') } as\n * <span>Wednesday, November 7, 2012</span>\n *\n * <DateField source=\"price\" locales=\"fr-FR\" options={{ weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }} />\n * // renders the record { id: 1234, new Date('2012-11-07') } as\n * <span>mercredi 7 novembre 2012</span>\n */\nexport const DateField: FC<DateFieldProps> = memo(props => {\n    const {\n        className,\n        emptyText,\n        locales,\n        options,\n        showTime = false,\n        showDate = true,\n        source,\n        ...rest\n    } = props;\n    const translate = useTranslate();\n\n    if (!showTime && !showDate) {\n        throw new Error(\n            '<DateField> cannot have showTime and showDate false at the same time'\n        );\n    }\n\n    const record = useRecordContext(props);\n    if (!record) {\n        return null;\n    }\n\n    const value = get(record, source);\n    if (value == null || value === '') {\n        return emptyText ? (\n            <Typography\n                component=\"span\"\n                variant=\"body2\"\n                className={className}\n                {...sanitizeFieldRestProps(rest)}\n            >\n                {emptyText && translate(emptyText, { _: emptyText })}\n            </Typography>\n        ) : null;\n    }\n\n    const date = value instanceof Date ? value : new Date(value);\n    let dateOptions = options;\n    if (\n        typeof value === 'string' &&\n        value.length <= 10 &&\n        !showTime &&\n        !options\n    ) {\n        // Input is a date string (e.g. '2022-02-15') without time and time zone.\n        // Force timezone to UTC to fix issue with people in negative time zones\n        // who may see a different date when calling toLocaleDateString().\n        dateOptions = { timeZone: 'UTC' };\n    }\n    let dateString = '';\n    if (showTime && showDate) {\n        dateString = toLocaleStringSupportsLocales\n            ? date.toLocaleString(locales, options)\n            : date.toLocaleString();\n    } else if (showDate) {\n        dateString = toLocaleStringSupportsLocales\n            ? date.toLocaleDateString(locales, dateOptions)\n            : date.toLocaleDateString();\n    } else if (showTime) {\n        dateString = toLocaleStringSupportsLocales\n            ? date.toLocaleTimeString(locales, options)\n            : date.toLocaleTimeString();\n    }\n\n    return (\n        <Typography\n            component=\"span\"\n            variant=\"body2\"\n            className={className}\n            {...sanitizeFieldRestProps(rest)}\n        >\n            {dateString}\n        </Typography>\n    );\n});\n\nDateField.propTypes = {\n    // @ts-ignore\n    ...Typography.propTypes,\n    ...fieldPropTypes,\n    locales: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.arrayOf(PropTypes.string),\n    ]),\n    options: PropTypes.object,\n    showTime: PropTypes.bool,\n    showDate: PropTypes.bool,\n};\n\nDateField.displayName = 'DateField';\n\nexport interface DateFieldProps\n    extends PublicFieldProps,\n        InjectedFieldProps,\n        Omit<TypographyProps, 'textAlign'> {\n    locales?: string | string[];\n    options?: object;\n    showTime?: boolean;\n    showDate?: boolean;\n}\n\nconst toLocaleStringSupportsLocales = (() => {\n    // from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString\n    try {\n        new Date().toLocaleString('i');\n    } catch (error) {\n        return error instanceof RangeError;\n    }\n    return false;\n})();\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}