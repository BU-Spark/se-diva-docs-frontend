{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { ListContextProvider, useListContext, useReferenceArrayFieldController, ResourceContextProvider, useRecordContext, useResourceDefinition } from 'ra-core';\nimport { styled } from '@mui/material/styles';\nimport { fieldPropTypes } from './types';\nimport { LinearProgress } from '../layout';\nimport { SingleFieldList } from '../list/SingleFieldList';\nimport { ChipField } from './ChipField';\n/**\n * A container component that fetches records from another resource specified\n * by an array of *ids* in current record.\n *\n * You must define the fields to be passed to the iterator component as children.\n *\n * @example Display all the products of the current order as datagrid\n * // order = {\n * //   id: 123,\n * //   product_ids: [456, 457, 458],\n * // }\n * <ReferenceArrayField label=\"Products\" reference=\"products\" source=\"product_ids\">\n *     <Datagrid>\n *         <TextField source=\"id\" />\n *         <TextField source=\"description\" />\n *         <NumberField source=\"price\" options={{ style: 'currency', currency: 'USD' }} />\n *         <EditButton />\n *     </Datagrid>\n * </ReferenceArrayField>\n *\n * @example Display all the categories of the current product as a list of chips\n * // product = {\n * //   id: 456,\n * //   category_ids: [11, 22, 33],\n * // }\n * <ReferenceArrayField label=\"Categories\" reference=\"categories\" source=\"category_ids\">\n *     <SingleFieldList>\n *         <ChipField source=\"name\" />\n *     </SingleFieldList>\n * </ReferenceArrayField>\n *\n * By default, restricts the displayed values to 1000. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceArrayField perPage={10} reference=\"categories\" source=\"category_ids\">\n *    ...\n * </ReferenceArrayField>\n *\n * By default, the field displays the results in the order in which they are referenced\n * (i.e. in the order of the list of ids). You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceArrayField sort={{ field: 'name', order: 'ASC' }} reference=\"categories\" source=\"category_ids\">\n *    ...\n * </ReferenceArrayField>\n *\n * Also, you can filter the results to display only a subset of values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceArrayField filter={{ is_published: true }} reference=\"categories\" source=\"category_ids\">\n *    ...\n * </ReferenceArrayField>\n */\nexport var ReferenceArrayField = function (props) {\n  var filter = props.filter,\n    _a = props.page,\n    page = _a === void 0 ? 1 : _a,\n    perPage = props.perPage,\n    reference = props.reference,\n    resource = props.resource,\n    sort = props.sort,\n    source = props.source;\n  var record = useRecordContext(props);\n  var controllerProps = useReferenceArrayFieldController({\n    filter: filter,\n    page: page,\n    perPage: perPage,\n    record: record,\n    reference: reference,\n    resource: resource,\n    sort: sort,\n    source: source\n  });\n  return React.createElement(ResourceContextProvider, {\n    value: reference\n  }, React.createElement(ListContextProvider, {\n    value: controllerProps\n  }, React.createElement(PureReferenceArrayFieldView, __assign({}, props))));\n};\nReferenceArrayField.propTypes = __assign(__assign({}, fieldPropTypes), {\n  className: PropTypes.string,\n  children: PropTypes.node,\n  label: fieldPropTypes.label,\n  record: PropTypes.any,\n  reference: PropTypes.string.isRequired,\n  resource: PropTypes.string,\n  sortBy: PropTypes.string,\n  sortByOrder: fieldPropTypes.sortByOrder,\n  source: PropTypes.string.isRequired\n});\nexport var ReferenceArrayFieldView = function (props) {\n  var children = props.children,\n    pagination = props.pagination,\n    reference = props.reference,\n    className = props.className,\n    sx = props.sx;\n  var _a = useListContext(props),\n    isLoading = _a.isLoading,\n    total = _a.total;\n  var recordRepresentation = useResourceDefinition({\n    resource: reference\n  }).recordRepresentation;\n  var child = children ? children : React.createElement(SingleFieldList, null, React.createElement(ChipField, {\n    source: typeof recordRepresentation === 'string' ? recordRepresentation : 'id',\n    size: \"small\"\n  }));\n  return React.createElement(Root, {\n    className: className,\n    sx: sx\n  }, isLoading ? React.createElement(LinearProgress, {\n    className: ReferenceArrayFieldClasses.progress\n  }) : React.createElement(\"span\", null, child, pagination && total !== undefined ? pagination : null));\n};\nReferenceArrayFieldView.propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.node,\n  reference: PropTypes.string.isRequired\n};\nvar PREFIX = 'RaReferenceArrayField';\nexport var ReferenceArrayFieldClasses = {\n  progress: \"\".concat(PREFIX, \"-progress\")\n};\nvar Root = styled('div', {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var _b;\n  var theme = _a.theme;\n  return _b = {}, _b[\"& .\".concat(ReferenceArrayFieldClasses.progress)] = {\n    marginTop: theme.spacing(2)\n  }, _b;\n});\nvar PureReferenceArrayFieldView = memo(ReferenceArrayFieldView);","map":{"version":3,"mappings":"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","names":["React","memo","PropTypes","ListContextProvider","useListContext","useReferenceArrayFieldController","ResourceContextProvider","useRecordContext","useResourceDefinition","styled","fieldPropTypes","LinearProgress","SingleFieldList","ChipField","ReferenceArrayField","props","_a","page","perPage","reference","resource","sort","source","record","controllerProps","filter","value","PureReferenceArrayFieldView","propTypes","className","string","children","node","label","any","isRequired","sortBy","sortByOrder","ReferenceArrayFieldView","pagination","sx","isLoading","total","child","recordRepresentation","size","Root","ReferenceArrayFieldClasses","progress","undefined","PREFIX","name","overridesResolver","styles","root","theme","_b","marginTop","spacing"],"sources":["/Users/paigedeveau/Desktop/se-diva-docs-frontend/bwmdn-admin-portal/node_modules/ra-ui-materialui/src/field/ReferenceArrayField.tsx"],"sourcesContent":["import * as React from 'react';\nimport { FC, memo, ReactElement, ReactNode } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    ListContextProvider,\n    useListContext,\n    ListControllerProps,\n    useReferenceArrayFieldController,\n    SortPayload,\n    FilterPayload,\n    ResourceContextProvider,\n    useRecordContext,\n    useResourceDefinition,\n} from 'ra-core';\nimport { styled } from '@mui/material/styles';\nimport { SxProps } from '@mui/system';\n\nimport { fieldPropTypes, PublicFieldProps, InjectedFieldProps } from './types';\nimport { LinearProgress } from '../layout';\nimport { SingleFieldList } from '../list/SingleFieldList';\nimport { ChipField } from './ChipField';\n\n/**\n * A container component that fetches records from another resource specified\n * by an array of *ids* in current record.\n *\n * You must define the fields to be passed to the iterator component as children.\n *\n * @example Display all the products of the current order as datagrid\n * // order = {\n * //   id: 123,\n * //   product_ids: [456, 457, 458],\n * // }\n * <ReferenceArrayField label=\"Products\" reference=\"products\" source=\"product_ids\">\n *     <Datagrid>\n *         <TextField source=\"id\" />\n *         <TextField source=\"description\" />\n *         <NumberField source=\"price\" options={{ style: 'currency', currency: 'USD' }} />\n *         <EditButton />\n *     </Datagrid>\n * </ReferenceArrayField>\n *\n * @example Display all the categories of the current product as a list of chips\n * // product = {\n * //   id: 456,\n * //   category_ids: [11, 22, 33],\n * // }\n * <ReferenceArrayField label=\"Categories\" reference=\"categories\" source=\"category_ids\">\n *     <SingleFieldList>\n *         <ChipField source=\"name\" />\n *     </SingleFieldList>\n * </ReferenceArrayField>\n *\n * By default, restricts the displayed values to 1000. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceArrayField perPage={10} reference=\"categories\" source=\"category_ids\">\n *    ...\n * </ReferenceArrayField>\n *\n * By default, the field displays the results in the order in which they are referenced\n * (i.e. in the order of the list of ids). You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceArrayField sort={{ field: 'name', order: 'ASC' }} reference=\"categories\" source=\"category_ids\">\n *    ...\n * </ReferenceArrayField>\n *\n * Also, you can filter the results to display only a subset of values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceArrayField filter={{ is_published: true }} reference=\"categories\" source=\"category_ids\">\n *    ...\n * </ReferenceArrayField>\n */\nexport const ReferenceArrayField: FC<ReferenceArrayFieldProps> = props => {\n    const {\n        filter,\n        page = 1,\n        perPage,\n        reference,\n        resource,\n        sort,\n        source,\n    } = props;\n    const record = useRecordContext(props);\n    const controllerProps = useReferenceArrayFieldController({\n        filter,\n        page,\n        perPage,\n        record,\n        reference,\n        resource,\n        sort,\n        source,\n    });\n    return (\n        <ResourceContextProvider value={reference}>\n            <ListContextProvider value={controllerProps}>\n                <PureReferenceArrayFieldView {...props} />\n            </ListContextProvider>\n        </ResourceContextProvider>\n    );\n};\n\nReferenceArrayField.propTypes = {\n    ...fieldPropTypes,\n    className: PropTypes.string,\n    children: PropTypes.node,\n    label: fieldPropTypes.label,\n    record: PropTypes.any,\n    reference: PropTypes.string.isRequired,\n    resource: PropTypes.string,\n    sortBy: PropTypes.string,\n    sortByOrder: fieldPropTypes.sortByOrder,\n    source: PropTypes.string.isRequired,\n};\n\nexport interface ReferenceArrayFieldProps\n    extends PublicFieldProps,\n        InjectedFieldProps {\n    children?: ReactNode;\n    filter?: FilterPayload;\n    page?: number;\n    pagination?: ReactElement;\n    perPage?: number;\n    reference: string;\n    resource?: string;\n    sort?: SortPayload;\n    sx?: SxProps;\n}\n\nexport interface ReferenceArrayFieldViewProps\n    extends Omit<ReferenceArrayFieldProps, 'resource' | 'page' | 'perPage'>,\n        ListControllerProps {}\n\nexport const ReferenceArrayFieldView: FC<ReferenceArrayFieldViewProps> = props => {\n    const { children, pagination, reference, className, sx } = props;\n    const { isLoading, total } = useListContext(props);\n\n    const { recordRepresentation } = useResourceDefinition({\n        resource: reference,\n    });\n    let child = children ? (\n        children\n    ) : (\n        <SingleFieldList>\n            <ChipField\n                source={\n                    typeof recordRepresentation === 'string'\n                        ? recordRepresentation\n                        : 'id'\n                }\n                size=\"small\"\n            />\n        </SingleFieldList>\n    );\n\n    return (\n        <Root className={className} sx={sx}>\n            {isLoading ? (\n                <LinearProgress\n                    className={ReferenceArrayFieldClasses.progress}\n                />\n            ) : (\n                <span>\n                    {child}\n                    {pagination && total !== undefined ? pagination : null}\n                </span>\n            )}\n        </Root>\n    );\n};\n\nReferenceArrayFieldView.propTypes = {\n    className: PropTypes.string,\n    children: PropTypes.node,\n    reference: PropTypes.string.isRequired,\n};\n\nconst PREFIX = 'RaReferenceArrayField';\n\nexport const ReferenceArrayFieldClasses = {\n    progress: `${PREFIX}-progress`,\n};\n\nconst Root = styled('div', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    [`& .${ReferenceArrayFieldClasses.progress}`]: {\n        marginTop: theme.spacing(2),\n    },\n}));\n\nconst PureReferenceArrayFieldView = memo(ReferenceArrayFieldView);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}