{"ast":null,"code":"var __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport * as React from 'react';\nimport { useState, useCallback, useMemo } from 'react';\nimport { NotificationContext } from './NotificationContext';\nimport { AddNotificationContext } from './AddNotificationContext';\nexport var NotificationContextProvider = function (_a) {\n  var children = _a.children;\n  var _b = useState([]),\n    notifications = _b[0],\n    setNotifications = _b[1];\n  var addNotification = useCallback(function (notification) {\n    setNotifications(function (notifications) {\n      return __spreadArray(__spreadArray([], notifications, true), [notification], false);\n    });\n  }, []);\n  var takeNotification = useCallback(function () {\n    var notification = notifications[0],\n      rest = notifications.slice(1);\n    setNotifications(rest);\n    return notification;\n  }, [notifications]);\n  var resetNotifications = useCallback(function () {\n    setNotifications([]);\n  }, []);\n  var contextValue = useMemo(function () {\n    return {\n      notifications: notifications,\n      addNotification: addNotification,\n      takeNotification: takeNotification,\n      resetNotifications: resetNotifications\n    };\n  }, [notifications] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n  // we separate the addNotification context to avoid rerendering all components\n  // that depend on useNotify when a notification is dispatched\n  return React.createElement(NotificationContext.Provider, {\n    value: contextValue\n  }, React.createElement(AddNotificationContext.Provider, {\n    value: addNotification\n  }, children));\n};","map":{"version":3,"mappings":";;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,QAAQ,EAAEC,WAAW,EAAEC,OAAO,QAAQ,OAAO;AAGtD,SAASC,mBAAmB,QAAQ,uBAAuB;AAC3D,SAASC,sBAAsB,QAAQ,0BAA0B;AAEjE,OAAO,IAAMC,2BAA2B,GAAG,UAACC,EAAY;MAAVC,QAAQ;EAC5C,SAAoCP,QAAQ,CAC9C,EAAE,CACL;IAFMQ,aAAa;IAAEC,gBAAgB,QAErC;EAED,IAAMC,eAAe,GAAGT,WAAW,CAAC,UAACU,YAAiC;IAClEF,gBAAgB,CAAC,uBAAa;MAAI,uCAAID,aAAa,UAAEG,YAAY;IAA/B,CAAgC,CAAC;EACvE,CAAC,EAAE,EAAE,CAAC;EAEN,IAAMC,gBAAgB,GAAGX,WAAW,CAAC;IAC1B,gBAAY,GAAaO,aAAa,GAA1B;MAAKK,IAAI,GAAIL,aAAa,SAAjB;IAC5BC,gBAAgB,CAACI,IAAI,CAAC;IACtB,OAAOF,YAAY;EACvB,CAAC,EAAE,CAACH,aAAa,CAAC,CAAC;EAEnB,IAAMM,kBAAkB,GAAGb,WAAW,CAAC;IACnCQ,gBAAgB,CAAC,EAAE,CAAC;EACxB,CAAC,EAAE,EAAE,CAAC;EAEN,IAAMM,YAAY,GAAGb,OAAO,CACxB;IAAM,OAAC;MACHM,aAAa;MACbE,eAAe;MACfE,gBAAgB;MAChBE,kBAAkB;KACrB;EALK,CAKJ,EACF,CAACN,aAAa,CAAC,CAAC;EAAA,CACnB;EAED;EACA;EACA,OACIT,oBAACI,mBAAmB,CAACa,QAAQ;IAACC,KAAK,EAAEF;EAAY,GAC7ChB,oBAACK,sBAAsB,CAACY,QAAQ;IAACC,KAAK,EAAEP;EAAe,GAClDH,QAAQ,CACqB,CACP;AAEvC,CAAC","names":["React","useState","useCallback","useMemo","NotificationContext","AddNotificationContext","NotificationContextProvider","_a","children","notifications","setNotifications","addNotification","notification","takeNotification","rest","resetNotifications","contextValue","Provider","value"],"sources":["/Users/paigedeveau/Desktop/se-diva-docs-frontend/bwmdn-admin-portal/node_modules/ra-core/src/notification/NotificationContextProvider.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useState, useCallback, useMemo } from 'react';\n\nimport { NotificationPayload } from './types';\nimport { NotificationContext } from './NotificationContext';\nimport { AddNotificationContext } from './AddNotificationContext';\n\nexport const NotificationContextProvider = ({ children }) => {\n    const [notifications, setNotifications] = useState<NotificationPayload[]>(\n        []\n    );\n\n    const addNotification = useCallback((notification: NotificationPayload) => {\n        setNotifications(notifications => [...notifications, notification]);\n    }, []);\n\n    const takeNotification = useCallback(() => {\n        const [notification, ...rest] = notifications;\n        setNotifications(rest);\n        return notification;\n    }, [notifications]);\n\n    const resetNotifications = useCallback(() => {\n        setNotifications([]);\n    }, []);\n\n    const contextValue = useMemo(\n        () => ({\n            notifications,\n            addNotification,\n            takeNotification,\n            resetNotifications,\n        }),\n        [notifications] // eslint-disable-line react-hooks/exhaustive-deps\n    );\n\n    // we separate the addNotification context to avoid rerendering all components\n    // that depend on useNotify when a notification is dispatched\n    return (\n        <NotificationContext.Provider value={contextValue}>\n            <AddNotificationContext.Provider value={addNotification}>\n                {children}\n            </AddNotificationContext.Provider>\n        </NotificationContext.Provider>\n    );\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}