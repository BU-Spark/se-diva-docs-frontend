{"version":3,"sources":["../src/index.ts","../src/Admin.tsx","../src/defaultI18nProvider.ts"],"sourcesContent":["export * from './Admin';\nexport * from './defaultI18nProvider';\nexport * from 'ra-core';\nexport * from 'ra-ui-materialui';\n","import * as React from 'react';\nimport { ComponentType } from 'react';\nimport { CoreAdminProps, localStorageStore } from 'ra-core';\nimport { AdminUI, AdminContext } from 'ra-ui-materialui';\nimport { ThemeOptions } from '@mui/material';\n\nimport { defaultI18nProvider } from './defaultI18nProvider';\n\n/**\n * Main admin component, entry point to the application.\n *\n * Initializes the various contexts (auth, data, i18n, router)\n * and defines the main routes.\n *\n * Expects a list of resources as children, or a function returning a list of\n * resources based on the permissions.\n *\n * @example\n *\n * // static list of resources\n *\n * import {\n *     Admin,\n *     Resource,\n *     ListGuesser,\n *     useDataProvider,\n * } from 'react-admin';\n *\n * const App = () => (\n *     <Admin dataProvider={myDataProvider}>\n *         <Resource name=\"posts\" list={ListGuesser} />\n *     </Admin>\n * );\n *\n * // dynamic list of resources based on permissions\n *\n * import {\n *     Admin,\n *     Resource,\n *     ListGuesser,\n *     useDataProvider,\n * } from 'react-admin';\n *\n * const App = () => (\n *     <Admin dataProvider={myDataProvider}>\n *         {permissions => [\n *             <Resource name=\"posts\" key=\"posts\" list={ListGuesser} />,\n *         ]}\n *     </Admin>\n * );\n *\n * // If you have to build a dynamic list of resources using a side effect,\n * // you can't use <Admin>. But as it delegates to sub components,\n * // it's relatively straightforward to replace it:\n *\n * import * as React from 'react';\nimport { useEffect, useState } from 'react';\n * import {\n *     AdminContext,\n *     AdminUI,\n *     defaultI18nProvider,\n *     localStorageStore,\n *     Resource,\n *     ListGuesser,\n *     useDataProvider,\n * } from 'react-admin';\n *\n * const store = localStorageStore();\n *\n * const App = () => (\n *     <AdminContext dataProvider={myDataProvider} i18nProvider={defaultI18nProvider} store={store}>\n *         <Resources />\n *     </AdminContext>\n * );\n *\n * const Resources = () => {\n *     const [resources, setResources] = useState([]);\n *     const dataProvider = useDataProvider();\n *     useEffect(() => {\n *         dataProvider.introspect().then(r => setResources(r));\n *     }, []);\n *\n *     return (\n *         <AdminUI>\n *             {resources.map(resource => (\n *                 <Resource name={resource.name} key={resource.key} list={ListGuesser} />\n *             ))}\n *         </AdminUI>\n *     );\n * };\n */\nexport const Admin = (props: AdminProps) => {\n    const {\n        authProvider,\n        basename,\n        catchAll,\n        children,\n        dashboard,\n        dataProvider,\n        disableTelemetry,\n        history,\n        i18nProvider,\n        layout,\n        loading,\n        loginPage,\n        menu, // deprecated, use a custom layout instead\n        notification,\n        queryClient,\n        requireAuth,\n        store,\n        ready,\n        theme,\n        title = 'React Admin',\n    } = props;\n\n    if (loginPage === true && process.env.NODE_ENV !== 'production') {\n        console.warn(\n            'You passed true to the loginPage prop. You must either pass false to disable it or a component class to customize it'\n        );\n    }\n\n    return (\n        <AdminContext\n            authProvider={authProvider}\n            basename={basename}\n            dataProvider={dataProvider}\n            i18nProvider={i18nProvider}\n            store={store}\n            history={history}\n            queryClient={queryClient}\n            theme={theme}\n        >\n            <AdminUI\n                layout={layout}\n                dashboard={dashboard}\n                disableTelemetry={disableTelemetry}\n                menu={menu}\n                catchAll={catchAll}\n                title={title}\n                loading={loading}\n                loginPage={loginPage}\n                notification={notification}\n                requireAuth={requireAuth}\n                ready={ready}\n            >\n                {children}\n            </AdminUI>\n        </AdminContext>\n    );\n};\n\nAdmin.defaultProps = {\n    i18nProvider: defaultI18nProvider,\n    store: localStorageStore(),\n};\n\nexport default Admin;\n\nexport interface AdminProps extends CoreAdminProps {\n    theme?: ThemeOptions;\n    notification?: ComponentType;\n}\n","import defaultMessages from 'ra-language-english';\nimport polyglotI18nProvider from 'ra-i18n-polyglot';\n\nexport const defaultI18nProvider = polyglotI18nProvider(\n    () => defaultMessages,\n    'en',\n    {\n        allowMissing: true,\n    }\n);\n"],"mappings":"8oBAAA,0ECAA,MAAuB,oBAEvB,EAAkD,mBAClD,EAAsC,4BCHtC,MAA4B,kCAC5B,EAAiC,+BAEpB,EAAsB,cAC/B,IAAM,UACN,KACA,CACI,aAAc,EAClB,CACJ,EDkFO,GAAM,GAAQ,EAAC,GAAsB,CACxC,GAAM,CACF,eACA,WACA,WACA,WACA,YACA,eACA,mBACA,UACA,eACA,SACA,UACA,YACA,OACA,eACA,cACA,cACA,QACA,QACA,QACA,QAAQ,eACR,EAEJ,MAAI,KAAc,IAAQ,QAAQ,IAAI,WAAa,cAC/C,QAAQ,KACJ,sHACJ,EAIA,gBAAC,gBACG,aAAc,EACd,SAAU,EACV,aAAc,EACd,aAAc,EACd,MAAO,EACP,QAAS,EACT,YAAa,EACb,MAAO,GAEP,gBAAC,WACG,OAAQ,EACR,UAAW,EACX,iBAAkB,EAClB,KAAM,EACN,SAAU,EACV,MAAO,EACP,QAAS,EACT,UAAW,EACX,aAAc,EACd,YAAa,EACb,MAAO,GAEN,CACL,CACJ,CAER,EA1DqB,SA4DrB,EAAM,aAAe,CACjB,aAAc,EACd,MAAO,wBAAkB,CAC7B,EDxJA,IAAc,mBAFd,gBAGA,IAAc,4BAHd","names":[]}