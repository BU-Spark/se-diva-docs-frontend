{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport { RecordContextProvider } from '../record/RecordContext';\nimport { CreateContext } from './CreateContext';\nimport { SaveContextProvider, usePickSaveContext } from '../saveContext';\n/**\n * Create a Create Context.\n *\n * @example\n *\n * const MyCreate = (props) => {\n *     const controllerProps = useCreateController(props);\n *     return (\n *         <CreateContextProvider value={controllerProps}>\n *             <MyCreateView>\n *         </CreateContextProvider>\n *     );\n * };\n *\n * const MyCreateView = () => {\n *     const record = useRecordContext();\n *     // or, to rerender only when the save operation change but not data\n *     const { saving } = useCreateContext();\n * }\n *\n * @see CreateContext\n * @see RecordContext\n */\nexport var CreateContextProvider = function (_a) {\n  var children = _a.children,\n    value = _a.value;\n  return React.createElement(CreateContext.Provider, {\n    value: value\n  }, React.createElement(SaveContextProvider, {\n    value: __assign(__assign({}, usePickSaveContext(value)), {\n      mutationMode: 'pessimistic'\n    })\n  }, React.createElement(RecordContextProvider, {\n    value: value && value.record\n  }, children)));\n};","map":{"version":3,"mappings":";;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAI9B,SAASC,qBAAqB,QAAQ,yBAAyB;AAC/D,SAASC,aAAa,QAAQ,iBAAiB;AAE/C,SAASC,mBAAmB,EAAEC,kBAAkB,QAAQ,gBAAgB;AAExE;;;;;;;;;;;;;;;;;;;;;;;AAuBA,OAAO,IAAMC,qBAAqB,GAAG,UAACC,EAMrC;MALGC,QAAQ;IACRC,KAAK;EAIH,OACFR,oBAACE,aAAa,CAACO,QAAQ;IAACD,KAAK,EAAEA;EAAK,GAChCR,oBAACG,mBAAmB;IAChBK,KAAK,wBACEJ,kBAAkB,CAACI,KAAK,CAAC;MAC5BE,YAAY,EAAE;IAAa;EAAA,GAG/BV,oBAACC,qBAAqB;IAClBO,KAAK,EAAEA,KAAK,IAAIA,KAAK,CAACG;EAAM,GAE3BJ,QAAQ,CACW,CACN,CACD;AAdvB,CAeL","names":["React","RecordContextProvider","CreateContext","SaveContextProvider","usePickSaveContext","CreateContextProvider","_a","children","value","Provider","mutationMode","record"],"sources":["/Users/paigedeveau/Desktop/se-diva-docs-frontend/bwmdn-admin-portal/node_modules/ra-core/src/controller/create/CreateContextProvider.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactNode } from 'react';\n\nimport { RaRecord } from '../../types';\nimport { RecordContextProvider } from '../record/RecordContext';\nimport { CreateContext } from './CreateContext';\nimport { CreateControllerResult } from './useCreateController';\nimport { SaveContextProvider, usePickSaveContext } from '../saveContext';\n\n/**\n * Create a Create Context.\n *\n * @example\n *\n * const MyCreate = (props) => {\n *     const controllerProps = useCreateController(props);\n *     return (\n *         <CreateContextProvider value={controllerProps}>\n *             <MyCreateView>\n *         </CreateContextProvider>\n *     );\n * };\n *\n * const MyCreateView = () => {\n *     const record = useRecordContext();\n *     // or, to rerender only when the save operation change but not data\n *     const { saving } = useCreateContext();\n * }\n *\n * @see CreateContext\n * @see RecordContext\n */\nexport const CreateContextProvider = ({\n    children,\n    value,\n}: {\n    children: ReactNode;\n    value: CreateControllerResult;\n}) => (\n    <CreateContext.Provider value={value}>\n        <SaveContextProvider\n            value={{\n                ...usePickSaveContext(value),\n                mutationMode: 'pessimistic',\n            }}\n        >\n            <RecordContextProvider<Partial<RaRecord>>\n                value={value && value.record}\n            >\n                {children}\n            </RecordContextProvider>\n        </SaveContextProvider>\n    </CreateContext.Provider>\n);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}