{"ast":null,"code":"import { createContext } from 'react';\n/**\n * Context to store choices and functions to retrieve them.\n *\n * Use the useChoicesContext() hook to read the context.\n */\nexport var ChoicesContext = createContext(undefined);","map":{"version":3,"mappings":"AAAA,SAASA,aAAa,QAAQ,OAAO;AAIrC;;;;;AAKA,OAAO,IAAMC,cAAc,GAAGD,aAAa,CACvCE,SAAS,CACZ","names":["createContext","ChoicesContext","undefined"],"sources":["/Users/paigedeveau/node_modules/ra-core/src/form/choices/ChoicesContext.ts"],"sourcesContent":["import { createContext } from 'react';\nimport { UseGetListHookValue } from '../../dataProvider/useGetList';\nimport { FilterPayload, RaRecord, SortPayload } from '../../types';\n\n/**\n * Context to store choices and functions to retrieve them.\n *\n * Use the useChoicesContext() hook to read the context.\n */\nexport const ChoicesContext = createContext<ChoicesContextValue | undefined>(\n    undefined\n);\n\nexport type ChoicesContextValue<RecordType extends RaRecord = any> = {\n    allChoices: RecordType[];\n    availableChoices: RecordType[];\n    displayedFilters: any;\n    error?: any;\n    filter?: FilterPayload;\n    filterValues: any;\n    hasNextPage: boolean;\n    hasPreviousPage: boolean;\n    hideFilter: (filterName: string) => void;\n    isFetching: boolean;\n    isLoading: boolean;\n    page: number;\n    perPage: number;\n    refetch: (() => void) | UseGetListHookValue<RecordType>['refetch'];\n    resource: string;\n    selectedChoices: RecordType[];\n    setFilters: (\n        filters: any,\n        displayedFilters: any,\n        debounce?: boolean\n    ) => void;\n    setPage: (page: number) => void;\n    setPerPage: (page: number) => void;\n    setSort: (sort: SortPayload) => void;\n    showFilter: (filterName: string, defaultValue: any) => void;\n    sort: SortPayload;\n    source: string;\n    total: number;\n    isFromReference: boolean;\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}