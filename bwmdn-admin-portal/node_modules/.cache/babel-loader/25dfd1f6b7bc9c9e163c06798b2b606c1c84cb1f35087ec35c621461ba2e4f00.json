{"ast":null,"code":"import * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport { I18nContext } from './I18nContext';\nimport { useStore } from '../store/useStore';\nimport { useNotify } from '../notification';\n/**\n * Store the i18nProvider in a context, and rerender children when the locale changes\n */\nexport var I18nContextProvider = function (_a) {\n  var _b = _a.value,\n    value = _b === void 0 ? defaulti18nContext : _b,\n    children = _a.children;\n  var locale = useStore('locale')[0];\n  var notify = useNotify();\n  var _c = useState(0),\n    key = _c[0],\n    setKey = _c[1];\n  // to avoid blinking effect, delay first render if the user has a non-default locale\n  var _d = useState(locale === value.getLocale()),\n    isInitialized = _d[0],\n    setInitialized = _d[1];\n  // watch store for locale changes\n  useEffect(function () {\n    if (locale && value.getLocale() !== locale) {\n      new Promise(function (resolve) {\n        // so we systematically return a Promise for the messages\n        // i18nProvider may return a Promise for language changes,\n        resolve(value.changeLocale(locale));\n      }).then(function () {\n        // Force full page re-render.\n        // This is slow on locale change, but it's a good way\n        // to avoid having one subscription to the locale\n        // for each call to translate()\n        setKey(function (key) {\n          return key + 1;\n        });\n        setInitialized(true);\n      }).catch(function (error) {\n        setInitialized(true);\n        notify('ra.notification.i18n_error', {\n          type: 'error'\n        });\n        console.error(error);\n      });\n    } else {\n      setInitialized(true);\n    }\n  }, [value, locale, notify]);\n  return isInitialized ? React.createElement(I18nContext.Provider, {\n    value: value,\n    key: key\n  }, children) : null;\n};\nvar defaulti18nContext = {\n  translate: function (x) {\n    return x;\n  },\n  changeLocale: function () {\n    return Promise.resolve();\n  },\n  getLocale: function () {\n    return 'en';\n  }\n};","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,SAAS,EAAEC,QAAQ,QAAmB,OAAO;AAEtD,SAASC,WAAW,QAAQ,eAAe;AAC3C,SAASC,QAAQ,QAAQ,mBAAmB;AAC5C,SAASC,SAAS,QAAQ,iBAAiB;AAG3C;;;AAGA,OAAO,IAAMC,mBAAmB,GAAG,UAACC,EAGT;MAFvBC,aAA0B;IAA1BC,KAAK,mBAAGC,kBAAkB;IAC1BC,QAAQ;EAED,UAAM,GAAIP,QAAQ,CAAC,QAAQ,CAAC,GAAtB;EACb,IAAMQ,MAAM,GAAGP,SAAS,EAAE;EACpB,SAAgBH,QAAQ,CAAC,CAAC,CAAC;IAA1BW,GAAG;IAAEC,MAAM,QAAe;EACjC;EACM,SAAkCZ,QAAQ,CAC5Ca,MAAM,KAAKN,KAAK,CAACO,SAAS,EAAE,CAC/B;IAFMC,aAAa;IAAEC,cAAc,QAEnC;EAED;EACAjB,SAAS,CAAC;IACN,IAAIc,MAAM,IAAIN,KAAK,CAACO,SAAS,EAAE,KAAKD,MAAM,EAAE;MACxC,IAAII,OAAO,CAAC,iBAAO;QACf;QACA;QACAC,OAAO,CAACX,KAAK,CAACY,YAAY,CAACN,MAAM,CAAC,CAAC;MACvC,CAAC,CAAC,CACGO,IAAI,CAAC;QACF;QACA;QACA;QACA;QACAR,MAAM,CAAC,aAAG;UAAI,UAAG,GAAG,CAAC;QAAP,CAAO,CAAC;QACtBI,cAAc,CAAC,IAAI,CAAC;MACxB,CAAC,CAAC,CACDK,KAAK,CAAC,eAAK;QACRL,cAAc,CAAC,IAAI,CAAC;QACpBN,MAAM,CAAC,4BAA4B,EAAE;UAAEY,IAAI,EAAE;QAAO,CAAE,CAAC;QACvDC,OAAO,CAACC,KAAK,CAACA,KAAK,CAAC;MACxB,CAAC,CAAC;KACT,MAAM;MACHR,cAAc,CAAC,IAAI,CAAC;;EAE5B,CAAC,EAAE,CAACT,KAAK,EAAEM,MAAM,EAAEH,MAAM,CAAC,CAAC;EAE3B,OAAOK,aAAa,GAChBjB,oBAACG,WAAW,CAACwB,QAAQ;IAAClB,KAAK,EAAEA,KAAK;IAAEI,GAAG,EAAEA;EAAG,GACvCF,QAAQ,CACU,GACvB,IAAI;AACZ,CAAC;AAOD,IAAMD,kBAAkB,GAAG;EACvBkB,SAAS,EAAE,WAAC;IAAI,QAAC;EAAD,CAAC;EACjBP,YAAY,EAAE;IAAM,cAAO,CAACD,OAAO,EAAE;EAAjB,CAAiB;EACrCJ,SAAS,EAAE;IAAM,WAAI;EAAJ;CACpB","names":["React","useEffect","useState","I18nContext","useStore","useNotify","I18nContextProvider","_a","_b","value","defaulti18nContext","children","notify","key","setKey","locale","getLocale","isInitialized","setInitialized","Promise","resolve","changeLocale","then","catch","type","console","error","Provider","translate"],"sources":["/Users/paigedeveau/Desktop/se-diva-docs-frontend/bwmdn-admin-portal/node_modules/ra-core/src/i18n/I18nContextProvider.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useEffect, useState, ReactNode } from 'react';\n\nimport { I18nContext } from './I18nContext';\nimport { useStore } from '../store/useStore';\nimport { useNotify } from '../notification';\nimport { I18nProvider } from '../types';\n\n/**\n * Store the i18nProvider in a context, and rerender children when the locale changes\n */\nexport const I18nContextProvider = ({\n    value = defaulti18nContext,\n    children,\n}: I18nContextProviderProps) => {\n    const [locale] = useStore('locale');\n    const notify = useNotify();\n    const [key, setKey] = useState(0);\n    // to avoid blinking effect, delay first render if the user has a non-default locale\n    const [isInitialized, setInitialized] = useState(\n        locale === value.getLocale()\n    );\n\n    // watch store for locale changes\n    useEffect(() => {\n        if (locale && value.getLocale() !== locale) {\n            new Promise(resolve => {\n                // so we systematically return a Promise for the messages\n                // i18nProvider may return a Promise for language changes,\n                resolve(value.changeLocale(locale));\n            })\n                .then(() => {\n                    // Force full page re-render.\n                    // This is slow on locale change, but it's a good way\n                    // to avoid having one subscription to the locale\n                    // for each call to translate()\n                    setKey(key => key + 1);\n                    setInitialized(true);\n                })\n                .catch(error => {\n                    setInitialized(true);\n                    notify('ra.notification.i18n_error', { type: 'error' });\n                    console.error(error);\n                });\n        } else {\n            setInitialized(true);\n        }\n    }, [value, locale, notify]);\n\n    return isInitialized ? (\n        <I18nContext.Provider value={value} key={key}>\n            {children}\n        </I18nContext.Provider>\n    ) : null;\n};\n\nexport interface I18nContextProviderProps {\n    value: I18nProvider;\n    children: ReactNode;\n}\n\nconst defaulti18nContext = {\n    translate: x => x,\n    changeLocale: () => Promise.resolve(),\n    getLocale: () => 'en',\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}