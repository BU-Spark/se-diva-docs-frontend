{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport { useQuery } from 'react-query';\nimport { useLocation } from 'react-router';\nimport { useRedirect } from '../routing';\nimport useAuthProvider from './useAuthProvider';\nimport useLogout from './useLogout';\n/**\n * This hook calls the `authProvider.handleCallback()` method on mount. This is meant to be used in a route called\n * by an external authentication service (e.g. Auth0) after the user has logged in.\n * By default, it redirects to application home page upon success, or to the `redirectTo` location returned by `authProvider. handleCallback`.\n *\n * @returns An object containing { isLoading, data, error, refetch }.\n */\nexport var useHandleAuthCallback = function (options) {\n  var authProvider = useAuthProvider();\n  var redirect = useRedirect();\n  var logout = useLogout();\n  var location = useLocation();\n  var locationState = location.state;\n  var nextPathName = locationState && locationState.nextPathname;\n  var nextSearch = locationState && locationState.nextSearch;\n  var defaultRedirectUrl = nextPathName ? nextPathName + nextSearch : '/';\n  return useQuery(['auth', 'handleCallback'], function () {\n    return authProvider.handleCallback();\n  }, __assign({\n    retry: false,\n    onSuccess: function (data) {\n      var _a;\n      // AuthProviders relying on a third party services redirect back to the app can't\n      // use the location state to store the path on which the user was before the login.\n      // So we support a fallback on the localStorage.\n      var previousLocation = localStorage.getItem(PreviousLocationStorageKey);\n      var redirectTo = (_a = data === null || data === void 0 ? void 0 : data.redirectTo) !== null && _a !== void 0 ? _a : previousLocation;\n      if (redirectTo === false) {\n        return;\n      }\n      redirect(redirectTo !== null && redirectTo !== void 0 ? redirectTo : defaultRedirectUrl);\n    },\n    onError: function (err) {\n      var _a = err !== null && err !== void 0 ? err : {},\n        _b = _a.redirectTo,\n        redirectTo = _b === void 0 ? false : _b,\n        _c = _a.logoutOnFailure,\n        logoutOnFailure = _c === void 0 ? true : _c;\n      if (logoutOnFailure) {\n        logout({}, redirectTo);\n      }\n      if (redirectTo === false) {\n        return;\n      }\n      redirect(redirectTo);\n    }\n  }, options));\n};\n/**\n * Key used to store the previous location in localStorage.\n * Used by the useHandleAuthCallback hook to redirect the user to their previous location after a successful login.\n */\nexport var PreviousLocationStorageKey = '@react-admin/nextPathname';","map":{"version":3,"mappings":";;;;;;;;;;AAAA,SAASA,QAAQ,QAAyB,aAAa;AACvD,SAASC,WAAW,QAAQ,cAAc;AAC1C,SAASC,WAAW,QAAQ,YAAY;AAExC,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAOC,SAAS,MAAM,aAAa;AAEnC;;;;;;;AAOA,OAAO,IAAMC,qBAAqB,GAAG,UACjCC,OAAqE;EAErE,IAAMC,YAAY,GAAGJ,eAAe,EAAE;EACtC,IAAMK,QAAQ,GAAGN,WAAW,EAAE;EAC9B,IAAMO,MAAM,GAAGL,SAAS,EAAE;EAC1B,IAAMM,QAAQ,GAAGT,WAAW,EAAE;EAC9B,IAAMU,aAAa,GAAGD,QAAQ,CAACE,KAAY;EAC3C,IAAMC,YAAY,GAAGF,aAAa,IAAIA,aAAa,CAACG,YAAY;EAChE,IAAMC,UAAU,GAAGJ,aAAa,IAAIA,aAAa,CAACI,UAAU;EAC5D,IAAMC,kBAAkB,GAAGH,YAAY,GAAGA,YAAY,GAAGE,UAAU,GAAG,GAAG;EAEzE,OAAOf,QAAQ,CACX,CAAC,MAAM,EAAE,gBAAgB,CAAC,EAC1B;IAAM,mBAAY,CAACiB,cAAc,EAAE;EAA7B,CAA6B;IAE/BC,KAAK,EAAE,KAAK;IACZC,SAAS,EAAE,cAAI;;MACX;MACA;MACA;MACA,IAAMC,gBAAgB,GAAGC,YAAY,CAACC,OAAO,CACzCC,0BAA0B,CAC7B;MACD,IAAMC,UAAU,GACZ,MAACC,IAA2B,aAA3BA,IAAI,uBAAJA,IAAI,CAAyBD,UAAU,mCACxCJ,gBAAgB;MAEpB,IAAII,UAAU,KAAK,KAAK,EAAE;QACtB;;MAGJhB,QAAQ,CAACgB,UAAU,aAAVA,UAAU,cAAVA,UAAU,GAAIR,kBAAkB,CAAC;IAC9C,CAAC;IACDU,OAAO,EAAE,aAAG;MACF,SAAkDC,GAAG,aAAHA,GAAG,cAAHA,GAAG,GACvD,EAAyB;QADrBC,kBAAkB;QAAlBJ,UAAU,mBAAG,KAAK;QAAEK,uBAAsB;QAAtBC,eAAe,mBAAG,IAAI,KACrB;MAE7B,IAAIA,eAAe,EAAE;QACjBrB,MAAM,CAAC,EAAE,EAAEe,UAAU,CAAC;;MAE1B,IAAIA,UAAU,KAAK,KAAK,EAAE;QACtB;;MAGJhB,QAAQ,CAACgB,UAAU,CAAC;IACxB;EAAC,GACElB,OAAO,EAEjB;AACL,CAAC;AAED;;;;AAIA,OAAO,IAAMiB,0BAA0B,GAAG,2BAA2B","names":["useQuery","useLocation","useRedirect","useAuthProvider","useLogout","useHandleAuthCallback","options","authProvider","redirect","logout","location","locationState","state","nextPathName","nextPathname","nextSearch","defaultRedirectUrl","handleCallback","retry","onSuccess","previousLocation","localStorage","getItem","PreviousLocationStorageKey","redirectTo","data","onError","err","_b","_c","logoutOnFailure"],"sources":["/Users/paigedeveau/node_modules/ra-core/src/auth/useHandleAuthCallback.ts"],"sourcesContent":["import { useQuery, UseQueryOptions } from 'react-query';\nimport { useLocation } from 'react-router';\nimport { useRedirect } from '../routing';\nimport { AuthProvider, AuthRedirectResult } from '../types';\nimport useAuthProvider from './useAuthProvider';\nimport useLogout from './useLogout';\n\n/**\n * This hook calls the `authProvider.handleCallback()` method on mount. This is meant to be used in a route called\n * by an external authentication service (e.g. Auth0) after the user has logged in.\n * By default, it redirects to application home page upon success, or to the `redirectTo` location returned by `authProvider. handleCallback`.\n *\n * @returns An object containing { isLoading, data, error, refetch }.\n */\nexport const useHandleAuthCallback = (\n    options?: UseQueryOptions<ReturnType<AuthProvider['handleCallback']>>\n) => {\n    const authProvider = useAuthProvider();\n    const redirect = useRedirect();\n    const logout = useLogout();\n    const location = useLocation();\n    const locationState = location.state as any;\n    const nextPathName = locationState && locationState.nextPathname;\n    const nextSearch = locationState && locationState.nextSearch;\n    const defaultRedirectUrl = nextPathName ? nextPathName + nextSearch : '/';\n\n    return useQuery(\n        ['auth', 'handleCallback'],\n        () => authProvider.handleCallback(),\n        {\n            retry: false,\n            onSuccess: data => {\n                // AuthProviders relying on a third party services redirect back to the app can't\n                // use the location state to store the path on which the user was before the login.\n                // So we support a fallback on the localStorage.\n                const previousLocation = localStorage.getItem(\n                    PreviousLocationStorageKey\n                );\n                const redirectTo =\n                    (data as AuthRedirectResult)?.redirectTo ??\n                    previousLocation;\n\n                if (redirectTo === false) {\n                    return;\n                }\n\n                redirect(redirectTo ?? defaultRedirectUrl);\n            },\n            onError: err => {\n                const { redirectTo = false, logoutOnFailure = true } = (err ??\n                    {}) as AuthRedirectResult;\n\n                if (logoutOnFailure) {\n                    logout({}, redirectTo);\n                }\n                if (redirectTo === false) {\n                    return;\n                }\n\n                redirect(redirectTo);\n            },\n            ...options,\n        }\n    );\n};\n\n/**\n * Key used to store the previous location in localStorage.\n * Used by the useHandleAuthCallback hook to redirect the user to their previous location after a successful login.\n */\nexport const PreviousLocationStorageKey = '@react-admin/nextPathname';\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}