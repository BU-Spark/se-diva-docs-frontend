{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { useCallback, useMemo } from 'react';\nimport { useWatch } from 'react-hook-form';\nimport { useGetList } from '../../dataProvider';\nimport { useReference } from '../useReference';\nimport { useReferenceParams } from './useReferenceParams';\nvar defaultReferenceSource = function (resource, source) {\n  return \"\".concat(resource, \"@\").concat(source);\n};\n/**\n * A hook for choosing a reference record. Useful for foreign keys.\n *\n * This hook fetches the possible values in the reference resource\n * (using `dataProvider.getList()`), it returns the possible choices\n * as the `choices` attribute.\n *\n * @example\n * const {\n *      choices, // the available reference resource\n * } = useReferenceInputController({\n *      input, // the input props\n *      resource: 'comments',\n *      reference: 'posts',\n *      source: 'post_id',\n * });\n *\n * The hook also allow to filter results. It returns a `setFilters`\n * function. It uses the value to create a filter for the query.\n * You can also add a permanentFilter to further filter the result:\n *\n * @example\n * const {\n *      choices, // the available reference resource\n *      setFilter,\n * } = useReferenceInputController({\n *      input, // the input props\n *      resource: 'comments',\n *      reference: 'posts',\n *      source: 'post_id',\n *      permanentFilter: {\n *          author: 'john'\n *      },\n * });\n */\nexport var useReferenceInputController = function (props) {\n  var debounce = props.debounce,\n    enableGetChoices = props.enableGetChoices,\n    filter = props.filter,\n    _a = props.page,\n    initialPage = _a === void 0 ? 1 : _a,\n    _b = props.perPage,\n    initialPerPage = _b === void 0 ? 25 : _b,\n    initialSort = props.sort,\n    _c = props.queryOptions,\n    queryOptions = _c === void 0 ? {} : _c,\n    reference = props.reference,\n    source = props.source;\n  var meta = queryOptions.meta,\n    otherQueryOptions = __rest(queryOptions, [\"meta\"]);\n  var _d = useReferenceParams({\n      resource: reference,\n      page: initialPage,\n      perPage: initialPerPage,\n      sort: initialSort,\n      debounce: debounce,\n      filter: filter\n    }),\n    params = _d[0],\n    paramsModifiers = _d[1];\n  // selection logic\n  var currentValue = useWatch({\n    name: source\n  });\n  var isGetMatchingEnabled = enableGetChoices ? enableGetChoices(params.filterValues) : true;\n  // fetch possible values\n  var _e = useGetList(reference, {\n      pagination: {\n        page: params.page,\n        perPage: params.perPage\n      },\n      sort: {\n        field: params.sort,\n        order: params.order\n      },\n      filter: __assign(__assign({}, params.filter), filter),\n      meta: meta\n    }, __assign({\n      enabled: isGetMatchingEnabled,\n      keepPreviousData: true\n    }, otherQueryOptions)),\n    _f = _e.data,\n    possibleValuesData = _f === void 0 ? [] : _f,\n    total = _e.total,\n    pageInfo = _e.pageInfo,\n    possibleValuesFetching = _e.isFetching,\n    possibleValuesLoading = _e.isLoading,\n    possibleValuesError = _e.error,\n    refetchGetList = _e.refetch;\n  // fetch current value\n  var _g = useReference({\n      id: currentValue,\n      reference: reference,\n      options: {\n        enabled: currentValue != null && currentValue !== '',\n        meta: meta\n      }\n    }),\n    referenceRecord = _g.referenceRecord,\n    refetchReference = _g.refetch,\n    referenceError = _g.error,\n    referenceLoading = _g.isLoading,\n    referenceFetching = _g.isFetching;\n  // add current value to possible sources\n  var finalData, finalTotal;\n  if (!referenceRecord || possibleValuesData.find(function (record) {\n    return record.id === referenceRecord.id;\n  })) {\n    finalData = possibleValuesData;\n    finalTotal = total;\n  } else {\n    finalData = __spreadArray([referenceRecord], possibleValuesData, true);\n    finalTotal = total == null ? undefined : total + 1;\n  }\n  var refetch = useCallback(function () {\n    refetchGetList();\n    refetchReference();\n  }, [refetchGetList, refetchReference]);\n  var currentSort = useMemo(function () {\n    return {\n      field: params.sort,\n      order: params.order\n    };\n  }, [params.sort, params.order]);\n  return {\n    sort: currentSort,\n    allChoices: finalData,\n    availableChoices: possibleValuesData,\n    selectedChoices: [referenceRecord],\n    displayedFilters: params.displayedFilters,\n    error: referenceError || possibleValuesError,\n    filter: params.filter,\n    filterValues: params.filterValues,\n    hideFilter: paramsModifiers.hideFilter,\n    isFetching: referenceFetching || possibleValuesFetching,\n    isLoading: referenceLoading || possibleValuesLoading,\n    page: params.page,\n    perPage: params.perPage,\n    refetch: refetch,\n    resource: reference,\n    setFilters: paramsModifiers.setFilters,\n    setPage: paramsModifiers.setPage,\n    setPerPage: paramsModifiers.setPerPage,\n    setSort: paramsModifiers.setSort,\n    showFilter: paramsModifiers.showFilter,\n    source: source,\n    total: finalTotal,\n    hasNextPage: pageInfo ? pageInfo.hasNextPage : total != null ? params.page * params.perPage < total : undefined,\n    hasPreviousPage: pageInfo ? pageInfo.hasPreviousPage : params.page > 1,\n    isFromReference: true\n  };\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,WAAW,EAAEC,OAAO,QAAQ,OAAO;AAC5C,SAASC,QAAQ,QAAQ,iBAAiB;AAC1C,SAASC,UAAU,QAAQ,oBAAoB;AAE/C,SAASC,YAAY,QAAQ,iBAAiB;AAE9C,SAASC,kBAAkB,QAAQ,sBAAsB;AAGzD,IAAMC,sBAAsB,GAAG,UAACC,QAAgB,EAAEC,MAAc;EAC5D,iBAAGD,QAAQ,cAAIC,MAAM,CAAE;AAAvB,CAAuB;AAE3B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA,OAAO,IAAMC,2BAA2B,GAAG,UACvCC,KAAwC;EAGpC,YAAQ,GASRA,KAAK,SATG;IACRC,gBAAgB,GAQhBD,KAAK,iBARW;IAChBE,MAAM,GAONF,KAAK,OAPC;IACNG,KAMAH,KAAK,KANgB;IAAfI,WAAW,mBAAG,CAAC;IACrBC,KAKAL,KAAK,QALuB;IAAnBM,cAAc,mBAAG,EAAE;IACtBC,WAAW,GAIjBP,KAAK,KAJY;IACjBQ,KAGAR,KAAK,aAHY;IAAjBS,YAAY,mBAAG,EAAE;IACjBC,SAAS,GAETV,KAAK,UAFI;IACTF,MAAM,GACNE,KAAK,OADC;EAEF,QAAI,GAA2BS,YAAY,KAAvC;IAAKE,iBAAiB,UAAKF,YAAY,EAA7C,QAA8B,CAAF;EAE5B,SAA4Bd,kBAAkB,CAAC;MACjDE,QAAQ,EAAEa,SAAS;MACnBE,IAAI,EAAER,WAAW;MACjBS,OAAO,EAAEP,cAAc;MACvBQ,IAAI,EAAEP,WAAW;MACjBQ,QAAQ;MACRb,MAAM;KACT,CAAC;IAPKc,MAAM;IAAEC,eAAe,QAO5B;EAEF;EACA,IAAMC,YAAY,GAAG1B,QAAQ,CAAC;IAAE2B,IAAI,EAAErB;EAAM,CAAE,CAAC;EAE/C,IAAMsB,oBAAoB,GAAGnB,gBAAgB,GACvCA,gBAAgB,CAACe,MAAM,CAACK,YAAY,CAAC,GACrC,IAAI;EAEV;EACM,SAQF5B,UAAU,CACViB,SAAS,EACT;MACIY,UAAU,EAAE;QACRV,IAAI,EAAEI,MAAM,CAACJ,IAAI;QACjBC,OAAO,EAAEG,MAAM,CAACH;OACnB;MACDC,IAAI,EAAE;QAAES,KAAK,EAAEP,MAAM,CAACF,IAAI;QAAEU,KAAK,EAAER,MAAM,CAACQ;MAAK,CAAE;MACjDtB,MAAM,wBAAOc,MAAM,CAACd,MAAM,GAAKA,MAAM,CAAE;MACvCuB,IAAI;KACP;MAEGC,OAAO,EAAEN,oBAAoB;MAC7BO,gBAAgB,EAAE;IAAI,GACnBhB,iBAAiB,EAE3B;IAvBGiB,YAA6B;IAAvBC,kBAAkB,mBAAG,EAAE;IAC7BC,KAAK;IACLC,QAAQ;IACIC,sBAAsB;IACvBC,qBAAqB;IACzBC,mBAAmB;IACjBC,cAAc,aAiB1B;EAED;EACM,SAMFzC,YAAY,CAAa;MACzB0C,EAAE,EAAElB,YAAY;MAChBR,SAAS;MACT2B,OAAO,EAAE;QACLX,OAAO,EAAER,YAAY,IAAI,IAAI,IAAIA,YAAY,KAAK,EAAE;QACpDO,IAAI;;KAEX,CAAC;IAZEa,eAAe;IACNC,gBAAgB;IAClBC,cAAc;IACVC,gBAAgB;IACfC,iBAAiB,gBAQ/B;EACF;EACA,IAAIC,SAAuB,EAAEC,UAAkB;EAC/C,IACI,CAACN,eAAe,IAChBT,kBAAkB,CAACgB,IAAI,CAAC,gBAAM;IAAI,aAAM,CAACT,EAAE,KAAKE,eAAe,CAACF,EAAE;EAAhC,CAAgC,CAAC,EACrE;IACEO,SAAS,GAAGd,kBAAkB;IAC9Be,UAAU,GAAGd,KAAK;GACrB,MAAM;IACHa,SAAS,kBAAIL,eAAe,GAAKT,kBAAkB,OAAC;IACpDe,UAAU,GAAGd,KAAK,IAAI,IAAI,GAAGgB,SAAS,GAAGhB,KAAK,GAAG,CAAC;;EAGtD,IAAMiB,OAAO,GAAGzD,WAAW,CAAC;IACxB6C,cAAc,EAAE;IAChBI,gBAAgB,EAAE;EACtB,CAAC,EAAE,CAACJ,cAAc,EAAEI,gBAAgB,CAAC,CAAC;EAEtC,IAAMS,WAAW,GAAGzD,OAAO,CACvB;IAAM,OAAC;MACHgC,KAAK,EAAEP,MAAM,CAACF,IAAI;MAClBU,KAAK,EAAER,MAAM,CAACQ;KACjB;EAHK,CAGJ,EACF,CAACR,MAAM,CAACF,IAAI,EAAEE,MAAM,CAACQ,KAAK,CAAC,CAC9B;EACD,OAAO;IACHV,IAAI,EAAEkC,WAAW;IACjBC,UAAU,EAAEN,SAAS;IACrBO,gBAAgB,EAAErB,kBAAkB;IACpCsB,eAAe,EAAE,CAACb,eAAe,CAAC;IAClCc,gBAAgB,EAAEpC,MAAM,CAACoC,gBAAgB;IACzCC,KAAK,EAAEb,cAAc,IAAIN,mBAAmB;IAC5ChC,MAAM,EAAEc,MAAM,CAACd,MAAM;IACrBmB,YAAY,EAAEL,MAAM,CAACK,YAAY;IACjCiC,UAAU,EAAErC,eAAe,CAACqC,UAAU;IACtCC,UAAU,EAAEb,iBAAiB,IAAIV,sBAAsB;IACvDwB,SAAS,EAAEf,gBAAgB,IAAIR,qBAAqB;IACpDrB,IAAI,EAAEI,MAAM,CAACJ,IAAI;IACjBC,OAAO,EAAEG,MAAM,CAACH,OAAO;IACvBkC,OAAO;IACPlD,QAAQ,EAAEa,SAAS;IACnB+C,UAAU,EAAExC,eAAe,CAACwC,UAAU;IACtCC,OAAO,EAAEzC,eAAe,CAACyC,OAAO;IAChCC,UAAU,EAAE1C,eAAe,CAAC0C,UAAU;IACtCC,OAAO,EAAE3C,eAAe,CAAC2C,OAAO;IAChCC,UAAU,EAAE5C,eAAe,CAAC4C,UAAU;IACtC/D,MAAM;IACNgC,KAAK,EAAEc,UAAU;IACjBkB,WAAW,EAAE/B,QAAQ,GACfA,QAAQ,CAAC+B,WAAW,GACpBhC,KAAK,IAAI,IAAI,GACbd,MAAM,CAACJ,IAAI,GAAGI,MAAM,CAACH,OAAO,GAAGiB,KAAK,GACpCgB,SAAS;IACfiB,eAAe,EAAEhC,QAAQ,GAAGA,QAAQ,CAACgC,eAAe,GAAG/C,MAAM,CAACJ,IAAI,GAAG,CAAC;IACtEoD,eAAe,EAAE;GACpB;AACL,CAAC","names":["useCallback","useMemo","useWatch","useGetList","useReference","useReferenceParams","defaultReferenceSource","resource","source","useReferenceInputController","props","enableGetChoices","filter","_a","initialPage","_b","initialPerPage","initialSort","_c","queryOptions","reference","otherQueryOptions","page","perPage","sort","debounce","params","paramsModifiers","currentValue","name","isGetMatchingEnabled","filterValues","pagination","field","order","meta","enabled","keepPreviousData","_f","possibleValuesData","total","pageInfo","possibleValuesFetching","possibleValuesLoading","possibleValuesError","refetchGetList","id","options","referenceRecord","refetchReference","referenceError","referenceLoading","referenceFetching","finalData","finalTotal","find","undefined","refetch","currentSort","allChoices","availableChoices","selectedChoices","displayedFilters","error","hideFilter","isFetching","isLoading","setFilters","setPage","setPerPage","setSort","showFilter","hasNextPage","hasPreviousPage","isFromReference"],"sourceRoot":"","sources":["../../../../src/controller/input/useReferenceInputController.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}