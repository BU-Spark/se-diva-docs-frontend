{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n/**\n * Extend a dataProvider to execute callbacks before and after read and write calls.\n *\n * @param {DataProvider} dataProvider The dataProvider to wrap\n * @param {ResourceCallbacks[]} handlers An array of ResourceCallbacks\n *\n * @typedef {Object} ResourceCallbacks\n * @property {string} resource The resource name\n * @property {AfterCreate} [afterCreate] A callback executed after create\n * @property {AfterDelete} [afterDelete] A callback executed after delete\n * @property {AfterDeleteMany} [afterDeleteMany] A callback executed after deleteMany\n * @property {AfterGetList} [afterGetList] A callback executed after getList\n * @property {AfterGetMany} [afterGetMany] A callback executed after getMany\n * @property {AfterGetManyReference} [afterGetManyReference] A callback executed after getManyReference\n * @property {AfterGetOne} [afterGetOne] A callback executed after getOne\n * @property {AfterRead} [afterRead] A callback executed after read (getList, getMany, getManyReference, getOne)\n * @property {AfterSave} [afterSave] A callback executed after save (create, update, updateMany)\n * @property {AfterUpdate} [afterUpdate] A callback executed after update\n * @property {AfterUpdateMany} [afterUpdateMany] A callback executed after updateMany\n * @property {BeforeCreate} [beforeCreate] A callback executed before create\n * @property {BeforeDelete} [beforeDelete] A callback executed before delete\n * @property {BeforeDeleteMany} [beforeDeleteMany] A callback executed before deleteMany\n * @property {BeforeGetList} [beforeGetList] A callback executed before getList\n * @property {BeforeGetMany} [beforeGetMany] A callback executed before getMany\n * @property {BeforeGetManyReference} [beforeGetManyReference] A callback executed before getManyReference\n * @property {BeforeGetOne} [beforeGetOne] A callback executed before getOne\n * @property {BeforeSave} [beforeSave] A callback executed before save (create, update, updateMany)\n * @property {BeforeUpdate} [beforeUpdate] A callback executed before update\n * @property {BeforeUpdateMany} [beforeUpdateMany] A callback executed before updateMany\n *\n * Warnings:\n * - As queries issued in the callbacks are not done through react-query,\n *   any change in the data will not be automatically reflected in the UI.\n * - The callbacks are not executed in a transaction. In case of error,\n *   the backend may be left in an inconsistent state.\n * - When calling the API directly using fetch or another client,\n *   the callbacks will not be executed, leaving the backend in a possiblly inconsistent state.\n * - If a callback triggers the query it's listening to, this will lead to a infinite loop.\n *\n * @example\n *\n * const dataProvider = withLifecycleCallbacks(\n *   jsonServerProvider(\"http://localhost:3000\"),\n *   [\n *     {\n *       resource: \"posts\",\n *       afterRead: async (data, dataProvider) => {\n *         // rename field to the record\n *         data.user_id = data.userId;\n *         return data;\n *       },\n *       // executed after create, update and updateMany\n *       afterSave: async (record, dataProvider) => {\n *         // update the author's nb_posts\n *         const { total } = await dataProvider.getList(\"users\", {\n *           filter: { id: record.user_id },\n *           pagination: { page: 1, perPage: 1 },\n *         });\n *         await dataProvider.update(\"users\", {\n *           id: user.id,\n *           data: { nb_posts: total },\n *           previousData: user,\n *         });\n *         return record;\n *       },\n *       beforeDelete: async (params, dataProvider) => {\n *         // delete all comments linked to the post\n *         const { data: comments } = await dataProvider.getManyReference(\n *           \"comments\",\n *           {\n *             target: \"post_id\",\n *             id: params.id,\n *           }\n *         );\n *         if (comments.length > 0) {\n *           await dataProvider.deleteMany(\"comments\", {\n *             ids: comments.map((comment) => comment.id),\n *           });\n *         }\n *         // update the author's nb_posts\n *         const { data: post } = await dataProvider.getOne(\"posts\", {\n *           id: params.id,\n *         });\n *         const { total } = await dataProvider.getList(\"users\", {\n *           filter: { id: post.user_id },\n *           pagination: { page: 1, perPage: 1 },\n *         });\n *         await dataProvider.update(\"users\", {\n *           id: user.id,\n *           data: { nb_posts: total - 1 },\n *           previousData: user,\n *         });\n *         return params;\n *       },\n *     },\n *   ]\n * );\n */\nexport var withLifecycleCallbacks = function (dataProvider, handlers) {\n  return __assign(__assign({}, dataProvider), {\n    getList: function (resource, params) {\n      return __awaiter(this, void 0, void 0, function () {\n        var newParams, beforeGetListHandlers, _i, beforeGetListHandlers_1, handler, result, afterGetListHandlers, _a, afterGetListHandlers_1, handler, afterReadHandlers, _loop_1, _b, afterReadHandlers_1, handler;\n        return __generator(this, function (_c) {\n          switch (_c.label) {\n            case 0:\n              newParams = params;\n              beforeGetListHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.beforeGetList;\n              });\n              _i = 0, beforeGetListHandlers_1 = beforeGetListHandlers;\n              _c.label = 1;\n            case 1:\n              if (!(_i < beforeGetListHandlers_1.length)) return [3 /*break*/, 4];\n              handler = beforeGetListHandlers_1[_i];\n              return [4 /*yield*/, handler.beforeGetList(newParams, dataProvider)];\n            case 2:\n              newParams = _c.sent();\n              _c.label = 3;\n            case 3:\n              _i++;\n              return [3 /*break*/, 1];\n            case 4:\n              return [4 /*yield*/, dataProvider.getList(resource, newParams)];\n            case 5:\n              result = _c.sent();\n              afterGetListHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.afterGetList;\n              });\n              _a = 0, afterGetListHandlers_1 = afterGetListHandlers;\n              _c.label = 6;\n            case 6:\n              if (!(_a < afterGetListHandlers_1.length)) return [3 /*break*/, 9];\n              handler = afterGetListHandlers_1[_a];\n              return [4 /*yield*/, handler.afterGetList(result, dataProvider)];\n            case 7:\n              result = _c.sent();\n              _c.label = 8;\n            case 8:\n              _a++;\n              return [3 /*break*/, 6];\n            case 9:\n              afterReadHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.afterRead;\n              });\n              _loop_1 = function (handler) {\n                var _d;\n                return __generator(this, function (_e) {\n                  switch (_e.label) {\n                    case 0:\n                      _d = result;\n                      return [4 /*yield*/, Promise.all(result.data.map(function (record) {\n                        return handler.afterRead(record, dataProvider);\n                      }))];\n                    case 1:\n                      _d.data = _e.sent();\n                      return [2 /*return*/];\n                  }\n                });\n              };\n\n              _b = 0, afterReadHandlers_1 = afterReadHandlers;\n              _c.label = 10;\n            case 10:\n              if (!(_b < afterReadHandlers_1.length)) return [3 /*break*/, 13];\n              handler = afterReadHandlers_1[_b];\n              return [5 /*yield**/, _loop_1(handler)];\n            case 11:\n              _c.sent();\n              _c.label = 12;\n            case 12:\n              _b++;\n              return [3 /*break*/, 10];\n            case 13:\n              return [2 /*return*/, result];\n          }\n        });\n      });\n    },\n    getOne: function (resource, params) {\n      return __awaiter(this, void 0, void 0, function () {\n        var newParams, beforeGetOneHandlers, _i, beforeGetOneHandlers_1, handler, result, afterGetOneHandlers, _a, afterGetOneHandlers_1, handler, afterReadHandlers, _b, afterReadHandlers_2, handler, _c;\n        return __generator(this, function (_d) {\n          switch (_d.label) {\n            case 0:\n              newParams = params;\n              beforeGetOneHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.beforeGetOne;\n              });\n              _i = 0, beforeGetOneHandlers_1 = beforeGetOneHandlers;\n              _d.label = 1;\n            case 1:\n              if (!(_i < beforeGetOneHandlers_1.length)) return [3 /*break*/, 4];\n              handler = beforeGetOneHandlers_1[_i];\n              return [4 /*yield*/, handler.beforeGetOne(newParams, dataProvider)];\n            case 2:\n              newParams = _d.sent();\n              _d.label = 3;\n            case 3:\n              _i++;\n              return [3 /*break*/, 1];\n            case 4:\n              return [4 /*yield*/, dataProvider.getOne(resource, newParams)];\n            case 5:\n              result = _d.sent();\n              afterGetOneHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.afterGetOne;\n              });\n              _a = 0, afterGetOneHandlers_1 = afterGetOneHandlers;\n              _d.label = 6;\n            case 6:\n              if (!(_a < afterGetOneHandlers_1.length)) return [3 /*break*/, 9];\n              handler = afterGetOneHandlers_1[_a];\n              return [4 /*yield*/, handler.afterGetOne(result, dataProvider)];\n            case 7:\n              result = _d.sent();\n              _d.label = 8;\n            case 8:\n              _a++;\n              return [3 /*break*/, 6];\n            case 9:\n              afterReadHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.afterRead;\n              });\n              _b = 0, afterReadHandlers_2 = afterReadHandlers;\n              _d.label = 10;\n            case 10:\n              if (!(_b < afterReadHandlers_2.length)) return [3 /*break*/, 13];\n              handler = afterReadHandlers_2[_b];\n              _c = result;\n              return [4 /*yield*/, handler.afterRead(result.data, dataProvider)];\n            case 11:\n              _c.data = _d.sent();\n              _d.label = 12;\n            case 12:\n              _b++;\n              return [3 /*break*/, 10];\n            case 13:\n              return [2 /*return*/, result];\n          }\n        });\n      });\n    },\n    getMany: function (resource, params) {\n      return __awaiter(this, void 0, void 0, function () {\n        var newParams, beforeGetManyHandlers, _i, beforeGetManyHandlers_1, handler, result, afterGetManyHandlers, _a, afterGetManyHandlers_1, handler, afterReadHandlers, _loop_2, _b, afterReadHandlers_3, handler;\n        return __generator(this, function (_c) {\n          switch (_c.label) {\n            case 0:\n              newParams = params;\n              beforeGetManyHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.beforeGetMany;\n              });\n              _i = 0, beforeGetManyHandlers_1 = beforeGetManyHandlers;\n              _c.label = 1;\n            case 1:\n              if (!(_i < beforeGetManyHandlers_1.length)) return [3 /*break*/, 4];\n              handler = beforeGetManyHandlers_1[_i];\n              return [4 /*yield*/, handler.beforeGetMany(newParams, dataProvider)];\n            case 2:\n              newParams = _c.sent();\n              _c.label = 3;\n            case 3:\n              _i++;\n              return [3 /*break*/, 1];\n            case 4:\n              return [4 /*yield*/, dataProvider.getMany(resource, newParams)];\n            case 5:\n              result = _c.sent();\n              afterGetManyHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.afterGetMany;\n              });\n              _a = 0, afterGetManyHandlers_1 = afterGetManyHandlers;\n              _c.label = 6;\n            case 6:\n              if (!(_a < afterGetManyHandlers_1.length)) return [3 /*break*/, 9];\n              handler = afterGetManyHandlers_1[_a];\n              return [4 /*yield*/, handler.afterGetMany(result, dataProvider)];\n            case 7:\n              result = _c.sent();\n              _c.label = 8;\n            case 8:\n              _a++;\n              return [3 /*break*/, 6];\n            case 9:\n              afterReadHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.afterRead;\n              });\n              _loop_2 = function (handler) {\n                var _d;\n                return __generator(this, function (_e) {\n                  switch (_e.label) {\n                    case 0:\n                      _d = result;\n                      return [4 /*yield*/, Promise.all(result.data.map(function (record) {\n                        return handler.afterRead(record, dataProvider);\n                      }))];\n                    case 1:\n                      _d.data = _e.sent();\n                      return [2 /*return*/];\n                  }\n                });\n              };\n\n              _b = 0, afterReadHandlers_3 = afterReadHandlers;\n              _c.label = 10;\n            case 10:\n              if (!(_b < afterReadHandlers_3.length)) return [3 /*break*/, 13];\n              handler = afterReadHandlers_3[_b];\n              return [5 /*yield**/, _loop_2(handler)];\n            case 11:\n              _c.sent();\n              _c.label = 12;\n            case 12:\n              _b++;\n              return [3 /*break*/, 10];\n            case 13:\n              return [2 /*return*/, result];\n          }\n        });\n      });\n    },\n    getManyReference: function (resource, params) {\n      return __awaiter(this, void 0, void 0, function () {\n        var newParams, beforeGetManyReferenceHandlers, _i, beforeGetManyReferenceHandlers_1, handler, result, afterGetManyReferenceHandlers, _a, afterGetManyReferenceHandlers_1, handler, afterReadHandlers, _loop_3, _b, afterReadHandlers_4, handler;\n        return __generator(this, function (_c) {\n          switch (_c.label) {\n            case 0:\n              newParams = params;\n              beforeGetManyReferenceHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.beforeGetManyReference;\n              });\n              _i = 0, beforeGetManyReferenceHandlers_1 = beforeGetManyReferenceHandlers;\n              _c.label = 1;\n            case 1:\n              if (!(_i < beforeGetManyReferenceHandlers_1.length)) return [3 /*break*/, 4];\n              handler = beforeGetManyReferenceHandlers_1[_i];\n              return [4 /*yield*/, handler.beforeGetManyReference(newParams, dataProvider)];\n            case 2:\n              newParams = _c.sent();\n              _c.label = 3;\n            case 3:\n              _i++;\n              return [3 /*break*/, 1];\n            case 4:\n              return [4 /*yield*/, dataProvider.getManyReference(resource, newParams)];\n            case 5:\n              result = _c.sent();\n              afterGetManyReferenceHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.afterGetManyReference;\n              });\n              _a = 0, afterGetManyReferenceHandlers_1 = afterGetManyReferenceHandlers;\n              _c.label = 6;\n            case 6:\n              if (!(_a < afterGetManyReferenceHandlers_1.length)) return [3 /*break*/, 9];\n              handler = afterGetManyReferenceHandlers_1[_a];\n              return [4 /*yield*/, handler.afterGetManyReference(result, dataProvider)];\n            case 7:\n              result = _c.sent();\n              _c.label = 8;\n            case 8:\n              _a++;\n              return [3 /*break*/, 6];\n            case 9:\n              afterReadHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.afterRead;\n              });\n              _loop_3 = function (handler) {\n                var _d;\n                return __generator(this, function (_e) {\n                  switch (_e.label) {\n                    case 0:\n                      _d = result;\n                      return [4 /*yield*/, Promise.all(result.data.map(function (record) {\n                        return handler.afterRead(record, dataProvider);\n                      }))];\n                    case 1:\n                      _d.data = _e.sent();\n                      return [2 /*return*/];\n                  }\n                });\n              };\n\n              _b = 0, afterReadHandlers_4 = afterReadHandlers;\n              _c.label = 10;\n            case 10:\n              if (!(_b < afterReadHandlers_4.length)) return [3 /*break*/, 13];\n              handler = afterReadHandlers_4[_b];\n              return [5 /*yield**/, _loop_3(handler)];\n            case 11:\n              _c.sent();\n              _c.label = 12;\n            case 12:\n              _b++;\n              return [3 /*break*/, 10];\n            case 13:\n              return [2 /*return*/, result];\n          }\n        });\n      });\n    },\n    update: function (resource, params) {\n      return __awaiter(this, void 0, void 0, function () {\n        var newParams, beforeUpdateHandlers, _i, beforeUpdateHandlers_1, handler, beforeSaveHandlers, _a, beforeSaveHandlers_1, handler, _b, result, afterUpdateHandlers, _c, afterUpdateHandlers_1, handler, afterSaveHandlers, _d, afterSaveHandlers_1, handler, _e;\n        return __generator(this, function (_f) {\n          switch (_f.label) {\n            case 0:\n              newParams = params;\n              beforeUpdateHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.beforeUpdate;\n              });\n              _i = 0, beforeUpdateHandlers_1 = beforeUpdateHandlers;\n              _f.label = 1;\n            case 1:\n              if (!(_i < beforeUpdateHandlers_1.length)) return [3 /*break*/, 4];\n              handler = beforeUpdateHandlers_1[_i];\n              return [4 /*yield*/, handler.beforeUpdate(newParams, dataProvider)];\n            case 2:\n              newParams = _f.sent();\n              _f.label = 3;\n            case 3:\n              _i++;\n              return [3 /*break*/, 1];\n            case 4:\n              beforeSaveHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.beforeSave;\n              });\n              _a = 0, beforeSaveHandlers_1 = beforeSaveHandlers;\n              _f.label = 5;\n            case 5:\n              if (!(_a < beforeSaveHandlers_1.length)) return [3 /*break*/, 8];\n              handler = beforeSaveHandlers_1[_a];\n              _b = newParams;\n              return [4 /*yield*/, handler.beforeSave(newParams.data, dataProvider)];\n            case 6:\n              _b.data = _f.sent();\n              _f.label = 7;\n            case 7:\n              _a++;\n              return [3 /*break*/, 5];\n            case 8:\n              return [4 /*yield*/, dataProvider.update(resource, newParams)];\n            case 9:\n              result = _f.sent();\n              afterUpdateHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.afterUpdate;\n              });\n              _c = 0, afterUpdateHandlers_1 = afterUpdateHandlers;\n              _f.label = 10;\n            case 10:\n              if (!(_c < afterUpdateHandlers_1.length)) return [3 /*break*/, 13];\n              handler = afterUpdateHandlers_1[_c];\n              return [4 /*yield*/, handler.afterUpdate(result, dataProvider)];\n            case 11:\n              result = _f.sent();\n              _f.label = 12;\n            case 12:\n              _c++;\n              return [3 /*break*/, 10];\n            case 13:\n              afterSaveHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.afterSave;\n              });\n              _d = 0, afterSaveHandlers_1 = afterSaveHandlers;\n              _f.label = 14;\n            case 14:\n              if (!(_d < afterSaveHandlers_1.length)) return [3 /*break*/, 17];\n              handler = afterSaveHandlers_1[_d];\n              _e = result;\n              return [4 /*yield*/, handler.afterSave(result.data, dataProvider)];\n            case 15:\n              _e.data = _f.sent();\n              _f.label = 16;\n            case 16:\n              _d++;\n              return [3 /*break*/, 14];\n            case 17:\n              return [2 /*return*/, result];\n          }\n        });\n      });\n    },\n    create: function (resource, params) {\n      return __awaiter(this, void 0, void 0, function () {\n        var newParams, beforeCreateHandlers, _i, beforeCreateHandlers_1, handler, beforeSaveHandlers, _a, beforeSaveHandlers_2, handler, _b, result, afterCreateHandlers, _c, afterCreateHandlers_1, handler, afterSaveHandlers, _d, afterSaveHandlers_2, handler, _e;\n        return __generator(this, function (_f) {\n          switch (_f.label) {\n            case 0:\n              newParams = params;\n              beforeCreateHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.beforeCreate;\n              });\n              _i = 0, beforeCreateHandlers_1 = beforeCreateHandlers;\n              _f.label = 1;\n            case 1:\n              if (!(_i < beforeCreateHandlers_1.length)) return [3 /*break*/, 4];\n              handler = beforeCreateHandlers_1[_i];\n              return [4 /*yield*/, handler.beforeCreate(newParams, dataProvider)];\n            case 2:\n              newParams = _f.sent();\n              _f.label = 3;\n            case 3:\n              _i++;\n              return [3 /*break*/, 1];\n            case 4:\n              beforeSaveHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.beforeSave;\n              });\n              _a = 0, beforeSaveHandlers_2 = beforeSaveHandlers;\n              _f.label = 5;\n            case 5:\n              if (!(_a < beforeSaveHandlers_2.length)) return [3 /*break*/, 8];\n              handler = beforeSaveHandlers_2[_a];\n              _b = newParams;\n              return [4 /*yield*/, handler.beforeSave(newParams.data, dataProvider)];\n            case 6:\n              _b.data = _f.sent();\n              _f.label = 7;\n            case 7:\n              _a++;\n              return [3 /*break*/, 5];\n            case 8:\n              return [4 /*yield*/, dataProvider.create(resource, newParams)];\n            case 9:\n              result = _f.sent();\n              afterCreateHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.afterCreate;\n              });\n              _c = 0, afterCreateHandlers_1 = afterCreateHandlers;\n              _f.label = 10;\n            case 10:\n              if (!(_c < afterCreateHandlers_1.length)) return [3 /*break*/, 13];\n              handler = afterCreateHandlers_1[_c];\n              return [4 /*yield*/, handler.afterCreate(result, dataProvider)];\n            case 11:\n              result = _f.sent();\n              _f.label = 12;\n            case 12:\n              _c++;\n              return [3 /*break*/, 10];\n            case 13:\n              afterSaveHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.afterSave;\n              });\n              _d = 0, afterSaveHandlers_2 = afterSaveHandlers;\n              _f.label = 14;\n            case 14:\n              if (!(_d < afterSaveHandlers_2.length)) return [3 /*break*/, 17];\n              handler = afterSaveHandlers_2[_d];\n              _e = result;\n              return [4 /*yield*/, handler.afterSave(result.data, dataProvider)];\n            case 15:\n              _e.data = _f.sent();\n              _f.label = 16;\n            case 16:\n              _d++;\n              return [3 /*break*/, 14];\n            case 17:\n              return [2 /*return*/, result];\n          }\n        });\n      });\n    },\n    delete: function (resource, params) {\n      return __awaiter(this, void 0, void 0, function () {\n        var newParams, beforeDeleteHandlers, _i, beforeDeleteHandlers_1, handler, result, afterDeleteHandlers, _a, afterDeleteHandlers_1, handler;\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              newParams = params;\n              beforeDeleteHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.beforeDelete;\n              });\n              _i = 0, beforeDeleteHandlers_1 = beforeDeleteHandlers;\n              _b.label = 1;\n            case 1:\n              if (!(_i < beforeDeleteHandlers_1.length)) return [3 /*break*/, 4];\n              handler = beforeDeleteHandlers_1[_i];\n              return [4 /*yield*/, handler.beforeDelete(newParams, dataProvider)];\n            case 2:\n              newParams = _b.sent();\n              _b.label = 3;\n            case 3:\n              _i++;\n              return [3 /*break*/, 1];\n            case 4:\n              return [4 /*yield*/, dataProvider.delete(resource, newParams)];\n            case 5:\n              result = _b.sent();\n              afterDeleteHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.afterDelete;\n              });\n              _a = 0, afterDeleteHandlers_1 = afterDeleteHandlers;\n              _b.label = 6;\n            case 6:\n              if (!(_a < afterDeleteHandlers_1.length)) return [3 /*break*/, 9];\n              handler = afterDeleteHandlers_1[_a];\n              return [4 /*yield*/, handler.afterDelete(result, dataProvider)];\n            case 7:\n              result = _b.sent();\n              _b.label = 8;\n            case 8:\n              _a++;\n              return [3 /*break*/, 6];\n            case 9:\n              return [2 /*return*/, result];\n          }\n        });\n      });\n    },\n    updateMany: function (resource, params) {\n      return __awaiter(this, void 0, void 0, function () {\n        var newParams, beforeUpdateManyHandlers, _i, beforeUpdateManyHandlers_1, handler, beforeSaveHandlers, _a, beforeSaveHandlers_3, handler, _b, result, afterUpdateManyHandlers, _c, afterUpdateManyHandlers_1, handler, afterSaveHandlers, records, _loop_4, _d, afterSaveHandlers_3, handler;\n        return __generator(this, function (_e) {\n          switch (_e.label) {\n            case 0:\n              newParams = params;\n              beforeUpdateManyHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.beforeUpdateMany;\n              });\n              _i = 0, beforeUpdateManyHandlers_1 = beforeUpdateManyHandlers;\n              _e.label = 1;\n            case 1:\n              if (!(_i < beforeUpdateManyHandlers_1.length)) return [3 /*break*/, 4];\n              handler = beforeUpdateManyHandlers_1[_i];\n              return [4 /*yield*/, handler.beforeUpdateMany(newParams, dataProvider)];\n            case 2:\n              newParams = _e.sent();\n              _e.label = 3;\n            case 3:\n              _i++;\n              return [3 /*break*/, 1];\n            case 4:\n              beforeSaveHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.beforeSave;\n              });\n              _a = 0, beforeSaveHandlers_3 = beforeSaveHandlers;\n              _e.label = 5;\n            case 5:\n              if (!(_a < beforeSaveHandlers_3.length)) return [3 /*break*/, 8];\n              handler = beforeSaveHandlers_3[_a];\n              _b = newParams;\n              return [4 /*yield*/, handler.beforeSave(newParams.data, dataProvider)];\n            case 6:\n              _b.data = _e.sent();\n              _e.label = 7;\n            case 7:\n              _a++;\n              return [3 /*break*/, 5];\n            case 8:\n              return [4 /*yield*/, dataProvider.updateMany(resource, newParams)];\n            case 9:\n              result = _e.sent();\n              afterUpdateManyHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.afterUpdateMany;\n              });\n              _c = 0, afterUpdateManyHandlers_1 = afterUpdateManyHandlers;\n              _e.label = 10;\n            case 10:\n              if (!(_c < afterUpdateManyHandlers_1.length)) return [3 /*break*/, 13];\n              handler = afterUpdateManyHandlers_1[_c];\n              return [4 /*yield*/, handler.afterUpdateMany(result, dataProvider)];\n            case 11:\n              result = _e.sent();\n              _e.label = 12;\n            case 12:\n              _c++;\n              return [3 /*break*/, 10];\n            case 13:\n              afterSaveHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.afterSave;\n              });\n              if (!(afterSaveHandlers.length > 0)) return [3 /*break*/, 18];\n              return [4 /*yield*/, dataProvider.getMany(resource, {\n                ids: result.data\n              })];\n            case 14:\n              records = _e.sent().data;\n              _loop_4 = function (handler) {\n                return __generator(this, function (_f) {\n                  switch (_f.label) {\n                    case 0:\n                      return [4 /*yield*/, Promise.all(records.map(function (record) {\n                        return handler.afterSave(record, dataProvider);\n                      }))];\n                    case 1:\n                      _f.sent();\n                      return [2 /*return*/];\n                  }\n                });\n              };\n\n              _d = 0, afterSaveHandlers_3 = afterSaveHandlers;\n              _e.label = 15;\n            case 15:\n              if (!(_d < afterSaveHandlers_3.length)) return [3 /*break*/, 18];\n              handler = afterSaveHandlers_3[_d];\n              return [5 /*yield**/, _loop_4(handler)];\n            case 16:\n              _e.sent();\n              _e.label = 17;\n            case 17:\n              _d++;\n              return [3 /*break*/, 15];\n            case 18:\n              return [2 /*return*/, result];\n          }\n        });\n      });\n    },\n    deleteMany: function (resource, params) {\n      return __awaiter(this, void 0, void 0, function () {\n        var newParams, beforeDeleteManyHandlers, _i, beforeDeleteManyHandlers_1, handler, result, afterDeleteManyHandlers, _a, afterDeleteManyHandlers_1, handler;\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              newParams = params;\n              beforeDeleteManyHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.beforeDeleteMany;\n              });\n              _i = 0, beforeDeleteManyHandlers_1 = beforeDeleteManyHandlers;\n              _b.label = 1;\n            case 1:\n              if (!(_i < beforeDeleteManyHandlers_1.length)) return [3 /*break*/, 4];\n              handler = beforeDeleteManyHandlers_1[_i];\n              return [4 /*yield*/, handler.beforeDeleteMany(newParams, dataProvider)];\n            case 2:\n              newParams = _b.sent();\n              _b.label = 3;\n            case 3:\n              _i++;\n              return [3 /*break*/, 1];\n            case 4:\n              return [4 /*yield*/, dataProvider.deleteMany(resource, newParams)];\n            case 5:\n              result = _b.sent();\n              afterDeleteManyHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.afterDeleteMany;\n              });\n              _a = 0, afterDeleteManyHandlers_1 = afterDeleteManyHandlers;\n              _b.label = 6;\n            case 6:\n              if (!(_a < afterDeleteManyHandlers_1.length)) return [3 /*break*/, 9];\n              handler = afterDeleteManyHandlers_1[_a];\n              return [4 /*yield*/, handler.afterDeleteMany(result, dataProvider)];\n            case 7:\n              result = _b.sent();\n              _b.label = 8;\n            case 8:\n              _a++;\n              return [3 /*break*/, 6];\n            case 9:\n              return [2 /*return*/, result];\n          }\n        });\n      });\n    }\n  });\n};","map":{"version":3,"mappings":"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","names":["withLifecycleCallbacks","dataProvider","handlers","getList","resource","params","newParams","beforeGetListHandlers","filter","h","beforeGetList","beforeGetListHandlers_1","_i","handler","_c","result","afterGetListHandlers","afterGetList","afterGetListHandlers_1","_a","afterReadHandlers","afterRead","_d","Promise","all","data","map","record","_e","afterReadHandlers_1","_b","getOne","beforeGetOneHandlers","beforeGetOne","beforeGetOneHandlers_1","afterGetOneHandlers","afterGetOne","afterGetOneHandlers_1","afterReadHandlers_2","getMany","beforeGetManyHandlers","beforeGetMany","beforeGetManyHandlers_1","afterGetManyHandlers","afterGetMany","afterGetManyHandlers_1","afterReadHandlers_3","getManyReference","beforeGetManyReferenceHandlers","beforeGetManyReference","beforeGetManyReferenceHandlers_1","afterGetManyReferenceHandlers","afterGetManyReference","afterGetManyReferenceHandlers_1","afterReadHandlers_4","update","beforeUpdateHandlers","beforeUpdate","beforeUpdateHandlers_1","_f","beforeSaveHandlers","beforeSave","beforeSaveHandlers_1","afterUpdateHandlers","afterUpdate","afterUpdateHandlers_1","afterSaveHandlers","afterSave","afterSaveHandlers_1","create","beforeCreateHandlers","beforeCreate","beforeCreateHandlers_1","beforeSaveHandlers_2","afterCreateHandlers","afterCreate","afterCreateHandlers_1","afterSaveHandlers_2","delete","beforeDeleteHandlers","beforeDelete","beforeDeleteHandlers_1","afterDeleteHandlers","afterDelete","afterDeleteHandlers_1","updateMany","beforeUpdateManyHandlers","beforeUpdateMany","beforeUpdateManyHandlers_1","beforeSaveHandlers_3","afterUpdateManyHandlers","afterUpdateMany","afterUpdateManyHandlers_1","length","ids","records","afterSaveHandlers_3","deleteMany","beforeDeleteManyHandlers","beforeDeleteMany","beforeDeleteManyHandlers_1","afterDeleteManyHandlers","afterDeleteMany","afterDeleteManyHandlers_1"],"sources":["/Users/paigedeveau/Desktop/se-diva-docs-frontend/bwmdn-admin-portal/node_modules/ra-core/src/dataProvider/withLifecycleCallbacks.ts"],"sourcesContent":["import {\n    CreateParams,\n    CreateResult,\n    DataProvider,\n    DeleteManyParams,\n    DeleteManyResult,\n    DeleteParams,\n    DeleteResult,\n    GetListParams,\n    GetListResult,\n    GetManyParams,\n    GetManyReferenceParams,\n    GetManyReferenceResult,\n    GetManyResult,\n    GetOneParams,\n    GetOneResult,\n    RaRecord,\n    UpdateManyParams,\n    UpdateManyResult,\n    UpdateParams,\n    UpdateResult,\n} from '../types';\n\n/**\n * Extend a dataProvider to execute callbacks before and after read and write calls.\n *\n * @param {DataProvider} dataProvider The dataProvider to wrap\n * @param {ResourceCallbacks[]} handlers An array of ResourceCallbacks\n *\n * @typedef {Object} ResourceCallbacks\n * @property {string} resource The resource name\n * @property {AfterCreate} [afterCreate] A callback executed after create\n * @property {AfterDelete} [afterDelete] A callback executed after delete\n * @property {AfterDeleteMany} [afterDeleteMany] A callback executed after deleteMany\n * @property {AfterGetList} [afterGetList] A callback executed after getList\n * @property {AfterGetMany} [afterGetMany] A callback executed after getMany\n * @property {AfterGetManyReference} [afterGetManyReference] A callback executed after getManyReference\n * @property {AfterGetOne} [afterGetOne] A callback executed after getOne\n * @property {AfterRead} [afterRead] A callback executed after read (getList, getMany, getManyReference, getOne)\n * @property {AfterSave} [afterSave] A callback executed after save (create, update, updateMany)\n * @property {AfterUpdate} [afterUpdate] A callback executed after update\n * @property {AfterUpdateMany} [afterUpdateMany] A callback executed after updateMany\n * @property {BeforeCreate} [beforeCreate] A callback executed before create\n * @property {BeforeDelete} [beforeDelete] A callback executed before delete\n * @property {BeforeDeleteMany} [beforeDeleteMany] A callback executed before deleteMany\n * @property {BeforeGetList} [beforeGetList] A callback executed before getList\n * @property {BeforeGetMany} [beforeGetMany] A callback executed before getMany\n * @property {BeforeGetManyReference} [beforeGetManyReference] A callback executed before getManyReference\n * @property {BeforeGetOne} [beforeGetOne] A callback executed before getOne\n * @property {BeforeSave} [beforeSave] A callback executed before save (create, update, updateMany)\n * @property {BeforeUpdate} [beforeUpdate] A callback executed before update\n * @property {BeforeUpdateMany} [beforeUpdateMany] A callback executed before updateMany\n *\n * Warnings:\n * - As queries issued in the callbacks are not done through react-query,\n *   any change in the data will not be automatically reflected in the UI.\n * - The callbacks are not executed in a transaction. In case of error,\n *   the backend may be left in an inconsistent state.\n * - When calling the API directly using fetch or another client,\n *   the callbacks will not be executed, leaving the backend in a possiblly inconsistent state.\n * - If a callback triggers the query it's listening to, this will lead to a infinite loop.\n *\n * @example\n *\n * const dataProvider = withLifecycleCallbacks(\n *   jsonServerProvider(\"http://localhost:3000\"),\n *   [\n *     {\n *       resource: \"posts\",\n *       afterRead: async (data, dataProvider) => {\n *         // rename field to the record\n *         data.user_id = data.userId;\n *         return data;\n *       },\n *       // executed after create, update and updateMany\n *       afterSave: async (record, dataProvider) => {\n *         // update the author's nb_posts\n *         const { total } = await dataProvider.getList(\"users\", {\n *           filter: { id: record.user_id },\n *           pagination: { page: 1, perPage: 1 },\n *         });\n *         await dataProvider.update(\"users\", {\n *           id: user.id,\n *           data: { nb_posts: total },\n *           previousData: user,\n *         });\n *         return record;\n *       },\n *       beforeDelete: async (params, dataProvider) => {\n *         // delete all comments linked to the post\n *         const { data: comments } = await dataProvider.getManyReference(\n *           \"comments\",\n *           {\n *             target: \"post_id\",\n *             id: params.id,\n *           }\n *         );\n *         if (comments.length > 0) {\n *           await dataProvider.deleteMany(\"comments\", {\n *             ids: comments.map((comment) => comment.id),\n *           });\n *         }\n *         // update the author's nb_posts\n *         const { data: post } = await dataProvider.getOne(\"posts\", {\n *           id: params.id,\n *         });\n *         const { total } = await dataProvider.getList(\"users\", {\n *           filter: { id: post.user_id },\n *           pagination: { page: 1, perPage: 1 },\n *         });\n *         await dataProvider.update(\"users\", {\n *           id: user.id,\n *           data: { nb_posts: total - 1 },\n *           previousData: user,\n *         });\n *         return params;\n *       },\n *     },\n *   ]\n * );\n */\nexport const withLifecycleCallbacks = (\n    dataProvider: DataProvider,\n    handlers: ResourceCallbacks[]\n): DataProvider => {\n    return {\n        ...dataProvider,\n\n        getList: async function <RecordType extends RaRecord = any>(\n            resource: string,\n            params: GetListParams\n        ) {\n            let newParams = params;\n            const beforeGetListHandlers = handlers.filter(\n                h => h.resource === resource && h.beforeGetList\n            );\n            for (let handler of beforeGetListHandlers) {\n                newParams = await handler.beforeGetList(\n                    newParams,\n                    dataProvider\n                );\n            }\n\n            let result = await dataProvider.getList<RecordType>(\n                resource,\n                newParams\n            );\n\n            const afterGetListHandlers = handlers.filter(\n                h => h.resource === resource && h.afterGetList\n            );\n            for (let handler of afterGetListHandlers) {\n                result = await handler.afterGetList(result, dataProvider);\n            }\n            const afterReadHandlers = handlers.filter(\n                h => h.resource === resource && h.afterRead\n            );\n            for (let handler of afterReadHandlers) {\n                result.data = await Promise.all(\n                    result.data.map(record =>\n                        handler.afterRead(record, dataProvider)\n                    )\n                );\n            }\n\n            return result;\n        },\n\n        getOne: async function <RecordType extends RaRecord = any>(\n            resource: string,\n            params: GetOneParams<RecordType>\n        ) {\n            let newParams = params;\n            const beforeGetOneHandlers = handlers.filter(\n                h => h.resource === resource && h.beforeGetOne\n            );\n            for (let handler of beforeGetOneHandlers) {\n                newParams = await handler.beforeGetOne(newParams, dataProvider);\n            }\n\n            let result = await dataProvider.getOne<RecordType>(\n                resource,\n                newParams\n            );\n\n            const afterGetOneHandlers = handlers.filter(\n                h => h.resource === resource && h.afterGetOne\n            );\n            for (let handler of afterGetOneHandlers) {\n                result = await handler.afterGetOne(result, dataProvider);\n            }\n            const afterReadHandlers = handlers.filter(\n                h => h.resource === resource && h.afterRead\n            );\n            for (let handler of afterReadHandlers) {\n                result.data = await handler.afterRead(\n                    result.data,\n                    dataProvider\n                );\n            }\n\n            return result;\n        },\n\n        getMany: async function <RecordType extends RaRecord = any>(\n            resource: string,\n            params: GetManyParams\n        ) {\n            let newParams = params;\n            const beforeGetManyHandlers = handlers.filter(\n                h => h.resource === resource && h.beforeGetMany\n            );\n            for (let handler of beforeGetManyHandlers) {\n                newParams = await handler.beforeGetMany(\n                    newParams,\n                    dataProvider\n                );\n            }\n\n            let result = await dataProvider.getMany<RecordType>(\n                resource,\n                newParams\n            );\n\n            const afterGetManyHandlers = handlers.filter(\n                h => h.resource === resource && h.afterGetMany\n            );\n            for (let handler of afterGetManyHandlers) {\n                result = await handler.afterGetMany(result, dataProvider);\n            }\n            const afterReadHandlers = handlers.filter(\n                h => h.resource === resource && h.afterRead\n            );\n            for (let handler of afterReadHandlers) {\n                result.data = await Promise.all(\n                    result.data.map(record =>\n                        handler.afterRead(record, dataProvider)\n                    )\n                );\n            }\n\n            return result;\n        },\n\n        getManyReference: async function <RecordType extends RaRecord = any>(\n            resource: string,\n            params: GetManyReferenceParams\n        ) {\n            let newParams = params;\n            const beforeGetManyReferenceHandlers = handlers.filter(\n                h => h.resource === resource && h.beforeGetManyReference\n            );\n            for (let handler of beforeGetManyReferenceHandlers) {\n                newParams = await handler.beforeGetManyReference(\n                    newParams,\n                    dataProvider\n                );\n            }\n\n            let result = await dataProvider.getManyReference<RecordType>(\n                resource,\n                newParams\n            );\n\n            const afterGetManyReferenceHandlers = handlers.filter(\n                h => h.resource === resource && h.afterGetManyReference\n            );\n            for (let handler of afterGetManyReferenceHandlers) {\n                result = await handler.afterGetManyReference(\n                    result,\n                    dataProvider\n                );\n            }\n            const afterReadHandlers = handlers.filter(\n                h => h.resource === resource && h.afterRead\n            );\n            for (let handler of afterReadHandlers) {\n                result.data = await Promise.all(\n                    result.data.map(record =>\n                        handler.afterRead(record, dataProvider)\n                    )\n                );\n            }\n\n            return result;\n        },\n\n        update: async function <RecordType extends RaRecord = any>(\n            resource: string,\n            params: UpdateParams<RecordType>\n        ) {\n            let newParams = params;\n            const beforeUpdateHandlers = handlers.filter(\n                h => h.resource === resource && h.beforeUpdate\n            );\n            for (let handler of beforeUpdateHandlers) {\n                newParams = await handler.beforeUpdate(newParams, dataProvider);\n            }\n            const beforeSaveHandlers = handlers.filter(\n                h => h.resource === resource && h.beforeSave\n            );\n            for (let handler of beforeSaveHandlers) {\n                newParams.data = await handler.beforeSave(\n                    newParams.data,\n                    dataProvider\n                );\n            }\n\n            let result = await dataProvider.update<RecordType>(\n                resource,\n                newParams\n            );\n\n            const afterUpdateHandlers = handlers.filter(\n                h => h.resource === resource && h.afterUpdate\n            );\n            for (let handler of afterUpdateHandlers) {\n                result = await handler.afterUpdate(result, dataProvider);\n            }\n            const afterSaveHandlers = handlers.filter(\n                h => h.resource === resource && h.afterSave\n            );\n            for (let handler of afterSaveHandlers) {\n                result.data = await handler.afterSave(\n                    result.data,\n                    dataProvider\n                );\n            }\n\n            return result;\n        },\n\n        create: async function <RecordType extends RaRecord = any>(\n            resource: string,\n            params: CreateParams<RecordType>\n        ) {\n            let newParams = params;\n            const beforeCreateHandlers = handlers.filter(\n                h => h.resource === resource && h.beforeCreate\n            );\n            for (let handler of beforeCreateHandlers) {\n                newParams = await handler.beforeCreate(newParams, dataProvider);\n            }\n            const beforeSaveHandlers = handlers.filter(\n                h => h.resource === resource && h.beforeSave\n            );\n            for (let handler of beforeSaveHandlers) {\n                newParams.data = await handler.beforeSave(\n                    newParams.data,\n                    dataProvider\n                );\n            }\n\n            let result = await dataProvider.create<RecordType>(\n                resource,\n                newParams\n            );\n\n            const afterCreateHandlers = handlers.filter(\n                h => h.resource === resource && h.afterCreate\n            );\n            for (let handler of afterCreateHandlers) {\n                result = await handler.afterCreate(result, dataProvider);\n            }\n            const afterSaveHandlers = handlers.filter(\n                h => h.resource === resource && h.afterSave\n            );\n            for (let handler of afterSaveHandlers) {\n                result.data = await handler.afterSave(\n                    result.data,\n                    dataProvider\n                );\n            }\n\n            return result;\n        },\n\n        delete: async function <RecordType extends RaRecord = any>(\n            resource: string,\n            params: DeleteParams<RecordType>\n        ) {\n            let newParams = params;\n            const beforeDeleteHandlers = handlers.filter(\n                h => h.resource === resource && h.beforeDelete\n            );\n            for (let handler of beforeDeleteHandlers) {\n                newParams = await handler.beforeDelete(newParams, dataProvider);\n            }\n\n            let result = await dataProvider.delete<RecordType>(\n                resource,\n                newParams\n            );\n\n            const afterDeleteHandlers = handlers.filter(\n                h => h.resource === resource && h.afterDelete\n            );\n            for (let handler of afterDeleteHandlers) {\n                result = await handler.afterDelete(result, dataProvider);\n            }\n\n            return result;\n        },\n\n        updateMany: async function <RecordType extends RaRecord = any>(\n            resource: string,\n            params: UpdateManyParams<RecordType>\n        ) {\n            let newParams = params;\n            const beforeUpdateManyHandlers = handlers.filter(\n                h => h.resource === resource && h.beforeUpdateMany\n            );\n            for (let handler of beforeUpdateManyHandlers) {\n                newParams = await handler.beforeUpdateMany(\n                    newParams,\n                    dataProvider\n                );\n            }\n            const beforeSaveHandlers = handlers.filter(\n                h => h.resource === resource && h.beforeSave\n            );\n            for (let handler of beforeSaveHandlers) {\n                newParams.data = await handler.beforeSave(\n                    newParams.data,\n                    dataProvider\n                );\n            }\n\n            let result = await dataProvider.updateMany<RecordType>(\n                resource,\n                newParams\n            );\n\n            const afterUpdateManyHandlers = handlers.filter(\n                h => h.resource === resource && h.afterUpdateMany\n            );\n            for (let handler of afterUpdateManyHandlers) {\n                result = await handler.afterUpdateMany(result, dataProvider);\n            }\n            const afterSaveHandlers = handlers.filter(\n                h => h.resource === resource && h.afterSave\n            );\n            if (afterSaveHandlers.length > 0) {\n                const { data: records } = await dataProvider.getMany(resource, {\n                    ids: result.data,\n                });\n\n                for (let handler of afterSaveHandlers) {\n                    await Promise.all(\n                        records.map(record =>\n                            handler.afterSave(record, dataProvider)\n                        )\n                    );\n                }\n            }\n\n            return result;\n        },\n\n        deleteMany: async function <RecordType extends RaRecord = any>(\n            resource: string,\n            params: DeleteManyParams<RecordType>\n        ) {\n            let newParams = params;\n            const beforeDeleteManyHandlers = handlers.filter(\n                h => h.resource === resource && h.beforeDeleteMany\n            );\n            for (let handler of beforeDeleteManyHandlers) {\n                newParams = await handler.beforeDeleteMany(\n                    newParams,\n                    dataProvider\n                );\n            }\n\n            let result = await dataProvider.deleteMany<RecordType>(\n                resource,\n                newParams\n            );\n\n            const afterDeleteManyHandlers = handlers.filter(\n                h => h.resource === resource && h.afterDeleteMany\n            );\n            for (let handler of afterDeleteManyHandlers) {\n                result = await handler.afterDeleteMany(result, dataProvider);\n            }\n\n            return result;\n        },\n    };\n};\n\nexport type ResourceCallbacks<T extends RaRecord = any> = {\n    resource: string;\n    afterCreate?: (\n        result: CreateResult<T>,\n        dataProvider: DataProvider\n    ) => Promise<CreateResult<T>>;\n    afterDelete?: (\n        result: DeleteResult<T>,\n        dataProvider: DataProvider\n    ) => Promise<DeleteResult<T>>;\n    afterDeleteMany?: (\n        result: DeleteManyResult<T>,\n        dataProvider: DataProvider\n    ) => Promise<DeleteManyResult<T>>;\n    afterGetList?: (\n        result: GetListResult<T>,\n        dataProvider: DataProvider\n    ) => Promise<GetListResult<T>>;\n    afterGetMany?: (\n        result: GetManyResult<T>,\n        dataProvider: DataProvider\n    ) => Promise<GetManyResult<T>>;\n    afterGetManyReference?: (\n        result: GetManyReferenceResult<T>,\n        dataProvider: DataProvider\n    ) => Promise<GetManyReferenceResult<T>>;\n    afterGetOne?: (\n        result: GetOneResult<T>,\n        dataProvider: DataProvider\n    ) => Promise<GetOneResult<T>>;\n    afterUpdate?: (\n        result: UpdateResult<T>,\n        dataProvider: DataProvider\n    ) => Promise<UpdateResult<T>>;\n    afterUpdateMany?: (\n        result: UpdateManyResult<T>,\n        dataProvider: DataProvider\n    ) => Promise<UpdateManyResult<T>>;\n    beforeCreate?: (\n        params: CreateParams<T>,\n        dataProvider: DataProvider\n    ) => Promise<CreateParams<T>>;\n    beforeDelete?: (\n        params: DeleteParams<T>,\n        dataProvider: DataProvider\n    ) => Promise<DeleteParams<T>>;\n    beforeDeleteMany?: (\n        params: DeleteManyParams<T>,\n        dataProvider: DataProvider\n    ) => Promise<DeleteManyParams<T>>;\n    beforeGetList?: (\n        params: GetListParams,\n        dataProvider: DataProvider\n    ) => Promise<GetListParams>;\n    beforeGetMany?: (\n        params: GetManyParams,\n        dataProvider: DataProvider\n    ) => Promise<GetManyParams>;\n    beforeGetManyReference?: (\n        params: GetManyReferenceParams,\n        dataProvider: DataProvider\n    ) => Promise<GetManyReferenceParams>;\n    beforeGetOne?: (\n        params: GetOneParams<T>,\n        dataProvider: DataProvider\n    ) => Promise<GetOneParams<T>>;\n    beforeUpdate?: (\n        params: UpdateParams<T>,\n        dataProvider: DataProvider\n    ) => Promise<UpdateParams<T>>;\n    beforeUpdateMany?: (\n        params: UpdateManyParams<T>,\n        dataProvider: DataProvider\n    ) => Promise<UpdateManyParams<T>>;\n\n    // The following hooks don't match a dataProvider method\n\n    /**\n     * Modify the data before it is sent to the dataProvider.\n     *\n     * Used in create, update, and updateMany\n     *\n     * Note: This callback doesn't modify the record itself, but the data argument\n     * (which may be a diff, especially when called with updateMany).\n     */\n    beforeSave?: (data: Partial<T>, dataProvider: DataProvider) => Promise<T>;\n    /**\n     * Update a record after it has been read from the dataProvider\n     *\n     * Used in getOne, getList, getMany, and getManyReference\n     */\n    afterRead?: (record: T, dataProvider: DataProvider) => Promise<T>;\n    /**\n     * Use the record after it is returned by the dataProvider.\n     *\n     * Used in create, update, and updateMany\n     */\n    afterSave?: (record: T, dataProvider: DataProvider) => Promise<T>;\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}