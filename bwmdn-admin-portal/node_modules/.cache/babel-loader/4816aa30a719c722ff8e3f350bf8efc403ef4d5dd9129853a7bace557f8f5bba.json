{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport get from 'lodash/get';\nimport { useCallback, useEffect, useRef } from 'react';\nimport isEqual from 'lodash/isEqual';\nimport { useSafeSetState, removeEmpty } from '../../util';\nimport { useGetManyReference } from '../../dataProvider';\nimport { useNotify } from '../../notification';\nimport usePaginationState from '../usePaginationState';\nimport { useRecordSelection } from '../list/useRecordSelection';\nimport useSortState from '../useSortState';\nimport { useResourceContext } from '../../core';\nvar defaultFilter = {};\n/**\n * Fetch reference records, and return them when available\n *\n * Uses dataProvider.getManyReference() internally.\n *\n * @example // fetch the comments related to the current post\n * const { isLoading, data } = useReferenceManyFieldController({\n *     reference: 'comments',\n *     target: 'post_id',\n *     record: { id: 123, title: 'hello, world' },\n *     resource: 'posts',\n * });\n *\n * @param {Object} props\n * @param {string} props.reference The linked resource name. Required.\n * @param {string} props.target The target resource key. Required.\n * @param {Object} props.filter The filter applied on the recorded records list\n * @param {number} props.page the page number\n * @param {number} props.perPage the number of item per page\n * @param {Object} props.record The current resource record\n * @param {string} props.resource The current resource name\n * @param {Object} props.sort the sort to apply to the referenced records\n * @param {string} props.source The key of the linked resource identifier\n *\n * @returns {ListControllerResult} The reference many props\n */\nexport var useReferenceManyFieldController = function (props) {\n  var reference = props.reference,\n    record = props.record,\n    target = props.target,\n    _a = props.filter,\n    filter = _a === void 0 ? defaultFilter : _a,\n    source = props.source,\n    initialPage = props.page,\n    initialPerPage = props.perPage,\n    _b = props.sort,\n    initialSort = _b === void 0 ? {\n      field: 'id',\n      order: 'DESC'\n    } : _b;\n  var notify = useNotify();\n  var resource = useResourceContext(props);\n  // pagination logic\n  var _c = usePaginationState({\n      page: initialPage,\n      perPage: initialPerPage\n    }),\n    page = _c.page,\n    setPage = _c.setPage,\n    perPage = _c.perPage,\n    setPerPage = _c.setPerPage;\n  // sort logic\n  var _d = useSortState(initialSort),\n    sort = _d.sort,\n    setSortState = _d.setSort;\n  var setSort = useCallback(function (sort) {\n    setSortState(sort);\n    setPage(1);\n  }, [setPage, setSortState]);\n  // selection logic\n  var _e = useRecordSelection(\"\".concat(resource, \".\").concat(record === null || record === void 0 ? void 0 : record.id, \".\").concat(reference)),\n    selectedIds = _e[0],\n    selectionModifiers = _e[1];\n  // filter logic\n  var filterRef = useRef(filter);\n  var _f = useSafeSetState({}),\n    displayedFilters = _f[0],\n    setDisplayedFilters = _f[1];\n  var _g = useSafeSetState(filter),\n    filterValues = _g[0],\n    setFilterValues = _g[1];\n  var hideFilter = useCallback(function (filterName) {\n    setDisplayedFilters(function (previousState) {\n      var _a = previousState,\n        _b = filterName,\n        _ = _a[_b],\n        newState = __rest(_a, [typeof _b === \"symbol\" ? _b : _b + \"\"]);\n      return newState;\n    });\n    setFilterValues(function (previousState) {\n      var _a = previousState,\n        _b = filterName,\n        _ = _a[_b],\n        newState = __rest(_a, [typeof _b === \"symbol\" ? _b : _b + \"\"]);\n      return newState;\n    });\n  }, [setDisplayedFilters, setFilterValues]);\n  var showFilter = useCallback(function (filterName, defaultValue) {\n    setDisplayedFilters(function (previousState) {\n      var _a;\n      return __assign(__assign({}, previousState), (_a = {}, _a[filterName] = true, _a));\n    });\n    setFilterValues(function (previousState) {\n      var _a;\n      return __assign(__assign({}, previousState), (_a = {}, _a[filterName] = defaultValue, _a));\n    });\n  }, [setDisplayedFilters, setFilterValues]);\n  var setFilters = useCallback(function (filters, displayedFilters) {\n    setFilterValues(removeEmpty(filters));\n    setDisplayedFilters(displayedFilters);\n    setPage(1);\n  }, [setDisplayedFilters, setFilterValues, setPage]);\n  // handle filter prop change\n  useEffect(function () {\n    if (!isEqual(filter, filterRef.current)) {\n      filterRef.current = filter;\n      setFilterValues(filter);\n    }\n  });\n  var _h = useGetManyReference(reference, {\n      target: target,\n      id: get(record, source),\n      pagination: {\n        page: page,\n        perPage: perPage\n      },\n      sort: sort,\n      filter: filterValues\n    }, {\n      keepPreviousData: true,\n      onError: function (error) {\n        return notify(typeof error === 'string' ? error : error.message || 'ra.notification.http_error', {\n          type: 'error',\n          messageArgs: {\n            _: typeof error === 'string' ? error : error && error.message ? error.message : undefined\n          }\n        });\n      }\n    }),\n    data = _h.data,\n    total = _h.total,\n    pageInfo = _h.pageInfo,\n    error = _h.error,\n    isFetching = _h.isFetching,\n    isLoading = _h.isLoading,\n    refetch = _h.refetch;\n  return {\n    sort: sort,\n    data: data,\n    defaultTitle: null,\n    displayedFilters: displayedFilters,\n    error: error,\n    filterValues: filterValues,\n    hideFilter: hideFilter,\n    isFetching: isFetching,\n    isLoading: isLoading,\n    onSelect: selectionModifiers.select,\n    onToggleItem: selectionModifiers.toggle,\n    onUnselectItems: selectionModifiers.clearSelection,\n    page: page,\n    perPage: perPage,\n    refetch: refetch,\n    resource: reference,\n    selectedIds: selectedIds,\n    setFilters: setFilters,\n    setPage: setPage,\n    setPerPage: setPerPage,\n    hasNextPage: pageInfo ? pageInfo.hasNextPage : total != null ? page * perPage < total : undefined,\n    hasPreviousPage: pageInfo ? pageInfo.hasPreviousPage : page > 1,\n    setSort: setSort,\n    showFilter: showFilter,\n    total: total\n  };\n};","map":{"version":3,"mappings":"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","names":["get","useCallback","useEffect","useRef","isEqual","useSafeSetState","removeEmpty","useGetManyReference","useNotify","usePaginationState","useRecordSelection","useSortState","useResourceContext","defaultFilter","useReferenceManyFieldController","props","record","target","_a","filter","source","initialPage","initialPerPage","_b","initialSort","field","order","notify","resource","page","perPage","setPage","setPerPage","sort","setSortState","setSort","id","reference","selectedIds","selectionModifiers","filterRef","displayedFilters","setDisplayedFilters","filterValues","setFilterValues","hideFilter","filterName","_","newState","showFilter","defaultValue","previousState","setFilters","filters","current","pagination","keepPreviousData","onError","error","message","type","messageArgs","undefined","data","total","pageInfo","isFetching","isLoading","refetch","defaultTitle","onSelect","select","onToggleItem","toggle","onUnselectItems","clearSelection","hasNextPage","hasPreviousPage"],"sources":["/Users/paigedeveau/Desktop/se-diva-docs-frontend/bwmdn-admin-portal/node_modules/ra-core/src/controller/field/useReferenceManyFieldController.ts"],"sourcesContent":["import get from 'lodash/get';\nimport { useCallback, useEffect, useRef } from 'react';\nimport isEqual from 'lodash/isEqual';\n\nimport { useSafeSetState, removeEmpty } from '../../util';\nimport { useGetManyReference } from '../../dataProvider';\nimport { useNotify } from '../../notification';\nimport { RaRecord, SortPayload } from '../../types';\nimport { ListControllerResult } from '../list';\nimport usePaginationState from '../usePaginationState';\nimport { useRecordSelection } from '../list/useRecordSelection';\nimport useSortState from '../useSortState';\nimport { useResourceContext } from '../../core';\n\nexport interface UseReferenceManyFieldControllerParams {\n    filter?: any;\n    page?: number;\n    perPage?: number;\n    record?: RaRecord;\n    reference: string;\n    resource?: string;\n    sort?: SortPayload;\n    source?: string;\n    target: string;\n}\n\nconst defaultFilter = {};\n\n/**\n * Fetch reference records, and return them when available\n *\n * Uses dataProvider.getManyReference() internally.\n *\n * @example // fetch the comments related to the current post\n * const { isLoading, data } = useReferenceManyFieldController({\n *     reference: 'comments',\n *     target: 'post_id',\n *     record: { id: 123, title: 'hello, world' },\n *     resource: 'posts',\n * });\n *\n * @param {Object} props\n * @param {string} props.reference The linked resource name. Required.\n * @param {string} props.target The target resource key. Required.\n * @param {Object} props.filter The filter applied on the recorded records list\n * @param {number} props.page the page number\n * @param {number} props.perPage the number of item per page\n * @param {Object} props.record The current resource record\n * @param {string} props.resource The current resource name\n * @param {Object} props.sort the sort to apply to the referenced records\n * @param {string} props.source The key of the linked resource identifier\n *\n * @returns {ListControllerResult} The reference many props\n */\nexport const useReferenceManyFieldController = (\n    props: UseReferenceManyFieldControllerParams\n): ListControllerResult => {\n    const {\n        reference,\n        record,\n        target,\n        filter = defaultFilter,\n        source,\n        page: initialPage,\n        perPage: initialPerPage,\n        sort: initialSort = { field: 'id', order: 'DESC' },\n    } = props;\n    const notify = useNotify();\n    const resource = useResourceContext(props);\n\n    // pagination logic\n    const { page, setPage, perPage, setPerPage } = usePaginationState({\n        page: initialPage,\n        perPage: initialPerPage,\n    });\n\n    // sort logic\n    const { sort, setSort: setSortState } = useSortState(initialSort);\n    const setSort = useCallback(\n        (sort: SortPayload) => {\n            setSortState(sort);\n            setPage(1);\n        },\n        [setPage, setSortState]\n    );\n\n    // selection logic\n    const [selectedIds, selectionModifiers] = useRecordSelection(\n        `${resource}.${record?.id}.${reference}`\n    );\n\n    // filter logic\n    const filterRef = useRef(filter);\n    const [displayedFilters, setDisplayedFilters] = useSafeSetState<{\n        [key: string]: boolean;\n    }>({});\n    const [filterValues, setFilterValues] = useSafeSetState<{\n        [key: string]: any;\n    }>(filter);\n    const hideFilter = useCallback(\n        (filterName: string) => {\n            setDisplayedFilters(previousState => {\n                const { [filterName]: _, ...newState } = previousState;\n                return newState;\n            });\n            setFilterValues(previousState => {\n                const { [filterName]: _, ...newState } = previousState;\n                return newState;\n            });\n        },\n        [setDisplayedFilters, setFilterValues]\n    );\n    const showFilter = useCallback(\n        (filterName: string, defaultValue: any) => {\n            setDisplayedFilters(previousState => ({\n                ...previousState,\n                [filterName]: true,\n            }));\n            setFilterValues(previousState => ({\n                ...previousState,\n                [filterName]: defaultValue,\n            }));\n        },\n        [setDisplayedFilters, setFilterValues]\n    );\n    const setFilters = useCallback(\n        (filters, displayedFilters) => {\n            setFilterValues(removeEmpty(filters));\n            setDisplayedFilters(displayedFilters);\n            setPage(1);\n        },\n        [setDisplayedFilters, setFilterValues, setPage]\n    );\n    // handle filter prop change\n    useEffect(() => {\n        if (!isEqual(filter, filterRef.current)) {\n            filterRef.current = filter;\n            setFilterValues(filter);\n        }\n    });\n\n    const {\n        data,\n        total,\n        pageInfo,\n        error,\n        isFetching,\n        isLoading,\n        refetch,\n    } = useGetManyReference(\n        reference,\n        {\n            target,\n            id: get(record, source),\n            pagination: { page, perPage },\n            sort,\n            filter: filterValues,\n        },\n        {\n            keepPreviousData: true,\n            onError: error =>\n                notify(\n                    typeof error === 'string'\n                        ? error\n                        : error.message || 'ra.notification.http_error',\n                    {\n                        type: 'error',\n                        messageArgs: {\n                            _:\n                                typeof error === 'string'\n                                    ? error\n                                    : error && error.message\n                                    ? error.message\n                                    : undefined,\n                        },\n                    }\n                ),\n        }\n    );\n\n    return {\n        sort,\n        data,\n        defaultTitle: null,\n        displayedFilters,\n        error,\n        filterValues,\n        hideFilter,\n        isFetching,\n        isLoading,\n        onSelect: selectionModifiers.select,\n        onToggleItem: selectionModifiers.toggle,\n        onUnselectItems: selectionModifiers.clearSelection,\n        page,\n        perPage,\n        refetch,\n        resource: reference,\n        selectedIds,\n        setFilters,\n        setPage,\n        setPerPage,\n        hasNextPage: pageInfo\n            ? pageInfo.hasNextPage\n            : total != null\n            ? page * perPage < total\n            : undefined,\n        hasPreviousPage: pageInfo ? pageInfo.hasPreviousPage : page > 1,\n        setSort,\n        showFilter,\n        total,\n    };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}