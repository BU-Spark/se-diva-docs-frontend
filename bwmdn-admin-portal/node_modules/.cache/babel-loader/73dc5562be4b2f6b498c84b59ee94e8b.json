{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { useInput, FieldTitle } from 'ra-core';\nimport { ResettableTextField } from './ResettableTextField';\nimport { InputHelperText } from './InputHelperText';\nimport { sanitizeInputRestProps } from './sanitizeInputRestProps';\n/**\n * An Input component for a string\n *\n * @example\n * <TextInput source=\"first_name\" />\n *\n * You can customize the `type` props (which defaults to \"text\").\n * Note that, due to a React bug, you should use `<NumberField>` instead of using type=\"number\".\n * @example\n * <TextInput source=\"email\" type=\"email\" />\n * <NumberInput source=\"nb_views\" />\n *\n * The object passed as `options` props is passed to the <ResettableTextField> component\n */\nexport var TextInput = function (props) {\n  var className = props.className,\n    defaultValue = props.defaultValue,\n    label = props.label,\n    format = props.format,\n    helperText = props.helperText,\n    onBlur = props.onBlur,\n    onChange = props.onChange,\n    parse = props.parse,\n    resource = props.resource,\n    source = props.source,\n    validate = props.validate,\n    rest = __rest(props, [\"className\", \"defaultValue\", \"label\", \"format\", \"helperText\", \"onBlur\", \"onChange\", \"parse\", \"resource\", \"source\", \"validate\"]);\n  var _a = useInput(__assign({\n      defaultValue: defaultValue,\n      format: format,\n      parse: parse,\n      resource: resource,\n      source: source,\n      type: 'text',\n      validate: validate,\n      onBlur: onBlur,\n      onChange: onChange\n    }, rest)),\n    field = _a.field,\n    _b = _a.fieldState,\n    error = _b.error,\n    invalid = _b.invalid,\n    isTouched = _b.isTouched,\n    isSubmitted = _a.formState.isSubmitted,\n    id = _a.id,\n    isRequired = _a.isRequired;\n  return React.createElement(ResettableTextField, __assign({\n    id: id\n  }, field, {\n    className: clsx('ra-input', \"ra-input-\".concat(source), className),\n    label: label !== '' && label !== false ? React.createElement(FieldTitle, {\n      label: label,\n      source: source,\n      resource: resource,\n      isRequired: isRequired\n    }) : null,\n    error: (isTouched || isSubmitted) && invalid,\n    helperText: React.createElement(InputHelperText, {\n      touched: isTouched || isSubmitted,\n      error: error === null || error === void 0 ? void 0 : error.message,\n      helperText: helperText\n    })\n  }, sanitizeInputRestProps(rest)));\n};\nTextInput.propTypes = {\n  className: PropTypes.string,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.bool, PropTypes.element]),\n  options: PropTypes.object,\n  resource: PropTypes.string,\n  source: PropTypes.string\n};\nTextInput.defaultProps = {\n  options: {}\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,IAAI,MAAM,MAAM;AACvB,SAASC,QAAQ,EAAEC,UAAU,QAAQ,SAAS;AAG9C,SACIC,mBAAmB,QAEhB,uBAAuB;AAC9B,SAASC,eAAe,QAAQ,mBAAmB;AACnD,SAASC,sBAAsB,QAAQ,0BAA0B;AAEjE;;;;;;;;;;;;;;AAcA,OAAO,IAAMC,SAAS,GAAG,UAACC,KAAqB;EAEvC,aAAS,GAYTA,KAAK,UAZI;IACTC,YAAY,GAWZD,KAAK,aAXO;IACZE,KAAK,GAULF,KAAK,MAVA;IACLG,MAAM,GASNH,KAAK,OATC;IACNI,UAAU,GAQVJ,KAAK,WARK;IACVK,MAAM,GAONL,KAAK,OAPC;IACNM,QAAQ,GAMRN,KAAK,SANG;IACRO,KAAK,GAKLP,KAAK,MALA;IACLQ,QAAQ,GAIRR,KAAK,SAJG;IACRS,MAAM,GAGNT,KAAK,OAHC;IACNU,QAAQ,GAERV,KAAK,SAFG;IACLW,IAAI,UACPX,KAAK,EAbH,+HAaL,CADU;EAEL,SAMFN,QAAQ;MACRO,YAAY;MACZE,MAAM;MACNI,KAAK;MACLC,QAAQ;MACRC,MAAM;MACNG,IAAI,EAAE,MAAM;MACZF,QAAQ;MACRL,MAAM;MACNC,QAAQ;IAAA,GACLK,IAAI,EACT;IAhBEE,KAAK;IACLC,kBAAyC;IAA3BC,KAAK;IAAEC,OAAO;IAAEC,SAAS;IAC1BC,WAAW;IACxBC,EAAE;IACFC,UAAU,gBAYZ;EACF,OACI7B,oBAACK,mBAAmB;IAChBuB,EAAE,EAAEA;EAAE,GACFN,KAAK;IACTQ,SAAS,EAAE5B,IAAI,CAAC,UAAU,EAAE,mBAAYgB,MAAM,CAAE,EAAEY,SAAS,CAAC;IAC5DnB,KAAK,EACDA,KAAK,KAAK,EAAE,IAAIA,KAAK,KAAK,KAAK,GAC3BX,oBAACI,UAAU;MACPO,KAAK,EAAEA,KAAK;MACZO,MAAM,EAAEA,MAAM;MACdD,QAAQ,EAAEA,QAAQ;MAClBY,UAAU,EAAEA;IAAU,EACxB,GACF,IAAI;IAEZL,KAAK,EAAE,CAACE,SAAS,IAAIC,WAAW,KAAKF,OAAO;IAC5CZ,UAAU,EACNb,oBAACM,eAAe;MACZyB,OAAO,EAAEL,SAAS,IAAIC,WAAW;MACjCH,KAAK,EAAEA,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEQ,OAAO;MACrBnB,UAAU,EAAEA;IAAU;EACxB,GAEFN,sBAAsB,CAACa,IAAI,CAAC,EAClC;AAEV,CAAC;AAEDZ,SAAS,CAACyB,SAAS,GAAG;EAClBH,SAAS,EAAE7B,SAAS,CAACiC,MAAM;EAC3BvB,KAAK,EAAEV,SAAS,CAACkC,SAAS,CAAC,CACvBlC,SAAS,CAACiC,MAAM,EAChBjC,SAAS,CAACmC,IAAI,EACdnC,SAAS,CAACoC,OAAO,CACpB,CAAC;EACFC,OAAO,EAAErC,SAAS,CAACsC,MAAM;EACzBtB,QAAQ,EAAEhB,SAAS,CAACiC,MAAM;EAC1BhB,MAAM,EAAEjB,SAAS,CAACiC;CACrB;AAED1B,SAAS,CAACgC,YAAY,GAAG;EACrBF,OAAO,EAAE;CACZ","names":["React","PropTypes","clsx","useInput","FieldTitle","ResettableTextField","InputHelperText","sanitizeInputRestProps","TextInput","props","defaultValue","label","format","helperText","onBlur","onChange","parse","resource","source","validate","rest","type","field","_b","error","invalid","isTouched","isSubmitted","id","isRequired","className","touched","message","propTypes","string","oneOfType","bool","element","options","object","defaultProps"],"sourceRoot":"","sources":["../../../src/input/TextInput.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}