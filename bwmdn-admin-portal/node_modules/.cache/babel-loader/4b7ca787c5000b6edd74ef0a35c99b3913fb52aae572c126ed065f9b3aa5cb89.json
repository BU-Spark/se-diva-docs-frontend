{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nexports['default'] = syncHistoryWithStore;\nvar _reducer = require('./reducer');\nvar defaultSelectLocationState = function defaultSelectLocationState(state) {\n  return state.routing;\n};\n\n/**\n * This function synchronizes your history state with the Redux store.\n * Location changes flow from history to the store. An enhanced history is\n * returned with a listen method that responds to store updates for location.\n *\n * When this history is provided to the router, this means the location data\n * will flow like this:\n * history.push -> store.dispatch -> enhancedHistory.listen -> router\n * This ensures that when the store state changes due to a replay or other\n * event, the router will be updated appropriately and can transition to the\n * correct router state.\n */\nfunction syncHistoryWithStore(history, store) {\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n    _ref$selectLocationSt = _ref.selectLocationState,\n    selectLocationState = _ref$selectLocationSt === undefined ? defaultSelectLocationState : _ref$selectLocationSt,\n    _ref$adjustUrlOnRepla = _ref.adjustUrlOnReplay,\n    adjustUrlOnReplay = _ref$adjustUrlOnRepla === undefined ? true : _ref$adjustUrlOnRepla;\n\n  // Ensure that the reducer is mounted on the store and functioning properly.\n  if (typeof selectLocationState(store.getState()) === 'undefined') {\n    throw new Error('Expected the routing state to be available either as `state.routing` ' + 'or as the custom expression you can specify as `selectLocationState` ' + 'in the `syncHistoryWithStore()` options. ' + 'Ensure you have added the `routerReducer` to your store\\'s ' + 'reducers via `combineReducers` or whatever method you use to isolate ' + 'your reducers.');\n  }\n  var initialLocation = void 0;\n  var isTimeTraveling = void 0;\n  var unsubscribeFromStore = void 0;\n  var unsubscribeFromHistory = void 0;\n  var currentLocation = void 0;\n\n  // What does the store say about current location?\n  var getLocationInStore = function getLocationInStore(useInitialIfEmpty) {\n    var locationState = selectLocationState(store.getState());\n    return locationState.locationBeforeTransitions || (useInitialIfEmpty ? initialLocation : undefined);\n  };\n\n  // Init initialLocation with potential location in store\n  initialLocation = getLocationInStore();\n\n  // If the store is replayed, update the URL in the browser to match.\n  if (adjustUrlOnReplay) {\n    var handleStoreChange = function handleStoreChange() {\n      var locationInStore = getLocationInStore(true);\n      if (currentLocation === locationInStore || initialLocation === locationInStore) {\n        return;\n      }\n\n      // Update address bar to reflect store state\n      isTimeTraveling = true;\n      currentLocation = locationInStore;\n      history.transitionTo(_extends({}, locationInStore, {\n        action: 'PUSH'\n      }));\n      isTimeTraveling = false;\n    };\n    unsubscribeFromStore = store.subscribe(handleStoreChange);\n    handleStoreChange();\n  }\n\n  // Whenever location changes, dispatch an action to get it in the store\n  var handleLocationChange = function handleLocationChange(location) {\n    // ... unless we just caused that location change\n    if (isTimeTraveling) {\n      return;\n    }\n\n    // Remember where we are\n    currentLocation = location;\n\n    // Are we being called for the first time?\n    if (!initialLocation) {\n      // Remember as a fallback in case state is reset\n      initialLocation = location;\n\n      // Respect persisted location, if any\n      if (getLocationInStore()) {\n        return;\n      }\n    }\n\n    // Tell the store to update by dispatching an action\n    store.dispatch({\n      type: _reducer.LOCATION_CHANGE,\n      payload: location\n    });\n  };\n  unsubscribeFromHistory = history.listen(handleLocationChange);\n\n  // History 3.x doesn't call listen synchronously, so fire the initial location change ourselves\n  if (history.getCurrentLocation) {\n    handleLocationChange(history.getCurrentLocation());\n  }\n\n  // The enhanced history uses store as source of truth\n  return _extends({}, history, {\n    // The listeners are subscribed to the store instead of history\n    listen: function listen(listener) {\n      // Copy of last location.\n      var lastPublishedLocation = getLocationInStore(true);\n\n      // Keep track of whether we unsubscribed, as Redux store\n      // only applies changes in subscriptions on next dispatch\n      var unsubscribed = false;\n      var unsubscribeFromStore = store.subscribe(function () {\n        var currentLocation = getLocationInStore(true);\n        if (currentLocation === lastPublishedLocation) {\n          return;\n        }\n        lastPublishedLocation = currentLocation;\n        if (!unsubscribed) {\n          listener(lastPublishedLocation);\n        }\n      });\n\n      // History 2.x listeners expect a synchronous call. Make the first call to the\n      // listener after subscribing to the store, in case the listener causes a\n      // location change (e.g. when it redirects)\n      if (!history.getCurrentLocation) {\n        listener(lastPublishedLocation);\n      }\n\n      // Let user unsubscribe later\n      return function () {\n        unsubscribed = true;\n        unsubscribeFromStore();\n      };\n    },\n    // It also provides a way to destroy internal listeners\n    unsubscribe: function unsubscribe() {\n      if (adjustUrlOnReplay) {\n        unsubscribeFromStore();\n      }\n      unsubscribeFromHistory();\n    }\n  });\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","_extends","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","syncHistoryWithStore","_reducer","require","defaultSelectLocationState","state","routing","history","store","_ref","undefined","_ref$selectLocationSt","selectLocationState","_ref$adjustUrlOnRepla","adjustUrlOnReplay","getState","Error","initialLocation","isTimeTraveling","unsubscribeFromStore","unsubscribeFromHistory","currentLocation","getLocationInStore","useInitialIfEmpty","locationState","locationBeforeTransitions","handleStoreChange","locationInStore","transitionTo","action","subscribe","handleLocationChange","location","dispatch","type","LOCATION_CHANGE","payload","listen","getCurrentLocation","listener","lastPublishedLocation","unsubscribed","unsubscribe"],"sources":["/Users/paigedeveau/node_modules/react-router-redux/lib/sync.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports['default'] = syncHistoryWithStore;\n\nvar _reducer = require('./reducer');\n\nvar defaultSelectLocationState = function defaultSelectLocationState(state) {\n  return state.routing;\n};\n\n/**\n * This function synchronizes your history state with the Redux store.\n * Location changes flow from history to the store. An enhanced history is\n * returned with a listen method that responds to store updates for location.\n *\n * When this history is provided to the router, this means the location data\n * will flow like this:\n * history.push -> store.dispatch -> enhancedHistory.listen -> router\n * This ensures that when the store state changes due to a replay or other\n * event, the router will be updated appropriately and can transition to the\n * correct router state.\n */\nfunction syncHistoryWithStore(history, store) {\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref$selectLocationSt = _ref.selectLocationState,\n      selectLocationState = _ref$selectLocationSt === undefined ? defaultSelectLocationState : _ref$selectLocationSt,\n      _ref$adjustUrlOnRepla = _ref.adjustUrlOnReplay,\n      adjustUrlOnReplay = _ref$adjustUrlOnRepla === undefined ? true : _ref$adjustUrlOnRepla;\n\n  // Ensure that the reducer is mounted on the store and functioning properly.\n  if (typeof selectLocationState(store.getState()) === 'undefined') {\n    throw new Error('Expected the routing state to be available either as `state.routing` ' + 'or as the custom expression you can specify as `selectLocationState` ' + 'in the `syncHistoryWithStore()` options. ' + 'Ensure you have added the `routerReducer` to your store\\'s ' + 'reducers via `combineReducers` or whatever method you use to isolate ' + 'your reducers.');\n  }\n\n  var initialLocation = void 0;\n  var isTimeTraveling = void 0;\n  var unsubscribeFromStore = void 0;\n  var unsubscribeFromHistory = void 0;\n  var currentLocation = void 0;\n\n  // What does the store say about current location?\n  var getLocationInStore = function getLocationInStore(useInitialIfEmpty) {\n    var locationState = selectLocationState(store.getState());\n    return locationState.locationBeforeTransitions || (useInitialIfEmpty ? initialLocation : undefined);\n  };\n\n  // Init initialLocation with potential location in store\n  initialLocation = getLocationInStore();\n\n  // If the store is replayed, update the URL in the browser to match.\n  if (adjustUrlOnReplay) {\n    var handleStoreChange = function handleStoreChange() {\n      var locationInStore = getLocationInStore(true);\n      if (currentLocation === locationInStore || initialLocation === locationInStore) {\n        return;\n      }\n\n      // Update address bar to reflect store state\n      isTimeTraveling = true;\n      currentLocation = locationInStore;\n      history.transitionTo(_extends({}, locationInStore, {\n        action: 'PUSH'\n      }));\n      isTimeTraveling = false;\n    };\n\n    unsubscribeFromStore = store.subscribe(handleStoreChange);\n    handleStoreChange();\n  }\n\n  // Whenever location changes, dispatch an action to get it in the store\n  var handleLocationChange = function handleLocationChange(location) {\n    // ... unless we just caused that location change\n    if (isTimeTraveling) {\n      return;\n    }\n\n    // Remember where we are\n    currentLocation = location;\n\n    // Are we being called for the first time?\n    if (!initialLocation) {\n      // Remember as a fallback in case state is reset\n      initialLocation = location;\n\n      // Respect persisted location, if any\n      if (getLocationInStore()) {\n        return;\n      }\n    }\n\n    // Tell the store to update by dispatching an action\n    store.dispatch({\n      type: _reducer.LOCATION_CHANGE,\n      payload: location\n    });\n  };\n  unsubscribeFromHistory = history.listen(handleLocationChange);\n\n  // History 3.x doesn't call listen synchronously, so fire the initial location change ourselves\n  if (history.getCurrentLocation) {\n    handleLocationChange(history.getCurrentLocation());\n  }\n\n  // The enhanced history uses store as source of truth\n  return _extends({}, history, {\n    // The listeners are subscribed to the store instead of history\n    listen: function listen(listener) {\n      // Copy of last location.\n      var lastPublishedLocation = getLocationInStore(true);\n\n      // Keep track of whether we unsubscribed, as Redux store\n      // only applies changes in subscriptions on next dispatch\n      var unsubscribed = false;\n      var unsubscribeFromStore = store.subscribe(function () {\n        var currentLocation = getLocationInStore(true);\n        if (currentLocation === lastPublishedLocation) {\n          return;\n        }\n        lastPublishedLocation = currentLocation;\n        if (!unsubscribed) {\n          listener(lastPublishedLocation);\n        }\n      });\n\n      // History 2.x listeners expect a synchronous call. Make the first call to the\n      // listener after subscribing to the store, in case the listener causes a\n      // location change (e.g. when it redirects)\n      if (!history.getCurrentLocation) {\n        listener(lastPublishedLocation);\n      }\n\n      // Let user unsubscribe later\n      return function () {\n        unsubscribed = true;\n        unsubscribeFromStore();\n      };\n    },\n\n\n    // It also provides a way to destroy internal listeners\n    unsubscribe: function unsubscribe() {\n      if (adjustUrlOnReplay) {\n        unsubscribeFromStore();\n      }\n      unsubscribeFromHistory();\n    }\n  });\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}