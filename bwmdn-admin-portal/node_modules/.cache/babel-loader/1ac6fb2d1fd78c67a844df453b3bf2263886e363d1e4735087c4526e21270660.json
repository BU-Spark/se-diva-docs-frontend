{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport ContentCreate from '@mui/icons-material/Create';\nimport { Link } from 'react-router-dom';\nimport { useResourceContext, useRecordContext, useCreatePath } from 'ra-core';\nimport { Button } from './Button';\n/**\n * Opens the Edit view for the current record.\n *\n * Reads the record and resource from the context.\n *\n * @example // basic usage\n * import { EditButton } from 'react-admin';\n *\n * const CommentEditButton = () => (\n *     <EditButton label=\"Edit comment\" />\n * );\n */\nexport var EditButton = function (props) {\n  var _a = props.icon,\n    icon = _a === void 0 ? defaultIcon : _a,\n    _b = props.label,\n    label = _b === void 0 ? 'ra.action.edit' : _b,\n    _c = props.scrollToTop,\n    scrollToTop = _c === void 0 ? true : _c,\n    rest = __rest(props, [\"icon\", \"label\", \"scrollToTop\"]);\n  var resource = useResourceContext(props);\n  var record = useRecordContext(props);\n  var createPath = useCreatePath();\n  if (!record) return null;\n  return React.createElement(Button, __assign({\n    component: Link,\n    to: createPath({\n      type: 'edit',\n      resource: resource,\n      id: record.id\n    }),\n    state: scrollStates[String(scrollToTop)],\n    label: label,\n    onClick: stopPropagation\n  }, rest), icon);\n};\n// avoids using useMemo to get a constant value for the link state\nvar scrollStates = {\n  true: {\n    _scrollToTop: true\n  },\n  false: {}\n};\nvar defaultIcon = React.createElement(ContentCreate, null);\n// useful to prevent click bubbling in a datagrid with rowClick\nvar stopPropagation = function (e) {\n  return e.stopPropagation();\n};\nEditButton.propTypes = {\n  icon: PropTypes.element,\n  label: PropTypes.string,\n  record: PropTypes.any,\n  scrollToTop: PropTypes.bool\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,aAAa,MAAM,4BAA4B;AACtD,SAASC,IAAI,QAAQ,kBAAkB;AACvC,SAEIC,kBAAkB,EAClBC,gBAAgB,EAChBC,aAAa,QACV,SAAS;AAEhB,SAASC,MAAM,QAAqB,UAAU;AAE9C;;;;;;;;;;;;AAYA,OAAO,IAAMC,UAAU,GAAG,UACtBC,KAAkC;EAG9B,SAIAA,KAAK,KAJa;IAAlBC,IAAI,mBAAGC,WAAW;IAClBC,KAGAH,KAAK,MAHmB;IAAxBI,KAAK,mBAAG,gBAAgB;IACxBC,KAEAL,KAAK,YAFa;IAAlBM,WAAW,mBAAG,IAAI;IACfC,IAAI,UACPP,KAAK,EALH,gCAKL,CADU;EAEX,IAAMQ,QAAQ,GAAGb,kBAAkB,CAACK,KAAK,CAAC;EAC1C,IAAMS,MAAM,GAAGb,gBAAgB,CAACI,KAAK,CAAC;EACtC,IAAMU,UAAU,GAAGb,aAAa,EAAE;EAClC,IAAI,CAACY,MAAM,EAAE,OAAO,IAAI;EACxB,OACIlB,oBAACO,MAAM;IACHa,SAAS,EAAEjB,IAAI;IACfkB,EAAE,EAAEF,UAAU,CAAC;MAAEG,IAAI,EAAE,MAAM;MAAEL,QAAQ;MAAEM,EAAE,EAAEL,MAAM,CAACK;IAAE,CAAE,CAAC;IACzDC,KAAK,EAAEC,YAAY,CAACC,MAAM,CAACX,WAAW,CAAC,CAAC;IACxCF,KAAK,EAAEA,KAAK;IACZc,OAAO,EAAEC;EAAe,GACnBZ,IAAY,GAEhBN,IAAI,CACA;AAEjB,CAAC;AAED;AACA,IAAMe,YAAY,GAAG;EACjBI,IAAI,EAAE;IAAEC,YAAY,EAAE;EAAI,CAAE;EAC5BC,KAAK,EAAE;CACV;AAED,IAAMpB,WAAW,GAAGX,oBAACE,aAAa,OAAG;AAErC;AACA,IAAM0B,eAAe,GAAG,WAAC;EAAI,QAAC,CAACA,eAAe,EAAE;AAAnB,CAAmB;AAehDpB,UAAU,CAACwB,SAAS,GAAG;EACnBtB,IAAI,EAAET,SAAS,CAACgC,OAAO;EACvBpB,KAAK,EAAEZ,SAAS,CAACiC,MAAM;EACvBhB,MAAM,EAAEjB,SAAS,CAACkC,GAAG;EACrBpB,WAAW,EAAEd,SAAS,CAACmC;CAC1B","names":["React","PropTypes","ContentCreate","Link","useResourceContext","useRecordContext","useCreatePath","Button","EditButton","props","icon","defaultIcon","_b","label","_c","scrollToTop","rest","resource","record","createPath","component","to","type","id","state","scrollStates","String","onClick","stopPropagation","true","_scrollToTop","false","propTypes","element","string","any","bool"],"sources":["/Users/paigedeveau/Desktop/se-diva-docs-frontend/bwmdn-admin-portal/node_modules/ra-ui-materialui/src/button/EditButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport ContentCreate from '@mui/icons-material/Create';\nimport { Link } from 'react-router-dom';\nimport {\n    RaRecord,\n    useResourceContext,\n    useRecordContext,\n    useCreatePath,\n} from 'ra-core';\n\nimport { Button, ButtonProps } from './Button';\n\n/**\n * Opens the Edit view for the current record.\n *\n * Reads the record and resource from the context.\n *\n * @example // basic usage\n * import { EditButton } from 'react-admin';\n *\n * const CommentEditButton = () => (\n *     <EditButton label=\"Edit comment\" />\n * );\n */\nexport const EditButton = <RecordType extends RaRecord = any>(\n    props: EditButtonProps<RecordType>\n) => {\n    const {\n        icon = defaultIcon,\n        label = 'ra.action.edit',\n        scrollToTop = true,\n        ...rest\n    } = props;\n    const resource = useResourceContext(props);\n    const record = useRecordContext(props);\n    const createPath = useCreatePath();\n    if (!record) return null;\n    return (\n        <Button\n            component={Link}\n            to={createPath({ type: 'edit', resource, id: record.id })}\n            state={scrollStates[String(scrollToTop)]}\n            label={label}\n            onClick={stopPropagation}\n            {...(rest as any)}\n        >\n            {icon}\n        </Button>\n    );\n};\n\n// avoids using useMemo to get a constant value for the link state\nconst scrollStates = {\n    true: { _scrollToTop: true },\n    false: {},\n};\n\nconst defaultIcon = <ContentCreate />;\n\n// useful to prevent click bubbling in a datagrid with rowClick\nconst stopPropagation = e => e.stopPropagation();\n\ninterface Props<RecordType extends RaRecord = any> {\n    icon?: ReactElement;\n    label?: string;\n    record?: RecordType;\n    resource?: string;\n    scrollToTop?: boolean;\n}\n\nexport type EditButtonProps<RecordType extends RaRecord = any> = Props<\n    RecordType\n> &\n    ButtonProps;\n\nEditButton.propTypes = {\n    icon: PropTypes.element,\n    label: PropTypes.string,\n    record: PropTypes.any,\n    scrollToTop: PropTypes.bool,\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}