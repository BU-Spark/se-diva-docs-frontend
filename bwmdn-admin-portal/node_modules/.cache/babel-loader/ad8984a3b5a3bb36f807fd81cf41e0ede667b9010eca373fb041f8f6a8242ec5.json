{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport * as React from 'react';\nimport { useStore, useTranslate, useResourceContext } from 'ra-core';\nimport { Box, Button, Popover, useMediaQuery, Tooltip, IconButton } from '@mui/material';\nimport ViewWeekIcon from '@mui/icons-material/ViewWeek';\nimport { FieldToggle } from '../../preferences';\nimport { styled } from '@mui/material/styles';\n/**\n * Renders a button that lets users show / hide columns in a configurable datagrid\n *\n * @example\n * import { SelectColumnsButton, DatagridConfigurable } from 'react-admin';\n *\n * const PostListActions = () => (\n *   <TopToolbar>\n        <SelectColumnsButton />\n        <FilterButton />\n *   </TopToolbar>\n * );\n *\n * const PostList = () => (\n *   <List actions={<PostListActions />}>\n *     <DatagridConfigurable>\n *       <TextField source=\"title\" />\n *       <TextField source=\"author\" />\n         ...\n *     </DatagridConfigurable>\n *   </List>\n * );\n */\nexport var SelectColumnsButton = function (props) {\n  var preferenceKey = props.preferenceKey;\n  var resource = useResourceContext(props);\n  var finalPreferenceKey = preferenceKey || \"\".concat(resource, \".datagrid\");\n  var _a = React.useState(null),\n    anchorEl = _a[0],\n    setAnchorEl = _a[1];\n  var _b = useStore(\"preferences.\".concat(finalPreferenceKey, \".availableColumns\"), []),\n    availableColumns = _b[0],\n    setAvailableColumns = _b[1];\n  var omit = useStore(\"preferences.\".concat(finalPreferenceKey, \".omit\"), [])[0];\n  var _c = useStore(\"preferences.\".concat(finalPreferenceKey, \".columns\"), availableColumns.filter(function (column) {\n      return !(omit === null || omit === void 0 ? void 0 : omit.includes(column.source));\n    }).map(function (column) {\n      return column.index;\n    })),\n    columns = _c[0],\n    setColumns = _c[1];\n  var translate = useTranslate();\n  var isXSmall = useMediaQuery(function (theme) {\n    return theme.breakpoints.down('sm');\n  });\n  var title = translate('ra.action.select_columns', {\n    _: 'Columns'\n  });\n  var handleClick = function (event) {\n    setAnchorEl(event.currentTarget);\n  };\n  var handleClose = function () {\n    setAnchorEl(null);\n  };\n  var handleToggle = function (event) {\n    if (event.target.checked) {\n      // add the column at the right position\n      setColumns(availableColumns.filter(function (column) {\n        return column.index === event.target.name || columns.includes(column.index);\n      }).map(function (column) {\n        return column.index;\n      }));\n    } else {\n      setColumns(columns.filter(function (index) {\n        return index !== event.target.name;\n      }));\n    }\n  };\n  var handleMove = function (index1, index2) {\n    var index1Pos = availableColumns.findIndex(\n    // eslint-disable-next-line eqeqeq\n    function (field) {\n      return field.index == index1;\n    });\n    var index2Pos = availableColumns.findIndex(\n    // eslint-disable-next-line eqeqeq\n    function (field) {\n      return field.index == index2;\n    });\n    if (index1Pos === -1 || index2Pos === -1) {\n      return;\n    }\n    var newAvailableColumns;\n    if (index1Pos > index2Pos) {\n      newAvailableColumns = __spreadArray(__spreadArray(__spreadArray(__spreadArray([], availableColumns.slice(0, index2Pos), true), [availableColumns[index1Pos]], false), availableColumns.slice(index2Pos, index1Pos), true), availableColumns.slice(index1Pos + 1), true);\n    } else {\n      newAvailableColumns = __spreadArray(__spreadArray(__spreadArray(__spreadArray([], availableColumns.slice(0, index1Pos), true), availableColumns.slice(index1Pos + 1, index2Pos + 1), true), [availableColumns[index1Pos]], false), availableColumns.slice(index2Pos + 1), true);\n    }\n    setAvailableColumns(newAvailableColumns);\n    setColumns(function (columns) {\n      return newAvailableColumns.filter(function (column) {\n        return columns.includes(column.index);\n      }).map(function (column) {\n        return column.index;\n      });\n    });\n  };\n  return React.createElement(React.Fragment, null, isXSmall ? React.createElement(Tooltip, {\n    title: title\n  }, React.createElement(IconButton, __assign({\n    \"aria-label\": title,\n    color: \"primary\",\n    onClick: handleClick,\n    size: \"large\"\n  }, sanitizeRestProps(props)), React.createElement(ViewWeekIcon, null))) : React.createElement(StyledButton, __assign({\n    size: \"small\",\n    onClick: handleClick,\n    startIcon: React.createElement(ViewWeekIcon, null)\n  }, sanitizeRestProps(props)), title), React.createElement(Popover, {\n    open: Boolean(anchorEl),\n    anchorEl: anchorEl,\n    onClose: handleClose,\n    anchorOrigin: {\n      vertical: 'bottom',\n      horizontal: 'center'\n    },\n    transformOrigin: {\n      vertical: 'top',\n      horizontal: 'center'\n    }\n  }, React.createElement(Box, {\n    p: 1\n  }, availableColumns.map(function (column) {\n    return React.createElement(FieldToggle, {\n      key: column.index,\n      source: column.source,\n      label: column.label,\n      index: column.index,\n      selected: columns.includes(column.index),\n      onToggle: handleToggle,\n      onMove: handleMove\n    });\n  }))));\n};\nvar StyledButton = styled(Button, {\n  name: 'RaSelectColumnsButton',\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})({\n  '&.MuiButton-sizeSmall': {\n    // fix for icon misalignment on small buttons, see https://github.com/mui/material-ui/pull/30240\n    lineHeight: 1.5\n  }\n});\nvar sanitizeRestProps = function (_a) {\n  var _b = _a.resource,\n    resource = _b === void 0 ? null : _b,\n    _c = _a.preferenceKey,\n    preferenceKey = _c === void 0 ? null : _c,\n    rest = __rest(_a, [\"resource\", \"preferenceKey\"]);\n  return rest;\n};","map":{"version":3,"mappings":"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","names":["React","useStore","useTranslate","useResourceContext","Box","Button","Popover","useMediaQuery","Tooltip","IconButton","ViewWeekIcon","FieldToggle","styled","SelectColumnsButton","props","resource","finalPreferenceKey","preferenceKey","useState","anchorEl","setAnchorEl","availableColumns","setAvailableColumns","filter","omit","includes","column","source","map","index","columns","setColumns","translate","isXSmall","theme","breakpoints","down","title","_","handleClick","event","currentTarget","handleClose","handleToggle","target","checked","name","handleMove","index1","index2","index1Pos","findIndex","index2Pos","newAvailableColumns","slice","color","onClick","size","sanitizeRestProps","StyledButton","startIcon","open","Boolean","onClose","anchorOrigin","vertical","horizontal","transformOrigin","p","key","label","selected","onToggle","onMove","overridesResolver","styles","root","lineHeight","_a","_c","rest"],"sources":["/Users/paigedeveau/Desktop/se-diva-docs-frontend/bwmdn-admin-portal/node_modules/ra-ui-materialui/src/list/datagrid/SelectColumnsButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useStore, useTranslate, useResourceContext } from 'ra-core';\nimport {\n    Box,\n    Button,\n    Popover,\n    useMediaQuery,\n    Theme,\n    Tooltip,\n    IconButton,\n} from '@mui/material';\nimport ViewWeekIcon from '@mui/icons-material/ViewWeek';\n\nimport { FieldToggle } from '../../preferences';\nimport { ConfigurableDatagridColumn } from './DatagridConfigurable';\nimport { styled } from '@mui/material/styles';\n\n/**\n * Renders a button that lets users show / hide columns in a configurable datagrid\n *\n * @example\n * import { SelectColumnsButton, DatagridConfigurable } from 'react-admin';\n *\n * const PostListActions = () => (\n *   <TopToolbar>\n        <SelectColumnsButton />\n        <FilterButton />\n *   </TopToolbar>\n * );\n *\n * const PostList = () => (\n *   <List actions={<PostListActions />}>\n *     <DatagridConfigurable>\n *       <TextField source=\"title\" />\n *       <TextField source=\"author\" />\n         ...\n *     </DatagridConfigurable>\n *   </List>\n * );\n */\nexport const SelectColumnsButton = (props: SelectColumnsButtonProps) => {\n    const { preferenceKey } = props;\n\n    const resource = useResourceContext(props);\n    const finalPreferenceKey = preferenceKey || `${resource}.datagrid`;\n\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const [availableColumns, setAvailableColumns] = useStore<\n        ConfigurableDatagridColumn[]\n    >(`preferences.${finalPreferenceKey}.availableColumns`, []);\n    const [omit] = useStore<string[]>(\n        `preferences.${finalPreferenceKey}.omit`,\n        []\n    );\n    const [columns, setColumns] = useStore<string[]>(\n        `preferences.${finalPreferenceKey}.columns`,\n        availableColumns\n            .filter(column => !omit?.includes(column.source))\n            .map(column => column.index)\n    );\n    const translate = useTranslate();\n    const isXSmall = useMediaQuery((theme: Theme) =>\n        theme.breakpoints.down('sm')\n    );\n\n    const title = translate('ra.action.select_columns', { _: 'Columns' });\n\n    const handleClick = (event): void => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = (): void => {\n        setAnchorEl(null);\n    };\n\n    const handleToggle = event => {\n        if (event.target.checked) {\n            // add the column at the right position\n            setColumns(\n                availableColumns\n                    .filter(\n                        column =>\n                            column.index === event.target.name ||\n                            columns.includes(column.index)\n                    )\n                    .map(column => column.index)\n            );\n        } else {\n            setColumns(columns.filter(index => index !== event.target.name));\n        }\n    };\n\n    const handleMove = (index1, index2) => {\n        const index1Pos = availableColumns.findIndex(\n            // eslint-disable-next-line eqeqeq\n            field => field.index == index1\n        );\n        const index2Pos = availableColumns.findIndex(\n            // eslint-disable-next-line eqeqeq\n            field => field.index == index2\n        );\n        if (index1Pos === -1 || index2Pos === -1) {\n            return;\n        }\n        let newAvailableColumns;\n        if (index1Pos > index2Pos) {\n            newAvailableColumns = [\n                ...availableColumns.slice(0, index2Pos),\n                availableColumns[index1Pos],\n                ...availableColumns.slice(index2Pos, index1Pos),\n                ...availableColumns.slice(index1Pos + 1),\n            ];\n        } else {\n            newAvailableColumns = [\n                ...availableColumns.slice(0, index1Pos),\n                ...availableColumns.slice(index1Pos + 1, index2Pos + 1),\n                availableColumns[index1Pos],\n                ...availableColumns.slice(index2Pos + 1),\n            ];\n        }\n        setAvailableColumns(newAvailableColumns);\n        setColumns(columns =>\n            newAvailableColumns\n                .filter(column => columns.includes(column.index))\n                .map(column => column.index)\n        );\n    };\n\n    return (\n        <>\n            {isXSmall ? (\n                <Tooltip title={title}>\n                    <IconButton\n                        aria-label={title}\n                        color=\"primary\"\n                        onClick={handleClick}\n                        size=\"large\"\n                        {...sanitizeRestProps(props)}\n                    >\n                        <ViewWeekIcon />\n                    </IconButton>\n                </Tooltip>\n            ) : (\n                <StyledButton\n                    size=\"small\"\n                    onClick={handleClick}\n                    startIcon={<ViewWeekIcon />}\n                    {...sanitizeRestProps(props)}\n                >\n                    {title}\n                </StyledButton>\n            )}\n            <Popover\n                open={Boolean(anchorEl)}\n                anchorEl={anchorEl}\n                onClose={handleClose}\n                anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n            >\n                <Box p={1}>\n                    {availableColumns.map(column => (\n                        <FieldToggle\n                            key={column.index}\n                            source={column.source}\n                            label={column.label}\n                            index={column.index}\n                            selected={columns.includes(column.index)}\n                            onToggle={handleToggle}\n                            onMove={handleMove}\n                        />\n                    ))}\n                </Box>\n            </Popover>\n        </>\n    );\n};\n\nconst StyledButton = styled(Button, {\n    name: 'RaSelectColumnsButton',\n    overridesResolver: (props, styles) => styles.root,\n})({\n    '&.MuiButton-sizeSmall': {\n        // fix for icon misalignment on small buttons, see https://github.com/mui/material-ui/pull/30240\n        lineHeight: 1.5,\n    },\n});\n\nconst sanitizeRestProps = ({\n    resource = null,\n    preferenceKey = null,\n    ...rest\n}) => rest;\n\nexport interface SelectColumnsButtonProps\n    extends React.HtmlHTMLAttributes<HTMLDivElement> {\n    resource?: string;\n    preferenceKey?: string;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}