{"ast":null,"code":"var __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport * as React from 'react';\nimport { useMemo, useRef } from 'react';\nimport { FormGroupsContext } from './FormGroupsContext';\n/**\n * This component provides functions through context to manage form groups,\n * allowing to link or unlink an input to a group.\n * @see FormGroupContextProvider\n * @see useFormGroup\n * @see useFormGroups\n */\nexport var FormGroupsProvider = function (_a) {\n  var children = _a.children;\n  var formGroups = useRef({});\n  var subscribers = useRef({});\n  var formContextValue = useMemo(function () {\n    return {\n      /**\n       * Register a subscriber function for the specified group. The subscriber\n       * will be called whenever the group content changes (fields added or removed).\n       */\n      subscribe: function (group, subscriber) {\n        if (!subscribers.current[group]) {\n          subscribers.current[group] = [];\n        }\n        subscribers.current[group].push(subscriber);\n        return function () {\n          subscribers.current[group] = subscribers.current[group].filter(function (s) {\n            return s !== subscriber;\n          });\n        };\n      },\n      getGroupFields: function (name) {\n        return formGroups.current[name] || [];\n      },\n      registerGroup: function (name) {\n        formGroups.current[name] = formGroups.current[name] || [];\n      },\n      unregisterGroup: function (name) {\n        delete formGroups[name];\n      },\n      registerField: function (source, group) {\n        if (group != null) {\n          if (!(formGroups.current[group] || []).includes(source)) {\n            formGroups.current[group] = __spreadArray(__spreadArray([], formGroups.current[group] || [], true), [source], false);\n            // Notify subscribers that the group fields have changed\n            if (subscribers.current[group]) {\n              subscribers.current[group].forEach(function (subscriber) {\n                return subscriber();\n              });\n            }\n          }\n        }\n      },\n      unregisterField: function (source, group) {\n        if (group != null) {\n          if (!formGroups.current[group]) {\n            console.warn(\"Invalid form group \".concat(group));\n          } else {\n            var fields = new Set(formGroups.current[group]);\n            fields.delete(source);\n            formGroups.current[group] = Array.from(fields);\n            // Notify subscribers that the group fields have changed\n            if (subscribers.current[group]) {\n              subscribers.current[group].forEach(function (subscriber) {\n                return subscriber();\n              });\n            }\n          }\n        }\n      }\n    };\n  }, []);\n  return React.createElement(FormGroupsContext.Provider, {\n    value: formContextValue\n  }, children);\n};","map":{"version":3,"mappings":"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","names":["React","useMemo","useRef","FormGroupsContext","FormGroupsProvider","_a","children","formGroups","subscribers","formContextValue","subscribe","group","subscriber","current","push","filter","getGroupFields","name","registerGroup","unregisterGroup","registerField","source","includes","forEach","unregisterField","console","warn","fields","Set","delete","Array","from","Provider","value"],"sources":["/Users/paigedeveau/Desktop/se-diva-docs-frontend/bwmdn-admin-portal/node_modules/ra-core/src/form/FormGroupsProvider.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactNode, useMemo, useRef } from 'react';\nimport {\n    FormGroupsContext,\n    FormGroupsContextValue,\n    FormGroupSubscriber,\n} from './FormGroupsContext';\n\n/**\n * This component provides functions through context to manage form groups,\n * allowing to link or unlink an input to a group.\n * @see FormGroupContextProvider\n * @see useFormGroup\n * @see useFormGroups\n */\nexport const FormGroupsProvider = ({ children }: { children: ReactNode }) => {\n    const formGroups = useRef<{ [key: string]: string[] }>({});\n    const subscribers = useRef<{\n        [key: string]: FormGroupSubscriber[];\n    }>({});\n\n    const formContextValue = useMemo<FormGroupsContextValue>(\n        () => ({\n            /**\n             * Register a subscriber function for the specified group. The subscriber\n             * will be called whenever the group content changes (fields added or removed).\n             */\n            subscribe: (group, subscriber) => {\n                if (!subscribers.current[group]) {\n                    subscribers.current[group] = [];\n                }\n                subscribers.current[group].push(subscriber);\n\n                return () => {\n                    subscribers.current[group] = subscribers.current[\n                        group\n                    ].filter(s => s !== subscriber);\n                };\n            },\n            getGroupFields: name => formGroups.current[name] || [],\n            registerGroup: name => {\n                formGroups.current[name] = formGroups.current[name] || [];\n            },\n            unregisterGroup: name => {\n                delete formGroups[name];\n            },\n            registerField: (source, group) => {\n                if (group != null) {\n                    if (!(formGroups.current[group] || []).includes(source)) {\n                        formGroups.current[group] = [\n                            ...(formGroups.current[group] || []),\n                            source,\n                        ];\n                        // Notify subscribers that the group fields have changed\n                        if (subscribers.current[group]) {\n                            subscribers.current[group].forEach(subscriber =>\n                                subscriber()\n                            );\n                        }\n                    }\n                }\n            },\n            unregisterField: (source, group) => {\n                if (group != null) {\n                    if (!formGroups.current[group]) {\n                        console.warn(`Invalid form group ${group}`);\n                    } else {\n                        const fields = new Set(formGroups.current[group]);\n                        fields.delete(source);\n                        formGroups.current[group] = Array.from(fields);\n\n                        // Notify subscribers that the group fields have changed\n                        if (subscribers.current[group]) {\n                            subscribers.current[group].forEach(subscriber =>\n                                subscriber()\n                            );\n                        }\n                    }\n                }\n            },\n        }),\n        []\n    );\n\n    return (\n        <FormGroupsContext.Provider value={formContextValue}>\n            {children}\n        </FormGroupsContext.Provider>\n    );\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}