{"ast":null,"code":"import { useContext, useMemo } from 'react';\nimport defaults from 'lodash/defaults';\nimport { ListPaginationContext } from './ListPaginationContext';\n/**\n * Hook to read the list controller props from the ListContext.\n *\n * Must be used within a <ListContextProvider> (e.g. as a descendent of <List>\n * or <ListBase>).\n *\n * @typedef {Object} ListPaginationContextValue\n * @prop {integer}  total the total number of results for the current filters, excluding pagination. Useful to build the pagination controls. e.g. 23\n * @prop {integer}  page the current page. Starts at 1\n * @prop {Function} setPage a callback to change the page, e.g. setPage(3)\n * @prop {integer}  perPage the number of results per page. Defaults to 25\n * @prop {Function} setPerPage a callback to change the number of results per page, e.g. setPerPage(25)\n * @prop {Boolean}  hasPreviousPage true if the current page is not the first one\n * @prop {Boolean}  hasNextPage true if the current page is not the last one\n * @prop {string}   resource the resource name, deduced from the location. e.g. 'posts'\n *\n * @returns {ListPaginationContextValue} list controller props\n *\n * @see useListController for how it is filled\n */\nexport var useListPaginationContext = function (props) {\n  var context = useContext(ListPaginationContext);\n  return useMemo(function () {\n    return defaults({}, props != null ? extractListPaginationContextProps(props) : {}, context);\n  }, [context, props]);\n};\n/**\n * Extract only the list controller props\n *\n * @param {Object} props Props passed to the useListContext hook\n *\n * @returns {ListControllerResult} List controller props\n */\nvar extractListPaginationContextProps = function (_a) {\n  var isLoading = _a.isLoading,\n    page = _a.page,\n    perPage = _a.perPage,\n    setPage = _a.setPage,\n    setPerPage = _a.setPerPage,\n    hasPreviousPage = _a.hasPreviousPage,\n    hasNextPage = _a.hasNextPage,\n    total = _a.total,\n    resource = _a.resource;\n  return {\n    isLoading: isLoading,\n    page: page,\n    perPage: perPage,\n    setPage: setPage,\n    setPerPage: setPerPage,\n    hasPreviousPage: hasPreviousPage,\n    hasNextPage: hasNextPage,\n    total: total,\n    resource: resource\n  };\n};\nexport default useListPaginationContext;","map":{"version":3,"mappings":"AAAA,SAASA,UAAU,EAAEC,OAAO,QAAQ,OAAO;AAC3C,OAAOC,QAAQ,MAAM,iBAAiB;AAEtC,SACIC,qBAAqB,QAElB,yBAAyB;AAEhC;;;;;;;;;;;;;;;;;;;;AAoBA,OAAO,IAAMC,wBAAwB,GAAG,UACpCC,KAAW;EAEX,IAAMC,OAAO,GAAGN,UAAU,CAACG,qBAAqB,CAAC;EACjD,OAAOF,OAAO,CACV;IACI,eAAQ,CACJ,EAAE,EACFI,KAAK,IAAI,IAAI,GAAGE,iCAAiC,CAACF,KAAK,CAAC,GAAG,EAAE,EAC7DC,OAAO,CACV;EAJD,CAIC,EACL,CAACA,OAAO,EAAED,KAAK,CAAC,CACnB;AACL,CAAC;AAED;;;;;;;AAOA,IAAME,iCAAiC,GAAG,UAACC,EAU1C;MATGC,SAAS;IACTC,IAAI;IACJC,OAAO;IACPC,OAAO;IACPC,UAAU;IACVC,eAAe;IACfC,WAAW;IACXC,KAAK;IACLC,QAAQ;EACN,OAAC;IACHR,SAAS;IACTC,IAAI;IACJC,OAAO;IACPC,OAAO;IACPC,UAAU;IACVC,eAAe;IACfC,WAAW;IACXC,KAAK;IACLC,QAAQ;GACX;AAVK,CAUJ;AACF,eAAeb,wBAAwB","names":["useContext","useMemo","defaults","ListPaginationContext","useListPaginationContext","props","context","extractListPaginationContextProps","_a","isLoading","page","perPage","setPage","setPerPage","hasPreviousPage","hasNextPage","total","resource"],"sources":["/Users/paigedeveau/node_modules/ra-core/src/controller/list/useListPaginationContext.ts"],"sourcesContent":["import { useContext, useMemo } from 'react';\nimport defaults from 'lodash/defaults';\n\nimport {\n    ListPaginationContext,\n    ListPaginationContextValue,\n} from './ListPaginationContext';\n\n/**\n * Hook to read the list controller props from the ListContext.\n *\n * Must be used within a <ListContextProvider> (e.g. as a descendent of <List>\n * or <ListBase>).\n *\n * @typedef {Object} ListPaginationContextValue\n * @prop {integer}  total the total number of results for the current filters, excluding pagination. Useful to build the pagination controls. e.g. 23\n * @prop {integer}  page the current page. Starts at 1\n * @prop {Function} setPage a callback to change the page, e.g. setPage(3)\n * @prop {integer}  perPage the number of results per page. Defaults to 25\n * @prop {Function} setPerPage a callback to change the number of results per page, e.g. setPerPage(25)\n * @prop {Boolean}  hasPreviousPage true if the current page is not the first one\n * @prop {Boolean}  hasNextPage true if the current page is not the last one\n * @prop {string}   resource the resource name, deduced from the location. e.g. 'posts'\n *\n * @returns {ListPaginationContextValue} list controller props\n *\n * @see useListController for how it is filled\n */\nexport const useListPaginationContext = (\n    props?: any\n): ListPaginationContextValue => {\n    const context = useContext(ListPaginationContext);\n    return useMemo(\n        () =>\n            defaults(\n                {},\n                props != null ? extractListPaginationContextProps(props) : {},\n                context\n            ),\n        [context, props]\n    );\n};\n\n/**\n * Extract only the list controller props\n *\n * @param {Object} props Props passed to the useListContext hook\n *\n * @returns {ListControllerResult} List controller props\n */\nconst extractListPaginationContextProps = ({\n    isLoading,\n    page,\n    perPage,\n    setPage,\n    setPerPage,\n    hasPreviousPage,\n    hasNextPage,\n    total,\n    resource,\n}) => ({\n    isLoading,\n    page,\n    perPage,\n    setPage,\n    setPerPage,\n    hasPreviousPage,\n    hasNextPage,\n    total,\n    resource,\n});\nexport default useListPaginationContext;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}