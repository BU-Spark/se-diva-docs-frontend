{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport TableCell from '@mui/material/TableCell';\nimport clsx from 'clsx';\nvar DatagridCell = React.forwardRef(function (_a, ref) {\n  var className = _a.className,\n    field = _a.field,\n    record = _a.record,\n    resource = _a.resource,\n    rest = __rest(_a, [\"className\", \"field\", \"record\", \"resource\"]);\n  return React.createElement(TableCell, __assign({\n    className: clsx(className, field.props.cellClassName),\n    align: field.props.textAlign,\n    ref: ref\n  }, rest), field);\n});\nDatagridCell.propTypes = {\n  className: PropTypes.string,\n  field: PropTypes.element,\n  // @ts-ignore\n  record: PropTypes.object,\n  resource: PropTypes.string\n};\n// What? TypeScript loses the displayName if we don't set it explicitly\nDatagridCell.displayName = 'DatagridCell';\nexport default DatagridCell;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,SAA6B,MAAM,yBAAyB;AACnE,OAAOC,IAAI,MAAM,MAAM;AAGvB,IAAMC,YAAY,GAAGJ,KAAK,CAACK,UAAU,CACjC,UAACC,EAA+C,EAAEC,GAAG;EAAlD,aAAS;IAAEC,KAAK;IAAEC,MAAM;IAAEC,QAAQ;IAAKC,IAAI,cAA7C,4CAA+C,CAAF;EAAY,OACtDX,oBAACE,SAAS;IACNU,SAAS,EAAET,IAAI,CAACS,SAAS,EAAEJ,KAAK,CAACK,KAAK,CAACC,aAAa,CAAC;IACrDC,KAAK,EAAEP,KAAK,CAACK,KAAK,CAACG,SAAS;IAC5BT,GAAG,EAAEA;EAAG,GACJI,IAAI,GAEPH,KAAK,CACE;CACf,CACJ;AAEDJ,YAAY,CAACa,SAAS,GAAG;EACrBL,SAAS,EAAEX,SAAS,CAACiB,MAAM;EAC3BV,KAAK,EAAEP,SAAS,CAACkB,OAAO;EACxB;EACAV,MAAM,EAAER,SAAS,CAACmB,MAAM;EACxBV,QAAQ,EAAET,SAAS,CAACiB;CACvB;AASD;AACAd,YAAY,CAACiB,WAAW,GAAG,cAAc;AAEzC,eAAejB,YAAY","names":["React","PropTypes","TableCell","clsx","DatagridCell","forwardRef","_a","ref","field","record","resource","rest","className","props","cellClassName","align","textAlign","propTypes","string","element","object","displayName"],"sources":["/Users/paigedeveau/Desktop/se-diva-docs-frontend/bwmdn-admin-portal/node_modules/ra-ui-materialui/src/list/datagrid/DatagridCell.tsx"],"sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport TableCell, { TableCellProps } from '@mui/material/TableCell';\nimport clsx from 'clsx';\nimport { RaRecord } from 'ra-core';\n\nconst DatagridCell = React.forwardRef<HTMLTableCellElement, DatagridCellProps>(\n    ({ className, field, record, resource, ...rest }, ref) => (\n        <TableCell\n            className={clsx(className, field.props.cellClassName)}\n            align={field.props.textAlign}\n            ref={ref}\n            {...rest}\n        >\n            {field}\n        </TableCell>\n    )\n);\n\nDatagridCell.propTypes = {\n    className: PropTypes.string,\n    field: PropTypes.element,\n    // @ts-ignore\n    record: PropTypes.object, // eslint-disable-line react/forbid-prop-types\n    resource: PropTypes.string,\n};\n\nexport interface DatagridCellProps extends TableCellProps {\n    className?: string;\n    field?: JSX.Element;\n    record?: RaRecord;\n    resource?: string;\n}\n\n// What? TypeScript loses the displayName if we don't set it explicitly\nDatagridCell.displayName = 'DatagridCell';\n\nexport default DatagridCell;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}