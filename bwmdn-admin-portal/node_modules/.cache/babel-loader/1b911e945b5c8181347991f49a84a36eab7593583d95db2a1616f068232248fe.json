{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport { useMemo } from 'react';\nimport { useQuery, useQueryClient } from 'react-query';\nimport { useDataProvider } from './useDataProvider';\n/**\n * Call the dataProvider.getManyReference() method and return the resolved result\n * as well as the loading state.\n *\n * The return value updates according to the request state:\n *\n * - start: { isLoading: true, refetch }\n * - success: { data: [data from store], total: [total from response], isLoading: false, refetch }\n * - error: { error: [error from response], isLoading: false, refetch }\n *\n * This hook will return the cached result when called a second time\n * with the same parameters, until the response arrives.\n *\n * @param {string} resource The resource name, e.g. 'posts'\n * @param {Params} params The getManyReference parameters { target, id, pagination, sort, filter, meta }\n * @param {Object} options Options object to pass to the queryClient.\n * May include side effects to be executed upon success or failure, e.g. { onSuccess: () => { refresh(); } }\n *\n * @typedef Params\n * @prop params.target The target resource key, e.g. 'post_id'\n * @prop params.id The identifier of the record to look for in target, e.g. '123'\n * @prop params.pagination The request pagination { page, perPage }, e.g. { page: 1, perPage: 10 }\n * @prop params.sort The request sort { field, order }, e.g. { field: 'id', order: 'DESC' }\n * @prop params.filter The request filters, e.g. { title: 'hello, world' }\n * @prop params.meta Optional meta parameters\n *\n * @returns The current request state. Destructure as { data, total, error, isLoading, refetch }.\n *\n * @example\n *\n * import { useGetManyReference, useRecordContext } from 'react-admin';\n *\n * const PostComments = () => {\n *     const record = useRecordContext();\n *     // fetch all comments related to the current record\n *     const { data, isLoading, error } = useGetManyReference(\n *         'comments',\n *         { target: 'post_id', id: record.id, pagination: { page: 1, perPage: 10 }, sort: { field: 'published_at', order: 'DESC' } }\n *     );\n *     if (isLoading) { return <Loading />; }\n *     if (error) { return <p>ERROR</p>; }\n *     return <ul>{data.map(comment =>\n *         <li key={comment.id}>{comment.body}</li>\n *     )}</ul>;\n * };\n */\nexport var useGetManyReference = function (resource, params, options) {\n  if (params === void 0) {\n    params = {};\n  }\n  var target = params.target,\n    id = params.id,\n    _a = params.pagination,\n    pagination = _a === void 0 ? {\n      page: 1,\n      perPage: 25\n    } : _a,\n    _b = params.sort,\n    sort = _b === void 0 ? {\n      field: 'id',\n      order: 'DESC'\n    } : _b,\n    _c = params.filter,\n    filter = _c === void 0 ? {} : _c,\n    meta = params.meta;\n  var dataProvider = useDataProvider();\n  var queryClient = useQueryClient();\n  var result = useQuery([resource, 'getManyReference', {\n    target: target,\n    id: id,\n    pagination: pagination,\n    sort: sort,\n    filter: filter,\n    meta: meta\n  }], function () {\n    if (!target || id == null) {\n      // check at runtime to support partial parameters with the enabled option\n      return Promise.reject(new Error('target and id are required'));\n    }\n    return dataProvider.getManyReference(resource, {\n      target: target,\n      id: id,\n      pagination: pagination,\n      sort: sort,\n      filter: filter,\n      meta: meta\n    }).then(function (_a) {\n      var data = _a.data,\n        total = _a.total,\n        pageInfo = _a.pageInfo;\n      return {\n        data: data,\n        total: total,\n        pageInfo: pageInfo\n      };\n    });\n  }, __assign({\n    onSuccess: function (_a) {\n      var data = _a.data;\n      // optimistically populate the getOne cache\n      data.forEach(function (record) {\n        queryClient.setQueryData([resource, 'getOne', {\n          id: String(record.id),\n          meta: meta\n        }], function (oldRecord) {\n          return oldRecord !== null && oldRecord !== void 0 ? oldRecord : record;\n        });\n      });\n    }\n  }, options));\n  return useMemo(function () {\n    var _a, _b, _c;\n    return result.data ? __assign(__assign({}, result), {\n      data: (_a = result.data) === null || _a === void 0 ? void 0 : _a.data,\n      total: (_b = result.data) === null || _b === void 0 ? void 0 : _b.total,\n      pageInfo: (_c = result.data) === null || _c === void 0 ? void 0 : _c.pageInfo\n    }) : result;\n  }, [result]);\n};","map":{"version":3,"mappings":";;;;;;;;;;AAAA,SAASA,OAAO,QAAQ,OAAO;AAC/B,SACIC,QAAQ,EAGRC,cAAc,QACX,aAAa;AAOpB,SAASC,eAAe,QAAQ,mBAAmB;AAEnD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CA,OAAO,IAAMC,mBAAmB,GAAG,UAC/BC,QAAgB,EAChBC,MAA4C,EAC5CC,OAAuE;EADvE;IAAAD,WAA4C;EAAA;EAIxC,UAAM,GAMNA,MAAM,OANA;IACNE,EAAE,GAKFF,MAAM,GALJ;IACFG,KAIAH,MAAM,WAJ+B;IAArCI,UAAU,mBAAG;MAAEC,IAAI,EAAE,CAAC;MAAEC,OAAO,EAAE;IAAE,CAAE;IACrCC,KAGAP,MAAM,KAH+B;IAArCQ,IAAI,mBAAG;MAAEC,KAAK,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAM,CAAE;IACrCC,KAEAX,MAAM,OAFK;IAAXY,MAAM,mBAAG,EAAE;IACXC,IAAI,GACJb,MAAM,KADF;EAER,IAAMc,YAAY,GAAGjB,eAAe,EAAE;EACtC,IAAMkB,WAAW,GAAGnB,cAAc,EAAE;EACpC,IAAMoB,MAAM,GAAGrB,QAAQ,CAKnB,CACII,QAAQ,EACR,kBAAkB,EAClB;IAAEkB,MAAM;IAAEf,EAAE;IAAEE,UAAU;IAAEI,IAAI;IAAEI,MAAM;IAAEC,IAAI;EAAA,CAAE,CACjD,EACD;IACI,IAAI,CAACI,MAAM,IAAIf,EAAE,IAAI,IAAI,EAAE;MACvB;MACA,OAAOgB,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAC,4BAA4B,CAAC,CAAC;;IAElE,OAAON,YAAY,CACdO,gBAAgB,CAAatB,QAAQ,EAAE;MACpCkB,MAAM;MACNf,EAAE;MACFE,UAAU;MACVI,IAAI;MACJI,MAAM;MACNC,IAAI;KACP,CAAC,CACDS,IAAI,CAAC,UAACnB,EAAyB;UAAvBoB,IAAI;QAAEC,KAAK;QAAEC,QAAQ;MAAO,OAAC;QAClCF,IAAI;QACJC,KAAK;QACLC,QAAQ;OACX;IAJoC,CAInC,CAAC;EACX,CAAC;IAEGC,SAAS,EAAE,UAACvB,EAAQ;UAANoB,IAAI;MACd;MACAA,IAAI,CAACI,OAAO,CAAC,gBAAM;QACfZ,WAAW,CAACa,YAAY,CACpB,CAAC7B,QAAQ,EAAE,QAAQ,EAAE;UAAEG,EAAE,EAAE2B,MAAM,CAACC,MAAM,CAAC5B,EAAE,CAAC;UAAEW,IAAI;QAAA,CAAE,CAAC,EACrD,mBAAS;UAAI,gBAAS,aAATkB,SAAS,cAATA,SAAS,GAAID,MAAM;QAAnB,CAAmB,CACnC;MACL,CAAC,CAAC;IACN;EAAC,GACE7B,OAAO,EAEjB;EAED,OAAOP,OAAO,CACV;;IACI,aAAM,CAAC6B,IAAI,GACNS,sBACQhB,MAAM;MACTO,IAAI,EAAE,YAAM,CAACA,IAAI,0CAAEA,IAAI;MACvBC,KAAK,EAAE,YAAM,CAACD,IAAI,0CAAEC,KAAK;MACzBC,QAAQ,EAAE,YAAM,CAACF,IAAI,0CAAEE;IAAQ,KAEnCT,MAAM;GAAA,EAChB,CAACA,MAAM,CAAC,CAOX;AACL,CAAC","names":["useMemo","useQuery","useQueryClient","useDataProvider","useGetManyReference","resource","params","options","id","_a","pagination","page","perPage","_b","sort","field","order","_c","filter","meta","dataProvider","queryClient","result","target","Promise","reject","Error","getManyReference","then","data","total","pageInfo","onSuccess","forEach","setQueryData","String","record","oldRecord","__assign"],"sources":["/Users/paigedeveau/Desktop/se-diva-docs-frontend/bwmdn-admin-portal/node_modules/ra-core/src/dataProvider/useGetManyReference.ts"],"sourcesContent":["import { useMemo } from 'react';\nimport {\n    useQuery,\n    UseQueryOptions,\n    UseQueryResult,\n    useQueryClient,\n} from 'react-query';\n\nimport {\n    RaRecord,\n    GetManyReferenceParams,\n    GetManyReferenceResult,\n} from '../types';\nimport { useDataProvider } from './useDataProvider';\n\n/**\n * Call the dataProvider.getManyReference() method and return the resolved result\n * as well as the loading state.\n *\n * The return value updates according to the request state:\n *\n * - start: { isLoading: true, refetch }\n * - success: { data: [data from store], total: [total from response], isLoading: false, refetch }\n * - error: { error: [error from response], isLoading: false, refetch }\n *\n * This hook will return the cached result when called a second time\n * with the same parameters, until the response arrives.\n *\n * @param {string} resource The resource name, e.g. 'posts'\n * @param {Params} params The getManyReference parameters { target, id, pagination, sort, filter, meta }\n * @param {Object} options Options object to pass to the queryClient.\n * May include side effects to be executed upon success or failure, e.g. { onSuccess: () => { refresh(); } }\n *\n * @typedef Params\n * @prop params.target The target resource key, e.g. 'post_id'\n * @prop params.id The identifier of the record to look for in target, e.g. '123'\n * @prop params.pagination The request pagination { page, perPage }, e.g. { page: 1, perPage: 10 }\n * @prop params.sort The request sort { field, order }, e.g. { field: 'id', order: 'DESC' }\n * @prop params.filter The request filters, e.g. { title: 'hello, world' }\n * @prop params.meta Optional meta parameters\n *\n * @returns The current request state. Destructure as { data, total, error, isLoading, refetch }.\n *\n * @example\n *\n * import { useGetManyReference, useRecordContext } from 'react-admin';\n *\n * const PostComments = () => {\n *     const record = useRecordContext();\n *     // fetch all comments related to the current record\n *     const { data, isLoading, error } = useGetManyReference(\n *         'comments',\n *         { target: 'post_id', id: record.id, pagination: { page: 1, perPage: 10 }, sort: { field: 'published_at', order: 'DESC' } }\n *     );\n *     if (isLoading) { return <Loading />; }\n *     if (error) { return <p>ERROR</p>; }\n *     return <ul>{data.map(comment =>\n *         <li key={comment.id}>{comment.body}</li>\n *     )}</ul>;\n * };\n */\nexport const useGetManyReference = <RecordType extends RaRecord = any>(\n    resource: string,\n    params: Partial<GetManyReferenceParams> = {},\n    options?: UseQueryOptions<{ data: RecordType[]; total: number }, Error>\n): UseGetManyReferenceHookValue<RecordType> => {\n    const {\n        target,\n        id,\n        pagination = { page: 1, perPage: 25 },\n        sort = { field: 'id', order: 'DESC' },\n        filter = {},\n        meta,\n    } = params;\n    const dataProvider = useDataProvider();\n    const queryClient = useQueryClient();\n    const result = useQuery<\n        GetManyReferenceResult<RecordType>,\n        Error,\n        GetManyReferenceResult<RecordType>\n    >(\n        [\n            resource,\n            'getManyReference',\n            { target, id, pagination, sort, filter, meta },\n        ],\n        () => {\n            if (!target || id == null) {\n                // check at runtime to support partial parameters with the enabled option\n                return Promise.reject(new Error('target and id are required'));\n            }\n            return dataProvider\n                .getManyReference<RecordType>(resource, {\n                    target,\n                    id,\n                    pagination,\n                    sort,\n                    filter,\n                    meta,\n                })\n                .then(({ data, total, pageInfo }) => ({\n                    data,\n                    total,\n                    pageInfo,\n                }));\n        },\n        {\n            onSuccess: ({ data }) => {\n                // optimistically populate the getOne cache\n                data.forEach(record => {\n                    queryClient.setQueryData(\n                        [resource, 'getOne', { id: String(record.id), meta }],\n                        oldRecord => oldRecord ?? record\n                    );\n                });\n            },\n            ...options,\n        }\n    );\n\n    return useMemo(\n        () =>\n            result.data\n                ? {\n                      ...result,\n                      data: result.data?.data,\n                      total: result.data?.total,\n                      pageInfo: result.data?.pageInfo,\n                  }\n                : result,\n        [result]\n    ) as UseQueryResult<RecordType[], Error> & {\n        total?: number;\n        pageInfo?: {\n            hasNextPage?: boolean;\n            hasPreviousPage?: boolean;\n        };\n    };\n};\n\nexport type UseGetManyReferenceHookValue<\n    RecordType extends RaRecord = any\n> = UseQueryResult<RecordType[], Error> & {\n    total?: number;\n    pageInfo?: {\n        hasNextPage?: boolean;\n        hasPreviousPage?: boolean;\n    };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}