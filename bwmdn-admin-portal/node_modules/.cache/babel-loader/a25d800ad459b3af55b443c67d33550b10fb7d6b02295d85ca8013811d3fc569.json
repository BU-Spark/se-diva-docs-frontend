{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { SimpleForm } from '../form';\nimport { ArrayInput, BooleanInput, DateInput, NumberInput, ReferenceInput, ReferenceArrayInput, SelectInput, SimpleFormIterator, TextInput } from '../input';\nexport var editFieldTypes = {\n  form: {\n    component: SimpleForm,\n    representation: function (_, children) {\n      return \"        <SimpleForm>\\n\".concat(children.map(function (child) {\n        return \"            \".concat(child.getRepresentation());\n      }).join('\\n'), \"\\n        </SimpleForm>\");\n    }\n  },\n  array: {\n    // eslint-disable-next-line react/display-name\n    component: function (_a) {\n      var children = _a.children,\n        props = __rest(_a, [\"children\"]);\n      return React.createElement(ArrayInput, __assign({}, props), React.createElement(SimpleFormIterator, null, children));\n    },\n    representation: function (props, children) {\n      return \"<ArrayInput source=\\\"\".concat(props.source, \"\\\"><SimpleFormIterator>\").concat(children.map(function (child) {\n        return child.getRepresentation();\n      }).join('\\n'), \"</SimpleFormIterator></ArrayInput>\");\n    }\n  },\n  boolean: {\n    component: BooleanInput,\n    representation: function (props) {\n      return \"<BooleanInput source=\\\"\".concat(props.source, \"\\\" />\");\n    }\n  },\n  date: {\n    component: DateInput,\n    representation: function (props) {\n      return \"<DateInput source=\\\"\".concat(props.source, \"\\\" />\");\n    }\n  },\n  email: {\n    component: TextInput,\n    representation: function (props) {\n      return \"<TextInput source=\\\"\".concat(props.source, \"\\\" />\");\n    }\n  },\n  id: {\n    component: TextInput,\n    representation: function (props) {\n      return \"<TextInput source=\\\"\".concat(props.source, \"\\\" />\");\n    }\n  },\n  number: {\n    component: NumberInput,\n    representation: function (props) {\n      return \"<NumberInput source=\\\"\".concat(props.source, \"\\\" />\");\n    }\n  },\n  reference: {\n    component: ReferenceInput,\n    representation: function (props, children) {\n      return \"<ReferenceInput source=\\\"\".concat(props.source, \"\\\" reference=\\\"\").concat(props.reference, \"\\\" />\");\n    }\n  },\n  referenceArray: {\n    component: ReferenceArrayInput,\n    representation: function (props) {\n      return \"<ReferenceArrayInput source=\\\"\".concat(props.source, \"\\\" reference=\\\"\").concat(props.reference, \"\\\"><TextInput source=\\\"id\\\" /></ReferenceArrayInput>\");\n    }\n  },\n  referenceArrayChild: {\n    component: function (props) {\n      return React.createElement(SelectInput, __assign({\n        optionText: \"id\"\n      }, props));\n    },\n    representation: function () {\n      return \"<SelectInput optionText=\\\"id\\\" />\";\n    }\n  },\n  richText: {\n    component: TextInput,\n    representation: function (props) {\n      return \"<TextInput source=\\\"\".concat(props.source, \"\\\" />\");\n    }\n  },\n  string: {\n    component: TextInput,\n    representation: function (props) {\n      return \"<TextInput source=\\\"\".concat(props.source, \"\\\" />\");\n    }\n  },\n  url: {\n    component: TextInput,\n    representation: function (props) {\n      return \"<TextInput source=\\\"\".concat(props.source, \"\\\" />\");\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["React","SimpleForm","ArrayInput","BooleanInput","DateInput","NumberInput","ReferenceInput","ReferenceArrayInput","SelectInput","SimpleFormIterator","TextInput","editFieldTypes","form","component","representation","_","children","map","child","getRepresentation","join","array","_a","props","source","boolean","date","email","id","number","reference","referenceArray","referenceArrayChild","optionText","richText","string","url"],"sources":["/Users/paigedeveau/Desktop/se-diva-docs-frontend/bwmdn-admin-portal/node_modules/ra-ui-materialui/src/detail/editFieldTypes.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactNode, ReactElement } from 'react';\nimport { SimpleForm } from '../form';\nimport {\n    ArrayInput,\n    BooleanInput,\n    DateInput,\n    NumberInput,\n    ReferenceInput,\n    ReferenceInputProps,\n    ReferenceArrayInput,\n    ReferenceArrayInputProps,\n    SelectInput,\n    SimpleFormIterator,\n    TextInput,\n} from '../input';\nimport { InferredElement, InferredTypeMap, InputProps } from 'ra-core';\n\nexport const editFieldTypes: InferredTypeMap = {\n    form: {\n        component: SimpleForm,\n        representation: (\n            _,\n            children: InferredElement[]\n        ) => `        <SimpleForm>\n${children.map(child => `            ${child.getRepresentation()}`).join('\\n')}\n        </SimpleForm>`,\n    },\n    array: {\n        // eslint-disable-next-line react/display-name\n        component: ({\n            children,\n            ...props\n        }: { children: ReactNode } & InputProps) => (\n            <ArrayInput {...props}>\n                <SimpleFormIterator>{children}</SimpleFormIterator>\n            </ArrayInput>\n        ),\n        representation: (props: InputProps, children: InferredElement[]) =>\n            `<ArrayInput source=\"${\n                props.source\n            }\"><SimpleFormIterator>${children\n                .map(child => child.getRepresentation())\n                .join('\\n')}</SimpleFormIterator></ArrayInput>`,\n    },\n    boolean: {\n        component: BooleanInput,\n        representation: (props: InputProps) =>\n            `<BooleanInput source=\"${props.source}\" />`,\n    },\n    date: {\n        component: DateInput,\n        representation: (props: InputProps) =>\n            `<DateInput source=\"${props.source}\" />`,\n    },\n    email: {\n        component: TextInput,\n        representation: (props: InputProps) =>\n            `<TextInput source=\"${props.source}\" />`,\n    },\n    id: {\n        component: TextInput,\n        representation: (props: InputProps) =>\n            `<TextInput source=\"${props.source}\" />`,\n    },\n    number: {\n        component: NumberInput,\n        representation: (props: InputProps) =>\n            `<NumberInput source=\"${props.source}\" />`,\n    },\n    reference: {\n        component: ReferenceInput,\n        representation: (\n            props: ReferenceInputProps,\n            children: InferredElement\n        ) =>\n            `<ReferenceInput source=\"${props.source}\" reference=\"${props.reference}\" />`,\n    },\n    referenceArray: {\n        component: ReferenceArrayInput,\n        representation: (props: ReferenceArrayInputProps) =>\n            `<ReferenceArrayInput source=\"${props.source}\" reference=\"${props.reference}\"><TextInput source=\"id\" /></ReferenceArrayInput>`,\n    },\n    referenceArrayChild: {\n        component: (\n            props: { children: ReactNode } & InputProps\n        ): ReactElement => <SelectInput optionText=\"id\" {...props} />, // eslint-disable-line react/display-name\n        representation: () => `<SelectInput optionText=\"id\" />`,\n    },\n    richText: {\n        component: TextInput,\n        representation: (props: InputProps) =>\n            `<TextInput source=\"${props.source}\" />`,\n    },\n    string: {\n        component: TextInput,\n        representation: (props: InputProps) =>\n            `<TextInput source=\"${props.source}\" />`,\n    },\n    url: {\n        component: TextInput,\n        representation: (props: InputProps) =>\n            `<TextInput source=\"${props.source}\" />`,\n    },\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}