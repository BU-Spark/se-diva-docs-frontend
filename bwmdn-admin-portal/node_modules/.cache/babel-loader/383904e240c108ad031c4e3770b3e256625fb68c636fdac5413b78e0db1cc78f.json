{"ast":null,"code":"import * as React from 'react';\nimport { memo } from 'react';\nimport { IconButton, ListItem, ListItemButton, ListItemText, ListItemSecondaryAction, styled } from '@mui/material';\nimport CancelIcon from '@mui/icons-material/CancelOutlined';\nimport isEqual from 'lodash/isEqual';\nimport { useNavigate } from 'react-router-dom';\nimport { stringify } from 'query-string';\nimport { useListContext } from 'ra-core';\nvar arePropsEqual = function (prevProps, nextProps) {\n  return prevProps.label === nextProps.label && isEqual(prevProps.value, nextProps.value);\n};\nexport var SavedQueryFilterListItem = memo(function (props) {\n  var className = props.className,\n    label = props.label,\n    sx = props.sx,\n    value = props.value;\n  var _a = useListContext(),\n    filterValues = _a.filterValues,\n    sort = _a.sort,\n    perPage = _a.perPage,\n    displayedFilters = _a.displayedFilters;\n  var navigate = useNavigate();\n  var isSelected = isEqual(value, {\n    filter: filterValues,\n    sort: sort,\n    perPage: perPage,\n    displayedFilters: displayedFilters\n  });\n  var addFilter = function () {\n    navigate({\n      search: stringify({\n        filter: JSON.stringify(value.filter),\n        sort: value.sort.field,\n        order: value.sort.order,\n        page: 1,\n        perPage: value.perPage,\n        displayedFilters: JSON.stringify(value.displayedFilters)\n      })\n    });\n  };\n  var removeFilter = function () {\n    navigate({\n      search: stringify({\n        filter: JSON.stringify({})\n      })\n    });\n  };\n  var toggleFilter = function () {\n    return isSelected ? removeFilter() : addFilter();\n  };\n  return (\n    // @ts-ignore\n    React.createElement(StyledListItem, {\n      onClick: toggleFilter,\n      selected: isSelected,\n      className: className,\n      sx: sx,\n      disablePadding: true\n    }, React.createElement(ListItemButton, {\n      disableGutters: true,\n      className: SavedQueryFilterListItemClasses.listItemButton\n    }, React.createElement(ListItemText, {\n      primary: label,\n      className: SavedQueryFilterListItemClasses.listItemText\n    }), isSelected && React.createElement(ListItemSecondaryAction, null, React.createElement(IconButton, {\n      size: \"small\",\n      onClick: toggleFilter\n    }, React.createElement(CancelIcon, null)))))\n  );\n}, arePropsEqual);\nvar PREFIX = 'RaSavedQueryFilterListItem';\nexport var SavedQueryFilterListItemClasses = {\n  listItemButton: \"\".concat(PREFIX, \"-listItemButton\"),\n  listItemText: \"\".concat(PREFIX, \"-listItemText\")\n};\nvar StyledListItem = styled(ListItem, {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(function () {\n  var _a;\n  return _a = {}, _a[\"& .\".concat(SavedQueryFilterListItemClasses.listItemButton)] = {\n    paddingRight: '2em',\n    paddingLeft: '2em'\n  }, _a[\"& .\".concat(SavedQueryFilterListItemClasses.listItemText)] = {\n    margin: 0\n  }, _a;\n});","map":{"version":3,"mappings":"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","names":["React","memo","IconButton","ListItem","ListItemButton","ListItemText","ListItemSecondaryAction","styled","CancelIcon","isEqual","useNavigate","stringify","useListContext","arePropsEqual","prevProps","nextProps","label","value","SavedQueryFilterListItem","props","sx","filterValues","sort","perPage","displayedFilters","navigate","isSelected","filter","addFilter","search","JSON","field","order","page","removeFilter","toggleFilter","StyledListItem","onClick","selected","className","disablePadding","disableGutters","SavedQueryFilterListItemClasses","listItemButton","primary","listItemText","size","PREFIX","name","overridesResolver","styles","root","_a","paddingRight","paddingLeft","margin"],"sources":["/Users/paigedeveau/Desktop/se-diva-docs-frontend/bwmdn-admin-portal/node_modules/ra-ui-materialui/src/list/filter/SavedQueryFilterListItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactElement, memo } from 'react';\nimport {\n    IconButton,\n    ListItem,\n    ListItemButton,\n    ListItemProps,\n    ListItemText,\n    ListItemSecondaryAction,\n    styled,\n} from '@mui/material';\nimport CancelIcon from '@mui/icons-material/CancelOutlined';\nimport isEqual from 'lodash/isEqual';\nimport { useNavigate } from 'react-router-dom';\nimport { stringify } from 'query-string';\nimport { useListContext } from 'ra-core';\n\nimport { SavedQuery } from './useSavedQueries';\n\nconst arePropsEqual = (\n    prevProps: SavedQueryFilterListItemProps,\n    nextProps: SavedQueryFilterListItemProps\n): boolean =>\n    prevProps.label === nextProps.label &&\n    isEqual(prevProps.value, nextProps.value);\n\nexport const SavedQueryFilterListItem = memo(\n    (props: SavedQueryFilterListItemProps): ReactElement => {\n        const { className, label, sx, value } = props;\n        const {\n            filterValues,\n            sort,\n            perPage,\n            displayedFilters,\n        } = useListContext();\n        const navigate = useNavigate();\n\n        const isSelected = isEqual(value, {\n            filter: filterValues,\n            sort,\n            perPage,\n            displayedFilters,\n        });\n\n        const addFilter = (): void => {\n            navigate({\n                search: stringify({\n                    filter: JSON.stringify(value.filter),\n                    sort: value.sort.field,\n                    order: value.sort.order,\n                    page: 1,\n                    perPage: value.perPage,\n                    displayedFilters: JSON.stringify(value.displayedFilters),\n                }),\n            });\n        };\n\n        const removeFilter = (): void => {\n            navigate({\n                search: stringify({\n                    filter: JSON.stringify({}),\n                }),\n            });\n        };\n\n        const toggleFilter = (): void =>\n            isSelected ? removeFilter() : addFilter();\n\n        return (\n            // @ts-ignore\n            <StyledListItem\n                onClick={toggleFilter}\n                selected={isSelected}\n                className={className}\n                sx={sx}\n                disablePadding\n            >\n                <ListItemButton\n                    disableGutters\n                    className={SavedQueryFilterListItemClasses.listItemButton}\n                >\n                    <ListItemText\n                        primary={label}\n                        className={SavedQueryFilterListItemClasses.listItemText}\n                    />\n                    {isSelected && (\n                        <ListItemSecondaryAction>\n                            <IconButton size=\"small\" onClick={toggleFilter}>\n                                <CancelIcon />\n                            </IconButton>\n                        </ListItemSecondaryAction>\n                    )}\n                </ListItemButton>\n            </StyledListItem>\n        );\n    },\n    arePropsEqual\n);\n\nconst PREFIX = 'RaSavedQueryFilterListItem';\nexport const SavedQueryFilterListItemClasses = {\n    listItemButton: `${PREFIX}-listItemButton`,\n    listItemText: `${PREFIX}-listItemText`,\n};\n\nconst StyledListItem = styled(ListItem, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(() => ({\n    [`& .${SavedQueryFilterListItemClasses.listItemButton}`]: {\n        paddingRight: '2em',\n        paddingLeft: '2em',\n    },\n    [`& .${SavedQueryFilterListItemClasses.listItemText}`]: {\n        margin: 0,\n    },\n}));\n\nexport interface SavedQueryFilterListItemProps\n    extends SavedQuery,\n        Omit<ListItemProps, 'value'> {}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}