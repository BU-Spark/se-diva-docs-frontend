{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { useRef } from 'react';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { useDataProvider } from './useDataProvider';\nimport undoableEventEmitter from './undoableEventEmitter';\n/**\n * Get a callback to call the dataProvider.update() method, the result and the loading state.\n *\n * @param {string} resource\n * @param {Params} params The update parameters { id, data, previousData, meta }\n * @param {Object} options Options object to pass to the queryClient.\n * May include side effects to be executed upon success or failure, e.g. { onSuccess: () => { refresh(); } }\n * May include a mutation mode (optimistic/pessimistic/undoable), e.g. { mutationMode: 'undoable' }\n *\n * @typedef Params\n * @prop params.id The resource identifier, e.g. 123\n * @prop params.data The updates to merge into the record, e.g. { views: 10 }\n * @prop params.previousData The record before the update is applied\n * @prop params.meta Optional meta data\n *\n * @returns The current mutation state. Destructure as [update, { data, error, isLoading }].\n *\n * The return value updates according to the request state:\n *\n * - initial: [update, { isLoading: false, isIdle: true }]\n * - start:   [update, { isLoading: true }]\n * - success: [update, { data: [data from response], isLoading: false, isSuccess: true }]\n * - error:   [update, { error: [error from response], isLoading: false, isError: true }]\n *\n * The update() function must be called with a resource and a parameter object: update(resource, { id, data, previousData }, options)\n *\n * This hook uses react-query useMutation under the hood.\n * This means the state object contains mutate, isIdle, reset and other react-query methods.\n *\n * @see https://react-query-v3.tanstack.com/reference/useMutation\n *\n * @example // set params when calling the update callback\n *\n * import { useUpdate, useRecordContext } from 'react-admin';\n *\n * const IncreaseLikeButton = () => {\n *     const record = useRecordContext();\n *     const diff = { likes: record.likes + 1 };\n *     const [update, { isLoading, error }] = useUpdate();\n *     const handleClick = () => {\n *         update('likes', { id: record.id, data: diff, previousData: record })\n *     }\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={isLoading} onClick={handleClick}>Like</div>;\n * };\n *\n * @example // set params when calling the hook\n *\n * import { useUpdate, useRecordContext } from 'react-admin';\n *\n * const IncreaseLikeButton = () => {\n *     const record = useRecordContext();\n *     const diff = { likes: record.likes + 1 };\n *     const [update, { isLoading, error }] = useUpdate('likes', { id: record.id, data: diff, previousData: record });\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={isLoading} onClick={() => update()}>Like</button>;\n * };\n *\n * @example // TypeScript\n * const [update, { data }] = useUpdate<Product>('products', { id, data: diff, previousData: product });\n *                    \\-- data is Product\n */\nexport var useUpdate = function (resource, params, options) {\n  if (params === void 0) {\n    params = {};\n  }\n  if (options === void 0) {\n    options = {};\n  }\n  var dataProvider = useDataProvider();\n  var queryClient = useQueryClient();\n  var id = params.id,\n    data = params.data,\n    meta = params.meta;\n  var _a = options.mutationMode,\n    mutationMode = _a === void 0 ? 'pessimistic' : _a,\n    reactMutationOptions = __rest(options, [\"mutationMode\"]);\n  var mode = useRef(mutationMode);\n  var paramsRef = useRef(params);\n  var snapshot = useRef([]);\n  var updateCache = function (_a) {\n    var resource = _a.resource,\n      id = _a.id,\n      data = _a.data;\n    // hack: only way to tell react-query not to fetch this query for the next 5 seconds\n    // because setQueryData doesn't accept a stale time option\n    var now = Date.now();\n    var updatedAt = mode.current === 'undoable' ? now + 5 * 1000 : now;\n    var updateColl = function (old) {\n      if (!old) return;\n      var index = old.findIndex(\n      // eslint-disable-next-line eqeqeq\n      function (record) {\n        return record.id == id;\n      });\n      if (index === -1) {\n        return old;\n      }\n      return __spreadArray(__spreadArray(__spreadArray([], old.slice(0, index), true), [__assign(__assign({}, old[index]), data)], false), old.slice(index + 1), true);\n    };\n    queryClient.setQueryData([resource, 'getOne', {\n      id: String(id),\n      meta: meta\n    }], function (record) {\n      return __assign(__assign({}, record), data);\n    }, {\n      updatedAt: updatedAt\n    });\n    queryClient.setQueriesData([resource, 'getList'], function (res) {\n      return res && res.data ? __assign(__assign({}, res), {\n        data: updateColl(res.data)\n      }) : res;\n    }, {\n      updatedAt: updatedAt\n    });\n    queryClient.setQueriesData([resource, 'getMany'], function (coll) {\n      return coll && coll.length > 0 ? updateColl(coll) : coll;\n    }, {\n      updatedAt: updatedAt\n    });\n    queryClient.setQueriesData([resource, 'getManyReference'], function (res) {\n      return res && res.data ? {\n        data: updateColl(res.data),\n        total: res.total\n      } : res;\n    }, {\n      updatedAt: updatedAt\n    });\n  };\n  var mutation = useMutation(function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n      _c = _b.resource,\n      callTimeResource = _c === void 0 ? resource : _c,\n      _d = _b.id,\n      callTimeId = _d === void 0 ? paramsRef.current.id : _d,\n      _e = _b.data,\n      callTimeData = _e === void 0 ? paramsRef.current.data : _e,\n      _f = _b.meta,\n      callTimeMeta = _f === void 0 ? paramsRef.current.meta : _f,\n      _g = _b.previousData,\n      callTimePreviousData = _g === void 0 ? paramsRef.current.previousData : _g;\n    return dataProvider.update(callTimeResource, {\n      id: callTimeId,\n      data: callTimeData,\n      previousData: callTimePreviousData,\n      meta: callTimeMeta\n    }).then(function (_a) {\n      var data = _a.data;\n      return data;\n    });\n  }, __assign(__assign({}, reactMutationOptions), {\n    onMutate: function (variables) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var userContext;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              if (!reactMutationOptions.onMutate) return [3 /*break*/, 2];\n              return [4 /*yield*/, reactMutationOptions.onMutate(variables)];\n            case 1:\n              userContext = _a.sent() || {};\n              return [2 /*return*/, __assign({\n                snapshot: snapshot.current\n              }, userContext)];\n            case 2:\n              // Return a context object with the snapshot value\n              return [2 /*return*/, {\n                snapshot: snapshot.current\n              }];\n          }\n        });\n      });\n    },\n    onError: function (error, variables, context) {\n      if (variables === void 0) {\n        variables = {};\n      }\n      if (mode.current === 'optimistic' || mode.current === 'undoable') {\n        // If the mutation fails, use the context returned from onMutate to rollback\n        context.snapshot.forEach(function (_a) {\n          var key = _a[0],\n            value = _a[1];\n          queryClient.setQueryData(key, value);\n        });\n      }\n      if (reactMutationOptions.onError) {\n        return reactMutationOptions.onError(error, variables, context);\n      }\n      // call-time error callback is executed by react-query\n    },\n    onSuccess: function (data, variables, context) {\n      if (variables === void 0) {\n        variables = {};\n      }\n      if (mode.current === 'pessimistic') {\n        // update the getOne and getList query cache with the new result\n        var _a = variables.resource,\n          callTimeResource = _a === void 0 ? resource : _a,\n          _b = variables.id,\n          callTimeId = _b === void 0 ? id : _b;\n        updateCache({\n          resource: callTimeResource,\n          id: callTimeId,\n          data: data\n        });\n        if (reactMutationOptions.onSuccess) {\n          reactMutationOptions.onSuccess(data, variables, context);\n        }\n        // call-time success callback is executed by react-query\n      }\n    },\n\n    onSettled: function (data, error, variables, context) {\n      if (variables === void 0) {\n        variables = {};\n      }\n      if (mode.current === 'optimistic' || mode.current === 'undoable') {\n        // Always refetch after error or success:\n        context.snapshot.forEach(function (_a) {\n          var key = _a[0];\n          queryClient.invalidateQueries(key);\n        });\n      }\n      if (reactMutationOptions.onSettled) {\n        return reactMutationOptions.onSettled(data, error, variables, context);\n      }\n    }\n  }));\n  var update = function (callTimeResource, callTimeParams, updateOptions) {\n    if (callTimeResource === void 0) {\n      callTimeResource = resource;\n    }\n    if (callTimeParams === void 0) {\n      callTimeParams = {};\n    }\n    if (updateOptions === void 0) {\n      updateOptions = {};\n    }\n    return __awaiter(void 0, void 0, void 0, function () {\n      var mutationMode, returnPromise, onSuccess, onSettled, onError, _a, callTimeId, _b, callTimeData, _c, callTimeMeta, previousRecord, queryKeys;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            mutationMode = updateOptions.mutationMode, returnPromise = updateOptions.returnPromise, onSuccess = updateOptions.onSuccess, onSettled = updateOptions.onSettled, onError = updateOptions.onError;\n            // store the hook time params *at the moment of the call*\n            // because they may change afterwards, which would break the undoable mode\n            // as the previousData would be overwritten by the optimistic update\n            paramsRef.current = params;\n            if (mutationMode) {\n              mode.current = mutationMode;\n            }\n            if (returnPromise && mode.current !== 'pessimistic') {\n              console.warn('The returnPromise parameter can only be used if the mutationMode is set to pessimistic');\n            }\n            if (mode.current === 'pessimistic') {\n              if (returnPromise) {\n                return [2 /*return*/, mutation.mutateAsync(__assign({\n                  resource: callTimeResource\n                }, callTimeParams), {\n                  onSuccess: onSuccess,\n                  onSettled: onSettled,\n                  onError: onError\n                })];\n              }\n              return [2 /*return*/, mutation.mutate(__assign({\n                resource: callTimeResource\n              }, callTimeParams), {\n                onSuccess: onSuccess,\n                onSettled: onSettled,\n                onError: onError\n              })];\n            }\n            _a = callTimeParams.id, callTimeId = _a === void 0 ? id : _a, _b = callTimeParams.data, callTimeData = _b === void 0 ? data : _b, _c = callTimeParams.meta, callTimeMeta = _c === void 0 ? meta : _c;\n            previousRecord = queryClient.getQueryData([callTimeResource, 'getOne', {\n              id: String(callTimeId),\n              meta: callTimeMeta\n            }]);\n            queryKeys = [[callTimeResource, 'getOne', {\n              id: String(callTimeId),\n              meta: callTimeMeta\n            }], [callTimeResource, 'getList'], [callTimeResource, 'getMany'], [callTimeResource, 'getManyReference']];\n            /**\n             * Snapshot the previous values via queryClient.getQueriesData()\n             *\n             * The snapshotData ref will contain an array of tuples [query key, associated data]\n             *\n             * @example\n             * [\n             *   [['posts', 'getOne', { id: '1' }], { id: 1, title: 'Hello' }],\n             *   [['posts', 'getList'], { data: [{ id: 1, title: 'Hello' }], total: 1 }],\n             *   [['posts', 'getMany'], [{ id: 1, title: 'Hello' }]],\n             * ]\n             *\n             * @see https://react-query-v3.tanstack.com/reference/QueryClient#queryclientgetqueriesdata\n             */\n            snapshot.current = queryKeys.reduce(function (prev, curr) {\n              return prev.concat(queryClient.getQueriesData(curr));\n            }, []);\n            // Cancel any outgoing re-fetches (so they don't overwrite our optimistic update)\n            return [4 /*yield*/, Promise.all(snapshot.current.map(function (_a) {\n              var key = _a[0];\n              return queryClient.cancelQueries(key);\n            }))];\n          case 1:\n            // Cancel any outgoing re-fetches (so they don't overwrite our optimistic update)\n            _d.sent();\n            // Optimistically update to the new value\n            updateCache({\n              resource: callTimeResource,\n              id: callTimeId,\n              data: callTimeData\n            });\n            // run the success callbacks during the next tick\n            if (onSuccess) {\n              setTimeout(function () {\n                return onSuccess(__assign(__assign({}, previousRecord), callTimeData), __assign({\n                  resource: callTimeResource\n                }, callTimeParams), {\n                  snapshot: snapshot.current\n                });\n              }, 0);\n            }\n            if (reactMutationOptions.onSuccess) {\n              setTimeout(function () {\n                return reactMutationOptions.onSuccess(__assign(__assign({}, previousRecord), callTimeData), __assign({\n                  resource: callTimeResource\n                }, callTimeParams), {\n                  snapshot: snapshot.current\n                });\n              }, 0);\n            }\n            if (mode.current === 'optimistic') {\n              // call the mutate method without success side effects\n              return [2 /*return*/, mutation.mutate(__assign({\n                resource: callTimeResource\n              }, callTimeParams), {\n                onSettled: onSettled,\n                onError: onError\n              })];\n            } else {\n              // undoable mutation: register the mutation for later\n              undoableEventEmitter.once('end', function (_a) {\n                var isUndo = _a.isUndo;\n                if (isUndo) {\n                  // rollback\n                  snapshot.current.forEach(function (_a) {\n                    var key = _a[0],\n                      value = _a[1];\n                    queryClient.setQueryData(key, value);\n                  });\n                } else {\n                  // call the mutate method without success side effects\n                  mutation.mutate(__assign({\n                    resource: callTimeResource\n                  }, callTimeParams), {\n                    onSettled: onSettled,\n                    onError: onError\n                  });\n                }\n              });\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  return [update, mutation];\n};","map":{"version":3,"mappings":"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","names":["useRef","useMutation","useQueryClient","useDataProvider","undoableEventEmitter","useUpdate","resource","params","options","dataProvider","queryClient","data","meta","mutationMode","reactMutationOptions","mode","paramsRef","snapshot","updateCache","_a","id","now","Date","updatedAt","current","updateColl","old","index","findIndex","slice","setQueryData","String","record","setQueriesData","res","__assign","coll","length","total","mutation","_b","_c","callTimeResource","_d","callTimeId","_e","callTimeData","_f","callTimeMeta","_g","callTimePreviousData","previousData","update","then","onMutate","variables","userContext","onError","error","context","forEach","key","value","onSuccess","onSettled","invalidateQueries","callTimeParams","updateOptions","returnPromise","console","warn","mutateAsync","mutate","previousRecord","getQueryData","queryKeys","reduce","prev","curr","concat","getQueriesData","Promise","all","map","cancelQueries","setTimeout","once","isUndo"],"sources":["/Users/paigedeveau/node_modules/ra-core/src/dataProvider/useUpdate.ts"],"sourcesContent":["import { useRef } from 'react';\nimport {\n    useMutation,\n    useQueryClient,\n    UseMutationOptions,\n    UseMutationResult,\n    MutateOptions,\n    QueryKey,\n} from 'react-query';\n\nimport { useDataProvider } from './useDataProvider';\nimport undoableEventEmitter from './undoableEventEmitter';\nimport {\n    RaRecord,\n    UpdateParams,\n    MutationMode,\n    GetListResult as OriginalGetListResult,\n} from '../types';\n\n/**\n * Get a callback to call the dataProvider.update() method, the result and the loading state.\n *\n * @param {string} resource\n * @param {Params} params The update parameters { id, data, previousData, meta }\n * @param {Object} options Options object to pass to the queryClient.\n * May include side effects to be executed upon success or failure, e.g. { onSuccess: () => { refresh(); } }\n * May include a mutation mode (optimistic/pessimistic/undoable), e.g. { mutationMode: 'undoable' }\n *\n * @typedef Params\n * @prop params.id The resource identifier, e.g. 123\n * @prop params.data The updates to merge into the record, e.g. { views: 10 }\n * @prop params.previousData The record before the update is applied\n * @prop params.meta Optional meta data\n *\n * @returns The current mutation state. Destructure as [update, { data, error, isLoading }].\n *\n * The return value updates according to the request state:\n *\n * - initial: [update, { isLoading: false, isIdle: true }]\n * - start:   [update, { isLoading: true }]\n * - success: [update, { data: [data from response], isLoading: false, isSuccess: true }]\n * - error:   [update, { error: [error from response], isLoading: false, isError: true }]\n *\n * The update() function must be called with a resource and a parameter object: update(resource, { id, data, previousData }, options)\n *\n * This hook uses react-query useMutation under the hood.\n * This means the state object contains mutate, isIdle, reset and other react-query methods.\n *\n * @see https://react-query-v3.tanstack.com/reference/useMutation\n *\n * @example // set params when calling the update callback\n *\n * import { useUpdate, useRecordContext } from 'react-admin';\n *\n * const IncreaseLikeButton = () => {\n *     const record = useRecordContext();\n *     const diff = { likes: record.likes + 1 };\n *     const [update, { isLoading, error }] = useUpdate();\n *     const handleClick = () => {\n *         update('likes', { id: record.id, data: diff, previousData: record })\n *     }\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={isLoading} onClick={handleClick}>Like</div>;\n * };\n *\n * @example // set params when calling the hook\n *\n * import { useUpdate, useRecordContext } from 'react-admin';\n *\n * const IncreaseLikeButton = () => {\n *     const record = useRecordContext();\n *     const diff = { likes: record.likes + 1 };\n *     const [update, { isLoading, error }] = useUpdate('likes', { id: record.id, data: diff, previousData: record });\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={isLoading} onClick={() => update()}>Like</button>;\n * };\n *\n * @example // TypeScript\n * const [update, { data }] = useUpdate<Product>('products', { id, data: diff, previousData: product });\n *                    \\-- data is Product\n */\nexport const useUpdate = <\n    RecordType extends RaRecord = any,\n    MutationError = unknown\n>(\n    resource?: string,\n    params: Partial<UpdateParams<RecordType>> = {},\n    options: UseUpdateOptions<RecordType, MutationError> = {}\n): UseUpdateResult<RecordType, boolean, MutationError> => {\n    const dataProvider = useDataProvider();\n    const queryClient = useQueryClient();\n    const { id, data, meta } = params;\n    const { mutationMode = 'pessimistic', ...reactMutationOptions } = options;\n    const mode = useRef<MutationMode>(mutationMode);\n    const paramsRef = useRef<Partial<UpdateParams<RecordType>>>(params);\n    const snapshot = useRef<Snapshot>([]);\n\n    const updateCache = ({ resource, id, data }) => {\n        // hack: only way to tell react-query not to fetch this query for the next 5 seconds\n        // because setQueryData doesn't accept a stale time option\n        const now = Date.now();\n        const updatedAt = mode.current === 'undoable' ? now + 5 * 1000 : now;\n\n        const updateColl = (old: RecordType[]) => {\n            if (!old) return;\n            const index = old.findIndex(\n                // eslint-disable-next-line eqeqeq\n                record => record.id == id\n            );\n            if (index === -1) {\n                return old;\n            }\n            return [\n                ...old.slice(0, index),\n                { ...old[index], ...data },\n                ...old.slice(index + 1),\n            ];\n        };\n\n        type GetListResult = Omit<OriginalGetListResult, 'data'> & {\n            data?: RecordType[];\n        };\n\n        queryClient.setQueryData(\n            [resource, 'getOne', { id: String(id), meta }],\n            (record: RecordType) => ({ ...record, ...data }),\n            { updatedAt }\n        );\n        queryClient.setQueriesData(\n            [resource, 'getList'],\n            (res: GetListResult) =>\n                res && res.data ? { ...res, data: updateColl(res.data) } : res,\n            { updatedAt }\n        );\n        queryClient.setQueriesData(\n            [resource, 'getMany'],\n            (coll: RecordType[]) =>\n                coll && coll.length > 0 ? updateColl(coll) : coll,\n            { updatedAt }\n        );\n        queryClient.setQueriesData(\n            [resource, 'getManyReference'],\n            (res: GetListResult) =>\n                res && res.data\n                    ? { data: updateColl(res.data), total: res.total }\n                    : res,\n            { updatedAt }\n        );\n    };\n\n    const mutation = useMutation<\n        RecordType,\n        MutationError,\n        Partial<UseUpdateMutateParams<RecordType>>\n    >(\n        ({\n            resource: callTimeResource = resource,\n            id: callTimeId = paramsRef.current.id,\n            data: callTimeData = paramsRef.current.data,\n            meta: callTimeMeta = paramsRef.current.meta,\n            previousData: callTimePreviousData = paramsRef.current.previousData,\n        } = {}) =>\n            dataProvider\n                .update<RecordType>(callTimeResource, {\n                    id: callTimeId,\n                    data: callTimeData,\n                    previousData: callTimePreviousData,\n                    meta: callTimeMeta,\n                })\n                .then(({ data }) => data),\n        {\n            ...reactMutationOptions,\n            onMutate: async (\n                variables: Partial<UseUpdateMutateParams<RecordType>>\n            ) => {\n                if (reactMutationOptions.onMutate) {\n                    const userContext =\n                        (await reactMutationOptions.onMutate(variables)) || {};\n                    return {\n                        snapshot: snapshot.current,\n                        // @ts-ignore\n                        ...userContext,\n                    };\n                } else {\n                    // Return a context object with the snapshot value\n                    return { snapshot: snapshot.current };\n                }\n            },\n            onError: (\n                error: MutationError,\n                variables: Partial<UseUpdateMutateParams<RecordType>> = {},\n                context: { snapshot: Snapshot }\n            ) => {\n                if (\n                    mode.current === 'optimistic' ||\n                    mode.current === 'undoable'\n                ) {\n                    // If the mutation fails, use the context returned from onMutate to rollback\n                    context.snapshot.forEach(([key, value]) => {\n                        queryClient.setQueryData(key, value);\n                    });\n                }\n\n                if (reactMutationOptions.onError) {\n                    return reactMutationOptions.onError(\n                        error,\n                        variables,\n                        context\n                    );\n                }\n                // call-time error callback is executed by react-query\n            },\n            onSuccess: (\n                data: RecordType,\n                variables: Partial<UseUpdateMutateParams<RecordType>> = {},\n                context: unknown\n            ) => {\n                if (mode.current === 'pessimistic') {\n                    // update the getOne and getList query cache with the new result\n                    const {\n                        resource: callTimeResource = resource,\n                        id: callTimeId = id,\n                    } = variables;\n                    updateCache({\n                        resource: callTimeResource,\n                        id: callTimeId,\n                        data,\n                    });\n\n                    if (reactMutationOptions.onSuccess) {\n                        reactMutationOptions.onSuccess(\n                            data,\n                            variables,\n                            context\n                        );\n                    }\n                    // call-time success callback is executed by react-query\n                }\n            },\n            onSettled: (\n                data: RecordType,\n                error: MutationError,\n                variables: Partial<UseUpdateMutateParams<RecordType>> = {},\n                context: { snapshot: Snapshot }\n            ) => {\n                if (\n                    mode.current === 'optimistic' ||\n                    mode.current === 'undoable'\n                ) {\n                    // Always refetch after error or success:\n                    context.snapshot.forEach(([key]) => {\n                        queryClient.invalidateQueries(key);\n                    });\n                }\n\n                if (reactMutationOptions.onSettled) {\n                    return reactMutationOptions.onSettled(\n                        data,\n                        error,\n                        variables,\n                        context\n                    );\n                }\n            },\n        }\n    );\n\n    const update = async (\n        callTimeResource: string = resource,\n        callTimeParams: Partial<UpdateParams<RecordType>> = {},\n        updateOptions: MutateOptions<\n            RecordType,\n            unknown,\n            Partial<UseUpdateMutateParams<RecordType>>,\n            unknown\n        > & { mutationMode?: MutationMode; returnPromise?: boolean } = {}\n    ) => {\n        const {\n            mutationMode,\n            returnPromise,\n            onSuccess,\n            onSettled,\n            onError,\n        } = updateOptions;\n\n        // store the hook time params *at the moment of the call*\n        // because they may change afterwards, which would break the undoable mode\n        // as the previousData would be overwritten by the optimistic update\n        paramsRef.current = params;\n\n        if (mutationMode) {\n            mode.current = mutationMode;\n        }\n\n        if (returnPromise && mode.current !== 'pessimistic') {\n            console.warn(\n                'The returnPromise parameter can only be used if the mutationMode is set to pessimistic'\n            );\n        }\n\n        if (mode.current === 'pessimistic') {\n            if (returnPromise) {\n                return mutation.mutateAsync(\n                    { resource: callTimeResource, ...callTimeParams },\n                    { onSuccess, onSettled, onError }\n                );\n            }\n            return mutation.mutate(\n                { resource: callTimeResource, ...callTimeParams },\n                { onSuccess, onSettled, onError }\n            );\n        }\n\n        const {\n            id: callTimeId = id,\n            data: callTimeData = data,\n            meta: callTimeMeta = meta,\n        } = callTimeParams;\n\n        // optimistic update as documented in https://react-query-v3.tanstack.com/guides/optimistic-updates\n        // except we do it in a mutate wrapper instead of the onMutate callback\n        // to have access to success side effects\n\n        const previousRecord = queryClient.getQueryData<RecordType>([\n            callTimeResource,\n            'getOne',\n            { id: String(callTimeId), meta: callTimeMeta },\n        ]);\n\n        const queryKeys = [\n            [\n                callTimeResource,\n                'getOne',\n                { id: String(callTimeId), meta: callTimeMeta },\n            ],\n            [callTimeResource, 'getList'],\n            [callTimeResource, 'getMany'],\n            [callTimeResource, 'getManyReference'],\n        ];\n\n        /**\n         * Snapshot the previous values via queryClient.getQueriesData()\n         *\n         * The snapshotData ref will contain an array of tuples [query key, associated data]\n         *\n         * @example\n         * [\n         *   [['posts', 'getOne', { id: '1' }], { id: 1, title: 'Hello' }],\n         *   [['posts', 'getList'], { data: [{ id: 1, title: 'Hello' }], total: 1 }],\n         *   [['posts', 'getMany'], [{ id: 1, title: 'Hello' }]],\n         * ]\n         *\n         * @see https://react-query-v3.tanstack.com/reference/QueryClient#queryclientgetqueriesdata\n         */\n        snapshot.current = queryKeys.reduce(\n            (prev, curr) => prev.concat(queryClient.getQueriesData(curr)),\n            [] as Snapshot\n        );\n\n        // Cancel any outgoing re-fetches (so they don't overwrite our optimistic update)\n        await Promise.all(\n            snapshot.current.map(([key]) => queryClient.cancelQueries(key))\n        );\n\n        // Optimistically update to the new value\n        updateCache({\n            resource: callTimeResource,\n            id: callTimeId,\n            data: callTimeData,\n        });\n\n        // run the success callbacks during the next tick\n        if (onSuccess) {\n            setTimeout(\n                () =>\n                    onSuccess(\n                        { ...previousRecord, ...callTimeData },\n                        { resource: callTimeResource, ...callTimeParams },\n                        { snapshot: snapshot.current }\n                    ),\n                0\n            );\n        }\n        if (reactMutationOptions.onSuccess) {\n            setTimeout(\n                () =>\n                    reactMutationOptions.onSuccess(\n                        { ...previousRecord, ...callTimeData },\n                        { resource: callTimeResource, ...callTimeParams },\n                        { snapshot: snapshot.current }\n                    ),\n                0\n            );\n        }\n\n        if (mode.current === 'optimistic') {\n            // call the mutate method without success side effects\n            return mutation.mutate(\n                { resource: callTimeResource, ...callTimeParams },\n                { onSettled, onError }\n            );\n        } else {\n            // undoable mutation: register the mutation for later\n            undoableEventEmitter.once('end', ({ isUndo }) => {\n                if (isUndo) {\n                    // rollback\n                    snapshot.current.forEach(([key, value]) => {\n                        queryClient.setQueryData(key, value);\n                    });\n                } else {\n                    // call the mutate method without success side effects\n                    mutation.mutate(\n                        { resource: callTimeResource, ...callTimeParams },\n                        { onSettled, onError }\n                    );\n                }\n            });\n        }\n    };\n\n    return [update, mutation];\n};\n\ntype Snapshot = [key: QueryKey, value: any][];\n\nexport interface UseUpdateMutateParams<RecordType extends RaRecord = any> {\n    resource?: string;\n    id?: RecordType['id'];\n    data?: Partial<RecordType>;\n    previousData?: any;\n    meta?: any;\n}\n\nexport type UseUpdateOptions<\n    RecordType extends RaRecord = any,\n    MutationError = unknown\n> = UseMutationOptions<\n    RecordType,\n    MutationError,\n    Partial<UseUpdateMutateParams<RecordType>>\n> & { mutationMode?: MutationMode };\n\nexport type UseUpdateResult<\n    RecordType extends RaRecord = any,\n    TReturnPromise extends boolean = boolean,\n    MutationError = unknown\n> = [\n    (\n        resource?: string,\n        params?: Partial<UpdateParams<RecordType>>,\n        options?: MutateOptions<\n            RecordType,\n            MutationError,\n            Partial<UseUpdateMutateParams<RecordType>>,\n            unknown\n        > & { mutationMode?: MutationMode; returnPromise?: TReturnPromise }\n    ) => Promise<TReturnPromise extends true ? RecordType : void>,\n    UseMutationResult<\n        RecordType,\n        MutationError,\n        Partial<UpdateParams<RecordType> & { resource?: string }>,\n        unknown\n    >\n];\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}