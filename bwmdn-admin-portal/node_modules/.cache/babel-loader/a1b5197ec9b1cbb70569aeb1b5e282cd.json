{"ast":null,"code":"import { useState, useMemo } from 'react';\nimport { useResourceContext } from '../core';\nimport { useLocaleState } from './useLocaleState';\nimport { useTranslateLabel } from './useTranslateLabel';\n/**\n * Hook supplying the logic to translate a field value in multiple languages.\n *\n * @param options The hook options\n * @param {string} options.defaultLocale The locale of the default selected locale. Defaults to 'en'.\n * @param {string[]} options.locales An array of the supported locales. Each is an object with a locale and a name property. For example { locale: 'en', name: 'English' }.\n *\n * @returns\n * An object with following properties and methods:\n * - selectedLocale: The locale of the currently selected locale\n * - locales: An array of the supported locales\n * - getLabel: A function which returns the translated label for the given field\n * - getSource: A function which returns the source for the given field\n * - selectLocale: A function which set the selected locale\n */\nexport var useTranslatable = function (options) {\n  var localeFromUI = useLocaleState()[0];\n  var _a = options.defaultLocale,\n    defaultLocale = _a === void 0 ? localeFromUI : _a,\n    locales = options.locales;\n  var _b = useState(defaultLocale),\n    selectedLocale = _b[0],\n    setSelectedLocale = _b[1];\n  var resource = useResourceContext({});\n  var translateLabel = useTranslateLabel();\n  var context = useMemo(function () {\n    return {\n      getSource: function (source, locale) {\n        if (locale === void 0) {\n          locale = selectedLocale;\n        }\n        return \"\".concat(source, \".\").concat(locale);\n      },\n      getLabel: function (source, label) {\n        return translateLabel({\n          source: source,\n          resource: resource,\n          label: label\n        });\n      },\n      locales: locales,\n      selectedLocale: selectedLocale,\n      selectLocale: setSelectedLocale\n    };\n  }, [locales, resource, selectedLocale, translateLabel]);\n  return context;\n};","map":{"version":3,"mappings":"AAAA,SAASA,QAAQ,EAAEC,OAAO,QAAQ,OAAO;AACzC,SAASC,kBAAkB,QAAQ,SAAS;AAE5C,SAASC,cAAc,QAAQ,kBAAkB;AACjD,SAASC,iBAAiB,QAAQ,qBAAqB;AAEvD;;;;;;;;;;;;;;;AAeA,OAAO,IAAMC,eAAe,GAAG,UAC3BC,OAA+B;EAExB,gBAAY,GAAIH,cAAc,EAAE,GAApB;EACX,SAA0CG,OAAO,cAArB;IAA5BC,aAAa,mBAAGC,YAAY;IAAEC,OAAO,GAAKH,OAAO,QAAZ;EACvC,SAAsCN,QAAQ,CAACO,aAAa,CAAC;IAA5DG,cAAc;IAAEC,iBAAiB,QAA2B;EACnE,IAAMC,QAAQ,GAAGV,kBAAkB,CAAC,EAAE,CAAC;EACvC,IAAMW,cAAc,GAAGT,iBAAiB,EAAE;EAE1C,IAAMU,OAAO,GAAGb,OAAO,CACnB;IAAM,OAAC;MACHc,SAAS,EAAE,UAACC,MAAc,EAAEC,MAA+B;QAA/B;UAAAA,uBAA+B;QAAA;QACvD,iBAAGD,MAAM,cAAIC,MAAM,CAAE;MAArB,CAAqB;MACzBC,QAAQ,EAAE,UAACF,MAAc,EAAEG,KAAc;QACrC,qBAAc,CAAC;UAAEH,MAAM;UAAEJ,QAAQ;UAAEO,KAAK;QAAA,CAAE,CAAW;MAArD,CAAqD;MACzDV,OAAO;MACPC,cAAc;MACdU,YAAY,EAAET;KACjB;EARK,CAQJ,EACF,CAACF,OAAO,EAAEG,QAAQ,EAAEF,cAAc,EAAEG,cAAc,CAAC,CACtD;EAED,OAAOC,OAAO;AAClB,CAAC","names":["useState","useMemo","useResourceContext","useLocaleState","useTranslateLabel","useTranslatable","options","defaultLocale","localeFromUI","locales","selectedLocale","setSelectedLocale","resource","translateLabel","context","getSource","source","locale","getLabel","label","selectLocale"],"sourceRoot":"","sources":["../../../src/i18n/useTranslatable.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}