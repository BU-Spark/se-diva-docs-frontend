{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport { FormProvider } from 'react-hook-form';\nimport { FormGroupsProvider } from './FormGroupsProvider';\nimport { useRecordContext, OptionalRecordContextProvider } from '../controller';\nimport { useResourceContext } from '../core';\nimport { LabelPrefixContextProvider } from '../util';\nimport { useAugmentedForm } from './useAugmentedForm';\n/**\n * Creates a form element, initialized with the current record, calling the saveContext on submit\n *\n * Wrapper around react-hook-form's useForm, FormContextProvider, and <form>.\n * Also sets up a FormGroupContext, and handles submission validation.\n *\n * @example\n *\n * const MyForm = ({ record, defaultValues, validate }) => (\n *    <Form record={record} defaultValues={defaultValues} validate={validate}>\n *        <Stack>\n *            <TextInput source=\"title\" />\n *            <SaveButton />\n *        </Stack>\n *    </Form>\n * );\n *\n * @typedef {Object} Props the props you can use\n * @prop {Object} defaultValues\n * @prop {Function} validate\n * @prop {Function} save\n *\n * @see useForm\n * @see FormGroupContext\n *\n * @link https://react-hook-form.com/api/useformcontext\n */\nexport var Form = function (props) {\n  var children = props.children,\n    id = props.id,\n    className = props.className,\n    _a = props.noValidate,\n    noValidate = _a === void 0 ? false : _a;\n  var record = useRecordContext(props);\n  var resource = useResourceContext(props);\n  var _b = useAugmentedForm(props),\n    form = _b.form,\n    formHandleSubmit = _b.formHandleSubmit;\n  return React.createElement(OptionalRecordContextProvider, {\n    value: record\n  }, React.createElement(LabelPrefixContextProvider, {\n    prefix: \"resources.\".concat(resource, \".fields\")\n  }, React.createElement(FormProvider, __assign({}, form), React.createElement(FormGroupsProvider, null, React.createElement(\"form\", {\n    onSubmit: formHandleSubmit,\n    noValidate: noValidate,\n    id: id,\n    className: className\n  }, children)))));\n};","map":{"version":3,"mappings":";;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,SACIC,YAAY,QAIT,iBAAiB;AAExB,SAASC,kBAAkB,QAAQ,sBAAsB;AAEzD,SAASC,gBAAgB,EAAEC,6BAA6B,QAAQ,eAAe;AAC/E,SAASC,kBAAkB,QAAQ,SAAS;AAC5C,SAASC,0BAA0B,QAAQ,SAAS;AAEpD,SAASC,gBAAgB,QAAQ,oBAAoB;AAErD;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,OAAO,IAAMC,IAAI,GAAG,UAACC,KAAgB;EACzB,YAAQ,GAAwCA,KAAK,SAA7C;IAAEC,EAAE,GAAoCD,KAAK,GAAzC;IAAEE,SAAS,GAAyBF,KAAK,UAA9B;IAAEG,KAAuBH,KAAK,WAAV;IAAlBI,UAAU,mBAAG,KAAK;EACnD,IAAMC,MAAM,GAAGX,gBAAgB,CAACM,KAAK,CAAC;EACtC,IAAMM,QAAQ,GAAGV,kBAAkB,CAACI,KAAK,CAAC;EACpC,SAA6BF,gBAAgB,CAACE,KAAK,CAAC;IAAlDO,IAAI;IAAEC,gBAAgB,sBAA4B;EAE1D,OACIjB,oBAACI,6BAA6B;IAACc,KAAK,EAAEJ;EAAM,GACxCd,oBAACM,0BAA0B;IAACa,MAAM,EAAE,oBAAaJ,QAAQ;EAAS,GAC9Df,oBAACC,YAAY,eAAKe,IAAI,GAClBhB,oBAACE,kBAAkB,QACfF;IACIoB,QAAQ,EAAEH,gBAAgB;IAC1BJ,UAAU,EAAEA,UAAU;IACtBH,EAAE,EAAEA,EAAE;IACNC,SAAS,EAAEA;EAAS,GAEnBU,QAAQ,CACN,CACU,CACV,CACU,CACD;AAExC,CAAC","names":["React","FormProvider","FormGroupsProvider","useRecordContext","OptionalRecordContextProvider","useResourceContext","LabelPrefixContextProvider","useAugmentedForm","Form","props","id","className","_a","noValidate","record","resource","form","formHandleSubmit","value","prefix","onSubmit","children"],"sources":["/Users/paigedeveau/node_modules/ra-core/src/form/Form.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactNode } from 'react';\nimport {\n    FormProvider,\n    FieldValues,\n    UseFormProps,\n    SubmitHandler,\n} from 'react-hook-form';\n\nimport { FormGroupsProvider } from './FormGroupsProvider';\nimport { RaRecord } from '../types';\nimport { useRecordContext, OptionalRecordContextProvider } from '../controller';\nimport { useResourceContext } from '../core';\nimport { LabelPrefixContextProvider } from '../util';\nimport { ValidateForm } from './getSimpleValidationResolver';\nimport { useAugmentedForm } from './useAugmentedForm';\n\n/**\n * Creates a form element, initialized with the current record, calling the saveContext on submit\n *\n * Wrapper around react-hook-form's useForm, FormContextProvider, and <form>.\n * Also sets up a FormGroupContext, and handles submission validation.\n *\n * @example\n *\n * const MyForm = ({ record, defaultValues, validate }) => (\n *    <Form record={record} defaultValues={defaultValues} validate={validate}>\n *        <Stack>\n *            <TextInput source=\"title\" />\n *            <SaveButton />\n *        </Stack>\n *    </Form>\n * );\n *\n * @typedef {Object} Props the props you can use\n * @prop {Object} defaultValues\n * @prop {Function} validate\n * @prop {Function} save\n *\n * @see useForm\n * @see FormGroupContext\n *\n * @link https://react-hook-form.com/api/useformcontext\n */\nexport const Form = (props: FormProps) => {\n    const { children, id, className, noValidate = false } = props;\n    const record = useRecordContext(props);\n    const resource = useResourceContext(props);\n    const { form, formHandleSubmit } = useAugmentedForm(props);\n\n    return (\n        <OptionalRecordContextProvider value={record}>\n            <LabelPrefixContextProvider prefix={`resources.${resource}.fields`}>\n                <FormProvider {...form}>\n                    <FormGroupsProvider>\n                        <form\n                            onSubmit={formHandleSubmit}\n                            noValidate={noValidate}\n                            id={id}\n                            className={className}\n                        >\n                            {children}\n                        </form>\n                    </FormGroupsProvider>\n                </FormProvider>\n            </LabelPrefixContextProvider>\n        </OptionalRecordContextProvider>\n    );\n};\n\nexport type FormProps = FormOwnProps &\n    Omit<UseFormProps, 'onSubmit'> & {\n        validate?: ValidateForm;\n        noValidate?: boolean;\n    };\n\nexport interface FormOwnProps {\n    children: ReactNode;\n    className?: string;\n    defaultValues?: any;\n    formRootPathname?: string;\n    id?: string;\n    record?: Partial<RaRecord>;\n    resource?: string;\n    onSubmit?: SubmitHandler<FieldValues>;\n    warnWhenUnsavedChanges?: boolean;\n    sanitizeEmptyValues?: boolean;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}