{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport Typography from '@mui/material/Typography';\nimport { useRecordContext, useTranslate } from 'ra-core';\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { fieldPropTypes } from './types';\n/**\n * Display a numeric value as a locale string.\n *\n * Uses Intl.NumberFormat() if available, passing the locales and options props as arguments.\n * If Intl is not available, it outputs number as is (and ignores the locales and options props).\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString\n * @example\n * <NumberField source=\"score\" />\n * // renders the record { id: 1234, score: 567 } as\n * <span>567</span>\n *\n * <NumberField source=\"score\" className=\"red\" />\n * // renders the record { id: 1234, score: 567 } as\n * <span class=\"red\">567</span>\n *\n * <NumberField source=\"share\" options={{ style: 'percent' }} />\n * // renders the record { id: 1234, share: 0.2545 } as\n * <span>25%</span>\n *\n * <NumberField source=\"price\" options={{ style: 'currency', currency: 'USD' }} />\n * // renders the record { id: 1234, price: 25.99 } as\n * <span>$25.99</span>\n *\n * <NumberField source=\"price\" locales=\"fr-FR\" options={{ style: 'currency', currency: 'USD' }} />\n * // renders the record { id: 1234, price: 25.99 } as\n * <span>25,99 $US</span>\n */\nexport var NumberField = memo(function (props) {\n  var className = props.className,\n    emptyText = props.emptyText,\n    source = props.source,\n    locales = props.locales,\n    options = props.options,\n    textAlign = props.textAlign,\n    rest = __rest(props, [\"className\", \"emptyText\", \"source\", \"locales\", \"options\", \"textAlign\"]);\n  var record = useRecordContext(props);\n  var translate = useTranslate();\n  if (!record) {\n    return null;\n  }\n  var value = get(record, source);\n  if (value == null) {\n    return emptyText ? React.createElement(Typography, __assign({\n      component: \"span\",\n      variant: \"body2\",\n      className: className\n    }, sanitizeFieldRestProps(rest)), emptyText && translate(emptyText, {\n      _: emptyText\n    })) : null;\n  }\n  return React.createElement(Typography, __assign({\n    variant: \"body2\",\n    component: \"span\",\n    className: className\n  }, sanitizeFieldRestProps(rest)), hasNumberFormat ? value.toLocaleString(locales, options) : value);\n});\n// what? TypeScript loses the displayName if we don't set it explicitly\nNumberField.displayName = 'NumberField';\nNumberField.defaultProps = {\n  textAlign: 'right'\n};\nNumberField.propTypes = __assign(__assign(__assign({}, Typography.propTypes), fieldPropTypes), {\n  locales: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n  options: PropTypes.object\n});\nvar hasNumberFormat = !!(typeof Intl === 'object' && Intl && typeof Intl.NumberFormat === 'function');","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,IAAI,QAAY,OAAO;AAChC,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,GAAG,MAAM,YAAY;AAC5B,OAAOC,UAA+B,MAAM,0BAA0B;AACtE,SAASC,gBAAgB,EAAEC,YAAY,QAAQ,SAAS;AAExD,SAASC,sBAAsB,QAAQ,0BAA0B;AACjE,SAA+CC,cAAc,QAAQ,SAAS;AAE9E;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,OAAO,IAAMC,WAAW,GAAyBR,IAAI,CAAC,eAAK;EAEnD,aAAS,GAOTS,KAAK,UAPI;IACTC,SAAS,GAMTD,KAAK,UANI;IACTE,MAAM,GAKNF,KAAK,OALC;IACNG,OAAO,GAIPH,KAAK,QAJE;IACPI,OAAO,GAGPJ,KAAK,QAHE;IACPK,SAAS,GAETL,KAAK,UAFI;IACNM,IAAI,UACPN,KAAK,EARH,uEAQL,CADU;EAEX,IAAMO,MAAM,GAAGZ,gBAAgB,CAACK,KAAK,CAAC;EACtC,IAAMQ,SAAS,GAAGZ,YAAY,EAAE;EAEhC,IAAI,CAACW,MAAM,EAAE;IACT,OAAO,IAAI;;EAEf,IAAME,KAAK,GAAGhB,GAAG,CAACc,MAAM,EAAEL,MAAM,CAAC;EAEjC,IAAIO,KAAK,IAAI,IAAI,EAAE;IACf,OAAOR,SAAS,GACZX,oBAACI,UAAU;MACPgB,SAAS,EAAC,MAAM;MAChBC,OAAO,EAAC,OAAO;MACfC,SAAS,EAAEA;IAAS,GAChBf,sBAAsB,CAACS,IAAI,CAAC,GAE/BL,SAAS,IAAIO,SAAS,CAACP,SAAS,EAAE;MAAEY,CAAC,EAAEZ;IAAS,CAAE,CAAC,CAC3C,GACb,IAAI;;EAGZ,OACIX,oBAACI,UAAU;IACPiB,OAAO,EAAC,OAAO;IACfD,SAAS,EAAC,MAAM;IAChBE,SAAS,EAAEA;EAAS,GAChBf,sBAAsB,CAACS,IAAI,CAAC,GAE/BQ,eAAe,GAAGL,KAAK,CAACM,cAAc,CAACZ,OAAO,EAAEC,OAAO,CAAC,GAAGK,KAAK,CACxD;AAErB,CAAC,CAAC;AAEF;AACAV,WAAW,CAACiB,WAAW,GAAG,aAAa;AAEvCjB,WAAW,CAACkB,YAAY,GAAG;EACvBZ,SAAS,EAAE;CACd;AAEDN,WAAW,CAACmB,SAAS,kCAEdxB,UAAU,CAACwB,SAAS,GACpBpB,cAAc;EACjBK,OAAO,EAAEX,SAAS,CAAC2B,SAAS,CAAC,CACzB3B,SAAS,CAAC4B,MAAM,EAChB5B,SAAS,CAAC6B,OAAO,CAAC7B,SAAS,CAAC4B,MAAM,CAAC,CACtC,CAAC;EACFhB,OAAO,EAAEZ,SAAS,CAAC8B;AAAM,EAC5B;AAUD,IAAMR,eAAe,GAAG,CAAC,EACrB,OAAOS,IAAI,KAAK,QAAQ,IACxBA,IAAI,IACJ,OAAOA,IAAI,CAACC,YAAY,KAAK,UAAU,CAC1C","names":["React","memo","PropTypes","get","Typography","useRecordContext","useTranslate","sanitizeFieldRestProps","fieldPropTypes","NumberField","props","emptyText","source","locales","options","textAlign","rest","record","translate","value","component","variant","className","_","hasNumberFormat","toLocaleString","displayName","defaultProps","propTypes","oneOfType","string","arrayOf","object","Intl","NumberFormat"],"sources":["/Users/paigedeveau/Desktop/se-diva-docs-frontend/bwmdn-admin-portal/node_modules/ra-ui-materialui/src/field/NumberField.tsx"],"sourcesContent":["import * as React from 'react';\nimport { memo, FC } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport Typography, { TypographyProps } from '@mui/material/Typography';\nimport { useRecordContext, useTranslate } from 'ra-core';\n\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { PublicFieldProps, InjectedFieldProps, fieldPropTypes } from './types';\n\n/**\n * Display a numeric value as a locale string.\n *\n * Uses Intl.NumberFormat() if available, passing the locales and options props as arguments.\n * If Intl is not available, it outputs number as is (and ignores the locales and options props).\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString\n * @example\n * <NumberField source=\"score\" />\n * // renders the record { id: 1234, score: 567 } as\n * <span>567</span>\n *\n * <NumberField source=\"score\" className=\"red\" />\n * // renders the record { id: 1234, score: 567 } as\n * <span class=\"red\">567</span>\n *\n * <NumberField source=\"share\" options={{ style: 'percent' }} />\n * // renders the record { id: 1234, share: 0.2545 } as\n * <span>25%</span>\n *\n * <NumberField source=\"price\" options={{ style: 'currency', currency: 'USD' }} />\n * // renders the record { id: 1234, price: 25.99 } as\n * <span>$25.99</span>\n *\n * <NumberField source=\"price\" locales=\"fr-FR\" options={{ style: 'currency', currency: 'USD' }} />\n * // renders the record { id: 1234, price: 25.99 } as\n * <span>25,99 $US</span>\n */\nexport const NumberField: FC<NumberFieldProps> = memo(props => {\n    const {\n        className,\n        emptyText,\n        source,\n        locales,\n        options,\n        textAlign,\n        ...rest\n    } = props;\n    const record = useRecordContext(props);\n    const translate = useTranslate();\n\n    if (!record) {\n        return null;\n    }\n    const value = get(record, source);\n\n    if (value == null) {\n        return emptyText ? (\n            <Typography\n                component=\"span\"\n                variant=\"body2\"\n                className={className}\n                {...sanitizeFieldRestProps(rest)}\n            >\n                {emptyText && translate(emptyText, { _: emptyText })}\n            </Typography>\n        ) : null;\n    }\n\n    return (\n        <Typography\n            variant=\"body2\"\n            component=\"span\"\n            className={className}\n            {...sanitizeFieldRestProps(rest)}\n        >\n            {hasNumberFormat ? value.toLocaleString(locales, options) : value}\n        </Typography>\n    );\n});\n\n// what? TypeScript loses the displayName if we don't set it explicitly\nNumberField.displayName = 'NumberField';\n\nNumberField.defaultProps = {\n    textAlign: 'right',\n};\n\nNumberField.propTypes = {\n    // @ts-ignore\n    ...Typography.propTypes,\n    ...fieldPropTypes,\n    locales: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.arrayOf(PropTypes.string),\n    ]),\n    options: PropTypes.object,\n};\n\nexport interface NumberFieldProps\n    extends PublicFieldProps,\n        InjectedFieldProps,\n        Omit<TypographyProps, 'textAlign'> {\n    locales?: string | string[];\n    options?: object;\n}\n\nconst hasNumberFormat = !!(\n    typeof Intl === 'object' &&\n    Intl &&\n    typeof Intl.NumberFormat === 'function'\n);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}