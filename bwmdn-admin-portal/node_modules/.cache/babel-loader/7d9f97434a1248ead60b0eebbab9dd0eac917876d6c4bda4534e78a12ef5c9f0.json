{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport React, { Fragment } from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport { alpha } from '@mui/material/styles';\nimport ActionDelete from '@mui/icons-material/Delete';\nimport clsx from 'clsx';\nimport inflection from 'inflection';\nimport { useDeleteWithConfirmController, useRecordContext, useResourceContext, useTranslate } from 'ra-core';\nimport { Confirm } from '../layout';\nimport { Button } from './Button';\nexport var DeleteWithConfirmButton = function (props) {\n  var className = props.className,\n    _a = props.confirmTitle,\n    confirmTitle = _a === void 0 ? 'ra.message.delete_title' : _a,\n    _b = props.confirmContent,\n    confirmContent = _b === void 0 ? 'ra.message.delete_content' : _b,\n    _c = props.icon,\n    icon = _c === void 0 ? defaultIcon : _c,\n    _d = props.label,\n    label = _d === void 0 ? 'ra.action.delete' : _d,\n    _e = props.mutationMode,\n    mutationMode = _e === void 0 ? 'pessimistic' : _e,\n    onClick = props.onClick,\n    _f = props.redirect,\n    redirect = _f === void 0 ? 'list' : _f,\n    _g = props.translateOptions,\n    translateOptions = _g === void 0 ? {} : _g,\n    mutationOptions = props.mutationOptions,\n    rest = __rest(props, [\"className\", \"confirmTitle\", \"confirmContent\", \"icon\", \"label\", \"mutationMode\", \"onClick\", \"redirect\", \"translateOptions\", \"mutationOptions\"]);\n  var translate = useTranslate();\n  var record = useRecordContext(props);\n  var resource = useResourceContext(props);\n  var _h = useDeleteWithConfirmController({\n      record: record,\n      redirect: redirect,\n      mutationMode: mutationMode,\n      onClick: onClick,\n      mutationOptions: mutationOptions,\n      resource: resource\n    }),\n    open = _h.open,\n    isLoading = _h.isLoading,\n    handleDialogOpen = _h.handleDialogOpen,\n    handleDialogClose = _h.handleDialogClose,\n    handleDelete = _h.handleDelete;\n  return React.createElement(Fragment, null, React.createElement(StyledButton, __assign({\n    onClick: handleDialogOpen,\n    label: label,\n    className: clsx('ra-delete-button', className),\n    key: \"button\"\n  }, rest), icon), React.createElement(Confirm, {\n    isOpen: open,\n    loading: isLoading,\n    title: confirmTitle,\n    content: confirmContent,\n    translateOptions: __assign({\n      name: translate(\"resources.\".concat(resource, \".forcedCaseName\"), {\n        smart_count: 1,\n        _: inflection.humanize(translate(\"resources.\".concat(resource, \".name\"), {\n          smart_count: 1,\n          _: inflection.singularize(resource)\n        }), true)\n      }),\n      id: record.id\n    }, translateOptions),\n    onConfirm: handleDelete,\n    onClose: handleDialogClose\n  }));\n};\nvar defaultIcon = React.createElement(ActionDelete, null);\nDeleteWithConfirmButton.propTypes = {\n  className: PropTypes.string,\n  confirmTitle: PropTypes.string,\n  confirmContent: PropTypes.string,\n  label: PropTypes.string,\n  mutationMode: PropTypes.oneOf(['pessimistic', 'optimistic', 'undoable']),\n  record: PropTypes.any,\n  redirect: PropTypes.oneOfType([PropTypes.string, PropTypes.bool, PropTypes.func]),\n  resource: PropTypes.string,\n  icon: PropTypes.element,\n  translateOptions: PropTypes.object\n};\nvar PREFIX = 'RaDeleteWithConfirmButton';\nvar StyledButton = styled(Button, {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var theme = _a.theme;\n  return {\n    color: theme.palette.error.main,\n    '&:hover': {\n      backgroundColor: alpha(theme.palette.error.main, 0.12),\n      // Reset on mouse devices\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      }\n    }\n  };\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAyC,OAAO;AACxE,SAASC,MAAM,QAAQ,sBAAsB;AAC7C,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,KAAK,QAAQ,sBAAsB;AAC5C,OAAOC,YAAY,MAAM,4BAA4B;AACrD,OAAOC,IAAI,MAAM,MAAM;AACvB,OAAOC,UAAU,MAAM,YAAY;AAEnC,SAIIC,8BAA8B,EAC9BC,gBAAgB,EAChBC,kBAAkB,EAClBC,YAAY,QAET,SAAS;AAEhB,SAASC,OAAO,QAAQ,WAAW;AACnC,SAASC,MAAM,QAAqB,UAAU;AAE9C,OAAO,IAAMC,uBAAuB,GAAG,UACnCC,KAA+C;EAG3C,aAAS,GAWTA,KAAK,UAXI;IACTC,KAUAD,KAAK,aAVmC;IAAxCE,YAAY,mBAAG,yBAAyB;IACxCC,KASAH,KAAK,eATuC;IAA5CI,cAAc,mBAAG,2BAA2B;IAC5CC,KAQAL,KAAK,KARa;IAAlBM,IAAI,mBAAGC,WAAW;IAClBC,KAOAR,KAAK,MAPqB;IAA1BS,KAAK,mBAAG,kBAAkB;IAC1BC,KAMAV,KAAK,aANuB;IAA5BW,YAAY,mBAAG,aAAa;IAC5BC,OAAO,GAKPZ,KAAK,QALE;IACPa,KAIAb,KAAK,SAJY;IAAjBc,QAAQ,mBAAG,MAAM;IACjBC,KAGAf,KAAK,iBAHgB;IAArBgB,gBAAgB,mBAAG,EAAE;IACrBC,eAAe,GAEfjB,KAAK,gBAFU;IACZkB,IAAI,UACPlB,KAAK,EAZH,8IAYL,CADU;EAEX,IAAMmB,SAAS,GAAGvB,YAAY,EAAE;EAChC,IAAMwB,MAAM,GAAG1B,gBAAgB,CAACM,KAAK,CAAC;EACtC,IAAMqB,QAAQ,GAAG1B,kBAAkB,CAACK,KAAK,CAAC;EAEpC,SAMFP,8BAA8B,CAAC;MAC/B2B,MAAM;MACNN,QAAQ;MACRH,YAAY;MACZC,OAAO;MACPK,eAAe;MACfI,QAAQ;KACX,CAAC;IAZEC,IAAI;IACJC,SAAS;IACTC,gBAAgB;IAChBC,iBAAiB;IACjBC,YAAY,kBAQd;EAEF,OACIzC,oBAACC,QAAQ,QACLD,oBAAC0C,YAAY;IACTf,OAAO,EAAEY,gBAAgB;IACzBf,KAAK,EAAEA,KAAK;IACZmB,SAAS,EAAErC,IAAI,CAAC,kBAAkB,EAAEqC,SAAS,CAAC;IAC9CC,GAAG,EAAC;EAAQ,GACRX,IAAI,GAEPZ,IAAI,CACM,EACfrB,oBAACY,OAAO;IACJiC,MAAM,EAAER,IAAI;IACZS,OAAO,EAAER,SAAS;IAClBS,KAAK,EAAE9B,YAAY;IACnB+B,OAAO,EAAE7B,cAAc;IACvBY,gBAAgB;MACZkB,IAAI,EAAEf,SAAS,CAAC,oBAAaE,QAAQ,oBAAiB,EAAE;QACpDc,WAAW,EAAE,CAAC;QACdC,CAAC,EAAE5C,UAAU,CAAC6C,QAAQ,CAClBlB,SAAS,CAAC,oBAAaE,QAAQ,UAAO,EAAE;UACpCc,WAAW,EAAE,CAAC;UACdC,CAAC,EAAE5C,UAAU,CAAC8C,WAAW,CAACjB,QAAQ;SACrC,CAAC,EACF,IAAI;OAEX,CAAC;MACFkB,EAAE,EAAEnB,MAAM,CAACmB;IAAE,GACVvB,gBAAgB;IAEvBwB,SAAS,EAAEd,YAAY;IACvBe,OAAO,EAAEhB;EAAiB,EAC5B,CACK;AAEnB,CAAC;AAED,IAAMlB,WAAW,GAAGtB,oBAACK,YAAY,OAAG;AAuBpCS,uBAAuB,CAAC2C,SAAS,GAAG;EAChCd,SAAS,EAAExC,SAAS,CAACuD,MAAM;EAC3BzC,YAAY,EAAEd,SAAS,CAACuD,MAAM;EAC9BvC,cAAc,EAAEhB,SAAS,CAACuD,MAAM;EAChClC,KAAK,EAAErB,SAAS,CAACuD,MAAM;EACvBhC,YAAY,EAAEvB,SAAS,CAACwD,KAAK,CAAC,CAAC,aAAa,EAAE,YAAY,EAAE,UAAU,CAAC,CAAC;EACxExB,MAAM,EAAEhC,SAAS,CAACyD,GAAG;EACrB/B,QAAQ,EAAE1B,SAAS,CAAC0D,SAAS,CAAC,CAC1B1D,SAAS,CAACuD,MAAM,EAChBvD,SAAS,CAAC2D,IAAI,EACd3D,SAAS,CAAC4D,IAAI,CACjB,CAAC;EACF3B,QAAQ,EAAEjC,SAAS,CAACuD,MAAM;EAC1BrC,IAAI,EAAElB,SAAS,CAAC6D,OAAO;EACvBjC,gBAAgB,EAAE5B,SAAS,CAAC8D;CAC/B;AAED,IAAMC,MAAM,GAAG,2BAA2B;AAE1C,IAAMxB,YAAY,GAAGxC,MAAM,CAACW,MAAM,EAAE;EAChCoC,IAAI,EAAEiB,MAAM;EACZC,iBAAiB,EAAE,UAACpD,KAAK,EAAEqD,MAAM;IAAK,aAAM,CAACC,IAAI;EAAX;CACzC,CAAC,CAAC,UAACrD,EAAS;MAAPsD,KAAK;EAAO,OAAC;IACfC,KAAK,EAAED,KAAK,CAACE,OAAO,CAACC,KAAK,CAACC,IAAI;IAC/B,SAAS,EAAE;MACPC,eAAe,EAAEvE,KAAK,CAACkE,KAAK,CAACE,OAAO,CAACC,KAAK,CAACC,IAAI,EAAE,IAAI,CAAC;MACtD;MACA,sBAAsB,EAAE;QACpBC,eAAe,EAAE;;;GAG5B;AATiB,CAShB,CAAC","names":["React","Fragment","styled","PropTypes","alpha","ActionDelete","clsx","inflection","useDeleteWithConfirmController","useRecordContext","useResourceContext","useTranslate","Confirm","Button","DeleteWithConfirmButton","props","_a","confirmTitle","_b","confirmContent","_c","icon","defaultIcon","_d","label","_e","mutationMode","onClick","_f","redirect","_g","translateOptions","mutationOptions","rest","translate","record","resource","open","isLoading","handleDialogOpen","handleDialogClose","handleDelete","StyledButton","className","key","isOpen","loading","title","content","name","smart_count","_","humanize","singularize","id","onConfirm","onClose","propTypes","string","oneOf","any","oneOfType","bool","func","element","object","PREFIX","overridesResolver","styles","root","theme","color","palette","error","main","backgroundColor"],"sources":["/Users/paigedeveau/Desktop/se-diva-docs-frontend/bwmdn-admin-portal/node_modules/ra-ui-materialui/src/button/DeleteWithConfirmButton.tsx"],"sourcesContent":["import React, { Fragment, ReactEventHandler, ReactElement } from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport { alpha } from '@mui/material/styles';\nimport ActionDelete from '@mui/icons-material/Delete';\nimport clsx from 'clsx';\nimport inflection from 'inflection';\nimport { UseMutationOptions } from 'react-query';\nimport {\n    MutationMode,\n    RaRecord,\n    DeleteParams,\n    useDeleteWithConfirmController,\n    useRecordContext,\n    useResourceContext,\n    useTranslate,\n    RedirectionSideEffect,\n} from 'ra-core';\n\nimport { Confirm } from '../layout';\nimport { Button, ButtonProps } from './Button';\n\nexport const DeleteWithConfirmButton = <RecordType extends RaRecord = any>(\n    props: DeleteWithConfirmButtonProps<RecordType>\n) => {\n    const {\n        className,\n        confirmTitle = 'ra.message.delete_title',\n        confirmContent = 'ra.message.delete_content',\n        icon = defaultIcon,\n        label = 'ra.action.delete',\n        mutationMode = 'pessimistic',\n        onClick,\n        redirect = 'list',\n        translateOptions = {},\n        mutationOptions,\n        ...rest\n    } = props;\n    const translate = useTranslate();\n    const record = useRecordContext(props);\n    const resource = useResourceContext(props);\n\n    const {\n        open,\n        isLoading,\n        handleDialogOpen,\n        handleDialogClose,\n        handleDelete,\n    } = useDeleteWithConfirmController({\n        record,\n        redirect,\n        mutationMode,\n        onClick,\n        mutationOptions,\n        resource,\n    });\n\n    return (\n        <Fragment>\n            <StyledButton\n                onClick={handleDialogOpen}\n                label={label}\n                className={clsx('ra-delete-button', className)}\n                key=\"button\"\n                {...rest}\n            >\n                {icon}\n            </StyledButton>\n            <Confirm\n                isOpen={open}\n                loading={isLoading}\n                title={confirmTitle}\n                content={confirmContent}\n                translateOptions={{\n                    name: translate(`resources.${resource}.forcedCaseName`, {\n                        smart_count: 1,\n                        _: inflection.humanize(\n                            translate(`resources.${resource}.name`, {\n                                smart_count: 1,\n                                _: inflection.singularize(resource),\n                            }),\n                            true\n                        ),\n                    }),\n                    id: record.id,\n                    ...translateOptions,\n                }}\n                onConfirm={handleDelete}\n                onClose={handleDialogClose}\n            />\n        </Fragment>\n    );\n};\n\nconst defaultIcon = <ActionDelete />;\n\nexport interface DeleteWithConfirmButtonProps<\n    RecordType extends RaRecord = any,\n    MutationOptionsError = unknown\n> extends ButtonProps {\n    confirmTitle?: string;\n    confirmContent?: React.ReactNode;\n    icon?: ReactElement;\n    mutationMode?: MutationMode;\n    onClick?: ReactEventHandler<any>;\n    // May be injected by Toolbar - sanitized in Button\n    translateOptions?: object;\n    mutationOptions?: UseMutationOptions<\n        RecordType,\n        MutationOptionsError,\n        DeleteParams<RecordType>\n    >;\n    record?: RecordType;\n    redirect?: RedirectionSideEffect;\n    resource?: string;\n}\n\nDeleteWithConfirmButton.propTypes = {\n    className: PropTypes.string,\n    confirmTitle: PropTypes.string,\n    confirmContent: PropTypes.string,\n    label: PropTypes.string,\n    mutationMode: PropTypes.oneOf(['pessimistic', 'optimistic', 'undoable']),\n    record: PropTypes.any,\n    redirect: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.bool,\n        PropTypes.func,\n    ]),\n    resource: PropTypes.string,\n    icon: PropTypes.element,\n    translateOptions: PropTypes.object,\n};\n\nconst PREFIX = 'RaDeleteWithConfirmButton';\n\nconst StyledButton = styled(Button, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    color: theme.palette.error.main,\n    '&:hover': {\n        backgroundColor: alpha(theme.palette.error.main, 0.12),\n        // Reset on mouse devices\n        '@media (hover: none)': {\n            backgroundColor: 'transparent',\n        },\n    },\n}));\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}