{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { useParams } from 'react-router-dom';\nimport { useAuthenticated } from '../../auth';\nimport { useGetOne, useRefresh } from '../../dataProvider';\nimport { useTranslate } from '../../i18n';\nimport { useRedirect } from '../../routing';\nimport { useNotify } from '../../notification';\nimport { useResourceContext, useGetResourceLabel, useGetRecordRepresentation } from '../../core';\n/**\n * Prepare data for the Show view.\n *\n * useShowController does a few things:\n * - it grabs the id from the URL and the resource name from the ResourceContext,\n * - it fetches the record via useGetOne,\n * - it prepares the page title.\n *\n * @param {Object} props The props passed to the Show component.\n *\n * @return {Object} controllerProps Fetched data and callbacks for the Show view\n *\n * @example\n *\n * import { useShowController } from 'react-admin';\n * import ShowView from './ShowView';\n *\n * const MyShow = () => {\n *     const controllerProps = useShowController();\n *     return <ShowView {...controllerProps} />;\n * };\n *\n * @example // useShowController can also take its parameters from props\n *\n * import { useShowController } from 'react-admin';\n * import ShowView from './ShowView';\n *\n * const MyShow = () => {\n *     const controllerProps = useShowController({ resource: 'posts', id: 1234 });\n *     return <ShowView {...controllerProps} />;\n * };\n */\nexport var useShowController = function (props) {\n  if (props === void 0) {\n    props = {};\n  }\n  var disableAuthentication = props.disableAuthentication,\n    propsId = props.id,\n    _a = props.queryOptions,\n    queryOptions = _a === void 0 ? {} : _a;\n  useAuthenticated({\n    enabled: !disableAuthentication\n  });\n  var resource = useResourceContext(props);\n  var getRecordRepresentation = useGetRecordRepresentation(resource);\n  var translate = useTranslate();\n  var notify = useNotify();\n  var redirect = useRedirect();\n  var refresh = useRefresh();\n  var routeId = useParams().id;\n  var id = propsId != null ? propsId : decodeURIComponent(routeId);\n  var meta = queryOptions.meta,\n    otherQueryOptions = __rest(queryOptions, [\"meta\"]);\n  var _b = useGetOne(resource, {\n      id: id,\n      meta: meta\n    }, __assign({\n      onError: function () {\n        notify('ra.notification.item_doesnt_exist', {\n          type: 'warning'\n        });\n        redirect('list', resource);\n        refresh();\n      },\n      retry: false\n    }, otherQueryOptions)),\n    record = _b.data,\n    error = _b.error,\n    isLoading = _b.isLoading,\n    isFetching = _b.isFetching,\n    refetch = _b.refetch;\n  // eslint-disable-next-line eqeqeq\n  if (record && record.id && record.id != id) {\n    throw new Error(\"useShowController: Fetched record's id attribute (\".concat(record.id, \") must match the requested 'id' (\").concat(id, \")\"));\n  }\n  var getResourceLabel = useGetResourceLabel();\n  var recordRepresentation = getRecordRepresentation(record);\n  var defaultTitle = translate('ra.page.show', {\n    name: getResourceLabel(resource, 1),\n    id: id,\n    record: record,\n    recordRepresentation: typeof recordRepresentation === 'string' ? recordRepresentation : ''\n  });\n  return {\n    defaultTitle: defaultTitle,\n    error: error,\n    isLoading: isLoading,\n    isFetching: isFetching,\n    record: record,\n    refetch: refetch,\n    resource: resource\n  };\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,SAASA,SAAS,QAAQ,kBAAkB;AAG5C,SAASC,gBAAgB,QAAQ,YAAY;AAE7C,SAASC,SAAS,EAAEC,UAAU,QAA4B,oBAAoB;AAC9E,SAASC,YAAY,QAAQ,YAAY;AACzC,SAASC,WAAW,QAAQ,eAAe;AAC3C,SAASC,SAAS,QAAQ,oBAAoB;AAC9C,SACIC,kBAAkB,EAClBC,mBAAmB,EACnBC,0BAA0B,QACvB,YAAY;AAEnB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA,OAAO,IAAMC,iBAAiB,GAAG,UAC7BC,KAA2C;EAA3C;IAAAA,UAA2C;EAAA;EAEnC,yBAAqB,GAAqCA,KAAK,sBAA1C;IAAMC,OAAO,GAAwBD,KAAK,GAA7B;IAAEE,KAAsBF,KAAK,aAAV;IAAjBG,YAAY,mBAAG,EAAE;EAC7Db,gBAAgB,CAAC;IAAEc,OAAO,EAAE,CAACC;EAAqB,CAAE,CAAC;EACrD,IAAMC,QAAQ,GAAGV,kBAAkB,CAACI,KAAK,CAAC;EAC1C,IAAMO,uBAAuB,GAAGT,0BAA0B,CAACQ,QAAQ,CAAC;EACpE,IAAME,SAAS,GAAGf,YAAY,EAAE;EAChC,IAAMgB,MAAM,GAAGd,SAAS,EAAE;EAC1B,IAAMe,QAAQ,GAAGhB,WAAW,EAAE;EAC9B,IAAMiB,OAAO,GAAGnB,UAAU,EAAE;EACpB,IAAIoB,OAAO,GAAKvB,SAAS,EAAQ,GAAtB;EACnB,IAAMwB,EAAE,GAAGZ,OAAO,IAAI,IAAI,GAAGA,OAAO,GAAGa,kBAAkB,CAACF,OAAO,CAAC;EAC1D,QAAI,GAA2BT,YAAY,KAAvC;IAAKY,iBAAiB,UAAKZ,YAAY,EAA7C,QAA8B,CAAF;EAE5B,SAA0DZ,SAAS,CAGrEe,QAAQ,EACR;MAAEO,EAAE;MAAEG,IAAI;IAAA,CAAE;MAERC,OAAO,EAAE;QACLR,MAAM,CAAC,mCAAmC,EAAE;UACxCS,IAAI,EAAE;SACT,CAAC;QACFR,QAAQ,CAAC,MAAM,EAAEJ,QAAQ,CAAC;QAC1BK,OAAO,EAAE;MACb,CAAC;MACDQ,KAAK,EAAE;IAAK,GACTJ,iBAAiB,EAE3B;IAhBaK,MAAM;IAAEC,KAAK;IAAEC,SAAS;IAAEC,UAAU;IAAEC,OAAO,aAgB1D;EAED;EACA,IAAIJ,MAAM,IAAIA,MAAM,CAACP,EAAE,IAAIO,MAAM,CAACP,EAAE,IAAIA,EAAE,EAAE;IACxC,MAAM,IAAIY,KAAK,CACX,4DAAqDL,MAAM,CAACP,EAAE,8CAAoCA,EAAE,MAAG,CAC1G;;EAGL,IAAMa,gBAAgB,GAAG7B,mBAAmB,EAAE;EAC9C,IAAM8B,oBAAoB,GAAGpB,uBAAuB,CAACa,MAAM,CAAC;EAC5D,IAAMQ,YAAY,GAAGpB,SAAS,CAAC,cAAc,EAAE;IAC3CqB,IAAI,EAAEH,gBAAgB,CAACpB,QAAQ,EAAE,CAAC,CAAC;IACnCO,EAAE;IACFO,MAAM;IACNO,oBAAoB,EAChB,OAAOA,oBAAoB,KAAK,QAAQ,GAClCA,oBAAoB,GACpB;GACb,CAAC;EAEF,OAAO;IACHC,YAAY;IACZP,KAAK;IACLC,SAAS;IACTC,UAAU;IACVH,MAAM;IACNI,OAAO;IACPlB,QAAQ;GACX;AACL,CAAC","names":["useParams","useAuthenticated","useGetOne","useRefresh","useTranslate","useRedirect","useNotify","useResourceContext","useGetResourceLabel","useGetRecordRepresentation","useShowController","props","propsId","_a","queryOptions","enabled","disableAuthentication","resource","getRecordRepresentation","translate","notify","redirect","refresh","routeId","id","decodeURIComponent","otherQueryOptions","meta","onError","type","retry","record","error","isLoading","isFetching","refetch","Error","getResourceLabel","recordRepresentation","defaultTitle","name"],"sourceRoot":"","sources":["../../../../src/controller/show/useShowController.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}