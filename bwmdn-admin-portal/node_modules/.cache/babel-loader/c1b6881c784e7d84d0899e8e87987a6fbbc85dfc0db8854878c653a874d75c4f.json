{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport * as React from 'react';\nimport { isValidElement, useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport debounce from 'lodash/debounce';\nimport get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport clsx from 'clsx';\nimport { Autocomplete, Chip, TextField, createFilterOptions } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport { FieldTitle, useChoicesContext, useInput, useSuggestions, useTimeout, useTranslate, warning, useGetRecordRepresentation } from 'ra-core';\nimport { useSupportCreateSuggestion } from './useSupportCreateSuggestion';\nimport { InputHelperText } from './InputHelperText';\nimport { sanitizeInputRestProps } from './sanitizeInputRestProps';\nvar defaultFilterOptions = createFilterOptions();\n/**\n * An Input component for an autocomplete field, using an array of objects for the options\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * By default, the options are built from:\n *  - the 'id' property as the option value,\n *  - the 'name' property as the option text\n * @example\n * const choices = [\n *    { id: 'M', name: 'Male' },\n *    { id: 'F', name: 'Female' },\n * ];\n * <AutocompleteInput source=\"gender\" choices={choices} />\n *\n * You can also customize the properties to use for the option name and value,\n * thanks to the 'optionText' and 'optionValue' attributes.\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },\n *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },\n * ];\n * <AutocompleteInput source=\"author_id\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <AutocompleteInput source=\"author_id\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that can access\n * the related choice through the `useRecordContext` hook. You can use Field components there.\n * Note that you must also specify the `matchSuggestion` and `inputText` props\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const matchSuggestion = (filterValue, choice) => choice.first_name.match(filterValue) || choice.last_name.match(filterValue)\n * const inputText = (record) => `${record.fullName} (${record.language})`;\n *\n * const FullNameField = () => {\n *     const record = useRecordContext();\n *     return <span>{record.first_name} {record.last_name}</span>;\n * }\n * <AutocompleteInput source=\"author\" choices={choices} optionText={<FullNameField />} matchSuggestion={matchSuggestion} inputText={inputText} />\n *\n * The choices are translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'M', name: 'myroot.gender.male' },\n *    { id: 'F', name: 'myroot.gender.female' },\n * ];\n *\n * However, in some cases (e.g. inside a `<ReferenceInput>`), you may not want\n * the choice to be translated. In that case, set the `translateChoice` prop to false.\n * @example\n * <AutocompleteInput source=\"gender\" choices={choices} translateChoice={false}/>\n *\n * The object passed as `options` props is passed to the MUI <TextField> component\n *\n * @example\n * <AutocompleteInput source=\"author_id\" options={{ color: 'secondary', InputLabelProps: { shrink: true } }} />\n */\nexport var AutocompleteInput = function (props) {\n  var choicesProp = props.choices,\n    className = props.className,\n    _a = props.clearOnBlur,\n    clearOnBlur = _a === void 0 ? true : _a,\n    _b = props.clearText,\n    clearText = _b === void 0 ? 'ra.action.clear_input_value' : _b,\n    _c = props.closeText,\n    closeText = _c === void 0 ? 'ra.action.close' : _c,\n    create = props.create,\n    createLabel = props.createLabel,\n    createItemLabel = props.createItemLabel,\n    createValue = props.createValue,\n    _d = props.debounce,\n    debounceDelay = _d === void 0 ? 250 : _d,\n    defaultValue = props.defaultValue,\n    emptyText = props.emptyText,\n    _e = props.emptyValue,\n    emptyValue = _e === void 0 ? '' : _e,\n    fieldOverride = props.field,\n    format = props.format,\n    helperText = props.helperText,\n    idOverride = props.id,\n    inputText = props.inputText,\n    isFetchingProp = props.isFetching,\n    isLoadingProp = props.isLoading,\n    isRequiredOverride = props.isRequired,\n    label = props.label,\n    limitChoicesToValue = props.limitChoicesToValue,\n    matchSuggestion = props.matchSuggestion,\n    margin = props.margin,\n    fieldStateOverride = props.fieldState,\n    _f = props.filterToQuery,\n    filterToQuery = _f === void 0 ? DefaultFilterToQuery : _f,\n    formStateOverride = props.formState,\n    _g = props.multiple,\n    multiple = _g === void 0 ? false : _g,\n    noOptionsText = props.noOptionsText,\n    onBlur = props.onBlur,\n    onChange = props.onChange,\n    onCreate = props.onCreate,\n    _h = props.openText,\n    openText = _h === void 0 ? 'ra.action.open' : _h,\n    optionText = props.optionText,\n    optionValue = props.optionValue,\n    parse = props.parse,\n    resourceProp = props.resource,\n    shouldRenderSuggestions = props.shouldRenderSuggestions,\n    setFilter = props.setFilter,\n    size = props.size,\n    sourceProp = props.source,\n    _j = props.suggestionLimit,\n    suggestionLimit = _j === void 0 ? Infinity : _j,\n    TextFieldProps = props.TextFieldProps,\n    translateChoice = props.translateChoice,\n    validate = props.validate,\n    variant = props.variant,\n    rest = __rest(props, [\"choices\", \"className\", \"clearOnBlur\", \"clearText\", \"closeText\", \"create\", \"createLabel\", \"createItemLabel\", \"createValue\", \"debounce\", \"defaultValue\", \"emptyText\", \"emptyValue\", \"field\", \"format\", \"helperText\", \"id\", \"inputText\", \"isFetching\", \"isLoading\", \"isRequired\", \"label\", \"limitChoicesToValue\", \"matchSuggestion\", \"margin\", \"fieldState\", \"filterToQuery\", \"formState\", \"multiple\", \"noOptionsText\", \"onBlur\", \"onChange\", \"onCreate\", \"openText\", \"optionText\", \"optionValue\", \"parse\", \"resource\", \"shouldRenderSuggestions\", \"setFilter\", \"size\", \"source\", \"suggestionLimit\", \"TextFieldProps\", \"translateChoice\", \"validate\", \"variant\"]);\n  var _k = useChoicesContext({\n      choices: choicesProp,\n      isFetching: isFetchingProp,\n      isLoading: isLoadingProp,\n      resource: resourceProp,\n      source: sourceProp\n    }),\n    allChoices = _k.allChoices,\n    isLoading = _k.isLoading,\n    fetchError = _k.error,\n    resource = _k.resource,\n    source = _k.source,\n    setFilters = _k.setFilters,\n    isFromReference = _k.isFromReference;\n  var translate = useTranslate();\n  var _l = useInput(__assign({\n      defaultValue: defaultValue,\n      id: idOverride,\n      field: fieldOverride,\n      fieldState: fieldStateOverride,\n      formState: formStateOverride,\n      isRequired: isRequiredOverride,\n      onBlur: onBlur,\n      onChange: onChange,\n      parse: parse,\n      format: format,\n      resource: resource,\n      source: source,\n      validate: validate\n    }, rest)),\n    id = _l.id,\n    field = _l.field,\n    isRequired = _l.isRequired,\n    _m = _l.fieldState,\n    error = _m.error,\n    invalid = _m.invalid,\n    isTouched = _m.isTouched,\n    isSubmitted = _l.formState.isSubmitted;\n  var finalChoices = useMemo(function () {\n    var _a;\n    // eslint-disable-next-line eqeqeq\n    return emptyText == undefined || isRequired || multiple ? allChoices : [(_a = {}, _a[optionValue || 'id'] = emptyValue, _a[typeof optionText === 'string' ? optionText : 'name'] = translate(emptyText, {\n      _: emptyText\n    }), _a)].concat(allChoices);\n  }, [allChoices, emptyValue, emptyText, isRequired, multiple, optionText, optionValue, translate]);\n  var selectedChoice = useSelectedChoice(field.value, {\n    choices: finalChoices,\n    // @ts-ignore\n    multiple: multiple,\n    optionValue: optionValue\n  });\n  useEffect(function () {\n    // eslint-disable-next-line eqeqeq\n    if (emptyValue == null) {\n      throw new Error(\"emptyValue being set to null or undefined is not supported. Use parse to turn the empty string into null.\");\n    }\n  }, [emptyValue]);\n  useEffect(function () {\n    // eslint-disable-next-line eqeqeq\n    if (isValidElement(optionText) && emptyText != undefined) {\n      throw new Error(\"optionText of type React element is not supported when setting emptyText\");\n    }\n    // eslint-disable-next-line eqeqeq\n    if (isValidElement(optionText) && inputText == undefined) {\n      throw new Error(\"\\nIf you provided a React element for the optionText prop, you must also provide the inputText prop (used for the text input)\");\n    }\n    // eslint-disable-next-line eqeqeq\n    if (isValidElement(optionText) && matchSuggestion == undefined) {\n      throw new Error(\"\\nIf you provided a React element for the optionText prop, you must also provide the matchSuggestion prop (used to match the user input with a choice)\");\n    }\n  }, [optionText, inputText, matchSuggestion, emptyText]);\n  useEffect(function () {\n    warning( /* eslint-disable eqeqeq */\n    shouldRenderSuggestions != undefined && noOptionsText == undefined, \"When providing a shouldRenderSuggestions function, we recommend you also provide the noOptionsText prop and set it to a text explaining users why no options are displayed. It supports translation keys.\");\n    /* eslint-enable eqeqeq */\n  }, [shouldRenderSuggestions, noOptionsText]);\n  var getRecordRepresentation = useGetRecordRepresentation(resource);\n  var _o = useSuggestions({\n      choices: finalChoices,\n      limitChoicesToValue: limitChoicesToValue,\n      matchSuggestion: matchSuggestion,\n      optionText: optionText !== null && optionText !== void 0 ? optionText : isFromReference ? getRecordRepresentation : undefined,\n      optionValue: optionValue,\n      selectedItem: selectedChoice,\n      suggestionLimit: suggestionLimit,\n      translateChoice: translateChoice\n    }),\n    getChoiceText = _o.getChoiceText,\n    getChoiceValue = _o.getChoiceValue,\n    getSuggestions = _o.getSuggestions;\n  var _p = useState(''),\n    filterValue = _p[0],\n    setFilterValue = _p[1];\n  var handleChange = function (newValue) {\n    var _a, _b;\n    if (multiple) {\n      if (Array.isArray(newValue)) {\n        field.onChange(newValue.map(getChoiceValue));\n      } else {\n        field.onChange(__spreadArray(__spreadArray([], (_a = field.value) !== null && _a !== void 0 ? _a : [], true), [getChoiceValue(newValue)], false));\n      }\n    } else {\n      field.onChange((_b = getChoiceValue(newValue)) !== null && _b !== void 0 ? _b : emptyValue);\n    }\n  };\n  // eslint-disable-next-line\n  var debouncedSetFilter = useCallback(debounce(function (filter) {\n    if (setFilter) {\n      return setFilter(filter);\n    }\n    if (choicesProp) {\n      return;\n    }\n    setFilters(filterToQuery(filter), undefined, true);\n  }, debounceDelay), [debounceDelay, setFilters, setFilter]);\n  // We must reset the filter every time the value changes to ensure we\n  // display at least some choices even if the input has a value.\n  // Otherwise, it would only display the currently selected one and the user\n  // would have to first clear the input before seeing any other choices\n  var currentValue = useRef(field.value);\n  useEffect(function () {\n    if (!isEqual(currentValue.current, field.value)) {\n      currentValue.current = field.value;\n      debouncedSetFilter('');\n    }\n  }, [field.value]); // eslint-disable-line\n  var _q = useSupportCreateSuggestion({\n      create: create,\n      createLabel: createLabel,\n      createItemLabel: createItemLabel,\n      createValue: createValue,\n      handleChange: handleChange,\n      filter: filterValue,\n      onCreate: onCreate,\n      optionText: optionText\n    }),\n    getCreateItem = _q.getCreateItem,\n    handleChangeWithCreateSupport = _q.handleChange,\n    createElement = _q.createElement,\n    createId = _q.createId;\n  var getOptionLabel = useCallback(function (option, isListItem) {\n    if (isListItem === void 0) {\n      isListItem = false;\n    }\n    // eslint-disable-next-line eqeqeq\n    if (option == undefined) {\n      return '';\n    }\n    // Value selected with enter, right from the input\n    if (typeof option === 'string') {\n      return option;\n    }\n    if ((option === null || option === void 0 ? void 0 : option.id) === createId) {\n      return get(option, typeof optionText === 'string' ? optionText : 'name');\n    }\n    if (!isListItem && option[optionValue || 'id'] === emptyValue) {\n      return get(option, typeof optionText === 'string' ? optionText : 'name');\n    }\n    if (!isListItem && inputText !== undefined) {\n      return inputText(option);\n    }\n    return getChoiceText(option);\n  }, [getChoiceText, inputText, createId, optionText, optionValue, emptyValue]);\n  var finalOnBlur = useCallback(function () {\n    if (clearOnBlur && !multiple) {\n      var optionLabel = getOptionLabel(selectedChoice);\n      if (!isEqual(optionLabel, filterValue)) {\n        setFilterValue(optionLabel);\n        debouncedSetFilter('');\n      }\n    }\n    field.onBlur();\n  }, [clearOnBlur, field, getOptionLabel, selectedChoice, filterValue, debouncedSetFilter, multiple]);\n  useEffect(function () {\n    if (!multiple) {\n      var optionLabel = getOptionLabel(selectedChoice);\n      if (typeof optionLabel === 'string') {\n        setFilterValue(optionLabel);\n      } else {\n        throw new Error('When optionText returns a React element, you must also provide the inputText prop');\n      }\n    }\n  }, [getOptionLabel, multiple, selectedChoice]);\n  var handleInputChange = function (event, newInputValue, reason) {\n    if ((event === null || event === void 0 ? void 0 : event.type) === 'change' || !doesQueryMatchSelection(newInputValue)) {\n      setFilterValue(newInputValue);\n      debouncedSetFilter(newInputValue);\n    }\n  };\n  var doesQueryMatchSelection = useCallback(function (filter) {\n    var selectedItemTexts;\n    if (multiple) {\n      selectedItemTexts = selectedChoice.map(function (item) {\n        return getOptionLabel(item);\n      });\n    } else {\n      selectedItemTexts = [getOptionLabel(selectedChoice)];\n    }\n    return selectedItemTexts.includes(filter);\n  }, [getOptionLabel, multiple, selectedChoice]);\n  var doesQueryMatchSuggestion = useCallback(function (filter) {\n    var hasOption = !!finalChoices ? finalChoices.some(function (choice) {\n      return getOptionLabel(choice) === filter;\n    }) : false;\n    return doesQueryMatchSelection(filter) || hasOption;\n  }, [finalChoices, getOptionLabel, doesQueryMatchSelection]);\n  var filterOptions = function (options, params) {\n    var filteredOptions = isFromReference ||\n    // When used inside a reference, AutocompleteInput shouldn't do the filtering as it's done by the reference input\n    matchSuggestion ||\n    // When using element as optionText (and matchSuggestion), options are filtered by getSuggestions, so they shouldn't be filtered here\n    limitChoicesToValue // When limiting choices to values (why? it's legacy!), options are also filtered by getSuggestions, so they shouldn't be filtered here\n    ? options : defaultFilterOptions(options, params); // Otherwise, we let MUI's Autocomplete do the filtering\n    // add create option if necessary\n    var inputValue = params.inputValue;\n    if ((onCreate || create) && inputValue !== '' && !doesQueryMatchSuggestion(filterValue)) {\n      filteredOptions = filteredOptions.concat(getCreateItem(inputValue));\n    }\n    return filteredOptions;\n  };\n  var handleAutocompleteChange = function (event, newValue, reason) {\n    handleChangeWithCreateSupport(newValue != null ? newValue : emptyValue);\n  };\n  var oneSecondHasPassed = useTimeout(1000, filterValue);\n  var suggestions = useMemo(function () {\n    if (matchSuggestion || limitChoicesToValue) {\n      return getSuggestions(filterValue);\n    }\n    return (finalChoices === null || finalChoices === void 0 ? void 0 : finalChoices.slice(0, suggestionLimit)) || [];\n  }, [finalChoices, filterValue, getSuggestions, limitChoicesToValue, matchSuggestion, suggestionLimit]);\n  var isOptionEqualToValue = function (option, value) {\n    return String(getChoiceValue(option)) === String(getChoiceValue(value));\n  };\n  return React.createElement(React.Fragment, null, React.createElement(StyledAutocomplete, __assign({\n    blurOnSelect: true,\n    className: clsx('ra-input', \"ra-input-\".concat(source), className),\n    clearText: translate(clearText, {\n      _: clearText\n    }),\n    closeText: translate(closeText, {\n      _: closeText\n    }),\n    openOnFocus: true,\n    openText: translate(openText, {\n      _: openText\n    }),\n    id: id,\n    isOptionEqualToValue: isOptionEqualToValue,\n    filterSelectedOptions: true,\n    renderInput: function (params) {\n      return React.createElement(TextField, __assign({\n        name: field.name,\n        label: React.createElement(FieldTitle, {\n          label: label,\n          source: source,\n          resource: resourceProp,\n          isRequired: isRequired\n        }),\n        error: !!fetchError || (isTouched || isSubmitted) && invalid,\n        helperText: React.createElement(InputHelperText, {\n          touched: isTouched || isSubmitted || fetchError,\n          error: (error === null || error === void 0 ? void 0 : error.message) || (fetchError === null || fetchError === void 0 ? void 0 : fetchError.message),\n          helperText: helperText\n        }),\n        margin: margin,\n        variant: variant,\n        className: AutocompleteInputClasses.textField\n      }, TextFieldProps, params, {\n        size: size\n      }));\n    },\n    multiple: multiple,\n    renderTags: function (value, getTagProps) {\n      return value.map(function (option, index) {\n        return React.createElement(Chip, __assign({\n          label: isValidElement(optionText) ? inputText(option) : getChoiceText(option),\n          sx: {\n            '.MuiSvgIcon-root': {\n              // FIXME: Workaround to allow choices deletion\n              // Maybe related to storybook and mui using different versions of emotion\n              zIndex: 100\n            }\n          },\n          size: \"small\"\n        }, getTagProps({\n          index: index\n        })));\n      });\n    },\n    noOptionsText: typeof noOptionsText === 'string' ? translate(noOptionsText, {\n      _: noOptionsText\n    }) : noOptionsText,\n    selectOnFocus: true,\n    clearOnBlur: clearOnBlur\n  }, sanitizeInputRestProps(rest), {\n    freeSolo: !!create || !!onCreate,\n    handleHomeEndKeys: !!create || !!onCreate,\n    filterOptions: filterOptions,\n    options: shouldRenderSuggestions == undefined ||\n    // eslint-disable-line eqeqeq\n    shouldRenderSuggestions(filterValue) ? suggestions : [],\n    getOptionLabel: getOptionLabel,\n    inputValue: filterValue,\n    loading: isLoading && (!finalChoices || finalChoices.length === 0) && oneSecondHasPassed,\n    value: selectedChoice,\n    onChange: handleAutocompleteChange,\n    onBlur: finalOnBlur,\n    onInputChange: handleInputChange,\n    renderOption: function (props, record) {\n      props.key = getChoiceValue(record);\n      var optionLabel = getOptionLabel(record, true);\n      return React.createElement(\"li\", __assign({}, props), optionLabel === '' ? ' ' : optionLabel);\n    }\n  })), createElement);\n};\nvar PREFIX = 'RaAutocompleteInput';\nexport var AutocompleteInputClasses = {\n  textField: \"\".concat(PREFIX, \"-textField\")\n};\nvar StyledAutocomplete = styled(Autocomplete, {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var _b;\n  var theme = _a.theme;\n  return _b = {}, _b[\"& .\".concat(AutocompleteInputClasses.textField)] = {\n    minWidth: theme.spacing(20)\n  }, _b;\n});\n/**\n * Returns the selected choice (or choices if multiple) by matching the input value with the choices.\n */\nvar useSelectedChoice = function (value, _a) {\n  var choices = _a.choices,\n    multiple = _a.multiple,\n    optionValue = _a.optionValue;\n  var selectedChoiceRef = useRef(getSelectedItems(choices, value, optionValue, multiple));\n  var _b = useState(function () {\n      return getSelectedItems(choices, value, optionValue, multiple);\n    }),\n    selectedChoice = _b[0],\n    setSelectedChoice = _b[1];\n  // As the selected choices are objects, we want to ensure we pass the same\n  // reference to the Autocomplete as it would reset its filter value otherwise.\n  useEffect(function () {\n    var newSelectedItems = getSelectedItems(choices, value, optionValue, multiple);\n    if (!isEqual(selectedChoiceRef.current, newSelectedItems)) {\n      selectedChoiceRef.current = newSelectedItems;\n      setSelectedChoice(newSelectedItems);\n    }\n  }, [choices, value, multiple, optionValue]);\n  return selectedChoice || null;\n};\nvar getSelectedItems = function (choices, value, optionValue, multiple) {\n  if (choices === void 0) {\n    choices = [];\n  }\n  if (optionValue === void 0) {\n    optionValue = 'id';\n  }\n  if (multiple) {\n    return (Array.isArray(value !== null && value !== void 0 ? value : []) ? value : [value]).map(function (item) {\n      return choices.find(function (choice) {\n        return String(item) === String(get(choice, optionValue));\n      });\n    }).filter(function (item) {\n      return !!item;\n    });\n  }\n  return choices.find(function (choice) {\n    return String(get(choice, optionValue)) === String(value);\n  }) || '';\n};\nvar DefaultFilterToQuery = function (searchText) {\n  return {\n    q: searchText\n  };\n};","map":{"version":3,"mappings":"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","names":["React","isValidElement","useCallback","useEffect","useMemo","useRef","useState","debounce","get","isEqual","clsx","Autocomplete","Chip","TextField","createFilterOptions","styled","FieldTitle","useChoicesContext","useInput","useSuggestions","useTimeout","useTranslate","warning","useGetRecordRepresentation","useSupportCreateSuggestion","InputHelperText","sanitizeInputRestProps","defaultFilterOptions","AutocompleteInput","props","choicesProp","className","_a","clearOnBlur","_b","clearText","_c","closeText","create","createLabel","createItemLabel","createValue","_d","debounceDelay","defaultValue","emptyText","_e","emptyValue","fieldOverride","format","helperText","idOverride","inputText","isFetchingProp","isLoadingProp","isRequiredOverride","label","limitChoicesToValue","matchSuggestion","margin","fieldStateOverride","_f","filterToQuery","DefaultFilterToQuery","formStateOverride","_g","multiple","noOptionsText","onBlur","onChange","onCreate","_h","openText","optionText","optionValue","parse","resourceProp","shouldRenderSuggestions","setFilter","size","sourceProp","_j","suggestionLimit","Infinity","TextFieldProps","translateChoice","validate","variant","rest","choices","isFetching","isLoading","resource","source","allChoices","fetchError","setFilters","isFromReference","translate","id","field","fieldState","formState","isRequired","_m","error","invalid","isTouched","isSubmitted","finalChoices","undefined","_","concat","selectedChoice","useSelectedChoice","value","Error","getRecordRepresentation","selectedItem","getChoiceText","getChoiceValue","getSuggestions","filterValue","setFilterValue","handleChange","newValue","Array","isArray","map","debouncedSetFilter","filter","currentValue","current","getCreateItem","handleChangeWithCreateSupport","createElement","createId","getOptionLabel","option","isListItem","finalOnBlur","optionLabel","handleInputChange","event","newInputValue","reason","type","doesQueryMatchSelection","selectedItemTexts","item","includes","doesQueryMatchSuggestion","hasOption","some","choice","filterOptions","options","params","filteredOptions","inputValue","handleAutocompleteChange","oneSecondHasPassed","suggestions","slice","isOptionEqualToValue","String","StyledAutocomplete","blurOnSelect","openOnFocus","filterSelectedOptions","renderInput","name","touched","message","AutocompleteInputClasses","textField","renderTags","getTagProps","index","sx","zIndex","selectOnFocus","freeSolo","handleHomeEndKeys","loading","length","onInputChange","renderOption","record","key","PREFIX","overridesResolver","styles","root","theme","minWidth","spacing","selectedChoiceRef","getSelectedItems","setSelectedChoice","newSelectedItems","find","q","searchText"],"sources":["/Users/paigedeveau/Desktop/se-diva-docs-frontend/bwmdn-admin-portal/node_modules/ra-ui-materialui/src/input/AutocompleteInput.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n    isValidElement,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n    useState,\n    ReactNode,\n} from 'react';\nimport debounce from 'lodash/debounce';\nimport get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport clsx from 'clsx';\nimport {\n    Autocomplete,\n    AutocompleteProps,\n    Chip,\n    TextField,\n    TextFieldProps,\n    createFilterOptions,\n} from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport {\n    ChoicesProps,\n    FieldTitle,\n    RaRecord,\n    useChoicesContext,\n    useInput,\n    useSuggestions,\n    UseSuggestionsOptions,\n    useTimeout,\n    useTranslate,\n    warning,\n    useGetRecordRepresentation,\n} from 'ra-core';\nimport {\n    SupportCreateSuggestionOptions,\n    useSupportCreateSuggestion,\n} from './useSupportCreateSuggestion';\nimport { CommonInputProps } from './CommonInputProps';\nimport { InputHelperText } from './InputHelperText';\nimport { sanitizeInputRestProps } from './sanitizeInputRestProps';\n\nconst defaultFilterOptions = createFilterOptions();\n\n/**\n * An Input component for an autocomplete field, using an array of objects for the options\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * By default, the options are built from:\n *  - the 'id' property as the option value,\n *  - the 'name' property as the option text\n * @example\n * const choices = [\n *    { id: 'M', name: 'Male' },\n *    { id: 'F', name: 'Female' },\n * ];\n * <AutocompleteInput source=\"gender\" choices={choices} />\n *\n * You can also customize the properties to use for the option name and value,\n * thanks to the 'optionText' and 'optionValue' attributes.\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },\n *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },\n * ];\n * <AutocompleteInput source=\"author_id\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <AutocompleteInput source=\"author_id\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that can access\n * the related choice through the `useRecordContext` hook. You can use Field components there.\n * Note that you must also specify the `matchSuggestion` and `inputText` props\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const matchSuggestion = (filterValue, choice) => choice.first_name.match(filterValue) || choice.last_name.match(filterValue)\n * const inputText = (record) => `${record.fullName} (${record.language})`;\n *\n * const FullNameField = () => {\n *     const record = useRecordContext();\n *     return <span>{record.first_name} {record.last_name}</span>;\n * }\n * <AutocompleteInput source=\"author\" choices={choices} optionText={<FullNameField />} matchSuggestion={matchSuggestion} inputText={inputText} />\n *\n * The choices are translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'M', name: 'myroot.gender.male' },\n *    { id: 'F', name: 'myroot.gender.female' },\n * ];\n *\n * However, in some cases (e.g. inside a `<ReferenceInput>`), you may not want\n * the choice to be translated. In that case, set the `translateChoice` prop to false.\n * @example\n * <AutocompleteInput source=\"gender\" choices={choices} translateChoice={false}/>\n *\n * The object passed as `options` props is passed to the MUI <TextField> component\n *\n * @example\n * <AutocompleteInput source=\"author_id\" options={{ color: 'secondary', InputLabelProps: { shrink: true } }} />\n */\nexport const AutocompleteInput = <\n    OptionType extends RaRecord = RaRecord,\n    Multiple extends boolean | undefined = false,\n    DisableClearable extends boolean | undefined = false,\n    SupportCreate extends boolean | undefined = false\n>(\n    props: AutocompleteInputProps<\n        OptionType,\n        Multiple,\n        DisableClearable,\n        SupportCreate\n    >\n) => {\n    const {\n        choices: choicesProp,\n        className,\n        clearOnBlur = true,\n        clearText = 'ra.action.clear_input_value',\n        closeText = 'ra.action.close',\n        create,\n        createLabel,\n        createItemLabel,\n        createValue,\n        debounce: debounceDelay = 250,\n        defaultValue,\n        emptyText,\n        emptyValue = '',\n        field: fieldOverride,\n        format,\n        helperText,\n        id: idOverride,\n        inputText,\n        isFetching: isFetchingProp,\n        isLoading: isLoadingProp,\n        isRequired: isRequiredOverride,\n        label,\n        limitChoicesToValue,\n        matchSuggestion,\n        margin,\n        fieldState: fieldStateOverride,\n        filterToQuery = DefaultFilterToQuery,\n        formState: formStateOverride,\n        multiple = false,\n        noOptionsText,\n        onBlur,\n        onChange,\n        onCreate,\n        openText = 'ra.action.open',\n        optionText,\n        optionValue,\n        parse,\n        resource: resourceProp,\n        shouldRenderSuggestions,\n        setFilter,\n        size,\n        source: sourceProp,\n        suggestionLimit = Infinity,\n        TextFieldProps,\n        translateChoice,\n        validate,\n        variant,\n        ...rest\n    } = props;\n\n    const {\n        allChoices,\n        isLoading,\n        error: fetchError,\n        resource,\n        source,\n        setFilters,\n        isFromReference,\n    } = useChoicesContext({\n        choices: choicesProp,\n        isFetching: isFetchingProp,\n        isLoading: isLoadingProp,\n        resource: resourceProp,\n        source: sourceProp,\n    });\n\n    const translate = useTranslate();\n\n    const {\n        id,\n        field,\n        isRequired,\n        fieldState: { error, invalid, isTouched },\n        formState: { isSubmitted },\n    } = useInput({\n        defaultValue,\n        id: idOverride,\n        field: fieldOverride,\n        fieldState: fieldStateOverride,\n        formState: formStateOverride,\n        isRequired: isRequiredOverride,\n        onBlur,\n        onChange,\n        parse,\n        format,\n        resource,\n        source,\n        validate,\n        ...rest,\n    });\n\n    const finalChoices = useMemo(\n        () =>\n            // eslint-disable-next-line eqeqeq\n            emptyText == undefined || isRequired || multiple\n                ? allChoices\n                : [\n                      {\n                          [optionValue || 'id']: emptyValue,\n                          [typeof optionText === 'string'\n                              ? optionText\n                              : 'name']: translate(emptyText, {\n                              _: emptyText,\n                          }),\n                      },\n                  ].concat(allChoices),\n        [\n            allChoices,\n            emptyValue,\n            emptyText,\n            isRequired,\n            multiple,\n            optionText,\n            optionValue,\n            translate,\n        ]\n    );\n\n    const selectedChoice = useSelectedChoice<\n        OptionType,\n        Multiple,\n        DisableClearable,\n        SupportCreate\n    >(field.value, {\n        choices: finalChoices,\n        // @ts-ignore\n        multiple,\n        optionValue,\n    });\n\n    useEffect(() => {\n        // eslint-disable-next-line eqeqeq\n        if (emptyValue == null) {\n            throw new Error(\n                `emptyValue being set to null or undefined is not supported. Use parse to turn the empty string into null.`\n            );\n        }\n    }, [emptyValue]);\n\n    useEffect(() => {\n        // eslint-disable-next-line eqeqeq\n        if (isValidElement(optionText) && emptyText != undefined) {\n            throw new Error(\n                `optionText of type React element is not supported when setting emptyText`\n            );\n        }\n        // eslint-disable-next-line eqeqeq\n        if (isValidElement(optionText) && inputText == undefined) {\n            throw new Error(`\nIf you provided a React element for the optionText prop, you must also provide the inputText prop (used for the text input)`);\n        }\n        // eslint-disable-next-line eqeqeq\n        if (isValidElement(optionText) && matchSuggestion == undefined) {\n            throw new Error(`\nIf you provided a React element for the optionText prop, you must also provide the matchSuggestion prop (used to match the user input with a choice)`);\n        }\n    }, [optionText, inputText, matchSuggestion, emptyText]);\n\n    useEffect(() => {\n        warning(\n            /* eslint-disable eqeqeq */\n            shouldRenderSuggestions != undefined && noOptionsText == undefined,\n            `When providing a shouldRenderSuggestions function, we recommend you also provide the noOptionsText prop and set it to a text explaining users why no options are displayed. It supports translation keys.`\n        );\n        /* eslint-enable eqeqeq */\n    }, [shouldRenderSuggestions, noOptionsText]);\n\n    const getRecordRepresentation = useGetRecordRepresentation(resource);\n\n    const { getChoiceText, getChoiceValue, getSuggestions } = useSuggestions({\n        choices: finalChoices,\n        limitChoicesToValue,\n        matchSuggestion,\n        optionText:\n            optionText ??\n            (isFromReference ? getRecordRepresentation : undefined),\n        optionValue,\n        selectedItem: selectedChoice,\n        suggestionLimit,\n        translateChoice,\n    });\n\n    const [filterValue, setFilterValue] = useState('');\n\n    const handleChange = (newValue: any) => {\n        if (multiple) {\n            if (Array.isArray(newValue)) {\n                field.onChange(newValue.map(getChoiceValue));\n            } else {\n                field.onChange([\n                    ...(field.value ?? []),\n                    getChoiceValue(newValue),\n                ]);\n            }\n        } else {\n            field.onChange(getChoiceValue(newValue) ?? emptyValue);\n        }\n    };\n\n    // eslint-disable-next-line\n    const debouncedSetFilter = useCallback(\n        debounce(filter => {\n            if (setFilter) {\n                return setFilter(filter);\n            }\n\n            if (choicesProp) {\n                return;\n            }\n\n            setFilters(filterToQuery(filter), undefined, true);\n        }, debounceDelay),\n        [debounceDelay, setFilters, setFilter]\n    );\n\n    // We must reset the filter every time the value changes to ensure we\n    // display at least some choices even if the input has a value.\n    // Otherwise, it would only display the currently selected one and the user\n    // would have to first clear the input before seeing any other choices\n    const currentValue = useRef(field.value);\n    useEffect(() => {\n        if (!isEqual(currentValue.current, field.value)) {\n            currentValue.current = field.value;\n            debouncedSetFilter('');\n        }\n    }, [field.value]); // eslint-disable-line\n\n    const {\n        getCreateItem,\n        handleChange: handleChangeWithCreateSupport,\n        createElement,\n        createId,\n    } = useSupportCreateSuggestion({\n        create,\n        createLabel,\n        createItemLabel,\n        createValue,\n        handleChange,\n        filter: filterValue,\n        onCreate,\n        optionText,\n    });\n\n    const getOptionLabel = useCallback(\n        (option: any, isListItem: boolean = false) => {\n            // eslint-disable-next-line eqeqeq\n            if (option == undefined) {\n                return '';\n            }\n\n            // Value selected with enter, right from the input\n            if (typeof option === 'string') {\n                return option;\n            }\n\n            if (option?.id === createId) {\n                return get(\n                    option,\n                    typeof optionText === 'string' ? optionText : 'name'\n                );\n            }\n\n            if (!isListItem && option[optionValue || 'id'] === emptyValue) {\n                return get(\n                    option,\n                    typeof optionText === 'string' ? optionText : 'name'\n                );\n            }\n\n            if (!isListItem && inputText !== undefined) {\n                return inputText(option);\n            }\n\n            return getChoiceText(option);\n        },\n        [\n            getChoiceText,\n            inputText,\n            createId,\n            optionText,\n            optionValue,\n            emptyValue,\n        ]\n    );\n\n    const finalOnBlur = useCallback((): void => {\n        if (clearOnBlur && !multiple) {\n            const optionLabel = getOptionLabel(selectedChoice);\n            if (!isEqual(optionLabel, filterValue)) {\n                setFilterValue(optionLabel);\n                debouncedSetFilter('');\n            }\n        }\n        field.onBlur();\n    }, [\n        clearOnBlur,\n        field,\n        getOptionLabel,\n        selectedChoice,\n        filterValue,\n        debouncedSetFilter,\n        multiple,\n    ]);\n\n    useEffect(() => {\n        if (!multiple) {\n            const optionLabel = getOptionLabel(selectedChoice);\n            if (typeof optionLabel === 'string') {\n                setFilterValue(optionLabel);\n            } else {\n                throw new Error(\n                    'When optionText returns a React element, you must also provide the inputText prop'\n                );\n            }\n        }\n    }, [getOptionLabel, multiple, selectedChoice]);\n\n    const handleInputChange = (\n        event: any,\n        newInputValue: string,\n        reason: string\n    ) => {\n        if (\n            event?.type === 'change' ||\n            !doesQueryMatchSelection(newInputValue)\n        ) {\n            setFilterValue(newInputValue);\n            debouncedSetFilter(newInputValue);\n        }\n    };\n\n    const doesQueryMatchSelection = useCallback(\n        (filter: string) => {\n            let selectedItemTexts;\n\n            if (multiple) {\n                selectedItemTexts = selectedChoice.map(item =>\n                    getOptionLabel(item)\n                );\n            } else {\n                selectedItemTexts = [getOptionLabel(selectedChoice)];\n            }\n\n            return selectedItemTexts.includes(filter);\n        },\n        [getOptionLabel, multiple, selectedChoice]\n    );\n    const doesQueryMatchSuggestion = useCallback(\n        filter => {\n            const hasOption = !!finalChoices\n                ? finalChoices.some(choice => getOptionLabel(choice) === filter)\n                : false;\n\n            return doesQueryMatchSelection(filter) || hasOption;\n        },\n        [finalChoices, getOptionLabel, doesQueryMatchSelection]\n    );\n\n    const filterOptions = (options, params) => {\n        let filteredOptions =\n            isFromReference || // When used inside a reference, AutocompleteInput shouldn't do the filtering as it's done by the reference input\n            matchSuggestion || // When using element as optionText (and matchSuggestion), options are filtered by getSuggestions, so they shouldn't be filtered here\n            limitChoicesToValue // When limiting choices to values (why? it's legacy!), options are also filtered by getSuggestions, so they shouldn't be filtered here\n                ? options\n                : defaultFilterOptions(options, params); // Otherwise, we let MUI's Autocomplete do the filtering\n\n        // add create option if necessary\n        const { inputValue } = params;\n        if (\n            (onCreate || create) &&\n            inputValue !== '' &&\n            !doesQueryMatchSuggestion(filterValue)\n        ) {\n            filteredOptions = filteredOptions.concat(getCreateItem(inputValue));\n        }\n\n        return filteredOptions;\n    };\n\n    const handleAutocompleteChange = (\n        event: any,\n        newValue: any,\n        reason: string\n    ) => {\n        handleChangeWithCreateSupport(newValue != null ? newValue : emptyValue);\n    };\n\n    const oneSecondHasPassed = useTimeout(1000, filterValue);\n\n    const suggestions = useMemo(() => {\n        if (matchSuggestion || limitChoicesToValue) {\n            return getSuggestions(filterValue);\n        }\n        return finalChoices?.slice(0, suggestionLimit) || [];\n    }, [\n        finalChoices,\n        filterValue,\n        getSuggestions,\n        limitChoicesToValue,\n        matchSuggestion,\n        suggestionLimit,\n    ]);\n\n    const isOptionEqualToValue = (option, value) => {\n        return String(getChoiceValue(option)) === String(getChoiceValue(value));\n    };\n\n    return (\n        <>\n            <StyledAutocomplete\n                blurOnSelect\n                className={clsx('ra-input', `ra-input-${source}`, className)}\n                clearText={translate(clearText, { _: clearText })}\n                closeText={translate(closeText, { _: closeText })}\n                openOnFocus\n                openText={translate(openText, { _: openText })}\n                id={id}\n                isOptionEqualToValue={isOptionEqualToValue}\n                filterSelectedOptions\n                renderInput={params => (\n                    <TextField\n                        name={field.name}\n                        label={\n                            <FieldTitle\n                                label={label}\n                                source={source}\n                                resource={resourceProp}\n                                isRequired={isRequired}\n                            />\n                        }\n                        error={\n                            !!fetchError ||\n                            ((isTouched || isSubmitted) && invalid)\n                        }\n                        helperText={\n                            <InputHelperText\n                                touched={isTouched || isSubmitted || fetchError}\n                                error={error?.message || fetchError?.message}\n                                helperText={helperText}\n                            />\n                        }\n                        margin={margin}\n                        variant={variant}\n                        className={AutocompleteInputClasses.textField}\n                        {...TextFieldProps}\n                        {...params}\n                        size={size}\n                    />\n                )}\n                multiple={multiple}\n                renderTags={(value, getTagProps) =>\n                    value.map((option, index) => (\n                        <Chip\n                            label={\n                                isValidElement(optionText)\n                                    ? inputText(option)\n                                    : getChoiceText(option)\n                            }\n                            sx={{\n                                '.MuiSvgIcon-root': {\n                                    // FIXME: Workaround to allow choices deletion\n                                    // Maybe related to storybook and mui using different versions of emotion\n                                    zIndex: 100,\n                                },\n                            }}\n                            size=\"small\"\n                            {...getTagProps({ index })}\n                        />\n                    ))\n                }\n                noOptionsText={\n                    typeof noOptionsText === 'string'\n                        ? translate(noOptionsText, { _: noOptionsText })\n                        : noOptionsText\n                }\n                selectOnFocus\n                clearOnBlur={clearOnBlur}\n                {...sanitizeInputRestProps(rest)}\n                freeSolo={!!create || !!onCreate}\n                handleHomeEndKeys={!!create || !!onCreate}\n                filterOptions={filterOptions}\n                options={\n                    shouldRenderSuggestions == undefined || // eslint-disable-line eqeqeq\n                    shouldRenderSuggestions(filterValue)\n                        ? suggestions\n                        : []\n                }\n                getOptionLabel={getOptionLabel}\n                inputValue={filterValue}\n                loading={\n                    isLoading &&\n                    (!finalChoices || finalChoices.length === 0) &&\n                    oneSecondHasPassed\n                }\n                value={selectedChoice}\n                onChange={handleAutocompleteChange}\n                onBlur={finalOnBlur}\n                onInputChange={handleInputChange}\n                renderOption={(props, record: RaRecord) => {\n                    (props as {\n                        key: string;\n                    }).key = getChoiceValue(record);\n\n                    const optionLabel = getOptionLabel(record, true);\n\n                    return (\n                        <li {...props}>\n                            {optionLabel === '' ? ' ' : optionLabel}\n                        </li>\n                    );\n                }}\n            />\n            {createElement}\n        </>\n    );\n};\n\nconst PREFIX = 'RaAutocompleteInput';\n\nexport const AutocompleteInputClasses = {\n    textField: `${PREFIX}-textField`,\n};\n\nconst StyledAutocomplete = styled(Autocomplete, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    [`& .${AutocompleteInputClasses.textField}`]: {\n        minWidth: theme.spacing(20),\n    },\n}));\n\n// @ts-ignore\nexport interface AutocompleteInputProps<\n    OptionType extends any = RaRecord,\n    Multiple extends boolean | undefined = false,\n    DisableClearable extends boolean | undefined = false,\n    SupportCreate extends boolean | undefined = false\n> extends Omit<CommonInputProps, 'source'>,\n        ChoicesProps,\n        UseSuggestionsOptions,\n        Omit<SupportCreateSuggestionOptions, 'handleChange' | 'optionText'>,\n        Omit<\n            AutocompleteProps<\n                OptionType,\n                Multiple,\n                DisableClearable,\n                SupportCreate\n            >,\n            'onChange' | 'options' | 'renderInput'\n        > {\n    children?: ReactNode;\n    debounce?: number;\n    emptyText?: string;\n    emptyValue?: any;\n    filterToQuery?: (searchText: string) => any;\n    inputText?: (option: any) => string;\n    setFilter?: (value: string) => void;\n    shouldRenderSuggestions?: any;\n    // Source is optional as AutocompleteInput can be used inside a ReferenceInput that already defines the source\n    source?: string;\n    TextFieldProps?: TextFieldProps;\n}\n\n/**\n * Returns the selected choice (or choices if multiple) by matching the input value with the choices.\n */\nconst useSelectedChoice = <\n    OptionType extends any = RaRecord,\n    Multiple extends boolean | undefined = false,\n    DisableClearable extends boolean | undefined = false,\n    SupportCreate extends boolean | undefined = false\n>(\n    value: any,\n    {\n        choices,\n        multiple,\n        optionValue,\n    }: AutocompleteInputProps<\n        OptionType,\n        Multiple,\n        DisableClearable,\n        SupportCreate\n    >\n) => {\n    const selectedChoiceRef = useRef(\n        getSelectedItems(choices, value, optionValue, multiple)\n    );\n    const [selectedChoice, setSelectedChoice] = useState<RaRecord | RaRecord[]>(\n        () => getSelectedItems(choices, value, optionValue, multiple)\n    );\n\n    // As the selected choices are objects, we want to ensure we pass the same\n    // reference to the Autocomplete as it would reset its filter value otherwise.\n    useEffect(() => {\n        const newSelectedItems = getSelectedItems(\n            choices,\n            value,\n            optionValue,\n            multiple\n        );\n\n        if (!isEqual(selectedChoiceRef.current, newSelectedItems)) {\n            selectedChoiceRef.current = newSelectedItems;\n            setSelectedChoice(newSelectedItems);\n        }\n    }, [choices, value, multiple, optionValue]);\n    return selectedChoice || null;\n};\n\nconst getSelectedItems = (\n    choices = [],\n    value,\n    optionValue = 'id',\n    multiple\n) => {\n    if (multiple) {\n        return (Array.isArray(value ?? []) ? value : [value])\n            .map(item =>\n                choices.find(\n                    choice => String(item) === String(get(choice, optionValue))\n                )\n            )\n            .filter(item => !!item);\n    }\n    return (\n        choices.find(\n            choice => String(get(choice, optionValue)) === String(value)\n        ) || ''\n    );\n};\n\nconst DefaultFilterToQuery = searchText => ({ q: searchText });\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}