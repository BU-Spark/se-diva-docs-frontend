{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nimport { useMemo } from 'react';\nimport { useQuery } from 'react-query';\nimport useAuthProvider from './useAuthProvider';\nvar defaultIdentity = {\n  id: '',\n  fullName: null\n};\nvar defaultQueryParams = {\n  staleTime: 5 * 60 * 1000\n};\n/**\n * Return the current user identity by calling authProvider.getIdentity() on mount\n *\n * The return value updates according to the call state:\n *\n * - mount: { isLoading: true }\n * - success: { data: Identity, refetch: () => {}, isLoading: false }\n * - error: { error: Error, isLoading: false }\n *\n * The implementation is left to the authProvider.\n *\n * @returns The current user identity. Destructure as { isLoading, data, error, refetch }.\n *\n * @example\n * import { useGetIdentity, useGetOne } from 'react-admin';\n *\n * const PostDetail = ({ id }) => {\n *     const { data: post, isLoading: postLoading } = useGetOne('posts', { id });\n *     const { data: identity, isLoading: identityLoading } = useGetIdentity();\n *     if (postLoading || identityLoading) return <>Loading...</>;\n *     if (!post.lockedBy || post.lockedBy === identity.id) {\n *         // post isn't locked, or is locked by me\n *         return <PostEdit post={post} />\n *     } else {\n *         // post is locked by someone else and cannot be edited\n *         return <PostShow post={post} />\n *     }\n * }\n */\nexport var useGetIdentity = function (queryParams) {\n  if (queryParams === void 0) {\n    queryParams = defaultQueryParams;\n  }\n  var authProvider = useAuthProvider();\n  var result = useQuery(['auth', 'getIdentity'], authProvider ? function () {\n    return authProvider.getIdentity();\n  } : function () {\n    return __awaiter(void 0, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, defaultIdentity];\n      });\n    });\n  }, __assign({\n    enabled: typeof (authProvider === null || authProvider === void 0 ? void 0 : authProvider.getIdentity) === 'function'\n  }, queryParams));\n  // @FIXME: return useQuery's result directly by removing identity prop (BC break - to be done in v5)\n  return useMemo(function () {\n    return result.isLoading ? {\n      isLoading: true\n    } : result.error ? {\n      error: result.error,\n      isLoading: false\n    } : {\n      data: result.data,\n      identity: result.data,\n      refetch: result.refetch,\n      isLoading: false\n    };\n  }, [result]);\n};\nexport default useGetIdentity;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,OAAO,QAAQ,OAAO;AAC/B,SAASC,QAAQ,QAA8C,aAAa;AAE5E,OAAOC,eAAe,MAAM,mBAAmB;AAG/C,IAAMC,eAAe,GAAG;EACpBC,EAAE,EAAE,EAAE;EACNC,QAAQ,EAAE;CACb;AACD,IAAMC,kBAAkB,GAAG;EACvBC,SAAS,EAAE,CAAC,GAAG,EAAE,GAAG;CACvB;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,OAAO,IAAMC,cAAc,GAAG,UAC1BC,WAAsE;EAAtE;IAAAA,gCAAsE;EAAA;EAEtE,IAAMC,YAAY,GAAGR,eAAe,EAAE;EAEtC,IAAMS,MAAM,GAAGV,QAAQ,CACnB,CAAC,MAAM,EAAE,aAAa,CAAC,EACvBS,YAAY,GACN;IAAM,mBAAY,CAACE,WAAW,EAAE;EAA1B,CAA0B,GAChC;IAAA;MAAA;QAAY,qCAAe;;;GAAA;IAE7BC,OAAO,EAAE,QAAOH,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEE,WAAW,MAAK;EAAU,GACrDH,WAAW,EAErB;EAED;EACA,OAAOT,OAAO,CACV;IACI,aAAM,CAACc,SAAS,GACV;MAAEA,SAAS,EAAE;IAAI,CAAE,GACnBH,MAAM,CAACI,KAAK,GACZ;MAAEA,KAAK,EAAEJ,MAAM,CAACI,KAAK;MAAED,SAAS,EAAE;IAAK,CAAE,GACzC;MACIE,IAAI,EAAEL,MAAM,CAACK,IAAI;MACjBC,QAAQ,EAAEN,MAAM,CAACK,IAAI;MACrBE,OAAO,EAAEP,MAAM,CAACO,OAAO;MACvBJ,SAAS,EAAE;KACd;EATP,CASO,EAEX,CAACH,MAAM,CAAC,CACX;AACL,CAAC;AA4BD,eAAeH,cAAc","names":["useMemo","useQuery","useAuthProvider","defaultIdentity","id","fullName","defaultQueryParams","staleTime","useGetIdentity","queryParams","authProvider","result","getIdentity","enabled","isLoading","error","data","identity","refetch"],"sources":["/Users/paigedeveau/node_modules/ra-core/src/auth/useGetIdentity.ts"],"sourcesContent":["import { useMemo } from 'react';\nimport { useQuery, UseQueryOptions, QueryObserverResult } from 'react-query';\n\nimport useAuthProvider from './useAuthProvider';\nimport { UserIdentity } from '../types';\n\nconst defaultIdentity = {\n    id: '',\n    fullName: null,\n};\nconst defaultQueryParams = {\n    staleTime: 5 * 60 * 1000,\n};\n\n/**\n * Return the current user identity by calling authProvider.getIdentity() on mount\n *\n * The return value updates according to the call state:\n *\n * - mount: { isLoading: true }\n * - success: { data: Identity, refetch: () => {}, isLoading: false }\n * - error: { error: Error, isLoading: false }\n *\n * The implementation is left to the authProvider.\n *\n * @returns The current user identity. Destructure as { isLoading, data, error, refetch }.\n *\n * @example\n * import { useGetIdentity, useGetOne } from 'react-admin';\n *\n * const PostDetail = ({ id }) => {\n *     const { data: post, isLoading: postLoading } = useGetOne('posts', { id });\n *     const { data: identity, isLoading: identityLoading } = useGetIdentity();\n *     if (postLoading || identityLoading) return <>Loading...</>;\n *     if (!post.lockedBy || post.lockedBy === identity.id) {\n *         // post isn't locked, or is locked by me\n *         return <PostEdit post={post} />\n *     } else {\n *         // post is locked by someone else and cannot be edited\n *         return <PostShow post={post} />\n *     }\n * }\n */\nexport const useGetIdentity = (\n    queryParams: UseQueryOptions<UserIdentity, Error> = defaultQueryParams\n): UseGetIdentityResult => {\n    const authProvider = useAuthProvider();\n\n    const result = useQuery(\n        ['auth', 'getIdentity'],\n        authProvider\n            ? () => authProvider.getIdentity()\n            : async () => defaultIdentity,\n        {\n            enabled: typeof authProvider?.getIdentity === 'function',\n            ...queryParams,\n        }\n    );\n\n    // @FIXME: return useQuery's result directly by removing identity prop (BC break - to be done in v5)\n    return useMemo(\n        () =>\n            result.isLoading\n                ? { isLoading: true }\n                : result.error\n                ? { error: result.error, isLoading: false }\n                : {\n                      data: result.data,\n                      identity: result.data,\n                      refetch: result.refetch,\n                      isLoading: false,\n                  },\n\n        [result]\n    );\n};\n\nexport type UseGetIdentityResult =\n    | {\n          isLoading: true;\n          data?: undefined;\n          identity?: undefined;\n          error?: undefined;\n          refetch?: undefined;\n      }\n    | {\n          isLoading: false;\n          data?: undefined;\n          identity?: undefined;\n          error: Error;\n          refetch?: undefined;\n      }\n    | {\n          isLoading: false;\n          data: UserIdentity;\n          /**\n           * @deprecated Use data instead\n           */\n          identity: UserIdentity;\n          error?: undefined;\n          refetch: () => Promise<QueryObserverResult<UserIdentity, Error>>;\n      };\n\nexport default useGetIdentity;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}