{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { Children, createElement } from 'react';\nimport warning from '../util/warning';\nimport { useAuthenticated } from './useAuthenticated';\nimport usePermissions from './usePermissions';\nvar isEmptyChildren = function (children) {\n  return Children.count(children) === 0;\n};\n/**\n * After checking that the user is authenticated,\n * retrieves the user's permissions for a specific context.\n *\n * Useful for Route components ; used internally by Resource.\n * Use it to decorate your custom page components to require\n * a custom role. It will pass the permissions as a prop to your\n * component.\n *\n * You can set additional `authParams` at will if your authProvider\n * requires it.\n *\n * @example\n *     import { Admin, CustomRoutes, WithPermissions } from 'react-admin';\n *\n *     const Foo = ({ permissions }) => (\n *         {permissions === 'admin' ? <p>Sensitive data</p> : null}\n *         <p>Not sensitive data</p>\n *     );\n *\n *     const customRoutes = [\n *         <Route path=\"/foo\" element={\n *             <WithPermissions\n *                  authParams={{ foo: 'bar' }}\n *                  component={({ permissions, ...props }) => <Foo permissions={permissions} {...props} />}\n *              />\n *         } />\n *     ];\n *     const App = () => (\n *         <Admin>\n *             <CustomRoutes>{customRoutes}</CustomRoutes>\n *         </Admin>\n *     );\n */\nvar WithPermissions = function (props) {\n  var authParams = props.authParams,\n    children = props.children,\n    render = props.render,\n    component = props.component,\n    staticContext = props.staticContext,\n    rest = __rest(props, [\"authParams\", \"children\", \"render\", \"component\", \"staticContext\"]);\n  warning(render && children && !isEmptyChildren(children) || render && component || component && children && !isEmptyChildren(children), 'You should only use one of the `component`, `render` and `children` props in <WithPermissions>');\n  useAuthenticated(authParams);\n  var permissions = usePermissions(authParams).permissions;\n  // render even though the usePermissions() call isn't finished (optimistic rendering)\n  if (component) {\n    return createElement(component, __assign({\n      permissions: permissions\n    }, rest));\n  }\n  // @deprecated\n  if (render) {\n    return render(__assign({\n      permissions: permissions\n    }, rest));\n  }\n  // @deprecated\n  if (children) {\n    return children(__assign({\n      permissions: permissions\n    }, rest));\n  }\n};\nexport default WithPermissions;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,SAASA,QAAQ,EAA+BC,aAAa,QAAQ,OAAO;AAG5E,OAAOC,OAAO,MAAM,iBAAiB;AACrC,SAASC,gBAAgB,QAAQ,oBAAoB;AACrD,OAAOC,cAAc,MAAM,kBAAkB;AAoB7C,IAAMC,eAAe,GAAG,kBAAQ;EAAI,eAAQ,CAACC,KAAK,CAACC,QAAQ,CAAC,KAAK,CAAC;AAA9B,CAA8B;AAElE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA,IAAMC,eAAe,GAAG,UAACC,KAA2B;EAE5C,cAAU,GAMVA,KAAK,WANK;IACVF,QAAQ,GAKRE,KAAK,SALG;IACRC,MAAM,GAIND,KAAK,OAJC;IACNE,SAAS,GAGTF,KAAK,UAHI;IACTG,aAAa,GAEbH,KAAK,cAFQ;IACVI,IAAI,UACPJ,KAAK,EAPH,kEAOL,CADU;EAEXP,OAAO,CACFQ,MAAM,IAAIH,QAAQ,IAAI,CAACF,eAAe,CAACE,QAAQ,CAAC,IAC5CG,MAAM,IAAIC,SAAU,IACpBA,SAAS,IAAIJ,QAAQ,IAAI,CAACF,eAAe,CAACE,QAAQ,CAAE,EACzD,gGAAgG,CACnG;EAEDJ,gBAAgB,CAACW,UAAU,CAAC;EACpB,eAAW,GAAKV,cAAc,CAACU,UAAU,CAAC,YAA/B;EACnB;EACA,IAAIH,SAAS,EAAE;IACX,OAAOV,aAAa,CAACU,SAAS;MAAII,WAAW;IAAA,GAAKF,IAAI,EAAG;;EAE7D;EACA,IAAIH,MAAM,EAAE;IACR,OAAOA,MAAM;MAAGK,WAAW;IAAA,GAAKF,IAAI,EAAG;;EAE3C;EACA,IAAIN,QAAQ,EAAE;IACV,OAAOA,QAAQ;MAAGQ,WAAW;IAAA,GAAKF,IAAI,EAAG;;AAEjD,CAAC;AAED,eAAeL,eAAsD","names":["Children","createElement","warning","useAuthenticated","usePermissions","isEmptyChildren","count","children","WithPermissions","props","render","component","staticContext","rest","authParams","permissions"],"sources":["/Users/paigedeveau/Desktop/se-diva-docs-frontend/bwmdn-admin-portal/node_modules/ra-core/src/auth/WithPermissions.tsx"],"sourcesContent":["import { Children, ReactElement, ComponentType, createElement } from 'react';\nimport { Location } from 'react-router-dom';\n\nimport warning from '../util/warning';\nimport { useAuthenticated } from './useAuthenticated';\nimport usePermissions from './usePermissions';\n\nexport interface WithPermissionsChildrenParams {\n    permissions: any;\n}\n\ntype WithPermissionsChildren = (\n    params: WithPermissionsChildrenParams\n) => ReactElement;\n\nexport interface WithPermissionsProps {\n    authParams?: object;\n    children?: WithPermissionsChildren;\n    component?: ComponentType<any>;\n    location?: Location;\n    render?: WithPermissionsChildren;\n    staticContext?: object;\n    [key: string]: any;\n}\n\nconst isEmptyChildren = children => Children.count(children) === 0;\n\n/**\n * After checking that the user is authenticated,\n * retrieves the user's permissions for a specific context.\n *\n * Useful for Route components ; used internally by Resource.\n * Use it to decorate your custom page components to require\n * a custom role. It will pass the permissions as a prop to your\n * component.\n *\n * You can set additional `authParams` at will if your authProvider\n * requires it.\n *\n * @example\n *     import { Admin, CustomRoutes, WithPermissions } from 'react-admin';\n *\n *     const Foo = ({ permissions }) => (\n *         {permissions === 'admin' ? <p>Sensitive data</p> : null}\n *         <p>Not sensitive data</p>\n *     );\n *\n *     const customRoutes = [\n *         <Route path=\"/foo\" element={\n *             <WithPermissions\n *                  authParams={{ foo: 'bar' }}\n *                  component={({ permissions, ...props }) => <Foo permissions={permissions} {...props} />}\n *              />\n *         } />\n *     ];\n *     const App = () => (\n *         <Admin>\n *             <CustomRoutes>{customRoutes}</CustomRoutes>\n *         </Admin>\n *     );\n */\nconst WithPermissions = (props: WithPermissionsProps) => {\n    const {\n        authParams,\n        children,\n        render,\n        component,\n        staticContext,\n        ...rest\n    } = props;\n    warning(\n        (render && children && !isEmptyChildren(children)) ||\n            (render && component) ||\n            (component && children && !isEmptyChildren(children)),\n        'You should only use one of the `component`, `render` and `children` props in <WithPermissions>'\n    );\n\n    useAuthenticated(authParams);\n    const { permissions } = usePermissions(authParams);\n    // render even though the usePermissions() call isn't finished (optimistic rendering)\n    if (component) {\n        return createElement(component, { permissions, ...rest });\n    }\n    // @deprecated\n    if (render) {\n        return render({ permissions, ...rest });\n    }\n    // @deprecated\n    if (children) {\n        return children({ permissions, ...rest });\n    }\n};\n\nexport default WithPermissions as ComponentType<WithPermissionsProps>;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}