{"ast":null,"code":"import { useCallback } from 'react';\nimport { useBasename } from './useBasename';\n/**\n * Get a callback to create a link to a given page in the admin app.\n *\n * The callback expects an object as parameter, containing the following properties:\n *   - type: 'list', 'edit', 'show' or 'create'\n *   - resource\n *   - id (optional), for 'edit' or 'show' pages\n *\n * This is used internally by react-admin to allow default components to work\n * in applications that are mounted on a sub path, e.g. '/admin'. If your app\n * is mounted in the root path, you don't need it, and you can create links by\n * hand, e.g. '/articles/1/show'.\n *\n * @example\n * import { useCreatePath, useRecordContext } from 'react-admin';\n * import { useNavigate } from 'react-router-dom';\n *\n * const PostEditButton = () => {\n *     const createPath = useCreatePath();\n *     const record = useRecordContext();\n *     const navigate = useNavigate();\n *\n *     const handleClick = () => {\n *         const link = createPath({\n *            type: 'edit',\n *            resource: 'posts',\n *            id: record.id\n *         });\n *         navigate(link);\n *     };\n *\n *    return <button onClick={handleClick}>Edit Post</button>;\n * };\n */\nexport var useCreatePath = function () {\n  var basename = useBasename();\n  return useCallback(function (_a) {\n    var resource = _a.resource,\n      id = _a.id,\n      type = _a.type;\n    switch (type) {\n      case 'list':\n        return removeDoubleSlashes(\"\".concat(basename, \"/\").concat(resource));\n      case 'create':\n        return removeDoubleSlashes(\"\".concat(basename, \"/\").concat(resource, \"/create\"));\n      case 'edit':\n        {\n          if (id == null) {\n            // maybe the id isn't defined yet\n            // instead of throwing an error, fallback to list link\n            return removeDoubleSlashes(\"\".concat(basename, \"/\").concat(resource));\n          }\n          return removeDoubleSlashes(\"\".concat(basename, \"/\").concat(resource, \"/\").concat(encodeURIComponent(id)));\n        }\n      case 'show':\n        {\n          if (id == null) {\n            // maybe the id isn't defined yet\n            // instead of throwing an error, fallback to list link\n            return removeDoubleSlashes(\"\".concat(basename, \"/\").concat(resource));\n          }\n          return removeDoubleSlashes(\"\".concat(basename, \"/\").concat(resource, \"/\").concat(encodeURIComponent(id), \"/show\"));\n        }\n      default:\n        return type;\n    }\n  }, [basename]);\n};\nexport var removeDoubleSlashes = function (path) {\n  return path.replace('//', '/');\n};","map":{"version":3,"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AAGnC,SAASC,WAAW,QAAQ,eAAe;AAE3C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA,OAAO,IAAMC,aAAa,GAAG;EACzB,IAAMC,QAAQ,GAAGF,WAAW,EAAE;EAC9B,OAAOD,WAAW,CACd,UAACI,EAAwC;QAAtCC,QAAQ;MAAEC,EAAE;MAAEC,IAAI;IACjB,QAAQA,IAAI;MACR,KAAK,MAAM;QACP,OAAOC,mBAAmB,CAAC,UAAGL,QAAQ,cAAIE,QAAQ,CAAE,CAAC;MACzD,KAAK,QAAQ;QACT,OAAOG,mBAAmB,CACtB,UAAGL,QAAQ,cAAIE,QAAQ,YAAS,CACnC;MACL,KAAK,MAAM;QAAE;UACT,IAAIC,EAAE,IAAI,IAAI,EAAE;YACZ;YACA;YACA,OAAOE,mBAAmB,CAAC,UAAGL,QAAQ,cAAIE,QAAQ,CAAE,CAAC;;UAEzD,OAAOG,mBAAmB,CACtB,UAAGL,QAAQ,cAAIE,QAAQ,cAAII,kBAAkB,CAACH,EAAE,CAAC,CAAE,CACtD;;MAEL,KAAK,MAAM;QAAE;UACT,IAAIA,EAAE,IAAI,IAAI,EAAE;YACZ;YACA;YACA,OAAOE,mBAAmB,CAAC,UAAGL,QAAQ,cAAIE,QAAQ,CAAE,CAAC;;UAEzD,OAAOG,mBAAmB,CACtB,UAAGL,QAAQ,cAAIE,QAAQ,cAAII,kBAAkB,CAACH,EAAE,CAAC,UAAO,CAC3D;;MAEL;QACI,OAAOC,IAAI;IAAC;EAExB,CAAC,EACD,CAACJ,QAAQ,CAAC,CACb;AACL,CAAC;AAQD,OAAO,IAAMK,mBAAmB,GAAG,UAACE,IAAY;EAAK,WAAI,CAACC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;AAAvB,CAAuB","names":["useCallback","useBasename","useCreatePath","basename","_a","resource","id","type","removeDoubleSlashes","encodeURIComponent","path","replace"],"sources":["/Users/paigedeveau/Desktop/se-diva-docs-frontend/bwmdn-admin-portal/node_modules/ra-core/src/routing/useCreatePath.ts"],"sourcesContent":["import { useCallback } from 'react';\n\nimport { Identifier } from '../types';\nimport { useBasename } from './useBasename';\n\n/**\n * Get a callback to create a link to a given page in the admin app.\n *\n * The callback expects an object as parameter, containing the following properties:\n *   - type: 'list', 'edit', 'show' or 'create'\n *   - resource\n *   - id (optional), for 'edit' or 'show' pages\n *\n * This is used internally by react-admin to allow default components to work\n * in applications that are mounted on a sub path, e.g. '/admin'. If your app\n * is mounted in the root path, you don't need it, and you can create links by\n * hand, e.g. '/articles/1/show'.\n *\n * @example\n * import { useCreatePath, useRecordContext } from 'react-admin';\n * import { useNavigate } from 'react-router-dom';\n *\n * const PostEditButton = () => {\n *     const createPath = useCreatePath();\n *     const record = useRecordContext();\n *     const navigate = useNavigate();\n *\n *     const handleClick = () => {\n *         const link = createPath({\n *            type: 'edit',\n *            resource: 'posts',\n *            id: record.id\n *         });\n *         navigate(link);\n *     };\n *\n *    return <button onClick={handleClick}>Edit Post</button>;\n * };\n */\nexport const useCreatePath = () => {\n    const basename = useBasename();\n    return useCallback(\n        ({ resource, id, type }: CreatePathParams): string => {\n            switch (type) {\n                case 'list':\n                    return removeDoubleSlashes(`${basename}/${resource}`);\n                case 'create':\n                    return removeDoubleSlashes(\n                        `${basename}/${resource}/create`\n                    );\n                case 'edit': {\n                    if (id == null) {\n                        // maybe the id isn't defined yet\n                        // instead of throwing an error, fallback to list link\n                        return removeDoubleSlashes(`${basename}/${resource}`);\n                    }\n                    return removeDoubleSlashes(\n                        `${basename}/${resource}/${encodeURIComponent(id)}`\n                    );\n                }\n                case 'show': {\n                    if (id == null) {\n                        // maybe the id isn't defined yet\n                        // instead of throwing an error, fallback to list link\n                        return removeDoubleSlashes(`${basename}/${resource}`);\n                    }\n                    return removeDoubleSlashes(\n                        `${basename}/${resource}/${encodeURIComponent(id)}/show`\n                    );\n                }\n                default:\n                    return type;\n            }\n        },\n        [basename]\n    );\n};\n\nexport interface CreatePathParams {\n    type: string;\n    resource: string;\n    id?: Identifier;\n}\n\nexport const removeDoubleSlashes = (path: string) => path.replace('//', '/');\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}