{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport Typography from '@mui/material/Typography';\nimport { useRecordContext } from 'ra-core';\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { fieldPropTypes } from './types';\nexport var RichTextField = memo(function (props) {\n  var className = props.className,\n    emptyText = props.emptyText,\n    source = props.source,\n    _a = props.stripTags,\n    stripTags = _a === void 0 ? false : _a,\n    rest = __rest(props, [\"className\", \"emptyText\", \"source\", \"stripTags\"]);\n  var record = useRecordContext(props);\n  var value = get(record, source);\n  return React.createElement(Typography, __assign({\n    className: className,\n    variant: \"body2\",\n    component: \"span\"\n  }, sanitizeFieldRestProps(rest)), value == null && emptyText ? emptyText : stripTags ? removeTags(value) : React.createElement(\"span\", {\n    dangerouslySetInnerHTML: {\n      __html: value\n    }\n  }));\n});\nRichTextField.propTypes = __assign(__assign(__assign({}, Typography.propTypes), fieldPropTypes), {\n  stripTags: PropTypes.bool\n});\nRichTextField.displayName = 'RichTextField';\nexport var removeTags = function (input) {\n  return input ? input.replace(/<[^>]+>/gm, '') : '';\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAAaC,IAAI,QAAQ,OAAO;AAChC,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,GAAG,MAAM,YAAY;AAC5B,OAAOC,UAA+B,MAAM,0BAA0B;AACtE,SAASC,gBAAgB,QAAQ,SAAS;AAE1C,SAASC,sBAAsB,QAAQ,0BAA0B;AACjE,SAA+CC,cAAc,QAAQ,SAAS;AAE9E,OAAO,IAAMC,aAAa,GAA2BP,IAAI,CACrD,eAAK;EAEG,aAAS,GAKTQ,KAAK,UALI;IACTC,SAAS,GAITD,KAAK,UAJI;IACTE,MAAM,GAGNF,KAAK,OAHC;IACNG,KAEAH,KAAK,UAFY;IAAjBI,SAAS,mBAAG,KAAK;IACdC,IAAI,UACPL,KAAK,EANH,iDAML,CADU;EAEX,IAAMM,MAAM,GAAGV,gBAAgB,CAACI,KAAK,CAAC;EACtC,IAAMO,KAAK,GAAGb,GAAG,CAACY,MAAM,EAAEJ,MAAM,CAAC;EAEjC,OACIX,oBAACI,UAAU;IACPa,SAAS,EAAEA,SAAS;IACpBC,OAAO,EAAC,OAAO;IACfC,SAAS,EAAC;EAAM,GACZb,sBAAsB,CAACQ,IAAI,CAAC,GAE/BE,KAAK,IAAI,IAAI,IAAIN,SAAS,GACvBA,SAAS,GACTG,SAAS,GACTO,UAAU,CAACJ,KAAK,CAAC,GAEjBhB;IAAMqB,uBAAuB,EAAE;MAAEC,MAAM,EAAEN;IAAK;EAAE,EACnD,CACQ;AAErB,CAAC,CACJ;AAEDR,aAAa,CAACe,SAAS,kCAEhBnB,UAAU,CAACmB,SAAS,GACpBhB,cAAc;EACjBM,SAAS,EAAEX,SAAS,CAACsB;AAAI,EAC5B;AASDhB,aAAa,CAACiB,WAAW,GAAG,eAAe;AAE3C,OAAO,IAAML,UAAU,GAAG,UAACM,KAAa;EACpC,YAAK,GAAGA,KAAK,CAACC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,GAAG,EAAE;AAA3C,CAA2C","names":["React","memo","PropTypes","get","Typography","useRecordContext","sanitizeFieldRestProps","fieldPropTypes","RichTextField","props","emptyText","source","_a","stripTags","rest","record","value","className","variant","component","removeTags","dangerouslySetInnerHTML","__html","propTypes","bool","displayName","input","replace"],"sourceRoot":"","sources":["../../../src/field/RichTextField.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}