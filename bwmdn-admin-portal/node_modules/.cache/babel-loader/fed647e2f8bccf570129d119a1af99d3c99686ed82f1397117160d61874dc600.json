{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport SearchIcon from '@mui/icons-material/Search';\nimport { InputAdornment } from '@mui/material';\nimport { useTranslate } from 'ra-core';\nimport { TextInput } from './TextInput';\nexport var SearchInput = function (props) {\n  var label = props.label,\n    rest = __rest(props, [\"label\"]);\n  var translate = useTranslate();\n  if (label) {\n    throw new Error(\"<SearchInput> isn't designed to be used with a label prop. Use <TextInput> if you need a label.\");\n  }\n  return React.createElement(StyledTextInput, __assign({\n    hiddenLabel: true,\n    label: \"\",\n    resettable: true,\n    placeholder: translate('ra.action.search'),\n    InputProps: {\n      endAdornment: React.createElement(InputAdornment, {\n        position: \"end\"\n      }, React.createElement(SearchIcon, {\n        color: \"disabled\"\n      }))\n    },\n    size: \"small\"\n  }, rest));\n};\nvar PREFIX = 'RaSearchInput';\nvar StyledTextInput = styled(TextInput, {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})({\n  marginTop: 0\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,MAAM,QAAQ,sBAAsB;AAC7C,OAAOC,UAAU,MAAM,4BAA4B;AACnD,SAASC,cAAc,QAAQ,eAAe;AAC9C,SAASC,YAAY,QAAQ,SAAS;AAGtC,SAASC,SAAS,QAAwB,aAAa;AAEvD,OAAO,IAAMC,WAAW,GAAG,UAACC,KAAuB;EACvC,SAAK,GAAcA,KAAK,MAAnB;IAAKC,IAAI,UAAKD,KAAK,EAA1B,SAAkB,CAAF;EAEtB,IAAME,SAAS,GAAGL,YAAY,EAAE;EAEhC,IAAIM,KAAK,EAAE;IACP,MAAM,IAAIC,KAAK,CACX,iGAAiG,CACpG;;EAGL,OACIX,oBAACY,eAAe;IACZC,WAAW;IACXH,KAAK,EAAC,EAAE;IACRI,UAAU;IACVC,WAAW,EAAEN,SAAS,CAAC,kBAAkB,CAAC;IAC1CO,UAAU,EAAE;MACRC,YAAY,EACRjB,oBAACG,cAAc;QAACe,QAAQ,EAAC;MAAK,GAC1BlB,oBAACE,UAAU;QAACiB,KAAK,EAAC;MAAU,EAAG;KAG1C;IACDC,IAAI,EAAC;EAAO,GACRZ,IAAI,EACV;AAEV,CAAC;AAID,IAAMa,MAAM,GAAG,eAAe;AAE9B,IAAMT,eAAe,GAAGX,MAAM,CAACI,SAAS,EAAE;EACtCiB,IAAI,EAAED,MAAM;EACZE,iBAAiB,EAAE,UAAChB,KAAK,EAAEiB,MAAM;IAAK,aAAM,CAACC,IAAI;EAAX;CACzC,CAAC,CAAC;EACCC,SAAS,EAAE;CACd,CAAC","names":["React","styled","SearchIcon","InputAdornment","useTranslate","TextInput","SearchInput","props","rest","translate","label","Error","StyledTextInput","hiddenLabel","resettable","placeholder","InputProps","endAdornment","position","color","size","PREFIX","name","overridesResolver","styles","root","marginTop"],"sources":["/Users/paigedeveau/Desktop/se-diva-docs-frontend/bwmdn-admin-portal/node_modules/ra-ui-materialui/src/input/SearchInput.tsx"],"sourcesContent":["import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport SearchIcon from '@mui/icons-material/Search';\nimport { InputAdornment } from '@mui/material';\nimport { useTranslate } from 'ra-core';\n\nimport { CommonInputProps } from './CommonInputProps';\nimport { TextInput, TextInputProps } from './TextInput';\n\nexport const SearchInput = (props: SearchInputProps) => {\n    const { label, ...rest } = props;\n\n    const translate = useTranslate();\n\n    if (label) {\n        throw new Error(\n            \"<SearchInput> isn't designed to be used with a label prop. Use <TextInput> if you need a label.\"\n        );\n    }\n\n    return (\n        <StyledTextInput\n            hiddenLabel\n            label=\"\"\n            resettable\n            placeholder={translate('ra.action.search')}\n            InputProps={{\n                endAdornment: (\n                    <InputAdornment position=\"end\">\n                        <SearchIcon color=\"disabled\" />\n                    </InputAdornment>\n                ),\n            }}\n            size=\"small\"\n            {...rest}\n        />\n    );\n};\n\nexport type SearchInputProps = CommonInputProps & TextInputProps;\n\nconst PREFIX = 'RaSearchInput';\n\nconst StyledTextInput = styled(TextInput, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})({\n    marginTop: 0,\n});\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}