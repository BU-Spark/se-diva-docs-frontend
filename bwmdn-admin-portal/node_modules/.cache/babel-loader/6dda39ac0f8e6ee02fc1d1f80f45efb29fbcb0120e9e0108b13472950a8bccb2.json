{"ast":null,"code":"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useReferenceArrayInputController, ResourceContextProvider, ChoicesContextProvider } from 'ra-core';\nimport { AutocompleteArrayInput } from './AutocompleteArrayInput';\n/**\n * An Input component for fields containing a list of references to another resource.\n * Useful for 'hasMany' relationship.\n *\n * @example\n * The post object has many tags, so the post resource looks like:\n * {\n *    id: 1234,\n *    tag_ids: [ \"1\", \"23\", \"4\" ]\n * }\n *\n * ReferenceArrayInput component fetches the current resources (using\n * `dataProvider.getMany()`) as well as possible resources (using\n * `dataProvider.getList()`) in the reference endpoint. It then\n * delegates rendering to its child component, to which it makes the possible\n * choices available through the ChoicesContext.\n *\n * Use it with a selector component as child, like `<SelectArrayInput>`\n * or <CheckboxGroupInput>.\n *\n * @example\n * export const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <ReferenceArrayInput source=\"tag_ids\" reference=\"tags\">\n *                 <SelectArrayInput optionText=\"name\" />\n *             </ReferenceArrayInput>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * By default, restricts the possible values to 25. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      perPage={100}>\n *     <SelectArrayInput optionText=\"name\" />\n * </ReferenceArrayInput>\n *\n * By default, orders the possible values by id desc. You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      sort={{ field: 'name', order: 'ASC' }}>\n *     <SelectArrayInput optionText=\"name\" />\n * </ReferenceArrayInput>\n *\n * Also, you can filter the query used to populate the possible values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      filter={{ is_public: true }}>\n *     <SelectArrayInput optionText=\"name\" />\n * </ReferenceArrayInput>\n *\n * The enclosed component may filter results. ReferenceArrayInput create a ChoicesContext which provides\n * a `setFilters` function. You can call this function to filter the results.\n */\nexport var ReferenceArrayInput = function (props) {\n  var children = props.children,\n    reference = props.reference;\n  if (React.Children.count(children) !== 1) {\n    throw new Error('<ReferenceArrayInput> only accepts a single child (like <Datagrid>)');\n  }\n  var controllerProps = useReferenceArrayInputController(props);\n  return React.createElement(ResourceContextProvider, {\n    value: reference\n  }, React.createElement(ChoicesContextProvider, {\n    value: controllerProps\n  }, children));\n};\nReferenceArrayInput.propTypes = {\n  children: PropTypes.element,\n  filter: PropTypes.object,\n  label: PropTypes.string,\n  page: PropTypes.number,\n  perPage: PropTypes.number,\n  reference: PropTypes.string.isRequired,\n  resource: PropTypes.string,\n  sort: PropTypes.shape({\n    field: PropTypes.string,\n    order: PropTypes.oneOf(['ASC', 'DESC'])\n  }),\n  source: PropTypes.string\n};\nReferenceArrayInput.defaultProps = {\n  filter: {},\n  page: 1,\n  perPage: 25,\n  sort: {\n    field: 'id',\n    order: 'DESC'\n  },\n  children: React.createElement(AutocompleteArrayInput, null)\n};","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,OAAOC,SAAS,MAAM,YAAY;AAClC,SAEIC,gCAAgC,EAChCC,uBAAuB,EACvBC,sBAAsB,QAEnB,SAAS;AAChB,SAASC,sBAAsB,QAAQ,0BAA0B;AAEjE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmEA,OAAO,IAAMC,mBAAmB,GAAG,UAACC,KAA+B;EACvD,YAAQ,GAAgBA,KAAK,SAArB;IAAEC,SAAS,GAAKD,KAAK,UAAV;EAC3B,IAAIP,KAAK,CAACS,QAAQ,CAACC,KAAK,CAACC,QAAQ,CAAC,KAAK,CAAC,EAAE;IACtC,MAAM,IAAIC,KAAK,CACX,qEAAqE,CACxE;;EAGL,IAAMC,eAAe,GAAGX,gCAAgC,CAACK,KAAK,CAAC;EAE/D,OACIP,oBAACG,uBAAuB;IAACW,KAAK,EAAEN;EAAS,GACrCR,oBAACI,sBAAsB;IAACU,KAAK,EAAED;EAAe,GACzCF,QAAQ,CACY,CACH;AAElC,CAAC;AAEDL,mBAAmB,CAACS,SAAS,GAAG;EAC5BJ,QAAQ,EAAEV,SAAS,CAACe,OAAO;EAC3BC,MAAM,EAAEhB,SAAS,CAACiB,MAAM;EACxBC,KAAK,EAAElB,SAAS,CAACmB,MAAM;EACvBC,IAAI,EAAEpB,SAAS,CAACqB,MAAM;EACtBC,OAAO,EAAEtB,SAAS,CAACqB,MAAM;EACzBd,SAAS,EAAEP,SAAS,CAACmB,MAAM,CAACI,UAAU;EACtCC,QAAQ,EAAExB,SAAS,CAACmB,MAAM;EAC1BM,IAAI,EAAEzB,SAAS,CAAC0B,KAAK,CAAC;IAClBC,KAAK,EAAE3B,SAAS,CAACmB,MAAM;IACvBS,KAAK,EAAE5B,SAAS,CAAC6B,KAAK,CAAC,CAAC,KAAK,EAAE,MAAM,CAAC;GACzC,CAAC;EACFC,MAAM,EAAE9B,SAAS,CAACmB;CACrB;AAEDd,mBAAmB,CAAC0B,YAAY,GAAG;EAC/Bf,MAAM,EAAE,EAAE;EACVI,IAAI,EAAE,CAAC;EACPE,OAAO,EAAE,EAAE;EACXG,IAAI,EAAE;IAAEE,KAAK,EAAE,IAAI;IAAEC,KAAK,EAAE;EAAM,CAAE;EACpClB,QAAQ,EAAEX,oBAACK,sBAAsB;CACpC","names":["React","PropTypes","useReferenceArrayInputController","ResourceContextProvider","ChoicesContextProvider","AutocompleteArrayInput","ReferenceArrayInput","props","reference","Children","count","children","Error","controllerProps","value","propTypes","element","filter","object","label","string","page","number","perPage","isRequired","resource","sort","shape","field","order","oneOf","source","defaultProps"],"sources":["/Users/paigedeveau/Desktop/se-diva-docs-frontend/bwmdn-admin-portal/node_modules/ra-ui-materialui/src/input/ReferenceArrayInput.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    InputProps,\n    useReferenceArrayInputController,\n    ResourceContextProvider,\n    ChoicesContextProvider,\n    UseReferenceArrayInputParams,\n} from 'ra-core';\nimport { AutocompleteArrayInput } from './AutocompleteArrayInput';\n\n/**\n * An Input component for fields containing a list of references to another resource.\n * Useful for 'hasMany' relationship.\n *\n * @example\n * The post object has many tags, so the post resource looks like:\n * {\n *    id: 1234,\n *    tag_ids: [ \"1\", \"23\", \"4\" ]\n * }\n *\n * ReferenceArrayInput component fetches the current resources (using\n * `dataProvider.getMany()`) as well as possible resources (using\n * `dataProvider.getList()`) in the reference endpoint. It then\n * delegates rendering to its child component, to which it makes the possible\n * choices available through the ChoicesContext.\n *\n * Use it with a selector component as child, like `<SelectArrayInput>`\n * or <CheckboxGroupInput>.\n *\n * @example\n * export const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <ReferenceArrayInput source=\"tag_ids\" reference=\"tags\">\n *                 <SelectArrayInput optionText=\"name\" />\n *             </ReferenceArrayInput>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * By default, restricts the possible values to 25. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      perPage={100}>\n *     <SelectArrayInput optionText=\"name\" />\n * </ReferenceArrayInput>\n *\n * By default, orders the possible values by id desc. You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      sort={{ field: 'name', order: 'ASC' }}>\n *     <SelectArrayInput optionText=\"name\" />\n * </ReferenceArrayInput>\n *\n * Also, you can filter the query used to populate the possible values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      filter={{ is_public: true }}>\n *     <SelectArrayInput optionText=\"name\" />\n * </ReferenceArrayInput>\n *\n * The enclosed component may filter results. ReferenceArrayInput create a ChoicesContext which provides\n * a `setFilters` function. You can call this function to filter the results.\n */\nexport const ReferenceArrayInput = (props: ReferenceArrayInputProps) => {\n    const { children, reference } = props;\n    if (React.Children.count(children) !== 1) {\n        throw new Error(\n            '<ReferenceArrayInput> only accepts a single child (like <Datagrid>)'\n        );\n    }\n\n    const controllerProps = useReferenceArrayInputController(props);\n\n    return (\n        <ResourceContextProvider value={reference}>\n            <ChoicesContextProvider value={controllerProps}>\n                {children}\n            </ChoicesContextProvider>\n        </ResourceContextProvider>\n    );\n};\n\nReferenceArrayInput.propTypes = {\n    children: PropTypes.element,\n    filter: PropTypes.object,\n    label: PropTypes.string,\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n    reference: PropTypes.string.isRequired,\n    resource: PropTypes.string,\n    sort: PropTypes.shape({\n        field: PropTypes.string,\n        order: PropTypes.oneOf(['ASC', 'DESC']),\n    }),\n    source: PropTypes.string,\n};\n\nReferenceArrayInput.defaultProps = {\n    filter: {},\n    page: 1,\n    perPage: 25,\n    sort: { field: 'id', order: 'DESC' },\n    children: <AutocompleteArrayInput />,\n};\n\nexport interface ReferenceArrayInputProps\n    extends InputProps,\n        UseReferenceArrayInputParams {\n    children?: ReactElement;\n    label?: string;\n    [key: string]: any;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}