{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { useCallback } from 'react';\nimport { useAddNotificationContext } from './useAddNotificationContext';\n/**\n * Hook for Notification Side Effect\n *\n * @example\n *\n * const notify = useNotify();\n * // simple message (info level)\n * notify('Level complete');\n * // specify level\n * notify('A problem occurred', { type: 'warning' })\n * // pass arguments to the translation function\n * notify('Deleted %{count} elements', { type: 'info', messageArgs: { smart_count: 23 } })\n * // show the action as undoable in the notification\n * notify('Post renamed', { type: 'info', undoable: true })\n */\nexport var useNotify = function () {\n  var addNotification = useAddNotificationContext();\n  return useCallback(function (message, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var _a = options.type,\n      messageType = _a === void 0 ? 'info' : _a,\n      notificationOptions = __rest(options, [\"type\"]);\n    addNotification({\n      message: message,\n      type: messageType,\n      notificationOptions: notificationOptions\n    });\n  }, [addNotification]);\n};","map":{"version":3,"mappings":";;;;;;;;AAAA,SAASA,WAAW,QAAQ,OAAO;AAEnC,SAASC,yBAAyB,QAAQ,6BAA6B;AAGvE;;;;;;;;;;;;;;;AAeA,OAAO,IAAMC,SAAS,GAAG;EACrB,IAAMC,eAAe,GAAGF,yBAAyB,EAAE;EACnD,OAAOD,WAAW,CACd,UACII,OAAe,EACfC,OAA+D;IAA/D;MAAAA,YAA+D;IAAA;IAG3D,SAEAA,OAAO,KAFmB;MAApBC,WAAW,mBAAG,MAAM;MACvBC,mBAAmB,UACtBF,OAAO,EAHL,QAGL,CADyB;IAE1BF,eAAe,CAAC;MACZC,OAAO;MACPI,IAAI,EAAEF,WAAW;MACjBC,mBAAmB;KACtB,CAAC;EACN,CAAC,EACD,CAACJ,eAAe,CAAC,CACpB;AACL,CAAC","names":["useCallback","useAddNotificationContext","useNotify","addNotification","message","options","messageType","notificationOptions","type"],"sourceRoot":"","sources":["../../../src/notification/useNotify.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}