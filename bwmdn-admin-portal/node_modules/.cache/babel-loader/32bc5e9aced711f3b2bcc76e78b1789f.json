{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport ActionList from '@mui/icons-material/List';\nimport { Link } from 'react-router-dom';\nimport { useResourceContext, useCreatePath } from 'ra-core';\nimport { Button } from './Button';\n/**\n * Opens the List view of a given resource\n *\n * @example // basic usage\n * import { ListButton } from 'react-admin';\n *\n * const CommentListButton = () => (\n *     <ListButton label=\"Comments\" />\n * );\n *\n * @example // linking back to the list from the Edit view\n * import { TopToolbar, ListButton, ShowButton, Edit } from 'react-admin';\n *\n * const PostEditActions = () => (\n *     <TopToolbar>\n *         <ListButton />\n *         <ShowButton />\n *     </TopToolbar>\n * );\n *\n * export const PostEdit = (props) => (\n *     <Edit actions={<PostEditActions />} {...props}>\n *         ...\n *     </Edit>\n * );\n */\nexport var ListButton = function (props) {\n  var _a = props.icon,\n    icon = _a === void 0 ? defaultIcon : _a,\n    _b = props.label,\n    label = _b === void 0 ? 'ra.action.list' : _b,\n    resourceProp = props.resource,\n    _c = props.scrollToTop,\n    scrollToTop = _c === void 0 ? true : _c,\n    rest = __rest(props, [\"icon\", \"label\", \"resource\", \"scrollToTop\"]);\n  var resource = useResourceContext(props);\n  var createPath = useCreatePath();\n  return React.createElement(Button, __assign({\n    component: Link,\n    to: createPath({\n      type: 'list',\n      resource: resource\n    }),\n    state: scrollStates[String(scrollToTop)],\n    label: label\n  }, rest), icon);\n};\n// avoids using useMemo to get a constant value for the link state\nvar scrollStates = {\n  true: {\n    _scrollToTop: true\n  },\n  false: {}\n};\nvar defaultIcon = React.createElement(ActionList, null);\nListButton.propTypes = {\n  icon: PropTypes.element,\n  label: PropTypes.string\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,UAAU,MAAM,0BAA0B;AACjD,SAASC,IAAI,QAAQ,kBAAkB;AACvC,SAASC,kBAAkB,EAAEC,aAAa,QAAQ,SAAS;AAE3D,SAASC,MAAM,QAAqB,UAAU;AAE9C;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,OAAO,IAAMC,UAAU,GAAG,UAACC,KAAsB;EAEzC,SAKAA,KAAK,KALa;IAAlBC,IAAI,mBAAGC,WAAW;IAClBC,KAIAH,KAAK,MAJmB;IAAxBI,KAAK,mBAAG,gBAAgB;IACdC,YAAY,GAGtBL,KAAK,SAHiB;IACtBM,KAEAN,KAAK,YAFa;IAAlBO,WAAW,mBAAG,IAAI;IACfC,IAAI,UACPR,KAAK,EANH,4CAML,CADU;EAEX,IAAMS,QAAQ,GAAGb,kBAAkB,CAACI,KAAK,CAAC;EAC1C,IAAMU,UAAU,GAAGb,aAAa,EAAE;EAClC,OACIL,oBAACM,MAAM;IACHa,SAAS,EAAEhB,IAAI;IACfiB,EAAE,EAAEF,UAAU,CAAC;MAAEG,IAAI,EAAE,MAAM;MAAEJ,QAAQ;IAAA,CAAE,CAAC;IAC1CK,KAAK,EAAEC,YAAY,CAACC,MAAM,CAACT,WAAW,CAAC,CAAC;IACxCH,KAAK,EAAEA;EAAK,GACPI,IAAY,GAEhBP,IAAI,CACA;AAEjB,CAAC;AAED;AACA,IAAMc,YAAY,GAAG;EACjBE,IAAI,EAAE;IAAEC,YAAY,EAAE;EAAI,CAAE;EAC5BC,KAAK,EAAE;CACV;AAED,IAAMjB,WAAW,GAAGV,oBAACE,UAAU,OAAG;AAWlCK,UAAU,CAACqB,SAAS,GAAG;EACnBnB,IAAI,EAAER,SAAS,CAAC4B,OAAO;EACvBjB,KAAK,EAAEX,SAAS,CAAC6B;CACpB","names":["React","PropTypes","ActionList","Link","useResourceContext","useCreatePath","Button","ListButton","props","icon","defaultIcon","_b","label","resourceProp","_c","scrollToTop","rest","resource","createPath","component","to","type","state","scrollStates","String","true","_scrollToTop","false","propTypes","element","string"],"sourceRoot":"","sources":["../../../src/button/ListButton.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}