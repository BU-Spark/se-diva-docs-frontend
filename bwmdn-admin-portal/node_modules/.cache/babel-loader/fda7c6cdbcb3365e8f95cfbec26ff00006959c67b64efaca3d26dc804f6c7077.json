{"ast":null,"code":"import { useContext } from 'react';\nimport { ListFilterContext } from './ListFilterContext';\n/**\n * Hook to read the list controller props from the ListContext.\n *\n * Must be used within a <ListContextProvider> (e.g. as a descendent of <List>\n * or <ListBase>).\n *\n * @typedef {Object} ListFilterContextValue\n * @prop {Object}   filterValues a dictionary of filter values, e.g. { title: 'lorem', nationality: 'fr' }\n * @prop {Function} setFilters a callback to update the filters, e.g. setFilters(filters, displayedFilters)\n * @prop {Object}   displayedFilters a dictionary of the displayed filters, e.g. { title: true, nationality: true }\n * @prop {Function} showFilter a callback to show one of the filters, e.g. showFilter('title', defaultValue)\n * @prop {Function} hideFilter a callback to hide one of the filters, e.g. hideFilter('title')\n * @prop {string}   resource the resource name, deduced from the location. e.g. 'posts'\n *\n * @returns {ListFilterContextValue} list controller props\n *\n * @see useListController for how it is filled\n */\nexport var useListFilterContext = function (props) {\n  var context = useContext(ListFilterContext);\n  if (!context.hideFilter) {\n    /**\n     * The element isn't inside a <ListFilterContext.Provider>\n     *\n     * This may only happen when using Datagrid / SimpleList / SingleFieldList components\n     * outside of a List / ReferenceManyField / ReferenceArrayField -\n     * which isn't documented but tolerated.\n     * To avoid breakage in that case, fallback to props\n     *\n     * @deprecated - to be removed in 4.0\n     */\n    if (process.env.NODE_ENV !== 'production') {\n      console.log(\"List components must be used inside a <ListContextProvider>. Relying on props rather than context to get List data and callbacks is deprecated and won't be supported in the next major version of react-admin.\");\n    }\n    return props;\n  }\n  return context;\n};","map":{"version":3,"mappings":"AAAA,SAASA,UAAU,QAAQ,OAAO;AAElC,SAASC,iBAAiB,QAAgC,qBAAqB;AAE/E;;;;;;;;;;;;;;;;;;AAkBA,OAAO,IAAMC,oBAAoB,GAAG,UAACC,KAAW;EAC5C,IAAMC,OAAO,GAAGJ,UAAU,CAACC,iBAAiB,CAAC;EAC7C,IAAI,CAACG,OAAO,CAACC,UAAU,EAAE;IACrB;;;;;;;;;;IAUA,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACvCC,OAAO,CAACC,GAAG,CACP,iNAAiN,CACpN;;IAEL,OAAOP,KAAK;;EAEhB,OAAOC,OAAO;AAClB,CAAC","names":["useContext","ListFilterContext","useListFilterContext","props","context","hideFilter","process","env","NODE_ENV","console","log"],"sources":["/Users/paigedeveau/Desktop/se-diva-docs-frontend/bwmdn-admin-portal/node_modules/ra-core/src/controller/list/useListFilterContext.ts"],"sourcesContent":["import { useContext } from 'react';\n\nimport { ListFilterContext, ListFilterContextValue } from './ListFilterContext';\n\n/**\n * Hook to read the list controller props from the ListContext.\n *\n * Must be used within a <ListContextProvider> (e.g. as a descendent of <List>\n * or <ListBase>).\n *\n * @typedef {Object} ListFilterContextValue\n * @prop {Object}   filterValues a dictionary of filter values, e.g. { title: 'lorem', nationality: 'fr' }\n * @prop {Function} setFilters a callback to update the filters, e.g. setFilters(filters, displayedFilters)\n * @prop {Object}   displayedFilters a dictionary of the displayed filters, e.g. { title: true, nationality: true }\n * @prop {Function} showFilter a callback to show one of the filters, e.g. showFilter('title', defaultValue)\n * @prop {Function} hideFilter a callback to hide one of the filters, e.g. hideFilter('title')\n * @prop {string}   resource the resource name, deduced from the location. e.g. 'posts'\n *\n * @returns {ListFilterContextValue} list controller props\n *\n * @see useListController for how it is filled\n */\nexport const useListFilterContext = (props?: any): ListFilterContextValue => {\n    const context = useContext(ListFilterContext);\n    if (!context.hideFilter) {\n        /**\n         * The element isn't inside a <ListFilterContext.Provider>\n         *\n         * This may only happen when using Datagrid / SimpleList / SingleFieldList components\n         * outside of a List / ReferenceManyField / ReferenceArrayField -\n         * which isn't documented but tolerated.\n         * To avoid breakage in that case, fallback to props\n         *\n         * @deprecated - to be removed in 4.0\n         */\n        if (process.env.NODE_ENV !== 'production') {\n            console.log(\n                \"List components must be used inside a <ListContextProvider>. Relying on props rather than context to get List data and callbacks is deprecated and won't be supported in the next major version of react-admin.\"\n            );\n        }\n        return props;\n    }\n    return context;\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}