{"ast":null,"code":"import { useContext, useEffect, useRef } from 'react';\nimport { useFormState } from 'react-hook-form';\nimport { UNSAFE_NavigationContext, useLocation } from 'react-router-dom';\nimport { useTranslate } from '../i18n';\n/**\n * Display a confirmation dialog if the form has unsaved changes.\n * - If the user confirms, the navigation continues and the changes are lost.\n * - If the user cancels, the navigation is cancelled and the changes are kept.\n */\nexport var useWarnWhenUnsavedChanges = function (enable, formRootPathname, control) {\n  // react-router v6 does not yet provide a way to block navigation\n  // This is planned for a future release\n  // See https://github.com/remix-run/react-router/issues/8139\n  var navigator = useContext(UNSAFE_NavigationContext).navigator;\n  var location = useLocation();\n  var translate = useTranslate();\n  var _a = useFormState(control ? {\n      control: control\n    } : undefined),\n    isSubmitSuccessful = _a.isSubmitSuccessful,\n    isSubmitting = _a.isSubmitting,\n    dirtyFields = _a.dirtyFields;\n  var isDirty = Object.keys(dirtyFields).length > 0;\n  var initialLocation = useRef(formRootPathname || location.pathname);\n  useEffect(function () {\n    if (!enable || !isDirty) return;\n    if (!navigator.block) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn('warnWhenUnsavedChanged is not compatible with react-router >= 6.4. If you need this feature, please downgrade react-router to 6.3.0');\n      }\n      return;\n    }\n    var unblock = navigator.block(function (tx) {\n      var newLocationIsInsideCurrentLocation = tx.location.pathname.startsWith(initialLocation.current);\n      var newLocationIsShowView = tx.location.pathname.startsWith(\"\".concat(initialLocation.current, \"/show\"));\n      var newLocationIsInsideForm = newLocationIsInsideCurrentLocation && !newLocationIsShowView;\n      if (!isSubmitting && (newLocationIsInsideForm || isSubmitSuccessful || window.confirm(translate('ra.message.unsaved_changes')))) {\n        unblock();\n        tx.retry();\n      }\n    });\n    return unblock;\n  }, [enable, location, navigator, isDirty, isSubmitting, isSubmitSuccessful, translate]);\n};","map":{"version":3,"mappings":"AAAA,SAASA,UAAU,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACrD,SAASC,YAAY,QAAiB,iBAAiB;AACvD,SAASC,wBAAwB,EAAEC,WAAW,QAAQ,kBAAkB;AAExE,SAASC,YAAY,QAAQ,SAAS;AAEtC;;;;;AAKA,OAAO,IAAMC,yBAAyB,GAAG,UACrCC,MAAe,EACfC,gBAAyB,EACzBC,OAAiB;EAEjB;EACA;EACA;EACA,IAAMC,SAAS,GAAGX,UAAU,CAACI,wBAAwB,CAAC,CAACO,SAAoB;EAC3E,IAAMC,QAAQ,GAAGP,WAAW,EAAE;EAC9B,IAAMQ,SAAS,GAAGP,YAAY,EAAE;EAC1B,SAAoDH,YAAY,CAClEO,OAAO,GAAG;MAAEA,OAAO;IAAA,CAAE,GAAGI,SAAS,CACpC;IAFOC,kBAAkB;IAAEC,YAAY;IAAEC,WAAW,iBAEpD;EACD,IAAMC,OAAO,GAAGC,MAAM,CAACC,IAAI,CAACH,WAAW,CAAC,CAACI,MAAM,GAAG,CAAC;EACnD,IAAMC,eAAe,GAAGpB,MAAM,CAACO,gBAAgB,IAAIG,QAAQ,CAACW,QAAQ,CAAC;EAErEtB,SAAS,CAAC;IACN,IAAI,CAACO,MAAM,IAAI,CAACU,OAAO,EAAE;IACzB,IAAI,CAACP,SAAS,CAACa,KAAK,EAAE;MAClB,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;QACvCC,OAAO,CAACC,IAAI,CACR,qIAAqI,CACxI;;MAEL;;IAGJ,IAAIC,OAAO,GAAGnB,SAAS,CAACa,KAAK,CAAC,UAACO,EAAc;MACzC,IAAMC,kCAAkC,GAAGD,EAAE,CAACnB,QAAQ,CAACW,QAAQ,CAACU,UAAU,CACtEX,eAAe,CAACY,OAAO,CAC1B;MACD,IAAMC,qBAAqB,GAAGJ,EAAE,CAACnB,QAAQ,CAACW,QAAQ,CAACU,UAAU,CACzD,UAAGX,eAAe,CAACY,OAAO,UAAO,CACpC;MACD,IAAME,uBAAuB,GACzBJ,kCAAkC,IAAI,CAACG,qBAAqB;MAEhE,IACI,CAACnB,YAAY,KACZoB,uBAAuB,IACpBrB,kBAAkB,IAClBsB,MAAM,CAACC,OAAO,CAACzB,SAAS,CAAC,4BAA4B,CAAC,CAAC,CAAC,EAC9D;QACEiB,OAAO,EAAE;QACTC,EAAE,CAACQ,KAAK,EAAE;;IAElB,CAAC,CAAC;IAEF,OAAOT,OAAO;EAClB,CAAC,EAAE,CACCtB,MAAM,EACNI,QAAQ,EACRD,SAAS,EACTO,OAAO,EACPF,YAAY,EACZD,kBAAkB,EAClBF,SAAS,CACZ,CAAC;AACN,CAAC","names":["useContext","useEffect","useRef","useFormState","UNSAFE_NavigationContext","useLocation","useTranslate","useWarnWhenUnsavedChanges","enable","formRootPathname","control","navigator","location","translate","undefined","isSubmitSuccessful","isSubmitting","dirtyFields","isDirty","Object","keys","length","initialLocation","pathname","block","process","env","NODE_ENV","console","warn","unblock","tx","newLocationIsInsideCurrentLocation","startsWith","current","newLocationIsShowView","newLocationIsInsideForm","window","confirm","retry"],"sources":["/Users/paigedeveau/node_modules/ra-core/src/form/useWarnWhenUnsavedChanges.tsx"],"sourcesContent":["import { useContext, useEffect, useRef } from 'react';\nimport { useFormState, Control } from 'react-hook-form';\nimport { UNSAFE_NavigationContext, useLocation } from 'react-router-dom';\nimport { History, Transition } from 'history';\nimport { useTranslate } from '../i18n';\n\n/**\n * Display a confirmation dialog if the form has unsaved changes.\n * - If the user confirms, the navigation continues and the changes are lost.\n * - If the user cancels, the navigation is cancelled and the changes are kept.\n */\nexport const useWarnWhenUnsavedChanges = (\n    enable: boolean,\n    formRootPathname?: string,\n    control?: Control\n) => {\n    // react-router v6 does not yet provide a way to block navigation\n    // This is planned for a future release\n    // See https://github.com/remix-run/react-router/issues/8139\n    const navigator = useContext(UNSAFE_NavigationContext).navigator as History;\n    const location = useLocation();\n    const translate = useTranslate();\n    const { isSubmitSuccessful, isSubmitting, dirtyFields } = useFormState(\n        control ? { control } : undefined\n    );\n    const isDirty = Object.keys(dirtyFields).length > 0;\n    const initialLocation = useRef(formRootPathname || location.pathname);\n\n    useEffect(() => {\n        if (!enable || !isDirty) return;\n        if (!navigator.block) {\n            if (process.env.NODE_ENV !== 'production') {\n                console.warn(\n                    'warnWhenUnsavedChanged is not compatible with react-router >= 6.4. If you need this feature, please downgrade react-router to 6.3.0'\n                );\n            }\n            return;\n        }\n\n        let unblock = navigator.block((tx: Transition) => {\n            const newLocationIsInsideCurrentLocation = tx.location.pathname.startsWith(\n                initialLocation.current\n            );\n            const newLocationIsShowView = tx.location.pathname.startsWith(\n                `${initialLocation.current}/show`\n            );\n            const newLocationIsInsideForm =\n                newLocationIsInsideCurrentLocation && !newLocationIsShowView;\n\n            if (\n                !isSubmitting &&\n                (newLocationIsInsideForm ||\n                    isSubmitSuccessful ||\n                    window.confirm(translate('ra.message.unsaved_changes')))\n            ) {\n                unblock();\n                tx.retry();\n            }\n        });\n\n        return unblock;\n    }, [\n        enable,\n        location,\n        navigator,\n        isDirty,\n        isSubmitting,\n        isSubmitSuccessful,\n        translate,\n    ]);\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}