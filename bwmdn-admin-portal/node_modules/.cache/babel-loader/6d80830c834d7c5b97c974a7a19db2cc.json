{"ast":null,"code":"import { useCallback } from 'react';\nimport useAuthProvider, { defaultAuthParams } from './useAuthProvider';\nimport useLogout from './useLogout';\nimport { useNotify } from '../notification';\nimport { useBasename } from '../routing';\nimport { removeDoubleSlashes } from '../routing/useCreatePath';\n/**\n * Get a callback for calling the authProvider.checkAuth() method.\n * In case of rejection, redirects to the login page, displays a notification,\n * and throws an error.\n *\n * This is a low level hook. See those more specialized hooks\n * for common authentication tasks, based on useCheckAuth.\n *\n * @see useAuthenticated\n * @see useAuthState\n *\n * @returns {Function} checkAuth callback\n *\n * @example\n *\n * import { useCheckAuth } from 'react-admin';\n *\n * const MyProtectedPage = () => {\n *     const checkAuth = useCheckAuth();\n *     useEffect(() => {\n *         checkAuth().catch(() => {});\n *     }, []);\n *     return <p>Private content: EZAEZEZAET</p>\n * } // tip: use useAuthenticated() hook instead\n *\n * const MyPage = () => {\n *     const checkAuth = useCheckAuth();\n *     const [authenticated, setAuthenticated] = useState(true); // optimistic auth\n *     useEffect(() => {\n *         checkAuth({}, false)\n *              .then(() => setAuthenticated(true))\n *              .catch(() => setAuthenticated(false));\n *     }, []);\n *     return authenticated ? <Bar /> : <BarNotAuthenticated />;\n * } // tip: use useAuthState() hook instead\n */\nexport var useCheckAuth = function () {\n  var authProvider = useAuthProvider();\n  var notify = useNotify();\n  var logout = useLogout();\n  var basename = useBasename();\n  var loginUrl = removeDoubleSlashes(\"\".concat(basename, \"/\").concat(defaultAuthParams.loginUrl));\n  var checkAuth = useCallback(function (params, logoutOnFailure, redirectTo, disableNotification) {\n    if (params === void 0) {\n      params = {};\n    }\n    if (logoutOnFailure === void 0) {\n      logoutOnFailure = true;\n    }\n    if (redirectTo === void 0) {\n      redirectTo = loginUrl;\n    }\n    if (disableNotification === void 0) {\n      disableNotification = false;\n    }\n    return authProvider.checkAuth(params).catch(function (error) {\n      if (logoutOnFailure) {\n        logout({}, error && error.redirectTo != null ? error.redirectTo : redirectTo);\n        var shouldSkipNotify = disableNotification || error && error.message === false;\n        !shouldSkipNotify && notify(getErrorMessage(error, 'ra.auth.auth_check_error'), {\n          type: 'warning'\n        });\n      }\n      throw error;\n    });\n  }, [authProvider, logout, notify, loginUrl]);\n  return authProvider ? checkAuth : checkAuthWithoutAuthProvider;\n};\nvar checkAuthWithoutAuthProvider = function () {\n  return Promise.resolve();\n};\nvar getErrorMessage = function (error, defaultMessage) {\n  return typeof error === 'string' ? error : typeof error === 'undefined' || !error.message ? defaultMessage : error.message;\n};","map":{"version":3,"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AAEnC,OAAOC,eAAe,IAAIC,iBAAiB,QAAQ,mBAAmB;AACtE,OAAOC,SAAS,MAAM,aAAa;AACnC,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,WAAW,QAAQ,YAAY;AACxC,SAASC,mBAAmB,QAAQ,0BAA0B;AAE9D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA,OAAO,IAAMC,YAAY,GAAG;EACxB,IAAMC,YAAY,GAAGP,eAAe,EAAE;EACtC,IAAMQ,MAAM,GAAGL,SAAS,EAAE;EAC1B,IAAMM,MAAM,GAAGP,SAAS,EAAE;EAC1B,IAAMQ,QAAQ,GAAGN,WAAW,EAAE;EAC9B,IAAMO,QAAQ,GAAGN,mBAAmB,CAChC,UAAGK,QAAQ,cAAIT,iBAAiB,CAACU,QAAQ,CAAE,CAC9C;EAED,IAAMC,SAAS,GAAGb,WAAW,CACzB,UACIc,MAAgB,EAChBC,eAAsB,EACtBC,UAAqB,EACrBC,mBAA2B;IAH3B;MAAAH,WAAgB;IAAA;IAChB;MAAAC,sBAAsB;IAAA;IACtB;MAAAC,qBAAqB;IAAA;IACrB;MAAAC,2BAA2B;IAAA;IAE3B,mBAAY,CAACJ,SAAS,CAACC,MAAM,CAAC,CAACI,KAAK,CAAC,eAAK;MACtC,IAAIH,eAAe,EAAE;QACjBL,MAAM,CACF,EAAE,EACFS,KAAK,IAAIA,KAAK,CAACH,UAAU,IAAI,IAAI,GAC3BG,KAAK,CAACH,UAAU,GAChBA,UAAU,CACnB;QACD,IAAMI,gBAAgB,GAClBH,mBAAmB,IAClBE,KAAK,IAAIA,KAAK,CAACE,OAAO,KAAK,KAAM;QACtC,CAACD,gBAAgB,IACbX,MAAM,CACFa,eAAe,CAACH,KAAK,EAAE,0BAA0B,CAAC,EAClD;UAAEI,IAAI,EAAE;QAAS,CAAE,CACtB;;MAET,MAAMJ,KAAK;IACf,CAAC,CAAC;EAlBF,CAkBE,EACN,CAACX,YAAY,EAAEE,MAAM,EAAED,MAAM,EAAEG,QAAQ,CAAC,CAC3C;EAED,OAAOJ,YAAY,GAAGK,SAAS,GAAGW,4BAA4B;AAClE,CAAC;AAED,IAAMA,4BAA4B,GAAG;EAAM,cAAO,CAACC,OAAO,EAAE;AAAjB,CAAiB;AAqB5D,IAAMH,eAAe,GAAG,UAACH,KAAK,EAAEO,cAAc;EAC1C,cAAOP,KAAK,KAAK,QAAQ,GACnBA,KAAK,GACL,OAAOA,KAAK,KAAK,WAAW,IAAI,CAACA,KAAK,CAACE,OAAO,GAC9CK,cAAc,GACdP,KAAK,CAACE,OAAO;AAJnB,CAImB","names":["useCallback","useAuthProvider","defaultAuthParams","useLogout","useNotify","useBasename","removeDoubleSlashes","useCheckAuth","authProvider","notify","logout","basename","loginUrl","checkAuth","params","logoutOnFailure","redirectTo","disableNotification","catch","error","shouldSkipNotify","message","getErrorMessage","type","checkAuthWithoutAuthProvider","resolve","defaultMessage"],"sourceRoot":"","sources":["../../../src/auth/useCheckAuth.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}