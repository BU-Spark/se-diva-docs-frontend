{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport React, { isValidElement, cloneElement, createElement, useState, useEffect, useCallback, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { TableCell, TableRow, Checkbox } from '@mui/material';\nimport { RecordContextProvider, shallowEqual, useExpanded, useResourceContext, useTranslate, useCreatePath, useRecordContext } from 'ra-core';\nimport { useNavigate } from 'react-router-dom';\nimport DatagridCell from './DatagridCell';\nimport ExpandRowButton from './ExpandRowButton';\nimport { DatagridClasses } from './useDatagridStyles';\nimport { useDatagridContext } from './useDatagridContext';\nvar computeNbColumns = function (expand, children, hasBulkActions) {\n  return expand ? 1 + (\n  // show expand button\n  hasBulkActions ? 1 : 0) +\n  // checkbox column\n  React.Children.toArray(children).filter(function (child) {\n    return !!child;\n  }).length // non-null children\n  : 0;\n}; // we don't need to compute columns if there is no expand panel;\nvar DatagridRow = React.forwardRef(function (props, ref) {\n  var _a, _b;\n  var children = props.children,\n    className = props.className,\n    expand = props.expand,\n    hasBulkActions = props.hasBulkActions,\n    hover = props.hover,\n    id = props.id,\n    onToggleItem = props.onToggleItem,\n    recordOverride = props.record,\n    rowClick = props.rowClick,\n    selected = props.selected,\n    style = props.style,\n    selectable = props.selectable,\n    rest = __rest(props, [\"children\", \"className\", \"expand\", \"hasBulkActions\", \"hover\", \"id\", \"onToggleItem\", \"record\", \"rowClick\", \"selected\", \"style\", \"selectable\"]);\n  var context = useDatagridContext();\n  var translate = useTranslate();\n  var record = useRecordContext(props);\n  var expandable = (!context || !context.isRowExpandable || context.isRowExpandable(record)) && expand;\n  var resource = useResourceContext(props);\n  var createPath = useCreatePath();\n  var _c = useExpanded(resource, id, context && context.expandSingle),\n    expanded = _c[0],\n    toggleExpanded = _c[1];\n  var _d = useState(function () {\n      return computeNbColumns(expandable, children, hasBulkActions);\n    }),\n    nbColumns = _d[0],\n    setNbColumns = _d[1];\n  useEffect(function () {\n    // Fields can be hidden dynamically based on permissions;\n    // The expand panel must span over the remaining columns\n    // So we must recompute the number of columns to span on\n    var newNbColumns = computeNbColumns(expandable, children, hasBulkActions);\n    if (newNbColumns !== nbColumns) {\n      setNbColumns(newNbColumns);\n    }\n  }, [expandable, nbColumns, children, hasBulkActions]);\n  var navigate = useNavigate();\n  var handleToggleExpand = useCallback(function (event) {\n    toggleExpanded();\n    event.stopPropagation();\n  }, [toggleExpanded]);\n  var handleToggleSelection = useCallback(function (event) {\n    if (!selectable) return;\n    onToggleItem(id, event);\n    event.stopPropagation();\n  }, [id, onToggleItem, selectable]);\n  var handleClick = useCallback(function (event) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var type, _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            event.persist();\n            if (!(typeof rowClick === 'function')) return [3 /*break*/, 2];\n            return [4 /*yield*/, rowClick(id, resource, record)];\n          case 1:\n            _a = _b.sent();\n            return [3 /*break*/, 3];\n          case 2:\n            _a = rowClick;\n            _b.label = 3;\n          case 3:\n            type = _a;\n            if (type === false || type == null) {\n              return [2 /*return*/];\n            }\n\n            if (['edit', 'show'].includes(type)) {\n              navigate(createPath({\n                resource: resource,\n                id: id,\n                type: type\n              }));\n              return [2 /*return*/];\n            }\n\n            if (type === 'expand') {\n              handleToggleExpand(event);\n              return [2 /*return*/];\n            }\n\n            if (type === 'toggleSelection') {\n              handleToggleSelection(event);\n              return [2 /*return*/];\n            }\n\n            navigate(type);\n            return [2 /*return*/];\n        }\n      });\n    });\n  }, [rowClick, id, resource, record, navigate, createPath, handleToggleExpand, handleToggleSelection]);\n  return React.createElement(RecordContextProvider, {\n    value: record\n  }, React.createElement(TableRow, __assign({\n    ref: ref,\n    className: clsx(className, (_a = {}, _a[DatagridClasses.expandable] = expandable, _a[DatagridClasses.selectable] = selectable, _a[DatagridClasses.clickableRow] = typeof rowClick === 'function' ? true : rowClick, _a)),\n    key: id,\n    style: style,\n    hover: hover,\n    onClick: handleClick\n  }, rest), expand && React.createElement(TableCell, {\n    padding: \"none\",\n    className: DatagridClasses.expandIconCell\n  }, expandable && React.createElement(ExpandRowButton, {\n    className: clsx(DatagridClasses.expandIcon, (_b = {}, _b[DatagridClasses.expanded] = expanded, _b)),\n    expanded: expanded,\n    onClick: handleToggleExpand,\n    expandContentId: \"\".concat(id, \"-expand\")\n  })), hasBulkActions && React.createElement(TableCell, {\n    padding: \"checkbox\"\n  }, selectable && React.createElement(Checkbox, {\n    \"aria-label\": translate('ra.action.select_row', {\n      _: 'Select this row'\n    }),\n    color: \"primary\",\n    className: \"select-item \".concat(DatagridClasses.checkbox),\n    checked: selected,\n    onClick: handleToggleSelection\n  })), React.Children.map(children, function (field, index) {\n    return isValidElement(field) ? React.createElement(DatagridCell, __assign({\n      key: \"\".concat(id, \"-\").concat(field.props.source || index),\n      className: clsx(\"column-\".concat(field.props.source), DatagridClasses.rowCell),\n      record: record\n    }, {\n      field: field,\n      resource: resource\n    })) : null;\n  })), expandable && expanded && React.createElement(TableRow, {\n    key: \"\".concat(id, \"-expand\"),\n    id: \"\".concat(id, \"-expand\"),\n    className: DatagridClasses.expandedPanel\n  }, React.createElement(TableCell, {\n    colSpan: nbColumns\n  }, isValidElement(expand) ? cloneElement(expand, {\n    // @ts-ignore\n    record: record,\n    resource: resource,\n    id: String(id)\n  }) : createElement(expand, {\n    record: record,\n    resource: resource,\n    id: String(id)\n  }))));\n});\nDatagridRow.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  // @ts-ignore\n  expand: PropTypes.oneOfType([PropTypes.element, PropTypes.elementType]),\n  hasBulkActions: PropTypes.bool.isRequired,\n  hover: PropTypes.bool,\n  id: PropTypes.any,\n  onToggleItem: PropTypes.func,\n  // @ts-ignore\n  record: PropTypes.object,\n  resource: PropTypes.string,\n  // @ts-ignore\n  rowClick: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  selected: PropTypes.bool,\n  style: PropTypes.object,\n  selectable: PropTypes.bool\n};\nDatagridRow.defaultProps = {\n  hasBulkActions: false,\n  hover: true,\n  selected: false,\n  selectable: true\n};\nvar areEqual = function (prevProps, nextProps) {\n  var _1 = prevProps.children,\n    _2 = prevProps.expand,\n    prevPropsWithoutChildren = __rest(prevProps, [\"children\", \"expand\"]);\n  var _3 = nextProps.children,\n    _4 = nextProps.expand,\n    nextPropsWithoutChildren = __rest(nextProps, [\"children\", \"expand\"]);\n  return shallowEqual(prevPropsWithoutChildren, nextPropsWithoutChildren);\n};\nexport var PureDatagridRow = memo(DatagridRow, areEqual);\nPureDatagridRow.displayName = 'PureDatagridRow';\nexport default DatagridRow;","map":{"version":3,"mappings":"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","names":["React","isValidElement","cloneElement","createElement","useState","useEffect","useCallback","memo","PropTypes","clsx","TableCell","TableRow","Checkbox","RecordContextProvider","shallowEqual","useExpanded","useResourceContext","useTranslate","useCreatePath","useRecordContext","useNavigate","DatagridCell","ExpandRowButton","DatagridClasses","useDatagridContext","computeNbColumns","expand","children","hasBulkActions","Children","toArray","filter","child","length","DatagridRow","forwardRef","props","ref","className","hover","id","onToggleItem","recordOverride","rowClick","selected","style","selectable","rest","context","translate","record","expandable","isRowExpandable","resource","createPath","expandSingle","expanded","toggleExpanded","nbColumns","setNbColumns","newNbColumns","navigate","handleToggleExpand","event","stopPropagation","handleToggleSelection","handleClick","persist","_a","type","includes","value","clickableRow","key","onClick","padding","expandIconCell","expandIcon","_b","expandContentId","_","color","checkbox","checked","map","field","index","source","rowCell","expandedPanel","colSpan","String","propTypes","node","string","oneOfType","element","elementType","bool","isRequired","any","func","object","defaultProps","areEqual","prevProps","nextProps","_1","_2","prevPropsWithoutChildren","_3","_4","nextPropsWithoutChildren","PureDatagridRow","displayName"],"sources":["/Users/paigedeveau/Desktop/se-diva-docs-frontend/bwmdn-admin-portal/node_modules/ra-ui-materialui/src/list/datagrid/DatagridRow.tsx"],"sourcesContent":["import React, {\n    isValidElement,\n    cloneElement,\n    createElement,\n    useState,\n    useEffect,\n    useCallback,\n    memo,\n    FC,\n    ReactElement,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { TableCell, TableRow, TableRowProps, Checkbox } from '@mui/material';\nimport {\n    Identifier,\n    RaRecord,\n    RecordContextProvider,\n    shallowEqual,\n    useExpanded,\n    useResourceContext,\n    useTranslate,\n    useCreatePath,\n    useRecordContext,\n} from 'ra-core';\nimport { useNavigate } from 'react-router-dom';\n\nimport DatagridCell from './DatagridCell';\nimport ExpandRowButton from './ExpandRowButton';\nimport { DatagridClasses } from './useDatagridStyles';\nimport { useDatagridContext } from './useDatagridContext';\n\nconst computeNbColumns = (expand, children, hasBulkActions) =>\n    expand\n        ? 1 + // show expand button\n          (hasBulkActions ? 1 : 0) + // checkbox column\n          React.Children.toArray(children).filter(child => !!child).length // non-null children\n        : 0; // we don't need to compute columns if there is no expand panel;\n\nconst DatagridRow: FC<DatagridRowProps> = React.forwardRef((props, ref) => {\n    const {\n        children,\n        className,\n        expand,\n        hasBulkActions,\n        hover,\n        id,\n        onToggleItem,\n        record: recordOverride,\n        rowClick,\n        selected,\n        style,\n        selectable,\n        ...rest\n    } = props;\n\n    const context = useDatagridContext();\n    const translate = useTranslate();\n    const record = useRecordContext(props);\n    const expandable =\n        (!context ||\n            !context.isRowExpandable ||\n            context.isRowExpandable(record)) &&\n        expand;\n    const resource = useResourceContext(props);\n    const createPath = useCreatePath();\n    const [expanded, toggleExpanded] = useExpanded(\n        resource,\n        id,\n        context && context.expandSingle\n    );\n    const [nbColumns, setNbColumns] = useState(() =>\n        computeNbColumns(expandable, children, hasBulkActions)\n    );\n    useEffect(() => {\n        // Fields can be hidden dynamically based on permissions;\n        // The expand panel must span over the remaining columns\n        // So we must recompute the number of columns to span on\n        const newNbColumns = computeNbColumns(\n            expandable,\n            children,\n            hasBulkActions\n        );\n        if (newNbColumns !== nbColumns) {\n            setNbColumns(newNbColumns);\n        }\n    }, [expandable, nbColumns, children, hasBulkActions]);\n\n    const navigate = useNavigate();\n\n    const handleToggleExpand = useCallback(\n        event => {\n            toggleExpanded();\n            event.stopPropagation();\n        },\n        [toggleExpanded]\n    );\n    const handleToggleSelection = useCallback(\n        event => {\n            if (!selectable) return;\n            onToggleItem(id, event);\n            event.stopPropagation();\n        },\n        [id, onToggleItem, selectable]\n    );\n    const handleClick = useCallback(\n        async event => {\n            event.persist();\n            const type =\n                typeof rowClick === 'function'\n                    ? await rowClick(id, resource, record)\n                    : rowClick;\n            if (type === false || type == null) {\n                return;\n            }\n            if (['edit', 'show'].includes(type)) {\n                navigate(createPath({ resource, id, type }));\n                return;\n            }\n            if (type === 'expand') {\n                handleToggleExpand(event);\n                return;\n            }\n            if (type === 'toggleSelection') {\n                handleToggleSelection(event);\n                return;\n            }\n            navigate(type);\n        },\n        [\n            rowClick,\n            id,\n            resource,\n            record,\n            navigate,\n            createPath,\n            handleToggleExpand,\n            handleToggleSelection,\n        ]\n    );\n\n    return (\n        <RecordContextProvider value={record}>\n            <TableRow\n                ref={ref}\n                className={clsx(className, {\n                    [DatagridClasses.expandable]: expandable,\n                    [DatagridClasses.selectable]: selectable,\n                    [DatagridClasses.clickableRow]:\n                        typeof rowClick === 'function' ? true : rowClick,\n                })}\n                key={id}\n                style={style}\n                hover={hover}\n                onClick={handleClick}\n                {...rest}\n            >\n                {expand && (\n                    <TableCell\n                        padding=\"none\"\n                        className={DatagridClasses.expandIconCell}\n                    >\n                        {expandable && (\n                            <ExpandRowButton\n                                className={clsx(DatagridClasses.expandIcon, {\n                                    [DatagridClasses.expanded]: expanded,\n                                })}\n                                expanded={expanded}\n                                onClick={handleToggleExpand}\n                                expandContentId={`${id}-expand`}\n                            />\n                        )}\n                    </TableCell>\n                )}\n                {hasBulkActions && (\n                    <TableCell padding=\"checkbox\">\n                        {selectable && (\n                            <Checkbox\n                                aria-label={translate('ra.action.select_row', {\n                                    _: 'Select this row',\n                                })}\n                                color=\"primary\"\n                                className={`select-item ${DatagridClasses.checkbox}`}\n                                checked={selected}\n                                onClick={handleToggleSelection}\n                            />\n                        )}\n                    </TableCell>\n                )}\n                {React.Children.map(children, (field, index) =>\n                    isValidElement(field) ? (\n                        <DatagridCell\n                            key={`${id}-${\n                                (field.props as any).source || index\n                            }`}\n                            className={clsx(\n                                `column-${(field.props as any).source}`,\n                                DatagridClasses.rowCell\n                            )}\n                            record={record}\n                            {...{ field, resource }}\n                        />\n                    ) : null\n                )}\n            </TableRow>\n            {expandable && expanded && (\n                <TableRow\n                    key={`${id}-expand`}\n                    id={`${id}-expand`}\n                    className={DatagridClasses.expandedPanel}\n                >\n                    <TableCell colSpan={nbColumns}>\n                        {isValidElement(expand)\n                            ? cloneElement(expand, {\n                                  // @ts-ignore\n                                  record,\n                                  resource,\n                                  id: String(id),\n                              })\n                            : createElement(expand, {\n                                  record,\n                                  resource,\n                                  id: String(id),\n                              })}\n                    </TableCell>\n                </TableRow>\n            )}\n        </RecordContextProvider>\n    );\n});\n\nDatagridRow.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    // @ts-ignore\n    expand: PropTypes.oneOfType([PropTypes.element, PropTypes.elementType]),\n    hasBulkActions: PropTypes.bool.isRequired,\n    hover: PropTypes.bool,\n    id: PropTypes.any,\n    onToggleItem: PropTypes.func,\n    // @ts-ignore\n    record: PropTypes.object,\n    resource: PropTypes.string,\n    // @ts-ignore\n    rowClick: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n    selected: PropTypes.bool,\n    style: PropTypes.object,\n    selectable: PropTypes.bool,\n};\n\nDatagridRow.defaultProps = {\n    hasBulkActions: false,\n    hover: true,\n    selected: false,\n    selectable: true,\n};\n\nexport interface DatagridRowProps\n    extends Omit<TableRowProps, 'id' | 'classes'> {\n    className?: string;\n    expand?:\n        | ReactElement\n        | FC<{\n              id: Identifier;\n              record: RaRecord;\n              resource: string;\n          }>;\n    hasBulkActions?: boolean;\n    hover?: boolean;\n    id?: Identifier;\n    onToggleItem?: (\n        id: Identifier,\n        event: React.TouchEvent | React.MouseEvent\n    ) => void;\n    record?: RaRecord;\n    resource?: string;\n    rowClick?: RowClickFunction | string | false;\n    selected?: boolean;\n    style?: any;\n    selectable?: boolean;\n}\n\nexport type RowClickFunction = (\n    id: Identifier,\n    resource: string,\n    record: RaRecord\n) => string | false | Promise<string | false>;\n\nconst areEqual = (prevProps, nextProps) => {\n    const { children: _1, expand: _2, ...prevPropsWithoutChildren } = prevProps;\n    const { children: _3, expand: _4, ...nextPropsWithoutChildren } = nextProps;\n    return shallowEqual(prevPropsWithoutChildren, nextPropsWithoutChildren);\n};\n\nexport const PureDatagridRow = memo(DatagridRow, areEqual);\n\nPureDatagridRow.displayName = 'PureDatagridRow';\n\nexport default DatagridRow;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}