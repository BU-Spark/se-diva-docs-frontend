{"ast":null,"code":"import { useCallback } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { useNotificationContext } from '../notification';\nimport { useBasename } from '../routing';\nimport useAuthProvider, { defaultAuthParams } from './useAuthProvider';\nimport { removeDoubleSlashes } from '../routing/useCreatePath';\n/**\n * Get a callback for calling the authProvider.login() method\n * and redirect to the previous authenticated page (or the home page) on success.\n *\n * @see useAuthProvider\n *\n * @returns {Function} login callback\n *\n * @example\n *\n * import { useLogin } from 'react-admin';\n *\n * const LoginButton = () => {\n *     const [loading, setLoading] = useState(false);\n *     const login = useLogin();\n *     const handleClick = {\n *         setLoading(true);\n *         login({ username: 'john', password: 'p@ssw0rd' }, '/posts')\n *             .then(() => setLoading(false));\n *     }\n *     return <button onClick={handleClick}>Login</button>;\n * }\n */\nvar useLogin = function () {\n  var authProvider = useAuthProvider();\n  var location = useLocation();\n  var locationState = location.state;\n  var navigate = useNavigate();\n  var basename = useBasename();\n  var resetNotifications = useNotificationContext().resetNotifications;\n  var nextPathName = locationState && locationState.nextPathname;\n  var nextSearch = locationState && locationState.nextSearch;\n  var afterLoginUrl = removeDoubleSlashes(\"\".concat(basename, \"/\").concat(defaultAuthParams.afterLoginUrl));\n  var login = useCallback(function (params, pathName) {\n    if (params === void 0) {\n      params = {};\n    }\n    return authProvider.login(params).then(function (ret) {\n      resetNotifications();\n      if (ret && ret.hasOwnProperty('redirectTo')) {\n        if (ret) {\n          navigate(ret.redirectTo);\n        }\n      } else {\n        var redirectUrl = pathName ? pathName : nextPathName + nextSearch || afterLoginUrl;\n        navigate(redirectUrl);\n      }\n      return ret;\n    });\n  }, [authProvider, navigate, nextPathName, nextSearch, resetNotifications, afterLoginUrl]);\n  var loginWithoutProvider = useCallback(function (_, __) {\n    resetNotifications();\n    navigate(afterLoginUrl);\n    return Promise.resolve();\n  }, [navigate, resetNotifications, afterLoginUrl]);\n  return authProvider ? login : loginWithoutProvider;\n};\nexport default useLogin;","map":{"version":3,"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,SAASC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AAE3D,SAASC,sBAAsB,QAAQ,iBAAiB;AACxD,SAASC,WAAW,QAAQ,YAAY;AACxC,OAAOC,eAAe,IAAIC,iBAAiB,QAAQ,mBAAmB;AACtE,SAASC,mBAAmB,QAAQ,0BAA0B;AAE9D;;;;;;;;;;;;;;;;;;;;;;;AAuBA,IAAMC,QAAQ,GAAG;EACb,IAAMC,YAAY,GAAGJ,eAAe,EAAE;EACtC,IAAMK,QAAQ,GAAGT,WAAW,EAAE;EAC9B,IAAMU,aAAa,GAAGD,QAAQ,CAACE,KAAY;EAC3C,IAAMC,QAAQ,GAAGX,WAAW,EAAE;EAC9B,IAAMY,QAAQ,GAAGV,WAAW,EAAE;EACtB,sBAAkB,GAAKD,sBAAsB,EAAE,mBAA7B;EAC1B,IAAMY,YAAY,GAAGJ,aAAa,IAAIA,aAAa,CAACK,YAAY;EAChE,IAAMC,UAAU,GAAGN,aAAa,IAAIA,aAAa,CAACM,UAAU;EAC5D,IAAMC,aAAa,GAAGX,mBAAmB,CACrC,UAAGO,QAAQ,cAAIR,iBAAiB,CAACY,aAAa,CAAE,CACnD;EAED,IAAMC,KAAK,GAAGnB,WAAW,CACrB,UAACoB,MAAgB,EAAEC,QAAQ;IAA1B;MAAAD,WAAgB;IAAA;IACb,mBAAY,CAACD,KAAK,CAACC,MAAM,CAAC,CAACE,IAAI,CAAC,aAAG;MAC/BC,kBAAkB,EAAE;MACpB,IAAIC,GAAG,IAAIA,GAAG,CAACC,cAAc,CAAC,YAAY,CAAC,EAAE;QACzC,IAAID,GAAG,EAAE;UACLX,QAAQ,CAACW,GAAG,CAACE,UAAU,CAAC;;OAE/B,MAAM;QACH,IAAMC,WAAW,GAAGN,QAAQ,GACtBA,QAAQ,GACRN,YAAY,GAAGE,UAAU,IAAIC,aAAa;QAChDL,QAAQ,CAACc,WAAW,CAAC;;MAEzB,OAAOH,GAAG;IACd,CAAC,CAAC;EAbF,CAaE,EACN,CACIf,YAAY,EACZI,QAAQ,EACRE,YAAY,EACZE,UAAU,EACVM,kBAAkB,EAClBL,aAAa,CAChB,CACJ;EAED,IAAMU,oBAAoB,GAAG5B,WAAW,CACpC,UAAC6B,CAAC,EAAEC,EAAE;IACFP,kBAAkB,EAAE;IACpBV,QAAQ,CAACK,aAAa,CAAC;IACvB,OAAOa,OAAO,CAACC,OAAO,EAAE;EAC5B,CAAC,EACD,CAACnB,QAAQ,EAAEU,kBAAkB,EAAEL,aAAa,CAAC,CAChD;EAED,OAAOT,YAAY,GAAGU,KAAK,GAAGS,oBAAoB;AACtD,CAAC;AAYD,eAAepB,QAAQ","names":["useCallback","useLocation","useNavigate","useNotificationContext","useBasename","useAuthProvider","defaultAuthParams","removeDoubleSlashes","useLogin","authProvider","location","locationState","state","navigate","basename","nextPathName","nextPathname","nextSearch","afterLoginUrl","login","params","pathName","then","resetNotifications","ret","hasOwnProperty","redirectTo","redirectUrl","loginWithoutProvider","_","__","Promise","resolve"],"sourceRoot":"","sources":["../../../src/auth/useLogin.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}