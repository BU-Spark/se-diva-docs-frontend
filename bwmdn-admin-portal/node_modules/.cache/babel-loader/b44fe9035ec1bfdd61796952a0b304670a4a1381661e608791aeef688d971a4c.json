{"ast":null,"code":"import * as React from 'react';\nimport { CoreAdminContext } from './CoreAdminContext';\nimport { CoreAdminUI } from './CoreAdminUI';\n/**\n * Main admin component, entry point to the application.\n *\n * Initializes the various contexts (auth, data, i18n, router)\n * and defines the main routes.\n *\n * Expects a list of resources as children, or a function returning a list of\n * resources based on the permissions.\n *\n * @example\n *\n * // static list of resources\n *\n * import {\n *     CoreAdmin,\n *     Resource,\n *     ListGuesser,\n *     useDataProvider,\n * } from 'ra-core';\n *\n * const App = () => (\n *     <CoreAdmin dataProvider={myDataProvider}>\n *         <Resource name=\"posts\" list={ListGuesser} />\n *     </CoreAdmin>\n * );\n *\n * // dynamic list of resources based on permissions\n *\n * import {\n *     CoreAdmin,\n *     Resource,\n *     ListGuesser,\n *     useDataProvider,\n * } from 'ra-core';\n *\n * const App = () => (\n *     <CoreAdmin dataProvider={myDataProvider}>\n *         {permissions => [\n *             <Resource name=\"posts\" key=\"posts\" list={ListGuesser} />,\n *         ]}\n *     </CoreAdmin>\n * );\n *\n * // If you have to build a dynamic list of resources using a side effect,\n * // you can't use <CoreAdmin>. But as it delegates to sub components,\n * // it's relatively straightforward to replace it:\n *\n * import * as React from 'react';\n * import { useEffect, useState } from 'react';\n * import {\n *     CoreAdminContext,\n *     CoreAdminUI,\n *     Resource,\n *     ListGuesser,\n *     useDataProvider,\n * } from 'ra-core';\n *\n * const App = () => (\n *     <CoreAdminContext dataProvider={myDataProvider}>\n *         <UI />\n *     </CoreAdminContext>\n * );\n *\n * const UI = () => {\n *     const [resources, setResources] = useState([]);\n *     const dataProvider = useDataProvider();\n *     useEffect(() => {\n *         dataProvider.introspect().then(r => setResources(r));\n *     }, []);\n *\n *     return (\n *         <CoreAdminUI>\n *             {resources.map(resource => (\n *                 <Resource name={resource.name} key={resource.key} list={ListGuesser} />\n *             ))}\n *         </CoreAdminUI>\n *     );\n * };\n */\nexport var CoreAdmin = function (props) {\n  var authProvider = props.authProvider,\n    basename = props.basename,\n    catchAll = props.catchAll,\n    children = props.children,\n    dashboard = props.dashboard,\n    dataProvider = props.dataProvider,\n    disableTelemetry = props.disableTelemetry,\n    history = props.history,\n    i18nProvider = props.i18nProvider,\n    queryClient = props.queryClient,\n    layout = props.layout,\n    loading = props.loading,\n    loginPage = props.loginPage,\n    menu = props.menu,\n    // deprecated, use a custom layout instead\n    ready = props.ready,\n    requireAuth = props.requireAuth,\n    store = props.store,\n    _a = props.title,\n    title = _a === void 0 ? 'React Admin' : _a;\n  return React.createElement(CoreAdminContext, {\n    authProvider: authProvider,\n    basename: basename,\n    dataProvider: dataProvider,\n    i18nProvider: i18nProvider,\n    queryClient: queryClient,\n    history: history,\n    store: store\n  }, React.createElement(CoreAdminUI, {\n    layout: layout,\n    dashboard: dashboard,\n    disableTelemetry: disableTelemetry,\n    menu: menu,\n    catchAll: catchAll,\n    title: title,\n    loading: loading,\n    loginPage: loginPage,\n    requireAuth: requireAuth,\n    ready: ready\n  }, children));\n};","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,SAASC,gBAAgB,QAA+B,oBAAoB;AAC5E,SAASC,WAAW,QAA0B,eAAe;AAE7D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+EA,OAAO,IAAMC,SAAS,GAAG,UAACC,KAAqB;EAEvC,gBAAY,GAkBZA,KAAK,aAlBO;IACZC,QAAQ,GAiBRD,KAAK,SAjBG;IACRE,QAAQ,GAgBRF,KAAK,SAhBG;IACRG,QAAQ,GAeRH,KAAK,SAfG;IACRI,SAAS,GAcTJ,KAAK,UAdI;IACTK,YAAY,GAaZL,KAAK,aAbO;IACZM,gBAAgB,GAYhBN,KAAK,iBAZW;IAChBO,OAAO,GAWPP,KAAK,QAXE;IACPQ,YAAY,GAUZR,KAAK,aAVO;IACZS,WAAW,GASXT,KAAK,YATM;IACXU,MAAM,GAQNV,KAAK,OARC;IACNW,OAAO,GAOPX,KAAK,QAPE;IACPY,SAAS,GAMTZ,KAAK,UANI;IACTa,IAAI,GAKJb,KAAK,KALD;IAAE;IACNc,KAAK,GAILd,KAAK,MAJA;IACLe,WAAW,GAGXf,KAAK,YAHM;IACXgB,KAAK,GAELhB,KAAK,MAFA;IACLiB,KACAjB,KAAK,MADgB;IAArBkB,KAAK,mBAAG,aAAa;EAEzB,OACItB,oBAACC,gBAAgB;IACbsB,YAAY,EAAEA,YAAY;IAC1BlB,QAAQ,EAAEA,QAAQ;IAClBI,YAAY,EAAEA,YAAY;IAC1BG,YAAY,EAAEA,YAAY;IAC1BC,WAAW,EAAEA,WAAW;IACxBF,OAAO,EAAEA,OAAO;IAChBS,KAAK,EAAEA;EAAK,GAEZpB,oBAACE,WAAW;IACRY,MAAM,EAAEA,MAAM;IACdN,SAAS,EAAEA,SAAS;IACpBE,gBAAgB,EAAEA,gBAAgB;IAClCO,IAAI,EAAEA,IAAI;IACVX,QAAQ,EAAEA,QAAQ;IAClBgB,KAAK,EAAEA,KAAK;IACZP,OAAO,EAAEA,OAAO;IAChBC,SAAS,EAAEA,SAAS;IACpBG,WAAW,EAAEA,WAAW;IACxBD,KAAK,EAAEA;EAAK,GAEXX,QAAQ,CACC,CACC;AAE3B,CAAC","names":["React","CoreAdminContext","CoreAdminUI","CoreAdmin","props","basename","catchAll","children","dashboard","dataProvider","disableTelemetry","history","i18nProvider","queryClient","layout","loading","loginPage","menu","ready","requireAuth","store","_a","title","authProvider"],"sources":["/Users/paigedeveau/node_modules/ra-core/src/core/CoreAdmin.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { CoreAdminContext, CoreAdminContextProps } from './CoreAdminContext';\nimport { CoreAdminUI, CoreAdminUIProps } from './CoreAdminUI';\n\n/**\n * Main admin component, entry point to the application.\n *\n * Initializes the various contexts (auth, data, i18n, router)\n * and defines the main routes.\n *\n * Expects a list of resources as children, or a function returning a list of\n * resources based on the permissions.\n *\n * @example\n *\n * // static list of resources\n *\n * import {\n *     CoreAdmin,\n *     Resource,\n *     ListGuesser,\n *     useDataProvider,\n * } from 'ra-core';\n *\n * const App = () => (\n *     <CoreAdmin dataProvider={myDataProvider}>\n *         <Resource name=\"posts\" list={ListGuesser} />\n *     </CoreAdmin>\n * );\n *\n * // dynamic list of resources based on permissions\n *\n * import {\n *     CoreAdmin,\n *     Resource,\n *     ListGuesser,\n *     useDataProvider,\n * } from 'ra-core';\n *\n * const App = () => (\n *     <CoreAdmin dataProvider={myDataProvider}>\n *         {permissions => [\n *             <Resource name=\"posts\" key=\"posts\" list={ListGuesser} />,\n *         ]}\n *     </CoreAdmin>\n * );\n *\n * // If you have to build a dynamic list of resources using a side effect,\n * // you can't use <CoreAdmin>. But as it delegates to sub components,\n * // it's relatively straightforward to replace it:\n *\n * import * as React from 'react';\n * import { useEffect, useState } from 'react';\n * import {\n *     CoreAdminContext,\n *     CoreAdminUI,\n *     Resource,\n *     ListGuesser,\n *     useDataProvider,\n * } from 'ra-core';\n *\n * const App = () => (\n *     <CoreAdminContext dataProvider={myDataProvider}>\n *         <UI />\n *     </CoreAdminContext>\n * );\n *\n * const UI = () => {\n *     const [resources, setResources] = useState([]);\n *     const dataProvider = useDataProvider();\n *     useEffect(() => {\n *         dataProvider.introspect().then(r => setResources(r));\n *     }, []);\n *\n *     return (\n *         <CoreAdminUI>\n *             {resources.map(resource => (\n *                 <Resource name={resource.name} key={resource.key} list={ListGuesser} />\n *             ))}\n *         </CoreAdminUI>\n *     );\n * };\n */\nexport const CoreAdmin = (props: CoreAdminProps) => {\n    const {\n        authProvider,\n        basename,\n        catchAll,\n        children,\n        dashboard,\n        dataProvider,\n        disableTelemetry,\n        history,\n        i18nProvider,\n        queryClient,\n        layout,\n        loading,\n        loginPage,\n        menu, // deprecated, use a custom layout instead\n        ready,\n        requireAuth,\n        store,\n        title = 'React Admin',\n    } = props;\n    return (\n        <CoreAdminContext\n            authProvider={authProvider}\n            basename={basename}\n            dataProvider={dataProvider}\n            i18nProvider={i18nProvider}\n            queryClient={queryClient}\n            history={history}\n            store={store}\n        >\n            <CoreAdminUI\n                layout={layout}\n                dashboard={dashboard}\n                disableTelemetry={disableTelemetry}\n                menu={menu}\n                catchAll={catchAll}\n                title={title}\n                loading={loading}\n                loginPage={loginPage}\n                requireAuth={requireAuth}\n                ready={ready}\n            >\n                {children}\n            </CoreAdminUI>\n        </CoreAdminContext>\n    );\n};\n\nexport type CoreAdminProps = CoreAdminContextProps & CoreAdminUIProps;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}