{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { useResourceContext, usePreference, useStore, useTranslate } from 'ra-core';\nimport { Configurable } from '../../preferences';\nimport { Datagrid } from './Datagrid';\nimport { DatagridEditor } from './DatagridEditor';\n/**\n * A Datagrid that users can customize in configuration mode\n *\n * @example\n * import {\n *     List,\n *     DatagridConfigurable,\n *     TextField,\n * } from 'react-admin';\n *\n * export const PostList = () => (\n *     <List>\n *         <DatagridConfigurable>\n *             <TextField source=\"id\" />\n *             <TextField source=\"title\" />\n *             <TextField source=\"author\" />\n *             <TextField source=\"year\" />\n *         </DatagridConfigurable>\n *     </List>\n * );\n */\nexport var DatagridConfigurable = function (_a) {\n  var preferenceKey = _a.preferenceKey,\n    omit = _a.omit,\n    props = __rest(_a, [\"preferenceKey\", \"omit\"]);\n  if (props.optimized) {\n    throw new Error('DatagridConfigurable does not support the optimized prop');\n  }\n  var translate = useTranslate();\n  var resource = useResourceContext(props);\n  var finalPreferenceKey = preferenceKey || \"\".concat(resource, \".datagrid\");\n  var _b = useStore(\"preferences.\".concat(finalPreferenceKey, \".availableColumns\"), []),\n    availableColumns = _b[0],\n    setAvailableColumns = _b[1];\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  var _c = useStore(\"preferences.\".concat(finalPreferenceKey, \".omit\"), omit),\n    _ = _c[0],\n    setOmit = _c[1];\n  React.useEffect(function () {\n    // first render, or the preference have been cleared\n    var columns = React.Children.map(props.children, function (child, index) {\n      return React.isValidElement(child) ? {\n        index: String(index),\n        source: child.props.source,\n        label: child.props.source || child.props.label ? child.props.label : translate('ra.configurable.Datagrid.unlabeled', {\n          column: index,\n          _: \"Unlabeled column #%{column}\"\n        })\n      } : null;\n    }).filter(function (column) {\n      return column != null;\n    });\n    if (columns.length !== availableColumns.length) {\n      setAvailableColumns(columns);\n      setOmit(omit);\n    }\n  }, [availableColumns]); // eslint-disable-line react-hooks/exhaustive-deps\n  return React.createElement(Configurable, {\n    editor: React.createElement(DatagridEditor, null),\n    preferenceKey: finalPreferenceKey,\n    sx: {\n      display: 'block',\n      minHeight: 2\n    }\n  }, React.createElement(DatagridWithPreferences, __assign({}, props)));\n};\nDatagridConfigurable.propTypes = Datagrid.propTypes;\n/**\n * This Datagrid filters its children depending on preferences\n */\nvar DatagridWithPreferences = function (_a) {\n  var children = _a.children,\n    props = __rest(_a, [\"children\"]);\n  var availableColumns = usePreference('availableColumns', [])[0];\n  var omit = usePreference('omit', [])[0];\n  var columns = usePreference('columns', availableColumns.filter(function (column) {\n    return !(omit === null || omit === void 0 ? void 0 : omit.includes(column.source));\n  }).map(function (column) {\n    return column.index;\n  }))[0];\n  var childrenArray = React.Children.toArray(children);\n  return React.createElement(Datagrid, __assign({}, props), columns === undefined ? children : columns.map(function (index) {\n    return childrenArray[index];\n  }));\n};","map":{"version":3,"mappings":"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","names":["React","useResourceContext","usePreference","useStore","useTranslate","Configurable","Datagrid","DatagridEditor","DatagridConfigurable","_a","omit","props","optimized","Error","translate","resource","finalPreferenceKey","preferenceKey","availableColumns","setAvailableColumns","_","setOmit","useEffect","columns","Children","map","children","child","index","isValidElement","String","source","label","column","filter","length","editor","sx","display","minHeight","DatagridWithPreferences","propTypes","includes","childrenArray","toArray","undefined"],"sourceRoot":"","sources":["../../../../src/list/datagrid/DatagridConfigurable.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}