{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useCheckMinimumRequiredProps } from 'ra-core';\nimport { EditView } from './EditView';\nimport { EditBase } from 'ra-core';\n/**\n * Page component for the Edit view\n *\n * The `<Edit>` component renders the page title and actions,\n * fetches the record from the data provider.\n * It is not responsible for rendering the actual form -\n * that's the job of its child component (usually `<SimpleForm>`),\n * to which it passes the `record` as prop.\n *\n * The <Edit> component accepts the following props:\n *\n * - actions\n * - aside\n * - component\n * - title\n * - mutationMode\n * - mutationOptions\n *\n * @example\n *\n * // in src/posts.js\n * import * as React from \"react\";\n * import { Edit, SimpleForm, TextInput } from 'react-admin';\n *\n * export const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <TextInput source=\"title\" />\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * // in src/App.js\n * import * as React from \"react\";\n * import { Admin, Resource } from 'react-admin';\n *\n * import { PostEdit } from './posts';\n *\n * const App = () => (\n *     <Admin dataProvider={...}>\n *         <Resource name=\"posts\" edit={PostEdit} />\n *     </Admin>\n * );\n * export default App;\n */\nexport var Edit = function (props) {\n  useCheckMinimumRequiredProps('Edit', ['children'], props);\n  var resource = props.resource,\n    id = props.id,\n    mutationMode = props.mutationMode,\n    mutationOptions = props.mutationOptions,\n    queryOptions = props.queryOptions,\n    redirect = props.redirect,\n    transform = props.transform,\n    disableAuthentication = props.disableAuthentication,\n    rest = __rest(props, [\"resource\", \"id\", \"mutationMode\", \"mutationOptions\", \"queryOptions\", \"redirect\", \"transform\", \"disableAuthentication\"]);\n  return React.createElement(EditBase, {\n    resource: resource,\n    id: id,\n    mutationMode: mutationMode,\n    mutationOptions: mutationOptions,\n    queryOptions: queryOptions,\n    redirect: redirect,\n    transform: transform,\n    disableAuthentication: disableAuthentication\n  }, React.createElement(EditView, __assign({}, rest)));\n};\nEdit.propTypes = {\n  actions: PropTypes.oneOfType([PropTypes.element, PropTypes.bool]),\n  aside: PropTypes.element,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  disableAuthentication: PropTypes.bool,\n  hasCreate: PropTypes.bool,\n  hasEdit: PropTypes.bool,\n  hasShow: PropTypes.bool,\n  hasList: PropTypes.bool,\n  id: PropTypes.any,\n  mutationMode: PropTypes.oneOf(['pessimistic', 'optimistic', 'undoable']),\n  mutationOptions: PropTypes.object,\n  queryOptions: PropTypes.object,\n  redirect: PropTypes.oneOfType([PropTypes.string, PropTypes.bool, PropTypes.func]),\n  resource: PropTypes.string,\n  title: PropTypes.node,\n  transform: PropTypes.func,\n  sx: PropTypes.any\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,4BAA4B,QAAkB,SAAS;AAEhE,SAASC,QAAQ,QAAQ,YAAY;AACrC,SAASC,QAAQ,QAAQ,SAAS;AAElC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA,OAAO,IAAMC,IAAI,GAAG,UAChBC,KAAsD;EAEtDJ,4BAA4B,CAAC,MAAM,EAAE,CAAC,UAAU,CAAC,EAAEI,KAAK,CAAC;EAErD,YAAQ,GASRA,KAAK,SATG;IACRC,EAAE,GAQFD,KAAK,GARH;IACFE,YAAY,GAOZF,KAAK,aAPO;IACZG,eAAe,GAMfH,KAAK,gBANU;IACfI,YAAY,GAKZJ,KAAK,aALO;IACZK,QAAQ,GAIRL,KAAK,SAJG;IACRM,SAAS,GAGTN,KAAK,UAHI;IACTO,qBAAqB,GAErBP,KAAK,sBAFgB;IAClBQ,IAAI,UACPR,KAAK,EAVH,uHAUL,CADU;EAEX,OACIN,oBAACI,QAAQ;IACLW,QAAQ,EAAEA,QAAQ;IAClBR,EAAE,EAAEA,EAAE;IACNC,YAAY,EAAEA,YAAY;IAC1BC,eAAe,EAAEA,eAAe;IAChCC,YAAY,EAAEA,YAAY;IAC1BC,QAAQ,EAAEA,QAAQ;IAClBC,SAAS,EAAEA,SAAS;IACpBC,qBAAqB,EAAEA;EAAqB,GAE5Cb,oBAACG,QAAQ,eAAKW,IAAI,EAAI,CACf;AAEnB,CAAC;AAEDT,IAAI,CAACW,SAAS,GAAG;EACbC,OAAO,EAAEhB,SAAS,CAACiB,SAAS,CAAC,CAACjB,SAAS,CAACkB,OAAO,EAAElB,SAAS,CAACmB,IAAI,CAAC,CAAC;EACjEC,KAAK,EAAEpB,SAAS,CAACkB,OAAO;EACxBG,QAAQ,EAAErB,SAAS,CAACsB,IAAI;EACxBC,SAAS,EAAEvB,SAAS,CAACwB,MAAM;EAC3BZ,qBAAqB,EAAEZ,SAAS,CAACmB,IAAI;EACrCM,SAAS,EAAEzB,SAAS,CAACmB,IAAI;EACzBO,OAAO,EAAE1B,SAAS,CAACmB,IAAI;EACvBQ,OAAO,EAAE3B,SAAS,CAACmB,IAAI;EACvBS,OAAO,EAAE5B,SAAS,CAACmB,IAAI;EACvBb,EAAE,EAAEN,SAAS,CAAC6B,GAAG;EACjBtB,YAAY,EAAEP,SAAS,CAAC8B,KAAK,CAAC,CAAC,aAAa,EAAE,YAAY,EAAE,UAAU,CAAC,CAAC;EACxEtB,eAAe,EAAER,SAAS,CAAC+B,MAAM;EACjCtB,YAAY,EAAET,SAAS,CAAC+B,MAAM;EAC9BrB,QAAQ,EAAEV,SAAS,CAACiB,SAAS,CAAC,CAC1BjB,SAAS,CAACwB,MAAM,EAChBxB,SAAS,CAACmB,IAAI,EACdnB,SAAS,CAACgC,IAAI,CACjB,CAAC;EACFlB,QAAQ,EAAEd,SAAS,CAACwB,MAAM;EAC1BS,KAAK,EAAEjC,SAAS,CAACsB,IAAI;EACrBX,SAAS,EAAEX,SAAS,CAACgC,IAAI;EACzBE,EAAE,EAAElC,SAAS,CAAC6B;CACjB","names":["React","PropTypes","useCheckMinimumRequiredProps","EditView","EditBase","Edit","props","id","mutationMode","mutationOptions","queryOptions","redirect","transform","disableAuthentication","rest","resource","propTypes","actions","oneOfType","element","bool","aside","children","node","className","string","hasCreate","hasEdit","hasShow","hasList","any","oneOf","object","func","title","sx"],"sources":["/Users/paigedeveau/Desktop/se-diva-docs-frontend/bwmdn-admin-portal/node_modules/ra-ui-materialui/src/detail/Edit.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactNode } from 'react';\nimport PropTypes from 'prop-types';\nimport { useCheckMinimumRequiredProps, RaRecord } from 'ra-core';\nimport { EditProps } from '../types';\nimport { EditView } from './EditView';\nimport { EditBase } from 'ra-core';\n\n/**\n * Page component for the Edit view\n *\n * The `<Edit>` component renders the page title and actions,\n * fetches the record from the data provider.\n * It is not responsible for rendering the actual form -\n * that's the job of its child component (usually `<SimpleForm>`),\n * to which it passes the `record` as prop.\n *\n * The <Edit> component accepts the following props:\n *\n * - actions\n * - aside\n * - component\n * - title\n * - mutationMode\n * - mutationOptions\n *\n * @example\n *\n * // in src/posts.js\n * import * as React from \"react\";\n * import { Edit, SimpleForm, TextInput } from 'react-admin';\n *\n * export const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <TextInput source=\"title\" />\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * // in src/App.js\n * import * as React from \"react\";\n * import { Admin, Resource } from 'react-admin';\n *\n * import { PostEdit } from './posts';\n *\n * const App = () => (\n *     <Admin dataProvider={...}>\n *         <Resource name=\"posts\" edit={PostEdit} />\n *     </Admin>\n * );\n * export default App;\n */\nexport const Edit = <RecordType extends RaRecord = any>(\n    props: EditProps<RecordType> & { children: ReactNode }\n) => {\n    useCheckMinimumRequiredProps('Edit', ['children'], props);\n    const {\n        resource,\n        id,\n        mutationMode,\n        mutationOptions,\n        queryOptions,\n        redirect,\n        transform,\n        disableAuthentication,\n        ...rest\n    } = props;\n    return (\n        <EditBase\n            resource={resource}\n            id={id}\n            mutationMode={mutationMode}\n            mutationOptions={mutationOptions}\n            queryOptions={queryOptions}\n            redirect={redirect}\n            transform={transform}\n            disableAuthentication={disableAuthentication}\n        >\n            <EditView {...rest} />\n        </EditBase>\n    );\n};\n\nEdit.propTypes = {\n    actions: PropTypes.oneOfType([PropTypes.element, PropTypes.bool]),\n    aside: PropTypes.element,\n    children: PropTypes.node,\n    className: PropTypes.string,\n    disableAuthentication: PropTypes.bool,\n    hasCreate: PropTypes.bool,\n    hasEdit: PropTypes.bool,\n    hasShow: PropTypes.bool,\n    hasList: PropTypes.bool,\n    id: PropTypes.any,\n    mutationMode: PropTypes.oneOf(['pessimistic', 'optimistic', 'undoable']),\n    mutationOptions: PropTypes.object,\n    queryOptions: PropTypes.object,\n    redirect: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.bool,\n        PropTypes.func,\n    ]),\n    resource: PropTypes.string,\n    title: PropTypes.node,\n    transform: PropTypes.func,\n    sx: PropTypes.any,\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}