{"ast":null,"code":"import * as React from 'react';\nimport { isValidElement, useCallback } from 'react';\nimport get from 'lodash/get';\nimport { useTranslate } from '../i18n';\nimport { RecordContextProvider } from '../controller';\n/*\n * Returns helper functions for choices handling.\n *\n * @param optionText Either a string defining the property to use to get the choice text, a function or a React element\n * @param optionValue The property to use to get the choice value\n * @param translateChoice A boolean indicating whether to option text should be translated\n *\n * @returns An object with helper functions:\n * - getChoiceText: Returns the choice text or a React element\n * - getChoiceValue: Returns the choice value\n */\nexport var useChoices = function (_a) {\n  var _b = _a.optionText,\n    optionText = _b === void 0 ? 'name' : _b,\n    _c = _a.optionValue,\n    optionValue = _c === void 0 ? 'id' : _c,\n    _d = _a.disableValue,\n    disableValue = _d === void 0 ? 'disabled' : _d,\n    _e = _a.translateChoice,\n    translateChoice = _e === void 0 ? true : _e;\n  var translate = useTranslate();\n  var getChoiceText = useCallback(function (choice) {\n    if (isValidElement(optionText)) {\n      return React.createElement(RecordContextProvider, {\n        value: choice\n      }, optionText);\n    }\n    var choiceName = typeof optionText === 'function' ? optionText(choice) : get(choice, optionText);\n    return isValidElement(choiceName) ? choiceName : translateChoice ? translate(String(choiceName), {\n      _: choiceName\n    }) : String(choiceName);\n  }, [optionText, translate, translateChoice]);\n  var getChoiceValue = useCallback(function (choice) {\n    return get(choice, optionValue);\n  }, [optionValue]);\n  var getDisableValue = useCallback(function (choice) {\n    return get(choice, disableValue);\n  }, [disableValue]);\n  return {\n    getChoiceText: getChoiceText,\n    getChoiceValue: getChoiceValue,\n    getDisableValue: getDisableValue\n  };\n};","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAAuBC,cAAc,EAAEC,WAAW,QAAQ,OAAO;AACjE,OAAOC,GAAG,MAAM,YAAY;AAE5B,SAASC,YAAY,QAAQ,SAAS;AAEtC,SAASC,qBAAqB,QAAQ,eAAe;AAwBrD;;;;;;;;;;;AAWA,OAAO,IAAMC,UAAU,GAAG,UAACC,EAKP;MAJhBC,kBAAmB;IAAnBC,UAAU,mBAAG,MAAM;IACnBC,mBAAkB;IAAlBC,WAAW,mBAAG,IAAI;IAClBC,oBAAyB;IAAzBC,YAAY,mBAAG,UAAU;IACzBC,uBAAsB;IAAtBC,eAAe,mBAAG,IAAI;EAEtB,IAAMC,SAAS,GAAGZ,YAAY,EAAE;EAEhC,IAAMa,aAAa,GAAGf,WAAW,CAC7B,gBAAM;IACF,IAAID,cAAc,CAAkBQ,UAAU,CAAC,EAAE;MAC7C,OACIT,oBAACK,qBAAqB;QAACa,KAAK,EAAEC;MAAM,GAC/BV,UAAU,CACS;;IAGhC,IAAMW,UAAU,GACZ,OAAOX,UAAU,KAAK,UAAU,GAC1BA,UAAU,CAACU,MAAM,CAAC,GAClBhB,GAAG,CAACgB,MAAM,EAAEV,UAAU,CAAC;IAEjC,OAAOR,cAAc,CAACmB,UAAU,CAAC,GAC3BA,UAAU,GACVL,eAAe,GACfC,SAAS,CAACK,MAAM,CAACD,UAAU,CAAC,EAAE;MAAEE,CAAC,EAAEF;IAAU,CAAE,CAAC,GAChDC,MAAM,CAACD,UAAU,CAAC;EAC5B,CAAC,EACD,CAACX,UAAU,EAAEO,SAAS,EAAED,eAAe,CAAC,CAC3C;EAED,IAAMQ,cAAc,GAAGrB,WAAW,CAAC,gBAAM;IAAI,UAAG,CAACiB,MAAM,EAAER,WAAW,CAAC;EAAxB,CAAwB,EAAE,CACnEA,WAAW,CACd,CAAC;EAEF,IAAMa,eAAe,GAAGtB,WAAW,CAAC,gBAAM;IAAI,UAAG,CAACiB,MAAM,EAAEN,YAAY,CAAC;EAAzB,CAAyB,EAAE,CACrEA,YAAY,CACf,CAAC;EAEF,OAAO;IACHI,aAAa;IACbM,cAAc;IACdC,eAAe;GAClB;AACL,CAAC","names":["React","isValidElement","useCallback","get","useTranslate","RecordContextProvider","useChoices","_a","_b","optionText","_c","optionValue","_d","disableValue","_e","translateChoice","translate","getChoiceText","value","choice","choiceName","String","_","getChoiceValue","getDisableValue"],"sources":["/Users/paigedeveau/Desktop/se-diva-docs-frontend/bwmdn-admin-portal/node_modules/ra-core/src/form/useChoices.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactElement, isValidElement, useCallback } from 'react';\nimport get from 'lodash/get';\n\nimport { useTranslate } from '../i18n';\nimport { RaRecord } from '../types';\nimport { RecordContextProvider } from '../controller';\n\nexport type OptionTextElement = ReactElement<{\n    record: RaRecord;\n}>;\nexport type OptionTextFunc = (choice: any) => React.ReactNode;\nexport type OptionText = OptionTextElement | OptionTextFunc | string;\n\nexport interface ChoicesProps {\n    choices?: any[];\n    isFetching?: boolean;\n    isLoading?: boolean;\n    optionValue?: string;\n    optionText?: OptionText;\n    translateChoice?: boolean;\n}\n\nexport interface UseChoicesOptions {\n    optionValue?: string;\n    optionText?: OptionText;\n    disableValue?: string;\n    translateChoice?: boolean;\n}\n\n/*\n * Returns helper functions for choices handling.\n *\n * @param optionText Either a string defining the property to use to get the choice text, a function or a React element\n * @param optionValue The property to use to get the choice value\n * @param translateChoice A boolean indicating whether to option text should be translated\n *\n * @returns An object with helper functions:\n * - getChoiceText: Returns the choice text or a React element\n * - getChoiceValue: Returns the choice value\n */\nexport const useChoices = ({\n    optionText = 'name',\n    optionValue = 'id',\n    disableValue = 'disabled',\n    translateChoice = true,\n}: UseChoicesOptions) => {\n    const translate = useTranslate();\n\n    const getChoiceText = useCallback(\n        choice => {\n            if (isValidElement<{ record: any }>(optionText)) {\n                return (\n                    <RecordContextProvider value={choice}>\n                        {optionText}\n                    </RecordContextProvider>\n                );\n            }\n            const choiceName =\n                typeof optionText === 'function'\n                    ? optionText(choice)\n                    : get(choice, optionText);\n\n            return isValidElement(choiceName)\n                ? choiceName\n                : translateChoice\n                ? translate(String(choiceName), { _: choiceName })\n                : String(choiceName);\n        },\n        [optionText, translate, translateChoice]\n    );\n\n    const getChoiceValue = useCallback(choice => get(choice, optionValue), [\n        optionValue,\n    ]);\n\n    const getDisableValue = useCallback(choice => get(choice, disableValue), [\n        disableValue,\n    ]);\n\n    return {\n        getChoiceText,\n        getChoiceValue,\n        getDisableValue,\n    };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}