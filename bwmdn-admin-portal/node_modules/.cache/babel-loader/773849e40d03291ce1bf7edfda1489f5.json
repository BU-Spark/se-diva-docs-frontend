{"ast":null,"code":"import * as React from 'react';\nimport { memo } from 'react';\nimport { Button, Menu, MenuItem, Tooltip, IconButton, useMediaQuery } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport SortIcon from '@mui/icons-material/Sort';\nimport ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';\nimport { useListSortContext, useTranslate, useTranslateLabel, shallowEqual } from 'ra-core';\n/**\n * A button allowing to change the sort field and order.\n *\n * To be used inside a ListContext (e.g. inside a <List> or <ReferenceManyField>)\n *\n * Expects one 'fields' prop, containing an array of field strings that shall\n * be used and displayed for sorting.\n *\n * When users clicks on the <SortButton>, they see a dropdown list with the\n * proposed sorting fields. Once they click on one of these fields, the related\n * list refreshes, re-sorted.\n *\n * @example\n *\n * import * as React from 'react';\n * import { TopToolbar, SortButton, CreateButton, ExportButton } from 'react-admin';\n *\n * const ListActions = () => (\n *     <TopToolbar>\n *         <SortButton fields={['reference', 'sales', 'stock']} />\n *         <CreateButton />\n *         <ExportButton />\n *     </TopToolbar>\n * );\n */\nvar SortButton = function (props) {\n  var fields = props.fields,\n    _a = props.label,\n    label = _a === void 0 ? 'ra.sort.sort_by' : _a,\n    _b = props.icon,\n    icon = _b === void 0 ? defaultIcon : _b;\n  var _c = useListSortContext(),\n    resource = _c.resource,\n    sort = _c.sort,\n    setSort = _c.setSort;\n  var translate = useTranslate();\n  var translateLabel = useTranslateLabel();\n  var isXSmall = useMediaQuery(function (theme) {\n    return theme.breakpoints.down('sm');\n  });\n  var _d = React.useState(null),\n    anchorEl = _d[0],\n    setAnchorEl = _d[1];\n  var handleClick = function (event) {\n    setAnchorEl(event.currentTarget);\n  };\n  var handleClose = function () {\n    setAnchorEl(null);\n  };\n  var handleChangeSort = function (event) {\n    var field = event.currentTarget.dataset.sort;\n    setSort({\n      field: field,\n      order: field === sort.field ? inverseOrder(sort.order) : 'ASC'\n    });\n    setAnchorEl(null);\n  };\n  var buttonLabel = translate(label, {\n    field: translateLabel({\n      resource: resource,\n      source: sort.field\n    }),\n    order: translate(\"ra.sort.\".concat(sort.order)),\n    _: label\n  });\n  return React.createElement(React.Fragment, null, isXSmall ? React.createElement(Tooltip, {\n    title: buttonLabel\n  }, React.createElement(IconButton, {\n    \"aria-label\": buttonLabel,\n    color: \"primary\",\n    onClick: handleClick,\n    size: \"large\"\n  }, icon)) : React.createElement(StyledButton, {\n    \"aria-controls\": \"simple-menu\",\n    \"aria-haspopup\": \"true\",\n    color: \"primary\",\n    onClick: handleClick,\n    startIcon: icon,\n    endIcon: React.createElement(ArrowDropDownIcon, null),\n    size: \"small\"\n  }, buttonLabel), React.createElement(Menu, {\n    id: \"simple-menu\",\n    anchorEl: anchorEl,\n    keepMounted: true,\n    open: Boolean(anchorEl),\n    onClose: handleClose\n  }, fields.map(function (field) {\n    return React.createElement(MenuItem, {\n      onClick: handleChangeSort,\n      \"data-sort\": field,\n      key: field\n    }, translateLabel({\n      resource: resource,\n      source: field\n    }), ' ', translate(\"ra.sort.\".concat(sort.field === field ? inverseOrder(sort.order) : 'ASC')));\n  })));\n};\nvar defaultIcon = React.createElement(SortIcon, null);\nvar inverseOrder = function (sort) {\n  return sort === 'ASC' ? 'DESC' : 'ASC';\n};\nvar arePropsEqual = function (prevProps, nextProps) {\n  return shallowEqual(prevProps.fields, nextProps.fields);\n};\nvar StyledButton = styled(Button, {\n  name: 'RaSortButton',\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})({\n  '&.MuiButton-sizeSmall': {\n    // fix for icon misalignment on small buttons, see https://github.com/mui/material-ui/pull/30240\n    lineHeight: 1.5\n  },\n  '& .MuiButton-endIcon': {\n    ml: 0\n  }\n});\nexport default memo(SortButton, arePropsEqual);","map":{"version":3,"mappings":"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","names":["React","memo","Button","Menu","MenuItem","Tooltip","IconButton","useMediaQuery","styled","SortIcon","ArrowDropDownIcon","useListSortContext","useTranslate","useTranslateLabel","shallowEqual","SortButton","props","_a","label","_b","icon","defaultIcon","resource","sort","setSort","translate","translateLabel","isXSmall","theme","breakpoints","down","useState","anchorEl","setAnchorEl","handleClick","event","currentTarget","handleClose","handleChangeSort","field","dataset","order","inverseOrder","buttonLabel","source","_","title","color","onClick","size","StyledButton","startIcon","endIcon","id","keepMounted","open","Boolean","onClose","fields","map","key","arePropsEqual","prevProps","nextProps","name","overridesResolver","styles","root","lineHeight","ml"],"sourceRoot":"","sources":["../../../src/button/SortButton.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}