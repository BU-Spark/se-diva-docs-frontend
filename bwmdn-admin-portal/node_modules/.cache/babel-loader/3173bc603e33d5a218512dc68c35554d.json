{"ast":null,"code":"import { createContext } from 'react';\n/**\n * Context to store the result of the useShowController() hook.\n *\n * Use the useShowContext() hook to read the context. That's what the Show components do in react-admin.\n *\n * @example\n *\n * import { useShowController, ShowContextProvider } from 'ra-core';\n *\n * const Show = props => {\n *     const controllerProps = useShowController(props);\n *     return (\n *         <ShowContextProvider value={controllerProps}>\n *             ...\n *         </ShowContextProvider>\n *     );\n * };\n */\nexport var ShowContext = createContext({\n  record: null,\n  defaultTitle: null,\n  isFetching: null,\n  isLoading: null,\n  refetch: null,\n  resource: null\n});\nShowContext.displayName = 'ShowContext';","map":{"version":3,"mappings":"AAAA,SAASA,aAAa,QAAQ,OAAO;AAGrC;;;;;;;;;;;;;;;;;;AAkBA,OAAO,IAAMC,WAAW,GAAGD,aAAa,CAAuB;EAC3DE,MAAM,EAAE,IAAI;EACZC,YAAY,EAAE,IAAI;EAClBC,UAAU,EAAE,IAAI;EAChBC,SAAS,EAAE,IAAI;EACfC,OAAO,EAAE,IAAI;EACbC,QAAQ,EAAE;CACb,CAAC;AAEFN,WAAW,CAACO,WAAW,GAAG,aAAa","names":["createContext","ShowContext","record","defaultTitle","isFetching","isLoading","refetch","resource","displayName"],"sourceRoot":"","sources":["../../../../src/controller/show/ShowContext.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}