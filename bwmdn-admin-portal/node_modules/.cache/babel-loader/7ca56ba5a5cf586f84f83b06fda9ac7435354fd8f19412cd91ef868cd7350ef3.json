{"ast":null,"code":"/**\n * This internal function is used to convert an object matching the form shape with errors to a\n * format compatible with react-hook-form. It's used to handle submission errors. Only useful when\n * you are implementing a custom form without leveraging our Form component.\n *\n * @example\n * const MyForm = () => {\n *     const { register, handleSubmit, setError } = useForm();\n *     const onSubmit = data => {\n *         return saveAsync(data).catch(error => setSubmissionErrors(error.body.details));\n *     };\n *\n *     return (\n *         <form onSubmit={handleSubmit(onSubmit)}>\n *             ...\n *         </form>\n *     );\n * };\n */\nexport var setSubmissionErrors = function (errors, setError) {\n  var setErrorFromObject = function (errors, rootPath) {\n    Object.entries(errors).forEach(function (_a) {\n      var name = _a[0],\n        error = _a[1];\n      if (typeof error === 'object') {\n        setErrorFromObject(error, \"\".concat(rootPath).concat(name, \".\"));\n        return;\n      }\n      setError(\"\".concat(rootPath).concat(name), {\n        type: 'server',\n        message: error.toString()\n      });\n    });\n  };\n  setErrorFromObject(errors, '');\n};","map":{"version":3,"mappings":"AAEA;;;;;;;;;;;;;;;;;;;AAmBA,OAAO,IAAMA,mBAAmB,GAAG,UAC/BC,MAAmB,EACnBC,QAAsC;EAEtC,IAAMC,kBAAkB,GAAG,UAACF,MAAmB,EAAEG,QAAgB;IAC7DC,MAAM,CAACC,OAAO,CAACL,MAAM,CAAC,CAACM,OAAO,CAAC,UAACC,EAAa;UAAZC,IAAI;QAAEC,KAAK;MACxC,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;QAC3BP,kBAAkB,CAACO,KAAK,EAAE,UAAGN,QAAQ,SAAGK,IAAI,MAAG,CAAC;QAChD;;MAEJP,QAAQ,CAAC,UAAGE,QAAQ,SAAGK,IAAI,CAAE,EAAE;QAC3BE,IAAI,EAAE,QAAQ;QACdC,OAAO,EAAEF,KAAK,CAACG,QAAQ;OAC1B,CAAC;IACN,CAAC,CAAC;EACN,CAAC;EACDV,kBAAkB,CAACF,MAAM,EAAE,EAAE,CAAC;AAClC,CAAC","names":["setSubmissionErrors","errors","setError","setErrorFromObject","rootPath","Object","entries","forEach","_a","name","error","type","message","toString"],"sources":["/Users/paigedeveau/Desktop/se-diva-docs-frontend/bwmdn-admin-portal/node_modules/ra-core/src/form/setSubmissionErrors.ts"],"sourcesContent":["import { FieldValues, UseFormSetError } from 'react-hook-form';\n\n/**\n * This internal function is used to convert an object matching the form shape with errors to a\n * format compatible with react-hook-form. It's used to handle submission errors. Only useful when\n * you are implementing a custom form without leveraging our Form component.\n *\n * @example\n * const MyForm = () => {\n *     const { register, handleSubmit, setError } = useForm();\n *     const onSubmit = data => {\n *         return saveAsync(data).catch(error => setSubmissionErrors(error.body.details));\n *     };\n *\n *     return (\n *         <form onSubmit={handleSubmit(onSubmit)}>\n *             ...\n *         </form>\n *     );\n * };\n */\nexport const setSubmissionErrors = (\n    errors: FieldValues,\n    setError: UseFormSetError<FieldValues>\n) => {\n    const setErrorFromObject = (errors: FieldValues, rootPath: string) => {\n        Object.entries(errors).forEach(([name, error]) => {\n            if (typeof error === 'object') {\n                setErrorFromObject(error, `${rootPath}${name}.`);\n                return;\n            }\n            setError(`${rootPath}${name}`, {\n                type: 'server',\n                message: error.toString(),\n            });\n        });\n    };\n    setErrorFromObject(errors, '');\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}