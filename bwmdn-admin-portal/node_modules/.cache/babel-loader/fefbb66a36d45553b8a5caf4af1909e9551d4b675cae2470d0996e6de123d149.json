{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { cloneElement, createElement, isValidElement, useCallback, useRef, useEffect, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { sanitizeListRestProps, useListContext } from 'ra-core';\nimport { Table } from '@mui/material';\nimport clsx from 'clsx';\nimport union from 'lodash/union';\nimport difference from 'lodash/difference';\nimport { DatagridHeader } from './DatagridHeader';\nimport DatagridLoading from './DatagridLoading';\nimport DatagridBody, { PureDatagridBody } from './DatagridBody';\nimport DatagridContextProvider from './DatagridContextProvider';\nimport { DatagridClasses, DatagridRoot } from './useDatagridStyles';\nimport { BulkActionsToolbar } from '../BulkActionsToolbar';\nimport { BulkDeleteButton } from '../../button';\nvar defaultBulkActionButtons = React.createElement(BulkDeleteButton, null);\n/**\n * The Datagrid component renders a list of records as a table.\n * It is usually used as a child of the <List> and <ReferenceManyField> components.\n *\n * Props:\n *  - body\n *  - bulkActionButtons\n *  - children\n *  - empty\n *  - expand\n *  - header\n *  - hover\n *  - isRowExpandable\n *  - isRowSelectable\n *  - optimized\n *  - rowStyle\n *  - rowClick\n *  - size\n *  - sx\n *\n * @example // Display all posts as a datagrid\n * const postRowStyle = (record, index) => ({\n *     backgroundColor: record.nb_views >= 500 ? '#efe' : 'white',\n * });\n * export const PostList = (props) => (\n *     <List {...props}>\n *         <Datagrid rowStyle={postRowStyle}>\n *             <TextField source=\"id\" />\n *             <TextField source=\"title\" />\n *             <TextField source=\"body\" />\n *             <EditButton />\n *         </Datagrid>\n *     </List>\n * );\n *\n * @example // Display all the comments of the current post as a datagrid\n * <ReferenceManyField reference=\"comments\" target=\"post_id\">\n *     <Datagrid>\n *         <TextField source=\"id\" />\n *         <TextField source=\"body\" />\n *         <DateField source=\"created_at\" />\n *         <EditButton />\n *     </Datagrid>\n * </ReferenceManyField>\n *\n * @example // Usage outside of a <List> or a <ReferenceManyField>.\n *\n * const sort = { field: 'published_at', order: 'DESC' };\n *\n * export const MyCustomList = (props) => {\n *     const { data, total, isLoading } = useGetList(\n *         'posts',\n *         { pagination: { page: 1, perPage: 10 }, sort: sort }\n *     );\n *\n *     return (\n *         <Datagrid\n *             data={data}\n *             total={total}\n *             isLoading={isLoading}\n *             sort={sort}\n *             selectedIds={[]}\n *             setSort={() => {\n *                 console.log('set sort');\n *             }}\n *             onSelect={() => {\n *                 console.log('on select');\n *             }}\n *             onToggleItem={() => {\n *                 console.log('on toggle item');\n *             }}\n *         >\n *             <TextField source=\"id\" />\n *             <TextField source=\"title\" />\n *         </Datagrid>\n *     );\n * }\n */\nexport var Datagrid = React.forwardRef(function (props, ref) {\n  var _a = props.optimized,\n    optimized = _a === void 0 ? false : _a,\n    _b = props.body,\n    body = _b === void 0 ? optimized ? PureDatagridBody : DatagridBody : _b,\n    _c = props.header,\n    header = _c === void 0 ? DatagridHeader : _c,\n    children = props.children,\n    className = props.className,\n    empty = props.empty,\n    expand = props.expand,\n    _d = props.bulkActionButtons,\n    bulkActionButtons = _d === void 0 ? defaultBulkActionButtons : _d,\n    hover = props.hover,\n    isRowSelectable = props.isRowSelectable,\n    isRowExpandable = props.isRowExpandable,\n    resource = props.resource,\n    rowClick = props.rowClick,\n    rowStyle = props.rowStyle,\n    _e = props.size,\n    size = _e === void 0 ? 'small' : _e,\n    sx = props.sx,\n    _f = props.expandSingle,\n    expandSingle = _f === void 0 ? false : _f,\n    rest = __rest(props, [\"optimized\", \"body\", \"header\", \"children\", \"className\", \"empty\", \"expand\", \"bulkActionButtons\", \"hover\", \"isRowSelectable\", \"isRowExpandable\", \"resource\", \"rowClick\", \"rowStyle\", \"size\", \"sx\", \"expandSingle\"]);\n  var _g = useListContext(props),\n    sort = _g.sort,\n    data = _g.data,\n    isLoading = _g.isLoading,\n    onSelect = _g.onSelect,\n    onToggleItem = _g.onToggleItem,\n    selectedIds = _g.selectedIds,\n    setSort = _g.setSort,\n    total = _g.total;\n  var hasBulkActions = !!bulkActionButtons !== false;\n  var contextValue = useMemo(function () {\n    return {\n      isRowExpandable: isRowExpandable,\n      expandSingle: expandSingle\n    };\n  }, [isRowExpandable, expandSingle]);\n  var lastSelected = useRef(null);\n  useEffect(function () {\n    if (!selectedIds || selectedIds.length === 0) {\n      lastSelected.current = null;\n    }\n  }, [JSON.stringify(selectedIds)]); // eslint-disable-line react-hooks/exhaustive-deps\n  // we manage row selection at the datagrid level to allow shift+click to select an array of rows\n  var handleToggleItem = useCallback(function (id, event) {\n    var ids = data.map(function (record) {\n      return record.id;\n    });\n    var lastSelectedIndex = ids.indexOf(lastSelected.current);\n    lastSelected.current = event.target.checked ? id : null;\n    if (event.shiftKey && lastSelectedIndex !== -1) {\n      var index = ids.indexOf(id);\n      var idsBetweenSelections = ids.slice(Math.min(lastSelectedIndex, index), Math.max(lastSelectedIndex, index) + 1);\n      var newSelectedIds = event.target.checked ? union(selectedIds, idsBetweenSelections) : difference(selectedIds, idsBetweenSelections);\n      onSelect(isRowSelectable ? newSelectedIds.filter(function (id) {\n        return isRowSelectable(data.find(function (record) {\n          return record.id === id;\n        }));\n      }) : newSelectedIds);\n    } else {\n      onToggleItem(id);\n    }\n  }, [data, isRowSelectable, onSelect, onToggleItem, selectedIds]);\n  if (isLoading === true) {\n    return React.createElement(DatagridLoading, {\n      className: className,\n      expand: expand,\n      hasBulkActions: hasBulkActions,\n      nbChildren: React.Children.count(children),\n      size: size\n    });\n  }\n  /**\n   * Once loaded, the data for the list may be empty. Instead of\n   * displaying the table header with zero data rows,\n   * the datagrid displays nothing or a custom empty component.\n   */\n  if (data == null || data.length === 0 || total === 0) {\n    if (empty) {\n      return empty;\n    }\n    return null;\n  }\n  /**\n   * After the initial load, if the data for the list isn't empty,\n   * and even if the data is refreshing (e.g. after a filter change),\n   * the datagrid displays the current data.\n   */\n  return React.createElement(DatagridContextProvider, {\n    value: contextValue\n  }, React.createElement(DatagridRoot, {\n    sx: sx,\n    className: DatagridClasses.root\n  }, bulkActionButtons !== false ? React.createElement(BulkActionsToolbar, {\n    selectedIds: selectedIds\n  }, isValidElement(bulkActionButtons) ? bulkActionButtons : defaultBulkActionButtons) : null, React.createElement(\"div\", {\n    className: DatagridClasses.tableWrapper\n  }, React.createElement(Table, __assign({\n    ref: ref,\n    className: clsx(DatagridClasses.table, className),\n    size: size\n  }, sanitizeRestProps(rest)), createOrCloneElement(header, {\n    children: children,\n    sort: sort,\n    data: data,\n    hasExpand: !!expand,\n    hasBulkActions: hasBulkActions,\n    isRowSelectable: isRowSelectable,\n    onSelect: onSelect,\n    resource: resource,\n    selectedIds: selectedIds,\n    setSort: setSort\n  }, children), createOrCloneElement(body, {\n    expand: expand,\n    rowClick: rowClick,\n    data: data,\n    hasBulkActions: hasBulkActions,\n    hover: hover,\n    onToggleItem: handleToggleItem,\n    resource: resource,\n    rowStyle: rowStyle,\n    selectedIds: selectedIds,\n    isRowSelectable: isRowSelectable\n  }, children)))));\n});\nvar createOrCloneElement = function (element, props, children) {\n  return isValidElement(element) ? cloneElement(element, props, children) : createElement(element, props, children);\n};\nDatagrid.propTypes = {\n  // @ts-ignore\n  body: PropTypes.oneOfType([PropTypes.element, PropTypes.elementType]),\n  // @ts-ignore-line\n  bulkActionButtons: PropTypes.oneOfType([PropTypes.bool, PropTypes.element]),\n  children: PropTypes.node.isRequired,\n  className: PropTypes.string,\n  sort: PropTypes.exact({\n    field: PropTypes.string,\n    order: PropTypes.string\n  }),\n  data: PropTypes.arrayOf(PropTypes.any),\n  empty: PropTypes.element,\n  // @ts-ignore\n  expand: PropTypes.oneOfType([PropTypes.element, PropTypes.elementType]),\n  // @ts-ignore\n  header: PropTypes.oneOfType([PropTypes.element, PropTypes.elementType]),\n  hover: PropTypes.bool,\n  isLoading: PropTypes.bool,\n  onSelect: PropTypes.func,\n  onToggleItem: PropTypes.func,\n  resource: PropTypes.string,\n  rowClick: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  rowStyle: PropTypes.func,\n  selectedIds: PropTypes.arrayOf(PropTypes.any),\n  setSort: PropTypes.func,\n  total: PropTypes.number,\n  isRowSelectable: PropTypes.func,\n  isRowExpandable: PropTypes.func,\n  expandSingle: PropTypes.bool\n};\nvar injectedProps = ['isRequired', 'setFilter', 'setPagination', 'limitChoicesToValue', 'translateChoice',\n// Datagrid may be used as an alternative to SelectInput\n'field', 'fieldState', 'formState'];\nvar sanitizeRestProps = function (props) {\n  return Object.keys(sanitizeListRestProps(props)).filter(function (propName) {\n    return !injectedProps.includes(propName);\n  }).reduce(function (acc, key) {\n    var _a;\n    return __assign(__assign({}, acc), (_a = {}, _a[key] = props[key], _a));\n  }, {});\n};\nDatagrid.displayName = 'Datagrid';","map":{"version":3,"mappings":"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","names":["React","cloneElement","createElement","isValidElement","useCallback","useRef","useEffect","useMemo","PropTypes","sanitizeListRestProps","useListContext","Table","clsx","union","difference","DatagridHeader","DatagridLoading","DatagridBody","PureDatagridBody","DatagridContextProvider","DatagridClasses","DatagridRoot","BulkActionsToolbar","BulkDeleteButton","defaultBulkActionButtons","Datagrid","forwardRef","props","ref","optimized","_b","body","_c","header","children","className","empty","expand","_d","bulkActionButtons","hover","isRowSelectable","isRowExpandable","resource","rowClick","rowStyle","_e","size","sx","_f","expandSingle","rest","sort","data","isLoading","onSelect","onToggleItem","selectedIds","setSort","total","hasBulkActions","contextValue","lastSelected","length","current","JSON","stringify","handleToggleItem","id","event","ids","map","lastSelectedIndex","indexOf","target","checked","shiftKey","index","idsBetweenSelections","slice","Math","min","max","newSelectedIds","filter","find","nbChildren","Children","count","value","root","tableWrapper","table","sanitizeRestProps","createOrCloneElement","hasExpand","element","propTypes","oneOfType","elementType","bool","node","isRequired","string","exact","field","order","arrayOf","any","func","number","injectedProps","keys","includes","propName","reduce","acc","key","displayName"],"sources":["/Users/paigedeveau/Desktop/se-diva-docs-frontend/bwmdn-admin-portal/node_modules/ra-ui-materialui/src/list/datagrid/Datagrid.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n    cloneElement,\n    createElement,\n    isValidElement,\n    useCallback,\n    useRef,\n    useEffect,\n    FC,\n    ComponentType,\n    ReactElement,\n    useMemo,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    sanitizeListRestProps,\n    useListContext,\n    Identifier,\n    RaRecord,\n    SortPayload,\n} from 'ra-core';\nimport { Table, TableProps } from '@mui/material';\nimport clsx from 'clsx';\nimport union from 'lodash/union';\nimport difference from 'lodash/difference';\n\nimport { DatagridHeader } from './DatagridHeader';\nimport DatagridLoading from './DatagridLoading';\nimport DatagridBody, { PureDatagridBody } from './DatagridBody';\nimport { RowClickFunction } from './DatagridRow';\nimport DatagridContextProvider from './DatagridContextProvider';\nimport { DatagridClasses, DatagridRoot } from './useDatagridStyles';\nimport { BulkActionsToolbar } from '../BulkActionsToolbar';\nimport { BulkDeleteButton } from '../../button';\n\nconst defaultBulkActionButtons = <BulkDeleteButton />;\n\n/**\n * The Datagrid component renders a list of records as a table.\n * It is usually used as a child of the <List> and <ReferenceManyField> components.\n *\n * Props:\n *  - body\n *  - bulkActionButtons\n *  - children\n *  - empty\n *  - expand\n *  - header\n *  - hover\n *  - isRowExpandable\n *  - isRowSelectable\n *  - optimized\n *  - rowStyle\n *  - rowClick\n *  - size\n *  - sx\n *\n * @example // Display all posts as a datagrid\n * const postRowStyle = (record, index) => ({\n *     backgroundColor: record.nb_views >= 500 ? '#efe' : 'white',\n * });\n * export const PostList = (props) => (\n *     <List {...props}>\n *         <Datagrid rowStyle={postRowStyle}>\n *             <TextField source=\"id\" />\n *             <TextField source=\"title\" />\n *             <TextField source=\"body\" />\n *             <EditButton />\n *         </Datagrid>\n *     </List>\n * );\n *\n * @example // Display all the comments of the current post as a datagrid\n * <ReferenceManyField reference=\"comments\" target=\"post_id\">\n *     <Datagrid>\n *         <TextField source=\"id\" />\n *         <TextField source=\"body\" />\n *         <DateField source=\"created_at\" />\n *         <EditButton />\n *     </Datagrid>\n * </ReferenceManyField>\n *\n * @example // Usage outside of a <List> or a <ReferenceManyField>.\n *\n * const sort = { field: 'published_at', order: 'DESC' };\n *\n * export const MyCustomList = (props) => {\n *     const { data, total, isLoading } = useGetList(\n *         'posts',\n *         { pagination: { page: 1, perPage: 10 }, sort: sort }\n *     );\n *\n *     return (\n *         <Datagrid\n *             data={data}\n *             total={total}\n *             isLoading={isLoading}\n *             sort={sort}\n *             selectedIds={[]}\n *             setSort={() => {\n *                 console.log('set sort');\n *             }}\n *             onSelect={() => {\n *                 console.log('on select');\n *             }}\n *             onToggleItem={() => {\n *                 console.log('on toggle item');\n *             }}\n *         >\n *             <TextField source=\"id\" />\n *             <TextField source=\"title\" />\n *         </Datagrid>\n *     );\n * }\n */\nexport const Datagrid: FC<DatagridProps> = React.forwardRef((props, ref) => {\n    const {\n        optimized = false,\n        body = optimized ? PureDatagridBody : DatagridBody,\n        header = DatagridHeader,\n        children,\n        className,\n        empty,\n        expand,\n        bulkActionButtons = defaultBulkActionButtons,\n        hover,\n        isRowSelectable,\n        isRowExpandable,\n        resource,\n        rowClick,\n        rowStyle,\n        size = 'small',\n        sx,\n        expandSingle = false,\n        ...rest\n    } = props;\n\n    const {\n        sort,\n        data,\n        isLoading,\n        onSelect,\n        onToggleItem,\n        selectedIds,\n        setSort,\n        total,\n    } = useListContext(props);\n\n    const hasBulkActions = !!bulkActionButtons !== false;\n\n    const contextValue = useMemo(() => ({ isRowExpandable, expandSingle }), [\n        isRowExpandable,\n        expandSingle,\n    ]);\n\n    const lastSelected = useRef(null);\n\n    useEffect(() => {\n        if (!selectedIds || selectedIds.length === 0) {\n            lastSelected.current = null;\n        }\n    }, [JSON.stringify(selectedIds)]); // eslint-disable-line react-hooks/exhaustive-deps\n\n    // we manage row selection at the datagrid level to allow shift+click to select an array of rows\n    const handleToggleItem = useCallback(\n        (id, event) => {\n            const ids = data.map(record => record.id);\n            const lastSelectedIndex = ids.indexOf(lastSelected.current);\n            lastSelected.current = event.target.checked ? id : null;\n\n            if (event.shiftKey && lastSelectedIndex !== -1) {\n                const index = ids.indexOf(id);\n                const idsBetweenSelections = ids.slice(\n                    Math.min(lastSelectedIndex, index),\n                    Math.max(lastSelectedIndex, index) + 1\n                );\n\n                const newSelectedIds = event.target.checked\n                    ? union(selectedIds, idsBetweenSelections)\n                    : difference(selectedIds, idsBetweenSelections);\n\n                onSelect(\n                    isRowSelectable\n                        ? newSelectedIds.filter((id: Identifier) =>\n                              isRowSelectable(\n                                  data.find(record => record.id === id)\n                              )\n                          )\n                        : newSelectedIds\n                );\n            } else {\n                onToggleItem(id);\n            }\n        },\n        [data, isRowSelectable, onSelect, onToggleItem, selectedIds]\n    );\n\n    if (isLoading === true) {\n        return (\n            <DatagridLoading\n                className={className}\n                expand={expand}\n                hasBulkActions={hasBulkActions}\n                nbChildren={React.Children.count(children)}\n                size={size}\n            />\n        );\n    }\n\n    /**\n     * Once loaded, the data for the list may be empty. Instead of\n     * displaying the table header with zero data rows,\n     * the datagrid displays nothing or a custom empty component.\n     */\n    if (data == null || data.length === 0 || total === 0) {\n        if (empty) {\n            return empty;\n        }\n\n        return null;\n    }\n\n    /**\n     * After the initial load, if the data for the list isn't empty,\n     * and even if the data is refreshing (e.g. after a filter change),\n     * the datagrid displays the current data.\n     */\n    return (\n        <DatagridContextProvider value={contextValue}>\n            <DatagridRoot sx={sx} className={DatagridClasses.root}>\n                {bulkActionButtons !== false ? (\n                    <BulkActionsToolbar selectedIds={selectedIds}>\n                        {isValidElement(bulkActionButtons)\n                            ? bulkActionButtons\n                            : defaultBulkActionButtons}\n                    </BulkActionsToolbar>\n                ) : null}\n                <div className={DatagridClasses.tableWrapper}>\n                    <Table\n                        ref={ref}\n                        className={clsx(DatagridClasses.table, className)}\n                        size={size}\n                        {...sanitizeRestProps(rest)}\n                    >\n                        {createOrCloneElement(\n                            header,\n                            {\n                                children,\n                                sort,\n                                data,\n                                hasExpand: !!expand,\n                                hasBulkActions,\n                                isRowSelectable,\n                                onSelect,\n                                resource,\n                                selectedIds,\n                                setSort,\n                            },\n                            children\n                        )}\n                        {createOrCloneElement(\n                            body,\n                            {\n                                expand,\n                                rowClick,\n                                data,\n                                hasBulkActions,\n                                hover,\n                                onToggleItem: handleToggleItem,\n                                resource,\n                                rowStyle,\n                                selectedIds,\n                                isRowSelectable,\n                            },\n                            children\n                        )}\n                    </Table>\n                </div>\n            </DatagridRoot>\n        </DatagridContextProvider>\n    );\n});\n\nconst createOrCloneElement = (element, props, children) =>\n    isValidElement(element)\n        ? cloneElement(element, props, children)\n        : createElement(element, props, children);\n\nDatagrid.propTypes = {\n    // @ts-ignore\n    body: PropTypes.oneOfType([PropTypes.element, PropTypes.elementType]),\n    // @ts-ignore-line\n    bulkActionButtons: PropTypes.oneOfType([PropTypes.bool, PropTypes.element]),\n    children: PropTypes.node.isRequired,\n    className: PropTypes.string,\n    sort: PropTypes.exact({\n        field: PropTypes.string,\n        order: PropTypes.string,\n    }),\n    data: PropTypes.arrayOf(PropTypes.any),\n    empty: PropTypes.element,\n    // @ts-ignore\n    expand: PropTypes.oneOfType([PropTypes.element, PropTypes.elementType]),\n    // @ts-ignore\n    header: PropTypes.oneOfType([PropTypes.element, PropTypes.elementType]),\n    hover: PropTypes.bool,\n    isLoading: PropTypes.bool,\n    onSelect: PropTypes.func,\n    onToggleItem: PropTypes.func,\n    resource: PropTypes.string,\n    rowClick: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n    rowStyle: PropTypes.func,\n    selectedIds: PropTypes.arrayOf(PropTypes.any),\n    setSort: PropTypes.func,\n    total: PropTypes.number,\n    isRowSelectable: PropTypes.func,\n    isRowExpandable: PropTypes.func,\n    expandSingle: PropTypes.bool,\n};\n\nexport interface DatagridProps<RecordType extends RaRecord = any>\n    extends Omit<TableProps, 'size' | 'classes' | 'onSelect'> {\n    body?: ReactElement | ComponentType;\n    className?: string;\n    bulkActionButtons?: ReactElement | false;\n    expand?:\n        | ReactElement\n        | FC<{\n              id: Identifier;\n              record: RecordType;\n              resource: string;\n          }>;\n    header?: ReactElement | ComponentType;\n    hover?: boolean;\n    empty?: ReactElement;\n    isRowSelectable?: (record: RecordType) => boolean;\n    isRowExpandable?: (record: RecordType) => boolean;\n    optimized?: boolean;\n    rowClick?: string | RowClickFunction;\n    rowStyle?: (record: RecordType, index: number) => any;\n    size?: 'medium' | 'small';\n    // can be injected when using the component without context\n    sort?: SortPayload;\n    data?: RecordType[];\n    isLoading?: boolean;\n    onSelect?: (ids: Identifier[]) => void;\n    onToggleItem?: (id: Identifier) => void;\n    setSort?: (sort: SortPayload) => void;\n    selectedIds?: Identifier[];\n    expandSingle?: boolean;\n    total?: number;\n}\n\nconst injectedProps = [\n    'isRequired',\n    'setFilter',\n    'setPagination',\n    'limitChoicesToValue',\n    'translateChoice',\n    // Datagrid may be used as an alternative to SelectInput\n    'field',\n    'fieldState',\n    'formState',\n];\n\nconst sanitizeRestProps = props =>\n    Object.keys(sanitizeListRestProps(props))\n        .filter(propName => !injectedProps.includes(propName))\n        .reduce((acc, key) => ({ ...acc, [key]: props[key] }), {});\n\nDatagrid.displayName = 'Datagrid';\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}